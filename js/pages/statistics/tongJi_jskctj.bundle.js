/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "http://localhost:8080/pages";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var BluMUI = __webpack_require__(1);
	var ajax = __webpack_require__(421);
	//创建教师课程top10统计筛选栏
	BluMUI.create({
	    id: 'tea_course_top10_filter',
	    wrapId: "tea_course_top10_content",
	    callback: barCallback,
	    chartTitle: '教师课程数Top 10'
	}, 'BluMUI_Top10Filter', document.getElementById('tea_course_top10_filter'));
	//创建教师任课列表筛选栏
	BluMUI.create({
	    id: 'tea_course_wrap'
	}, 'BluMUI_KclbFilter', document.getElementById('tea_course_wrap'));

	//饼状图回调
	function pieCallback(datas, wrapId, chartTitle) {
	    BluMUI.create({
	        id: wrapId,
	        datas: datas,
	        type: "pie",
	        wrapId: wrapId,
	        chartTitle: chartTitle,
	        parent: true
	    }, 'BluMUI_Item', document.getElementById(wrapId));
	}
	//条形图回调
	function barCallback(datas, wrapId, chartTitle) {
	    BluMUI.create({
	        id: wrapId,
	        datas: datas,
	        type: "bar",
	        wrapId: wrapId,
	        chartTitle: chartTitle
	    }, 'BluMUI_Item', document.getElementById(wrapId));
	}

	ajax({
	    url: courseCenter.host + "getXykcData",
	    data: {
	        unifyCode: getCookie("userId")
	    },
	    success: function success(gets) {
	        var datas = JSON.parse(gets);
	        if (datas.meta.result === 100) {
	            var lists = datas.data.rows;
	            //调用回调函数绘制图表
	            pieCallback(lists, 'college_course_pie', "各学院课程数统计");
	        }
	    }
	});
	(function () {
	    if (window.frameElement) {
	        window.frameElement.height = document.body.offsetHeight;
	    }
	})();

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(36);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _echarts = __webpack_require__(176);

	var echarts = _interopRequireWildcard(_echarts);

	__webpack_require__(319);

	__webpack_require__(329);

	__webpack_require__(351);

	__webpack_require__(364);

	__webpack_require__(365);

	__webpack_require__(293);

	__webpack_require__(371);

	__webpack_require__(389);

	__webpack_require__(404);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	// 引入 echarts 主模块。

	// 引入饼状图和条形图。

	// 引入提示框组件、标题组件组件。


	var ajax = __webpack_require__(421);

	var Fanye = __webpack_require__(422);
	var _COUNT = 10;
	var SET = function SET(key, value) {
	    sessionStorage.setItem("chart-" + key, value);
	    return value;
	};
	var GET = function GET(key) {
	    return sessionStorage.getItem("chart-" + key) || '';
	};

	var Top10Filter = function (_React$Component) {
	    _inherits(Top10Filter, _React$Component);

	    function Top10Filter(props) {
	        _classCallCheck(this, Top10Filter);

	        var _this = _possibleConstructorReturn(this, (Top10Filter.__proto__ || Object.getPrototypeOf(Top10Filter)).call(this, props));

	        _this.wrapId = _this.props.wrapId; //图表外层id
	        _this.chartTitle = _this.props.chartTitle; //图表名称
	        _this.callback = _this.props.callback;

	        _this.state = {
	            lx: 'fzr', //fzr:负责人    rkjs:任课教师
	            lists: [] //存储结果
	        };
	        _this.showChart = _this.showChart.bind(_this);
	        return _this;
	    }

	    //向后台发送请求


	    _createClass(Top10Filter, [{
	        key: 'showChart',
	        value: function showChart() {
	            var _this2 = this;

	            //请求数据
	            var top10Bar = {
	                unifyCode: getCookie("userId"),
	                lx: this.state.lx
	            };

	            ajax({
	                url: courseCenter.host + "selectJsKcData",
	                data: top10Bar,
	                success: function success(gets) {
	                    var datas = JSON.parse(gets);
	                    if (datas.meta.result === 100) {
	                        _this2.setState({
	                            lists: datas.data.rows
	                        });
	                    }
	                    //调用回调函数绘制图表
	                    _this2.callback(_this2.state.lists, _this2.wrapId, _this2.chartTitle);
	                }
	            });
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var _this3 = this;

	            return _react2["default"].createElement(
	                'div',
	                { className: 'filters' },
	                _react2["default"].createElement(
	                    'div',
	                    { className: 'top' },
	                    _react2["default"].createElement(
	                        'span',
	                        null,
	                        '\u6392\u540D\u7C7B\u578B:'
	                    ),
	                    _react2["default"].createElement(
	                        'select',
	                        { name: 'tjlb', id: 'tjlb', defaultValue: '', onChange: function onChange(eve) {
	                                _this3.setState({ lx: eve.target.value });
	                            } },
	                        _react2["default"].createElement(
	                            'option',
	                            { value: '' },
	                            '\u8BF7\u9009\u62E9'
	                        ),
	                        _react2["default"].createElement(
	                            'option',
	                            { value: 'fzr' },
	                            '\u8D1F\u8D23\u4EBA'
	                        ),
	                        _react2["default"].createElement(
	                            'option',
	                            { value: 'rkjs' },
	                            '\u4EFB\u8BFE\u6559\u5E08'
	                        )
	                    ),
	                    _react2["default"].createElement(
	                        'button',
	                        { id: 'search', onClick: this.showChart.bind(this) },
	                        '\u67E5\u8BE2'
	                    ),
	                    _react2["default"].createElement(
	                        'button',
	                        null,
	                        '\u67E5\u770B\u66F4\u591A'
	                    )
	                )
	            );
	        }
	    }, {
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            this.showChart();
	        }
	    }]);

	    return Top10Filter;
	}(_react2["default"].Component);
	//筛选条件组件


	var KclbFilter = function (_React$Component2) {
	    _inherits(KclbFilter, _React$Component2);

	    function KclbFilter(props) {
	        _classCallCheck(this, KclbFilter);

	        var _this4 = _possibleConstructorReturn(this, (KclbFilter.__proto__ || Object.getPrototypeOf(KclbFilter)).call(this, props));

	        _this4.state = {
	            xm: '', //姓名
	            xymc: '', //学院名称
	            lx: '', //fzr:负责人    rkjs:任课教师
	            lists: [], //存储结果
	            page: 1,
	            pages: 1,
	            rows: 0
	        };
	        _this4.showChart = _this4.showChart.bind(_this4);
	        _this4.changeOutput = _this4.changeOutput.bind(_this4);
	        return _this4;
	    }

	    //向后台发送请求


	    _createClass(KclbFilter, [{
	        key: 'showChart',
	        value: function showChart(p) {
	            this.changeOutput();
	            this.refs.list.refresh(1, this.state);
	        }
	    }, {
	        key: 'changeOutput',
	        value: function changeOutput() {
	            this.setState({
	                output: 'unifyCode=' + getCookie("userId") + '&lx=drkc&type=' + this.state.lx + '&xm=' + this.state.xm + '&xymc=' + this.state.xymc
	            });
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var _this5 = this;

	            return _react2["default"].createElement(
	                'div',
	                null,
	                _react2["default"].createElement(
	                    'div',
	                    { className: 'tea_course_filter' },
	                    _react2["default"].createElement(
	                        'div',
	                        { className: 'filters' },
	                        _react2["default"].createElement(
	                            'div',
	                            { className: 'top' },
	                            _react2["default"].createElement(
	                                'span',
	                                null,
	                                '\u6392\u540D\u7C7B\u578B:'
	                            ),
	                            _react2["default"].createElement(
	                                'select',
	                                { name: 'tjlb', id: 'tjlb', defaultValue: '', onChange: function onChange(eve) {
	                                        _this5.setState({ lx: eve.target.value });
	                                    } },
	                                _react2["default"].createElement(
	                                    'option',
	                                    { value: '' },
	                                    '\u8BF7\u9009\u62E9'
	                                ),
	                                _react2["default"].createElement(
	                                    'option',
	                                    { value: 'fzr' },
	                                    '\u8D1F\u8D23\u4EBA'
	                                ),
	                                _react2["default"].createElement(
	                                    'option',
	                                    { value: 'rkjs' },
	                                    '\u4EFB\u8BFE\u6559\u5E08'
	                                )
	                            ),
	                            _react2["default"].createElement(
	                                'span',
	                                null,
	                                '\u5B66\u9662:'
	                            ),
	                            _react2["default"].createElement(
	                                'select',
	                                { name: 'college', id: 'filter_college', ref: 'college', onChange: function onChange(eve) {
	                                        _this5.setState({ xymc: eve.target.value });
	                                    } },
	                                _react2["default"].createElement(
	                                    'option',
	                                    { value: '' },
	                                    '\u8BF7\u9009\u62E9\u5B66\u9662'
	                                )
	                            ),
	                            _react2["default"].createElement(
	                                'span',
	                                null,
	                                '\u6559\u5E08\u59D3\u540D:'
	                            ),
	                            _react2["default"].createElement('input', { type: 'text', id: 'filter_name', placeholder: '\u8BF7\u8F93\u5165\u6559\u5E08\u59D3\u540D', ref: 'name', onChange: function onChange(eve) {
	                                    _this5.setState({ xm: eve.target.value });
	                                } }),
	                            _react2["default"].createElement(
	                                'button',
	                                { id: 'search', onClick: this.showChart.bind(this, 1) },
	                                '\u67E5\u8BE2'
	                            ),
	                            _react2["default"].createElement(
	                                'a',
	                                { className: 'output', href: courseCenter.host + "exportExcel?" + this.state.output },
	                                '\u5BFC\u51FA'
	                            )
	                        )
	                    )
	                ),
	                _react2["default"].createElement(
	                    'div',
	                    { className: 'tea_course_table' },
	                    _react2["default"].createElement(Lists, { ref: 'list', options: this.state })
	                )
	            );
	        }
	    }, {
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            var _this6 = this;

	            this.showChart(1);
	            // 获取学院
	            ajax({
	                url: courseCenter.host + "getCollege",
	                data: {
	                    unifyCode: getCookie("userId")
	                },
	                success: function success(gets) {
	                    var datas = JSON.parse(gets);
	                    if (datas.meta.result == 100) {
	                        datas.data.map(function (e, index) {
	                            _this6.refs.college.innerHTML += '<option value=' + e.kkxymc + '>' + e.kkxymc + '</option>';
	                        });
	                    }
	                }
	            });
	        }
	    }]);

	    return KclbFilter;
	}(_react2["default"].Component);

	var Item = function (_React$Component3) {
	    _inherits(Item, _React$Component3);

	    function Item(props) {
	        _classCallCheck(this, Item);

	        var _this7 = _possibleConstructorReturn(this, (Item.__proto__ || Object.getPrototypeOf(Item)).call(this, props));

	        _this7.datas = _this7.props.datas;
	        _this7.wrapId = _this7.props.wrapId;
	        _this7.chartTitle = _this7.props.chartTitle;
	        _this7.state = {
	            type: _this7.props.type
	        };
	        _this7.pieOption = _this7.pieOption.bind(_this7);
	        _this7.barOption = _this7.barOption.bind(_this7);
	        _this7.draw = _this7.draw.bind(_this7);
	        _this7.myOrder = _this7.myOrder.bind(_this7);
	        return _this7;
	    }

	    //饼状图数据配置


	    _createClass(Item, [{
	        key: 'pieOption',
	        value: function pieOption() {
	            var datas = this.datas;
	            var result = [];
	            var head = ['学院名称', '课程数量', '学院号']; //学院名称，数量
	            result.push(head);
	            datas.forEach(function (val) {
	                var item = [];
	                item.push(val.xymc);
	                item.push(val.kcsl);
	                item.push(val.xyh);
	                result.push(item);
	            });
	            this.option = {
	                title: {
	                    text: this.chartTitle,
	                    x: 'center',
	                    top: 20
	                },
	                tooltip: {
	                    trigger: 'item',
	                    //formatter: "{c} ({d}%)"
	                    formatter: function formatter(a) {
	                        return '\u5B66\u9662\u540D\u79F0:' + a.value[0] + '</br>\n                        \u8BFE\u7A0B\u6570\u91CF:' + a.value[1] + '</br>\n                        \u5B66\u9662\u53F7:' + a.value[2] + '</br>\n                        \u767E\u5206\u6BD4:' + a.percent + '%';
	                    }
	                },
	                toolbox: { //右上角工具栏，数据源、还原、下载
	                    feature: {
	                        dataView: {
	                            show: true,
	                            readOnly: true,
	                            optionToContent: function optionToContent(opt) {
	                                var datas = result;
	                                var tableDom = document.createElement("table");
	                                tableDom.style.cssText = "width:100%;border:1px solid #ccc;border-collapse: collapse;text-align:center";
	                                var len1 = datas.length;
	                                var len2 = datas[0].length;
	                                var table = "";
	                                for (var i = 0; i < len1; i++) {
	                                    var trContent = "";
	                                    for (var j = 0; j < len2; j++) {
	                                        trContent += '<td style="border:1px solid #ccc;">' + datas[i][j] + '</td>';
	                                    }
	                                    table += '<tr>' + trContent + '</tr>';
	                                }

	                                tableDom.innerHTML = table;
	                                return tableDom;
	                            }

	                        },
	                        restore: { show: true },
	                        saveAsImage: { show: true }
	                    }
	                },
	                legend: {
	                    bottom: 0,
	                    formatter: function formatter(name) {
	                        return echarts.format.truncateText(name, 40, '14px Microsoft Yahei', '…');
	                    },
	                    tooltip: {
	                        show: true
	                    }
	                },
	                dataset: {
	                    source: result
	                },
	                series: [{
	                    type: 'pie',
	                    radius: 100,
	                    center: ['50%', '50%'],
	                    itemStyle: {
	                        emphasis: {
	                            shadowBlur: 10,
	                            shadowOffsetX: 0,
	                            shadowColor: 'rgba(0, 0, 0, 0.5)'
	                        }
	                    }
	                }]
	            };
	        }

	        //子类饼状图数据配置

	    }, {
	        key: 'subpieOption',
	        value: function subpieOption() {
	            var datas = this.datas;
	            var result = [];
	            var head = ['教研室名称', '课程数量', '教研室号']; //学院名称，数量
	            result.push(head);
	            datas.forEach(function (val) {
	                var item = [];
	                item.push(val.jysmc);
	                item.push(val.kcsl);
	                item.push(val.jysh);
	                result.push(item);
	            });
	            this.option = {
	                title: {
	                    text: this.chartTitle,
	                    x: 'center',
	                    top: 20
	                },
	                tooltip: {
	                    trigger: 'item',
	                    // formatter: "{c} ({d}%)"
	                    formatter: function formatter(a) {
	                        return '\u6559\u7814\u5BA4\u540D\u79F0:' + a.value[0] + '</br>\n                        \u8BFE\u7A0B\u6570\u91CF:' + a.value[1] + '</br>\n                        \u6559\u7814\u5BA4\u53F7:' + a.value[2] + '</br>\n                        \u767E\u5206\u6BD4:' + a.percent + '%';
	                    }
	                },
	                toolbox: { //右上角工具栏，数据源、还原、下载
	                    feature: {
	                        dataView: {
	                            show: true,
	                            readOnly: true,
	                            optionToContent: function optionToContent(opt) {
	                                var datas = result;
	                                var tableDom = document.createElement("table");
	                                tableDom.style.cssText = "width:100%;border:1px solid #ccc;border-collapse: collapse;text-align:center";
	                                var len1 = datas.length;
	                                var len2 = datas[0].length;
	                                var table = "";
	                                for (var i = 0; i < len1; i++) {
	                                    var trContent = "";
	                                    for (var j = 0; j < len2; j++) {
	                                        trContent += '<td style="border:1px solid #ccc;">' + datas[i][j] + '</td>';
	                                    }
	                                    table += '<tr>' + trContent + '</tr>';
	                                }

	                                tableDom.innerHTML = table;
	                                return tableDom;
	                            }

	                        },
	                        restore: { show: true },
	                        saveAsImage: { show: true }
	                    }
	                },
	                legend: {
	                    bottom: 0,
	                    formatter: function formatter(name) {
	                        return echarts.format.truncateText(name, 40, '14px Microsoft Yahei', '…');
	                    },
	                    tooltip: {
	                        show: true
	                    }
	                },
	                dataset: {
	                    source: result
	                },
	                series: [{
	                    type: 'pie',
	                    radius: 100,
	                    center: ['50%', '50%'],
	                    itemStyle: {
	                        emphasis: {
	                            shadowBlur: 10,
	                            shadowOffsetX: 0,
	                            shadowColor: 'rgba(0, 0, 0, 0.5)'
	                        }
	                    }
	                }]
	            };
	        }

	        //由对象构成的数组依照某一对象属性的排序函数

	    }, {
	        key: 'myOrder',
	        value: function myOrder(arr, orderType, property) {
	            var compare = function compare(property) {
	                return function (a, b) {
	                    var value1 = a[property];
	                    var value2 = b[property];
	                    if (orderType == 'small_to_big') {
	                        return value1 - value2;
	                    } else if (orderType == 'big_to_small') {
	                        return value2 - value1;
	                    }
	                };
	            };
	            return arr.sort(compare(property));
	        }
	    }, {
	        key: 'barOption',


	        //柱状图配置函数
	        value: function barOption() {
	            var datas = this.myOrder(this.datas, 'small_to_big', 'kcsl');
	            var max = datas[this.datas.length - 1].kcsl;
	            var min = datas[0].kcsl;
	            var result = [];
	            var head = ['姓名', '学院名称', '课程数量']; //姓名，学院名称，课程数量
	            result.push(head);
	            datas.forEach(function (val) {
	                var item = [];
	                item.push(val.xm);
	                item.push(val.xymc);
	                item.push(val.kcsl);
	                result.push(item);
	            });
	            this.option = {
	                title: {
	                    text: this.chartTitle,
	                    x: 'center'
	                },
	                tooltip: {
	                    trigger: 'item',
	                    formatter: "{c}"
	                },
	                toolbox: { //右上角工具栏，数据源、还原、下载
	                    feature: {
	                        dataView: {
	                            show: true,
	                            readOnly: true,
	                            optionToContent: function optionToContent(opt) {
	                                var datas = result;
	                                var tableDom = document.createElement("table");
	                                tableDom.style.cssText = "width:100%;border:1px solid #ccc;border-collapse: collapse;text-align:center";
	                                var len1 = datas.length;
	                                var len2 = datas[0].length;
	                                var table = "";
	                                for (var i = 0; i < len1; i++) {
	                                    var trContent = "";
	                                    for (var j = 0; j < len2; j++) {
	                                        trContent += '<td style="border:1px solid #ccc;">' + datas[i][j] + '</td>';
	                                    }
	                                    table += '<tr>' + trContent + '</tr>';
	                                }

	                                tableDom.innerHTML = table;
	                                return tableDom;
	                            }

	                        },
	                        restore: { show: true },
	                        saveAsImage: { show: true }
	                    }
	                },
	                legend: {},
	                dataset: {
	                    source: result
	                },
	                xAxis: { name: '课程数' },
	                yAxis: {
	                    name: '姓名',
	                    type: 'category'
	                },
	                visualMap: {
	                    orient: 'horizontal',
	                    left: 'center',
	                    min: min,
	                    max: max,
	                    text: ['高', '低'],
	                    // Map the amount column to color
	                    dimension: 2,
	                    inRange: {
	                        color: ['#D7DA8B', '#E15457']
	                    }
	                },
	                series: [{
	                    type: 'bar',
	                    encode: {
	                        // 将 "amount" 列映射到 X 轴。
	                        x: '课程数量',
	                        // 将 "teacherName" 列映射到 Y 轴。
	                        y: '姓名'
	                    }
	                }]
	            };
	        }
	    }, {
	        key: 'draw',
	        value: function draw() {
	            var chartDom = document.getElementById(this.wrapId);
	            // let chartDom = React.createElement("div",{style:"width:600px;height:400px;"});
	            // 基于准备好的dom，初始化echarts实例
	            var myChart = echarts.init(chartDom);
	            myChart.showLoading({ text: '正在努力的读取数据中...' });
	            if (this.state.type == "bar") {
	                this.barOption();
	                // 绘制图表
	                myChart.setOption(this.option, true);
	            } else if (this.state.type == "pie") {
	                this.pieOption();
	                // 绘制图表
	                myChart.setOption(this.option);
	                myChart.on('click', function (params) {
	                    var xyh = params.data[2];
	                    var xymc = params.data[0];
	                    ajax({
	                        url: courseCenter.host + "getJyskcDataByXyh",
	                        data: {
	                            unifyCode: getCookie("userId"),
	                            xyh: xyh
	                        },
	                        success: function success(gets) {
	                            var datas = JSON.parse(gets);
	                            if (datas.meta.result === 100) {
	                                document.querySelector("#department_course_pie").style.display = "block";
	                                var lists = datas.data.rows;
	                                BluMUI.create({
	                                    id: "department_course_pie",
	                                    datas: lists,
	                                    type: "subpie",
	                                    wrapId: "department_course_pie",
	                                    chartTitle: xymc + '\u5404\u6559\u7814\u5BA4\u8BFE\u7A0B\u7EDF\u8BA1'
	                                }, 'BluMUI_Item', document.getElementById("department_course_pie"));
	                                //调用回调函数绘制图表
	                                pieCallback(lists, 'college_course_pie', "各学院课程数统计");
	                            }
	                        }
	                    });
	                });
	            } else if (this.state.type == 'subpie') {
	                this.subpieOption();
	                // 绘制图表
	                myChart.setOption(this.option);
	            }

	            myChart.hideLoading();
	            return myChart;
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            return _react2["default"].createElement(
	                'div',
	                null,
	                this.draw()
	            );
	        }
	    }]);

	    return Item;
	}(_react2["default"].Component);

	var Lists = function (_React$Component4) {
	    _inherits(Lists, _React$Component4);

	    function Lists(props) {
	        _classCallCheck(this, Lists);

	        var _this8 = _possibleConstructorReturn(this, (Lists.__proto__ || Object.getPrototypeOf(Lists)).call(this, props));

	        var newState = {};
	        for (var i in _this8.props.options) {
	            newState[i] = _this8.props.options[i];
	        }
	        newState.lists = [];
	        _this8.state = newState;
	        return _this8;
	    }

	    _createClass(Lists, [{
	        key: 'create_list',
	        value: function create_list() {
	            var _this9 = this;

	            var tds = [];
	            this.state.lists.map(function (e, index) {
	                tds.push(_react2["default"].createElement(
	                    'tr',
	                    { key: index },
	                    _react2["default"].createElement(
	                        'td',
	                        null,
	                        (_this9.state.page - 1) * _COUNT + index + 1
	                    ),
	                    _react2["default"].createElement(
	                        'td',
	                        null,
	                        e.xm
	                    ),
	                    _react2["default"].createElement(
	                        'td',
	                        null,
	                        e.xymc
	                    ),
	                    _react2["default"].createElement(
	                        'td',
	                        null,
	                        e.kcbh
	                    ),
	                    _react2["default"].createElement(
	                        'td',
	                        null,
	                        e.kcmc
	                    ),
	                    _react2["default"].createElement(
	                        'td',
	                        null,
	                        e.jslx
	                    )
	                ));
	            });
	            return _react2["default"].createElement(
	                'tbody',
	                null,
	                tds
	            );
	        }
	    }, {
	        key: 'refresh',
	        value: function refresh(page, _ref) {
	            var _this10 = this;

	            var sets = _objectWithoutProperties(_ref, []);

	            // 未传第二个参数时sets为空对象{}
	            // 判断sets是否为空（是否只是翻页）
	            if (JSON.stringify(sets) !== "{}") {
	                this.state = sets;
	            }
	            ajax({
	                url: courseCenter.host + "selectMgJsKcData",
	                data: {
	                    unifyCode: getCookie("userId"),
	                    xm: this.state.xm,
	                    xymc: this.state.xymc,
	                    lx: this.state.lx,
	                    page: page,
	                    count: _COUNT

	                },
	                success: function success(gets) {
	                    var datas = JSON.parse(gets);
	                    _this10.setState({
	                        lists: datas.data.rows,
	                        page: page,
	                        pages: datas.data.Page,
	                        rows: datas.data.total
	                    });
	                }
	            });
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            return _react2["default"].createElement(
	                'div',
	                { id: 'kczttj_lists' },
	                _react2["default"].createElement(
	                    'div',
	                    { id: 'kczttj_table' },
	                    _react2["default"].createElement(
	                        'table',
	                        null,
	                        _react2["default"].createElement(
	                            'thead',
	                            null,
	                            _react2["default"].createElement(
	                                'tr',
	                                null,
	                                _react2["default"].createElement(
	                                    'th',
	                                    null,
	                                    '\u5E8F\u53F7'
	                                ),
	                                _react2["default"].createElement(
	                                    'th',
	                                    null,
	                                    '\u6559\u5E08\u59D3\u540D'
	                                ),
	                                _react2["default"].createElement(
	                                    'th',
	                                    null,
	                                    '\u5B66\u9662\u540D\u79F0'
	                                ),
	                                _react2["default"].createElement(
	                                    'th',
	                                    null,
	                                    '\u8BFE\u7A0B\u7F16\u53F7'
	                                ),
	                                _react2["default"].createElement(
	                                    'th',
	                                    null,
	                                    '\u8BFE\u7A0B\u540D\u79F0'
	                                ),
	                                _react2["default"].createElement(
	                                    'th',
	                                    null,
	                                    '\u89D2\u8272'
	                                )
	                            )
	                        ),
	                        this.create_list()
	                    )
	                ),
	                _react2["default"].createElement(Fanye, { This: this,
	                    options: {
	                        page: this.state.page || 1,
	                        pages: this.state.pages || 1,
	                        rows: this.state.rows || 0
	                    },
	                    callback: this.refresh.bind(this)
	                })
	            );
	        }
	    }, {
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            var _this11 = this;

	            ajax({
	                url: courseCenter.host + "selectMgJsKcData",
	                data: {
	                    unifyCode: getCookie("userId"),
	                    lx: this.props.options.lx,
	                    xm: this.props.options.xm,
	                    xymc: this.props.options.xymc,
	                    page: this.props.options.page,
	                    count: _COUNT
	                },
	                success: function success(gets) {
	                    var datas = JSON.parse(gets);
	                    var total = datas.data.total;
	                    _this11.datas = datas.data.rows;
	                    _this11.setState({
	                        lists: datas.data.rows,
	                        pages: datas.data.Page,
	                        rows: total
	                    });
	                }
	            });
	        }
	    }, {
	        key: 'componentDidUpdate',
	        value: function componentDidUpdate() {
	            // 设置该frame的高度自适应
	            if (window.frameElement) {
	                window.frameElement.height = document.body.offsetHeight;
	            }
	        }
	    }]);

	    return Lists;
	}(_react2["default"].Component);

	var BluMUI_M = {
	    BluMUI_Top10Filter: Top10Filter,
	    BluMUI_KclbFilter: KclbFilter,
	    BluMUI_Item: Item,
	    BluMUI_Lists: Lists
	};

	var BluMUI = {
	    result: {},
	    menues: [],
	    menue_names: {},
	    create: function create(data, type, elem) {
	        var props = data,
	            Blu = BluMUI_M[type];
	        this.result[props.id] = _reactDom2["default"].render(_react2["default"].createElement(Blu, props), elem);
	    }
	};

	exports["default"] = BluMUI;
	module.exports = exports['default'];

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(3);


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule React
	 */

	'use strict';

	var _assign = __webpack_require__(5);

	var ReactChildren = __webpack_require__(6);
	var ReactComponent = __webpack_require__(18);
	var ReactPureComponent = __webpack_require__(21);
	var ReactClass = __webpack_require__(22);
	var ReactDOMFactories = __webpack_require__(27);
	var ReactElement = __webpack_require__(10);
	var ReactPropTypes = __webpack_require__(33);
	var ReactVersion = __webpack_require__(34);

	var onlyChild = __webpack_require__(35);
	var warning = __webpack_require__(12);

	var createElement = ReactElement.createElement;
	var createFactory = ReactElement.createFactory;
	var cloneElement = ReactElement.cloneElement;

	if (process.env.NODE_ENV !== 'production') {
	  var ReactElementValidator = __webpack_require__(29);
	  createElement = ReactElementValidator.createElement;
	  createFactory = ReactElementValidator.createFactory;
	  cloneElement = ReactElementValidator.cloneElement;
	}

	var __spread = _assign;

	if (process.env.NODE_ENV !== 'production') {
	  var warned = false;
	  __spread = function () {
	    process.env.NODE_ENV !== 'production' ? warning(warned, 'React.__spread is deprecated and should not be used. Use ' + 'Object.assign directly or another helper function with similar ' + 'semantics. You may be seeing this warning due to your compiler. ' + 'See https://fb.me/react-spread-deprecation for more details.') : void 0;
	    warned = true;
	    return _assign.apply(null, arguments);
	  };
	}

	var React = {

	  // Modern

	  Children: {
	    map: ReactChildren.map,
	    forEach: ReactChildren.forEach,
	    count: ReactChildren.count,
	    toArray: ReactChildren.toArray,
	    only: onlyChild
	  },

	  Component: ReactComponent,
	  PureComponent: ReactPureComponent,

	  createElement: createElement,
	  cloneElement: cloneElement,
	  isValidElement: ReactElement.isValidElement,

	  // Classic

	  PropTypes: ReactPropTypes,
	  createClass: ReactClass.createClass,
	  createFactory: createFactory,
	  createMixin: function (mixin) {
	    // Currently a noop. Will be used to validate and trace mixins.
	    return mixin;
	  },

	  // This looks DOM specific but these are actually isomorphic helpers
	  // since they are just generating DOM strings.
	  DOM: ReactDOMFactories,

	  version: ReactVersion,

	  // Deprecated hook for JSX spread, don't use this for anything.
	  __spread: __spread
	};

	module.exports = React;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 4 */
/***/ (function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};

	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.

	var cachedSetTimeout;
	var cachedClearTimeout;

	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }


	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }



	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	process.prependListener = noop;
	process.prependOnceListener = noop;

	process.listeners = function (name) { return [] }

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ }),
/* 5 */
/***/ (function(module, exports) {

	/*
	object-assign
	(c) Sindre Sorhus
	@license MIT
	*/

	'use strict';
	/* eslint-disable no-unused-vars */
	var getOwnPropertySymbols = Object.getOwnPropertySymbols;
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;

	function toObject(val) {
		if (val === null || val === undefined) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}

		return Object(val);
	}

	function shouldUseNative() {
		try {
			if (!Object.assign) {
				return false;
			}

			// Detect buggy property enumeration order in older V8 versions.

			// https://bugs.chromium.org/p/v8/issues/detail?id=4118
			var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
			test1[5] = 'de';
			if (Object.getOwnPropertyNames(test1)[0] === '5') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test2 = {};
			for (var i = 0; i < 10; i++) {
				test2['_' + String.fromCharCode(i)] = i;
			}
			var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
				return test2[n];
			});
			if (order2.join('') !== '0123456789') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test3 = {};
			'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
				test3[letter] = letter;
			});
			if (Object.keys(Object.assign({}, test3)).join('') !==
					'abcdefghijklmnopqrst') {
				return false;
			}

			return true;
		} catch (err) {
			// We don't expect any of the above to throw, but better to be safe.
			return false;
		}
	}

	module.exports = shouldUseNative() ? Object.assign : function (target, source) {
		var from;
		var to = toObject(target);
		var symbols;

		for (var s = 1; s < arguments.length; s++) {
			from = Object(arguments[s]);

			for (var key in from) {
				if (hasOwnProperty.call(from, key)) {
					to[key] = from[key];
				}
			}

			if (getOwnPropertySymbols) {
				symbols = getOwnPropertySymbols(from);
				for (var i = 0; i < symbols.length; i++) {
					if (propIsEnumerable.call(from, symbols[i])) {
						to[symbols[i]] = from[symbols[i]];
					}
				}
			}
		}

		return to;
	};


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactChildren
	 */

	'use strict';

	var PooledClass = __webpack_require__(7);
	var ReactElement = __webpack_require__(10);

	var emptyFunction = __webpack_require__(13);
	var traverseAllChildren = __webpack_require__(15);

	var twoArgumentPooler = PooledClass.twoArgumentPooler;
	var fourArgumentPooler = PooledClass.fourArgumentPooler;

	var userProvidedKeyEscapeRegex = /\/+/g;
	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
	}

	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * traversal. Allows avoiding binding callbacks.
	 *
	 * @constructor ForEachBookKeeping
	 * @param {!function} forEachFunction Function to perform traversal with.
	 * @param {?*} forEachContext Context to perform context with.
	 */
	function ForEachBookKeeping(forEachFunction, forEachContext) {
	  this.func = forEachFunction;
	  this.context = forEachContext;
	  this.count = 0;
	}
	ForEachBookKeeping.prototype.destructor = function () {
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

	function forEachSingleChild(bookKeeping, child, name) {
	  var func = bookKeeping.func;
	  var context = bookKeeping.context;

	  func.call(context, child, bookKeeping.count++);
	}

	/**
	 * Iterates through children that are typically specified as `props.children`.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.foreach
	 *
	 * The provided forEachFunc(child, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} forEachFunc
	 * @param {*} forEachContext Context for forEachContext.
	 */
	function forEachChildren(children, forEachFunc, forEachContext) {
	  if (children == null) {
	    return children;
	  }
	  var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
	  traverseAllChildren(children, forEachSingleChild, traverseContext);
	  ForEachBookKeeping.release(traverseContext);
	}

	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * mapping. Allows avoiding binding callbacks.
	 *
	 * @constructor MapBookKeeping
	 * @param {!*} mapResult Object containing the ordered map of results.
	 * @param {!function} mapFunction Function to perform mapping with.
	 * @param {?*} mapContext Context to perform mapping with.
	 */
	function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {
	  this.result = mapResult;
	  this.keyPrefix = keyPrefix;
	  this.func = mapFunction;
	  this.context = mapContext;
	  this.count = 0;
	}
	MapBookKeeping.prototype.destructor = function () {
	  this.result = null;
	  this.keyPrefix = null;
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);

	function mapSingleChildIntoContext(bookKeeping, child, childKey) {
	  var result = bookKeeping.result;
	  var keyPrefix = bookKeeping.keyPrefix;
	  var func = bookKeeping.func;
	  var context = bookKeeping.context;


	  var mappedChild = func.call(context, child, bookKeeping.count++);
	  if (Array.isArray(mappedChild)) {
	    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
	  } else if (mappedChild != null) {
	    if (ReactElement.isValidElement(mappedChild)) {
	      mappedChild = ReactElement.cloneAndReplaceKey(mappedChild,
	      // Keep both the (mapped) and old keys if they differ, just as
	      // traverseAllChildren used to do for objects as children
	      keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
	    }
	    result.push(mappedChild);
	  }
	}

	function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
	  var escapedPrefix = '';
	  if (prefix != null) {
	    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
	  }
	  var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);
	  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
	  MapBookKeeping.release(traverseContext);
	}

	/**
	 * Maps children that are typically specified as `props.children`.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.map
	 *
	 * The provided mapFunction(child, key, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} func The map function.
	 * @param {*} context Context for mapFunction.
	 * @return {object} Object containing the ordered map of results.
	 */
	function mapChildren(children, func, context) {
	  if (children == null) {
	    return children;
	  }
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
	  return result;
	}

	function forEachSingleChildDummy(traverseContext, child, name) {
	  return null;
	}

	/**
	 * Count the number of children that are typically specified as
	 * `props.children`.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.count
	 *
	 * @param {?*} children Children tree container.
	 * @return {number} The number of children.
	 */
	function countChildren(children, context) {
	  return traverseAllChildren(children, forEachSingleChildDummy, null);
	}

	/**
	 * Flatten a children object (typically specified as `props.children`) and
	 * return an array with appropriately re-keyed children.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.toarray
	 */
	function toArray(children) {
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
	  return result;
	}

	var ReactChildren = {
	  forEach: forEachChildren,
	  map: mapChildren,
	  mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,
	  count: countChildren,
	  toArray: toArray
	};

	module.exports = ReactChildren;

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule PooledClass
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(8);

	var invariant = __webpack_require__(9);

	/**
	 * Static poolers. Several custom versions for each potential number of
	 * arguments. A completely generic pooler is easy to implement, but would
	 * require accessing the `arguments` object. In each of these, `this` refers to
	 * the Class itself, not an instance. If any others are needed, simply add them
	 * here, or in their own files.
	 */
	var oneArgumentPooler = function (copyFieldsFrom) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, copyFieldsFrom);
	    return instance;
	  } else {
	    return new Klass(copyFieldsFrom);
	  }
	};

	var twoArgumentPooler = function (a1, a2) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2);
	    return instance;
	  } else {
	    return new Klass(a1, a2);
	  }
	};

	var threeArgumentPooler = function (a1, a2, a3) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3);
	  }
	};

	var fourArgumentPooler = function (a1, a2, a3, a4) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4);
	  }
	};

	var fiveArgumentPooler = function (a1, a2, a3, a4, a5) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4, a5);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4, a5);
	  }
	};

	var standardReleaser = function (instance) {
	  var Klass = this;
	  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : _prodInvariant('25') : void 0;
	  instance.destructor();
	  if (Klass.instancePool.length < Klass.poolSize) {
	    Klass.instancePool.push(instance);
	  }
	};

	var DEFAULT_POOL_SIZE = 10;
	var DEFAULT_POOLER = oneArgumentPooler;

	/**
	 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
	 * itself (statically) not adding any prototypical fields. Any CopyConstructor
	 * you give this may have a `poolSize` property, and will look for a
	 * prototypical `destructor` on instances.
	 *
	 * @param {Function} CopyConstructor Constructor that can be used to reset.
	 * @param {Function} pooler Customizable pooler.
	 */
	var addPoolingTo = function (CopyConstructor, pooler) {
	  var NewKlass = CopyConstructor;
	  NewKlass.instancePool = [];
	  NewKlass.getPooled = pooler || DEFAULT_POOLER;
	  if (!NewKlass.poolSize) {
	    NewKlass.poolSize = DEFAULT_POOL_SIZE;
	  }
	  NewKlass.release = standardReleaser;
	  return NewKlass;
	};

	var PooledClass = {
	  addPoolingTo: addPoolingTo,
	  oneArgumentPooler: oneArgumentPooler,
	  twoArgumentPooler: twoArgumentPooler,
	  threeArgumentPooler: threeArgumentPooler,
	  fourArgumentPooler: fourArgumentPooler,
	  fiveArgumentPooler: fiveArgumentPooler
	};

	module.exports = PooledClass;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 8 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule reactProdInvariant
	 * 
	 */
	'use strict';

	/**
	 * WARNING: DO NOT manually require this module.
	 * This is a replacement for `invariant(...)` used by the error code system
	 * and will _only_ be required by the corresponding babel pass.
	 * It always throws.
	 */

	function reactProdInvariant(code) {
	  var argCount = arguments.length - 1;

	  var message = 'Minified React error #' + code + '; visit ' + 'http://facebook.github.io/react/docs/error-decoder.html?invariant=' + code;

	  for (var argIdx = 0; argIdx < argCount; argIdx++) {
	    message += '&args[]=' + encodeURIComponent(arguments[argIdx + 1]);
	  }

	  message += ' for the full message or use the non-minified dev environment' + ' for full errors and additional helpful warnings.';

	  var error = new Error(message);
	  error.name = 'Invariant Violation';
	  error.framesToPop = 1; // we don't care about reactProdInvariant's own frame

	  throw error;
	}

	module.exports = reactProdInvariant;

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	var validateFormat = function validateFormat(format) {};

	if (process.env.NODE_ENV !== 'production') {
	  validateFormat = function validateFormat(format) {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  };
	}

	function invariant(condition, format, a, b, c, d, e, f) {
	  validateFormat(format);

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(format.replace(/%s/g, function () {
	        return args[argIndex++];
	      }));
	      error.name = 'Invariant Violation';
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	}

	module.exports = invariant;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactElement
	 */

	'use strict';

	var _assign = __webpack_require__(5);

	var ReactCurrentOwner = __webpack_require__(11);

	var warning = __webpack_require__(12);
	var canDefineProperty = __webpack_require__(14);
	var hasOwnProperty = Object.prototype.hasOwnProperty;

	// The Symbol used to tag the ReactElement type. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.
	var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

	var RESERVED_PROPS = {
	  key: true,
	  ref: true,
	  __self: true,
	  __source: true
	};

	var specialPropKeyWarningShown, specialPropRefWarningShown;

	function hasValidRef(config) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (hasOwnProperty.call(config, 'ref')) {
	      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
	      if (getter && getter.isReactWarning) {
	        return false;
	      }
	    }
	  }
	  return config.ref !== undefined;
	}

	function hasValidKey(config) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (hasOwnProperty.call(config, 'key')) {
	      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
	      if (getter && getter.isReactWarning) {
	        return false;
	      }
	    }
	  }
	  return config.key !== undefined;
	}

	/**
	 * Factory method to create a new React element. This no longer adheres to
	 * the class pattern, so do not use new to call it. Also, no instanceof check
	 * will work. Instead test $$typeof field against Symbol.for('react.element') to check
	 * if something is a React Element.
	 *
	 * @param {*} type
	 * @param {*} key
	 * @param {string|object} ref
	 * @param {*} self A *temporary* helper to detect places where `this` is
	 * different from the `owner` when React.createElement is called, so that we
	 * can warn. We want to get rid of owner and replace string `ref`s with arrow
	 * functions, and as long as `this` and owner are the same, there will be no
	 * change in behavior.
	 * @param {*} source An annotation object (added by a transpiler or otherwise)
	 * indicating filename, line number, and/or other information.
	 * @param {*} owner
	 * @param {*} props
	 * @internal
	 */
	var ReactElement = function (type, key, ref, self, source, owner, props) {
	  var element = {
	    // This tag allow us to uniquely identify this as a React Element
	    $$typeof: REACT_ELEMENT_TYPE,

	    // Built-in properties that belong on the element
	    type: type,
	    key: key,
	    ref: ref,
	    props: props,

	    // Record the component responsible for creating this element.
	    _owner: owner
	  };

	  if (process.env.NODE_ENV !== 'production') {
	    // The validation flag is currently mutative. We put it on
	    // an external backing store so that we can freeze the whole object.
	    // This can be replaced with a WeakMap once they are implemented in
	    // commonly used development environments.
	    element._store = {};
	    var shadowChildren = Array.isArray(props.children) ? props.children.slice(0) : props.children;

	    // To make comparing ReactElements easier for testing purposes, we make
	    // the validation flag non-enumerable (where possible, which should
	    // include every environment we run tests in), so the test framework
	    // ignores it.
	    if (canDefineProperty) {
	      Object.defineProperty(element._store, 'validated', {
	        configurable: false,
	        enumerable: false,
	        writable: true,
	        value: false
	      });
	      // self and source are DEV only properties.
	      Object.defineProperty(element, '_self', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: self
	      });
	      Object.defineProperty(element, '_shadowChildren', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: shadowChildren
	      });
	      // Two elements created in two different places should be considered
	      // equal for testing purposes and therefore we hide it from enumeration.
	      Object.defineProperty(element, '_source', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: source
	      });
	    } else {
	      element._store.validated = false;
	      element._self = self;
	      element._shadowChildren = shadowChildren;
	      element._source = source;
	    }
	    if (Object.freeze) {
	      Object.freeze(element.props);
	      Object.freeze(element);
	    }
	  }

	  return element;
	};

	/**
	 * Create and return a new ReactElement of the given type.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.createelement
	 */
	ReactElement.createElement = function (type, config, children) {
	  var propName;

	  // Reserved names are extracted
	  var props = {};

	  var key = null;
	  var ref = null;
	  var self = null;
	  var source = null;

	  if (config != null) {
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(
	      /* eslint-disable no-proto */
	      config.__proto__ == null || config.__proto__ === Object.prototype,
	      /* eslint-enable no-proto */
	      'React.createElement(...): Expected props argument to be a plain object. ' + 'Properties defined in its prototype chain will be ignored.') : void 0;
	    }

	    if (hasValidRef(config)) {
	      ref = config.ref;
	    }
	    if (hasValidKey(config)) {
	      key = '' + config.key;
	    }

	    self = config.__self === undefined ? null : config.__self;
	    source = config.__source === undefined ? null : config.__source;
	    // Remaining properties are added to a new props object
	    for (propName in config) {
	      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }

	  // Resolve default props
	  if (type && type.defaultProps) {
	    var defaultProps = type.defaultProps;
	    for (propName in defaultProps) {
	      if (props[propName] === undefined) {
	        props[propName] = defaultProps[propName];
	      }
	    }
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;

	    // Create dummy `key` and `ref` property to `props` to warn users against its use
	    var warnAboutAccessingKey = function () {
	      if (!specialPropKeyWarningShown) {
	        specialPropKeyWarningShown = true;
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
	      }
	      return undefined;
	    };
	    warnAboutAccessingKey.isReactWarning = true;

	    var warnAboutAccessingRef = function () {
	      if (!specialPropRefWarningShown) {
	        specialPropRefWarningShown = true;
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
	      }
	      return undefined;
	    };
	    warnAboutAccessingRef.isReactWarning = true;

	    if (typeof props.$$typeof === 'undefined' || props.$$typeof !== REACT_ELEMENT_TYPE) {
	      if (!props.hasOwnProperty('key')) {
	        Object.defineProperty(props, 'key', {
	          get: warnAboutAccessingKey,
	          configurable: true
	        });
	      }
	      if (!props.hasOwnProperty('ref')) {
	        Object.defineProperty(props, 'ref', {
	          get: warnAboutAccessingRef,
	          configurable: true
	        });
	      }
	    }
	  }
	  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
	};

	/**
	 * Return a function that produces ReactElements of a given type.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.createfactory
	 */
	ReactElement.createFactory = function (type) {
	  var factory = ReactElement.createElement.bind(null, type);
	  // Expose the type on the factory and the prototype so that it can be
	  // easily accessed on elements. E.g. `<Foo />.type === Foo`.
	  // This should not be named `constructor` since this may not be the function
	  // that created the element, and it may not even be a constructor.
	  // Legacy hook TODO: Warn if this is accessed
	  factory.type = type;
	  return factory;
	};

	ReactElement.cloneAndReplaceKey = function (oldElement, newKey) {
	  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);

	  return newElement;
	};

	/**
	 * Clone and return a new ReactElement using element as the starting point.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.cloneelement
	 */
	ReactElement.cloneElement = function (element, config, children) {
	  var propName;

	  // Original props are copied
	  var props = _assign({}, element.props);

	  // Reserved names are extracted
	  var key = element.key;
	  var ref = element.ref;
	  // Self is preserved since the owner is preserved.
	  var self = element._self;
	  // Source is preserved since cloneElement is unlikely to be targeted by a
	  // transpiler, and the original source is probably a better indicator of the
	  // true owner.
	  var source = element._source;

	  // Owner will be preserved, unless ref is overridden
	  var owner = element._owner;

	  if (config != null) {
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(
	      /* eslint-disable no-proto */
	      config.__proto__ == null || config.__proto__ === Object.prototype,
	      /* eslint-enable no-proto */
	      'React.cloneElement(...): Expected props argument to be a plain object. ' + 'Properties defined in its prototype chain will be ignored.') : void 0;
	    }

	    if (hasValidRef(config)) {
	      // Silently steal the ref from the parent.
	      ref = config.ref;
	      owner = ReactCurrentOwner.current;
	    }
	    if (hasValidKey(config)) {
	      key = '' + config.key;
	    }

	    // Remaining properties override existing props
	    var defaultProps;
	    if (element.type && element.type.defaultProps) {
	      defaultProps = element.type.defaultProps;
	    }
	    for (propName in config) {
	      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        if (config[propName] === undefined && defaultProps !== undefined) {
	          // Resolve default props
	          props[propName] = defaultProps[propName];
	        } else {
	          props[propName] = config[propName];
	        }
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }

	  return ReactElement(element.type, key, ref, self, source, owner, props);
	};

	/**
	 * Verifies the object is a ReactElement.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.isvalidelement
	 * @param {?object} object
	 * @return {boolean} True if `object` is a valid component.
	 * @final
	 */
	ReactElement.isValidElement = function (object) {
	  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	};

	ReactElement.REACT_ELEMENT_TYPE = REACT_ELEMENT_TYPE;

	module.exports = ReactElement;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 11 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactCurrentOwner
	 */

	'use strict';

	/**
	 * Keeps track of the current owner.
	 *
	 * The current owner is the component who should own any components that are
	 * currently being constructed.
	 */

	var ReactCurrentOwner = {

	  /**
	   * @internal
	   * @type {ReactComponent}
	   */
	  current: null

	};

	module.exports = ReactCurrentOwner;

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var emptyFunction = __webpack_require__(13);

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var warning = emptyFunction;

	if (process.env.NODE_ENV !== 'production') {
	  var printWarning = function printWarning(format) {
	    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	      args[_key - 1] = arguments[_key];
	    }

	    var argIndex = 0;
	    var message = 'Warning: ' + format.replace(/%s/g, function () {
	      return args[argIndex++];
	    });
	    if (typeof console !== 'undefined') {
	      console.error(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  };

	  warning = function warning(condition, format) {
	    if (format === undefined) {
	      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
	    }

	    if (format.indexOf('Failed Composite propType: ') === 0) {
	      return; // Ignore CompositeComponent proptype check.
	    }

	    if (!condition) {
	      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
	        args[_key2 - 2] = arguments[_key2];
	      }

	      printWarning.apply(undefined, [format].concat(args));
	    }
	  };
	}

	module.exports = warning;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 13 */
/***/ (function(module, exports) {

	"use strict";

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	function makeEmptyFunction(arg) {
	  return function () {
	    return arg;
	  };
	}

	/**
	 * This function accepts and discards inputs; it has no side effects. This is
	 * primarily useful idiomatically for overridable function endpoints which
	 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
	 */
	var emptyFunction = function emptyFunction() {};

	emptyFunction.thatReturns = makeEmptyFunction;
	emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
	emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
	emptyFunction.thatReturnsNull = makeEmptyFunction(null);
	emptyFunction.thatReturnsThis = function () {
	  return this;
	};
	emptyFunction.thatReturnsArgument = function (arg) {
	  return arg;
	};

	module.exports = emptyFunction;

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule canDefineProperty
	 */

	'use strict';

	var canDefineProperty = false;
	if (process.env.NODE_ENV !== 'production') {
	  try {
	    Object.defineProperty({}, 'x', { get: function () {} });
	    canDefineProperty = true;
	  } catch (x) {
	    // IE will fail on defineProperty
	  }
	}

	module.exports = canDefineProperty;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule traverseAllChildren
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(8);

	var ReactCurrentOwner = __webpack_require__(11);
	var ReactElement = __webpack_require__(10);

	var getIteratorFn = __webpack_require__(16);
	var invariant = __webpack_require__(9);
	var KeyEscapeUtils = __webpack_require__(17);
	var warning = __webpack_require__(12);

	var SEPARATOR = '.';
	var SUBSEPARATOR = ':';

	/**
	 * TODO: Test that a single child and an array with one item have the same key
	 * pattern.
	 */

	var didWarnAboutMaps = false;

	/**
	 * Generate a key string that identifies a component within a set.
	 *
	 * @param {*} component A component that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */
	function getComponentKey(component, index) {
	  // Do some typechecking here since we call this blindly. We want to ensure
	  // that we don't block potential future ES APIs.
	  if (component && typeof component === 'object' && component.key != null) {
	    // Explicit key
	    return KeyEscapeUtils.escape(component.key);
	  }
	  // Implicit key determined by the index in the set
	  return index.toString(36);
	}

	/**
	 * @param {?*} children Children tree container.
	 * @param {!string} nameSoFar Name of the key path so far.
	 * @param {!function} callback Callback to invoke with each child found.
	 * @param {?*} traverseContext Used to pass information throughout the traversal
	 * process.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
	  var type = typeof children;

	  if (type === 'undefined' || type === 'boolean') {
	    // All of the above are perceived as null.
	    children = null;
	  }

	  if (children === null || type === 'string' || type === 'number' || ReactElement.isValidElement(children)) {
	    callback(traverseContext, children,
	    // If it's the only child, treat the name as if it was wrapped in an array
	    // so that it's consistent if the number of children grows.
	    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
	    return 1;
	  }

	  var child;
	  var nextName;
	  var subtreeCount = 0; // Count of children found in the current subtree.
	  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

	  if (Array.isArray(children)) {
	    for (var i = 0; i < children.length; i++) {
	      child = children[i];
	      nextName = nextNamePrefix + getComponentKey(child, i);
	      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	    }
	  } else {
	    var iteratorFn = getIteratorFn(children);
	    if (iteratorFn) {
	      var iterator = iteratorFn.call(children);
	      var step;
	      if (iteratorFn !== children.entries) {
	        var ii = 0;
	        while (!(step = iterator.next()).done) {
	          child = step.value;
	          nextName = nextNamePrefix + getComponentKey(child, ii++);
	          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	        }
	      } else {
	        if (process.env.NODE_ENV !== 'production') {
	          var mapsAsChildrenAddendum = '';
	          if (ReactCurrentOwner.current) {
	            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();
	            if (mapsAsChildrenOwnerName) {
	              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';
	            }
	          }
	          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;
	          didWarnAboutMaps = true;
	        }
	        // Iterator will provide entry [k,v] tuples rather than values.
	        while (!(step = iterator.next()).done) {
	          var entry = step.value;
	          if (entry) {
	            child = entry[1];
	            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
	            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	          }
	        }
	      }
	    } else if (type === 'object') {
	      var addendum = '';
	      if (process.env.NODE_ENV !== 'production') {
	        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
	        if (children._isReactElement) {
	          addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
	        }
	        if (ReactCurrentOwner.current) {
	          var name = ReactCurrentOwner.current.getName();
	          if (name) {
	            addendum += ' Check the render method of `' + name + '`.';
	          }
	        }
	      }
	      var childrenString = String(children);
	       true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;
	    }
	  }

	  return subtreeCount;
	}

	/**
	 * Traverses children that are typically specified as `props.children`, but
	 * might also be specified through attributes:
	 *
	 * - `traverseAllChildren(this.props.children, ...)`
	 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
	 *
	 * The `traverseContext` is an optional argument that is passed through the
	 * entire traversal. It can be used to store accumulations or anything else that
	 * the callback might find relevant.
	 *
	 * @param {?*} children Children tree object.
	 * @param {!function} callback To invoke upon traversing each child.
	 * @param {?*} traverseContext Context for traversal.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildren(children, callback, traverseContext) {
	  if (children == null) {
	    return 0;
	  }

	  return traverseAllChildrenImpl(children, '', callback, traverseContext);
	}

	module.exports = traverseAllChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 16 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getIteratorFn
	 * 
	 */

	'use strict';

	/* global Symbol */

	var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

	/**
	 * Returns the iterator method function contained on the iterable object.
	 *
	 * Be sure to invoke the function with the iterable as context:
	 *
	 *     var iteratorFn = getIteratorFn(myIterable);
	 *     if (iteratorFn) {
	 *       var iterator = iteratorFn.call(myIterable);
	 *       ...
	 *     }
	 *
	 * @param {?object} maybeIterable
	 * @return {?function}
	 */
	function getIteratorFn(maybeIterable) {
	  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	  if (typeof iteratorFn === 'function') {
	    return iteratorFn;
	  }
	}

	module.exports = getIteratorFn;

/***/ }),
/* 17 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule KeyEscapeUtils
	 * 
	 */

	'use strict';

	/**
	 * Escape and wrap key so it is safe to use as a reactid
	 *
	 * @param {string} key to be escaped.
	 * @return {string} the escaped key.
	 */

	function escape(key) {
	  var escapeRegex = /[=:]/g;
	  var escaperLookup = {
	    '=': '=0',
	    ':': '=2'
	  };
	  var escapedString = ('' + key).replace(escapeRegex, function (match) {
	    return escaperLookup[match];
	  });

	  return '$' + escapedString;
	}

	/**
	 * Unescape and unwrap key for human-readable display
	 *
	 * @param {string} key to unescape.
	 * @return {string} the unescaped key.
	 */
	function unescape(key) {
	  var unescapeRegex = /(=0|=2)/g;
	  var unescaperLookup = {
	    '=0': '=',
	    '=2': ':'
	  };
	  var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);

	  return ('' + keySubstring).replace(unescapeRegex, function (match) {
	    return unescaperLookup[match];
	  });
	}

	var KeyEscapeUtils = {
	  escape: escape,
	  unescape: unescape
	};

	module.exports = KeyEscapeUtils;

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponent
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(8);

	var ReactNoopUpdateQueue = __webpack_require__(19);

	var canDefineProperty = __webpack_require__(14);
	var emptyObject = __webpack_require__(20);
	var invariant = __webpack_require__(9);
	var warning = __webpack_require__(12);

	/**
	 * Base class helpers for the updating state of a component.
	 */
	function ReactComponent(props, context, updater) {
	  this.props = props;
	  this.context = context;
	  this.refs = emptyObject;
	  // We initialize the default updater but the real one gets injected by the
	  // renderer.
	  this.updater = updater || ReactNoopUpdateQueue;
	}

	ReactComponent.prototype.isReactComponent = {};

	/**
	 * Sets a subset of the state. Always use this to mutate
	 * state. You should treat `this.state` as immutable.
	 *
	 * There is no guarantee that `this.state` will be immediately updated, so
	 * accessing `this.state` after calling this method may return the old value.
	 *
	 * There is no guarantee that calls to `setState` will run synchronously,
	 * as they may eventually be batched together.  You can provide an optional
	 * callback that will be executed when the call to setState is actually
	 * completed.
	 *
	 * When a function is provided to setState, it will be called at some point in
	 * the future (not synchronously). It will be called with the up to date
	 * component arguments (state, props, context). These values can be different
	 * from this.* because your function may be called after receiveProps but before
	 * shouldComponentUpdate, and this new state, props, and context will not yet be
	 * assigned to this.
	 *
	 * @param {object|function} partialState Next partial state or function to
	 *        produce next partial state to be merged with current state.
	 * @param {?function} callback Called after state is updated.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.setState = function (partialState, callback) {
	  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : _prodInvariant('85') : void 0;
	  this.updater.enqueueSetState(this, partialState);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback, 'setState');
	  }
	};

	/**
	 * Forces an update. This should only be invoked when it is known with
	 * certainty that we are **not** in a DOM transaction.
	 *
	 * You may want to call this when you know that some deeper aspect of the
	 * component's state has changed but `setState` was not called.
	 *
	 * This will not invoke `shouldComponentUpdate`, but it will invoke
	 * `componentWillUpdate` and `componentDidUpdate`.
	 *
	 * @param {?function} callback Called after update is complete.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.forceUpdate = function (callback) {
	  this.updater.enqueueForceUpdate(this);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback, 'forceUpdate');
	  }
	};

	/**
	 * Deprecated APIs. These APIs used to exist on classic React classes but since
	 * we would like to deprecate them, we're not going to move them over to this
	 * modern base class. Instead, we define a getter that warns if it's accessed.
	 */
	if (process.env.NODE_ENV !== 'production') {
	  var deprecatedAPIs = {
	    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
	    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
	  };
	  var defineDeprecationWarning = function (methodName, info) {
	    if (canDefineProperty) {
	      Object.defineProperty(ReactComponent.prototype, methodName, {
	        get: function () {
	          process.env.NODE_ENV !== 'production' ? warning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]) : void 0;
	          return undefined;
	        }
	      });
	    }
	  };
	  for (var fnName in deprecatedAPIs) {
	    if (deprecatedAPIs.hasOwnProperty(fnName)) {
	      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
	    }
	  }
	}

	module.exports = ReactComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactNoopUpdateQueue
	 */

	'use strict';

	var warning = __webpack_require__(12);

	function warnNoop(publicInstance, callerName) {
	  if (process.env.NODE_ENV !== 'production') {
	    var constructor = publicInstance.constructor;
	    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;
	  }
	}

	/**
	 * This is the abstract API for an update queue.
	 */
	var ReactNoopUpdateQueue = {

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    return false;
	  },

	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */
	  enqueueCallback: function (publicInstance, callback) {},

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance) {
	    warnNoop(publicInstance, 'forceUpdate');
	  },

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState) {
	    warnNoop(publicInstance, 'replaceState');
	  },

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState) {
	    warnNoop(publicInstance, 'setState');
	  }
	};

	module.exports = ReactNoopUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var emptyObject = {};

	if (process.env.NODE_ENV !== 'production') {
	  Object.freeze(emptyObject);
	}

	module.exports = emptyObject;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPureComponent
	 */

	'use strict';

	var _assign = __webpack_require__(5);

	var ReactComponent = __webpack_require__(18);
	var ReactNoopUpdateQueue = __webpack_require__(19);

	var emptyObject = __webpack_require__(20);

	/**
	 * Base class helpers for the updating state of a component.
	 */
	function ReactPureComponent(props, context, updater) {
	  // Duplicated from ReactComponent.
	  this.props = props;
	  this.context = context;
	  this.refs = emptyObject;
	  // We initialize the default updater but the real one gets injected by the
	  // renderer.
	  this.updater = updater || ReactNoopUpdateQueue;
	}

	function ComponentDummy() {}
	ComponentDummy.prototype = ReactComponent.prototype;
	ReactPureComponent.prototype = new ComponentDummy();
	ReactPureComponent.prototype.constructor = ReactPureComponent;
	// Avoid an extra prototype jump for these methods.
	_assign(ReactPureComponent.prototype, ReactComponent.prototype);
	ReactPureComponent.prototype.isPureReactComponent = true;

	module.exports = ReactPureComponent;

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactClass
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(8),
	    _assign = __webpack_require__(5);

	var ReactComponent = __webpack_require__(18);
	var ReactElement = __webpack_require__(10);
	var ReactPropTypeLocations = __webpack_require__(23);
	var ReactPropTypeLocationNames = __webpack_require__(25);
	var ReactNoopUpdateQueue = __webpack_require__(19);

	var emptyObject = __webpack_require__(20);
	var invariant = __webpack_require__(9);
	var keyMirror = __webpack_require__(24);
	var keyOf = __webpack_require__(26);
	var warning = __webpack_require__(12);

	var MIXINS_KEY = keyOf({ mixins: null });

	/**
	 * Policies that describe methods in `ReactClassInterface`.
	 */
	var SpecPolicy = keyMirror({
	  /**
	   * These methods may be defined only once by the class specification or mixin.
	   */
	  DEFINE_ONCE: null,
	  /**
	   * These methods may be defined by both the class specification and mixins.
	   * Subsequent definitions will be chained. These methods must return void.
	   */
	  DEFINE_MANY: null,
	  /**
	   * These methods are overriding the base class.
	   */
	  OVERRIDE_BASE: null,
	  /**
	   * These methods are similar to DEFINE_MANY, except we assume they return
	   * objects. We try to merge the keys of the return values of all the mixed in
	   * functions. If there is a key conflict we throw.
	   */
	  DEFINE_MANY_MERGED: null
	});

	var injectedMixins = [];

	/**
	 * Composite components are higher-level components that compose other composite
	 * or host components.
	 *
	 * To create a new type of `ReactClass`, pass a specification of
	 * your new class to `React.createClass`. The only requirement of your class
	 * specification is that you implement a `render` method.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return <div>Hello World</div>;
	 *     }
	 *   });
	 *
	 * The class specification supports a specific protocol of methods that have
	 * special meaning (e.g. `render`). See `ReactClassInterface` for
	 * more the comprehensive protocol. Any other properties and methods in the
	 * class specification will be available on the prototype.
	 *
	 * @interface ReactClassInterface
	 * @internal
	 */
	var ReactClassInterface = {

	  /**
	   * An array of Mixin objects to include when defining your component.
	   *
	   * @type {array}
	   * @optional
	   */
	  mixins: SpecPolicy.DEFINE_MANY,

	  /**
	   * An object containing properties and methods that should be defined on
	   * the component's constructor instead of its prototype (static methods).
	   *
	   * @type {object}
	   * @optional
	   */
	  statics: SpecPolicy.DEFINE_MANY,

	  /**
	   * Definition of prop types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  propTypes: SpecPolicy.DEFINE_MANY,

	  /**
	   * Definition of context types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  contextTypes: SpecPolicy.DEFINE_MANY,

	  /**
	   * Definition of context types this component sets for its children.
	   *
	   * @type {object}
	   * @optional
	   */
	  childContextTypes: SpecPolicy.DEFINE_MANY,

	  // ==== Definition methods ====

	  /**
	   * Invoked when the component is mounted. Values in the mapping will be set on
	   * `this.props` if that prop is not specified (i.e. using an `in` check).
	   *
	   * This method is invoked before `getInitialState` and therefore cannot rely
	   * on `this.state` or use `this.setState`.
	   *
	   * @return {object}
	   * @optional
	   */
	  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,

	  /**
	   * Invoked once before the component is mounted. The return value will be used
	   * as the initial value of `this.state`.
	   *
	   *   getInitialState: function() {
	   *     return {
	   *       isOn: false,
	   *       fooBaz: new BazFoo()
	   *     }
	   *   }
	   *
	   * @return {object}
	   * @optional
	   */
	  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,

	  /**
	   * @return {object}
	   * @optional
	   */
	  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,

	  /**
	   * Uses props from `this.props` and state from `this.state` to render the
	   * structure of the component.
	   *
	   * No guarantees are made about when or how often this method is invoked, so
	   * it must not have side effects.
	   *
	   *   render: function() {
	   *     var name = this.props.name;
	   *     return <div>Hello, {name}!</div>;
	   *   }
	   *
	   * @return {ReactComponent}
	   * @nosideeffects
	   * @required
	   */
	  render: SpecPolicy.DEFINE_ONCE,

	  // ==== Delegate methods ====

	  /**
	   * Invoked when the component is initially created and about to be mounted.
	   * This may have side effects, but any external subscriptions or data created
	   * by this method must be cleaned up in `componentWillUnmount`.
	   *
	   * @optional
	   */
	  componentWillMount: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked when the component has been mounted and has a DOM representation.
	   * However, there is no guarantee that the DOM node is in the document.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been mounted (initialized and rendered) for the first time.
	   *
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidMount: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked before the component receives new props.
	   *
	   * Use this as an opportunity to react to a prop transition by updating the
	   * state using `this.setState`. Current props are accessed via `this.props`.
	   *
	   *   componentWillReceiveProps: function(nextProps, nextContext) {
	   *     this.setState({
	   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
	   *     });
	   *   }
	   *
	   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
	   * transition may cause a state change, but the opposite is not true. If you
	   * need it, you are probably looking for `componentWillUpdate`.
	   *
	   * @param {object} nextProps
	   * @optional
	   */
	  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked while deciding if the component should be updated as a result of
	   * receiving new props, state and/or context.
	   *
	   * Use this as an opportunity to `return false` when you're certain that the
	   * transition to the new props/state/context will not require a component
	   * update.
	   *
	   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
	   *     return !equal(nextProps, this.props) ||
	   *       !equal(nextState, this.state) ||
	   *       !equal(nextContext, this.context);
	   *   }
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @return {boolean} True if the component should update.
	   * @optional
	   */
	  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,

	  /**
	   * Invoked when the component is about to update due to a transition from
	   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
	   * and `nextContext`.
	   *
	   * Use this as an opportunity to perform preparation before an update occurs.
	   *
	   * NOTE: You **cannot** use `this.setState()` in this method.
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @param {ReactReconcileTransaction} transaction
	   * @optional
	   */
	  componentWillUpdate: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked when the component's DOM representation has been updated.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been updated.
	   *
	   * @param {object} prevProps
	   * @param {?object} prevState
	   * @param {?object} prevContext
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidUpdate: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked when the component is about to be removed from its parent and have
	   * its DOM representation destroyed.
	   *
	   * Use this as an opportunity to deallocate any external resources.
	   *
	   * NOTE: There is no `componentDidUnmount` since your component will have been
	   * destroyed by that point.
	   *
	   * @optional
	   */
	  componentWillUnmount: SpecPolicy.DEFINE_MANY,

	  // ==== Advanced methods ====

	  /**
	   * Updates the component's currently mounted DOM representation.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   * @overridable
	   */
	  updateComponent: SpecPolicy.OVERRIDE_BASE

	};

	/**
	 * Mapping from class specification keys to special processing functions.
	 *
	 * Although these are declared like instance properties in the specification
	 * when defining classes using `React.createClass`, they are actually static
	 * and are accessible on the constructor instead of the prototype. Despite
	 * being static, they must be defined outside of the "statics" key under
	 * which all other static methods are defined.
	 */
	var RESERVED_SPEC_KEYS = {
	  displayName: function (Constructor, displayName) {
	    Constructor.displayName = displayName;
	  },
	  mixins: function (Constructor, mixins) {
	    if (mixins) {
	      for (var i = 0; i < mixins.length; i++) {
	        mixSpecIntoComponent(Constructor, mixins[i]);
	      }
	    }
	  },
	  childContextTypes: function (Constructor, childContextTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, childContextTypes, ReactPropTypeLocations.childContext);
	    }
	    Constructor.childContextTypes = _assign({}, Constructor.childContextTypes, childContextTypes);
	  },
	  contextTypes: function (Constructor, contextTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, contextTypes, ReactPropTypeLocations.context);
	    }
	    Constructor.contextTypes = _assign({}, Constructor.contextTypes, contextTypes);
	  },
	  /**
	   * Special case getDefaultProps which should move into statics but requires
	   * automatic merging.
	   */
	  getDefaultProps: function (Constructor, getDefaultProps) {
	    if (Constructor.getDefaultProps) {
	      Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, getDefaultProps);
	    } else {
	      Constructor.getDefaultProps = getDefaultProps;
	    }
	  },
	  propTypes: function (Constructor, propTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, propTypes, ReactPropTypeLocations.prop);
	    }
	    Constructor.propTypes = _assign({}, Constructor.propTypes, propTypes);
	  },
	  statics: function (Constructor, statics) {
	    mixStaticSpecIntoComponent(Constructor, statics);
	  },
	  autobind: function () {} };

	// noop
	function validateTypeDef(Constructor, typeDef, location) {
	  for (var propName in typeDef) {
	    if (typeDef.hasOwnProperty(propName)) {
	      // use a warning instead of an invariant so components
	      // don't show up in prod but only in __DEV__
	      process.env.NODE_ENV !== 'production' ? warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName) : void 0;
	    }
	  }
	}

	function validateMethodOverride(isAlreadyDefined, name) {
	  var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;

	  // Disallow overriding of base class methods unless explicitly allowed.
	  if (ReactClassMixin.hasOwnProperty(name)) {
	    !(specPolicy === SpecPolicy.OVERRIDE_BASE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to override `%s` from your class specification. Ensure that your method names do not overlap with React methods.', name) : _prodInvariant('73', name) : void 0;
	  }

	  // Disallow defining methods more than once unless explicitly allowed.
	  if (isAlreadyDefined) {
	    !(specPolicy === SpecPolicy.DEFINE_MANY || specPolicy === SpecPolicy.DEFINE_MANY_MERGED) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.', name) : _prodInvariant('74', name) : void 0;
	  }
	}

	/**
	 * Mixin helper which handles policy validation and reserved
	 * specification keys when building React classes.
	 */
	function mixSpecIntoComponent(Constructor, spec) {
	  if (!spec) {
	    if (process.env.NODE_ENV !== 'production') {
	      var typeofSpec = typeof spec;
	      var isMixinValid = typeofSpec === 'object' && spec !== null;

	      process.env.NODE_ENV !== 'production' ? warning(isMixinValid, '%s: You\'re attempting to include a mixin that is either null ' + 'or not an object. Check the mixins included by the component, ' + 'as well as any mixins they include themselves. ' + 'Expected object but got %s.', Constructor.displayName || 'ReactClass', spec === null ? null : typeofSpec) : void 0;
	    }

	    return;
	  }

	  !(typeof spec !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to use a component class or function as a mixin. Instead, just use a regular object.') : _prodInvariant('75') : void 0;
	  !!ReactElement.isValidElement(spec) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to use a component as a mixin. Instead, just use a regular object.') : _prodInvariant('76') : void 0;

	  var proto = Constructor.prototype;
	  var autoBindPairs = proto.__reactAutoBindPairs;

	  // By handling mixins before any other properties, we ensure the same
	  // chaining order is applied to methods with DEFINE_MANY policy, whether
	  // mixins are listed before or after these methods in the spec.
	  if (spec.hasOwnProperty(MIXINS_KEY)) {
	    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
	  }

	  for (var name in spec) {
	    if (!spec.hasOwnProperty(name)) {
	      continue;
	    }

	    if (name === MIXINS_KEY) {
	      // We have already handled mixins in a special case above.
	      continue;
	    }

	    var property = spec[name];
	    var isAlreadyDefined = proto.hasOwnProperty(name);
	    validateMethodOverride(isAlreadyDefined, name);

	    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
	      RESERVED_SPEC_KEYS[name](Constructor, property);
	    } else {
	      // Setup methods on prototype:
	      // The following member methods should not be automatically bound:
	      // 1. Expected ReactClass methods (in the "interface").
	      // 2. Overridden methods (that were mixed in).
	      var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
	      var isFunction = typeof property === 'function';
	      var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;

	      if (shouldAutoBind) {
	        autoBindPairs.push(name, property);
	        proto[name] = property;
	      } else {
	        if (isAlreadyDefined) {
	          var specPolicy = ReactClassInterface[name];

	          // These cases should already be caught by validateMethodOverride.
	          !(isReactClassMethod && (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: Unexpected spec policy %s for key %s when mixing in component specs.', specPolicy, name) : _prodInvariant('77', specPolicy, name) : void 0;

	          // For methods which are defined more than once, call the existing
	          // methods before calling the new property, merging if appropriate.
	          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {
	            proto[name] = createMergedResultFunction(proto[name], property);
	          } else if (specPolicy === SpecPolicy.DEFINE_MANY) {
	            proto[name] = createChainedFunction(proto[name], property);
	          }
	        } else {
	          proto[name] = property;
	          if (process.env.NODE_ENV !== 'production') {
	            // Add verbose displayName to the function, which helps when looking
	            // at profiling tools.
	            if (typeof property === 'function' && spec.displayName) {
	              proto[name].displayName = spec.displayName + '_' + name;
	            }
	          }
	        }
	      }
	    }
	  }
	}

	function mixStaticSpecIntoComponent(Constructor, statics) {
	  if (!statics) {
	    return;
	  }
	  for (var name in statics) {
	    var property = statics[name];
	    if (!statics.hasOwnProperty(name)) {
	      continue;
	    }

	    var isReserved = name in RESERVED_SPEC_KEYS;
	    !!isReserved ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define a reserved property, `%s`, that shouldn\'t be on the "statics" key. Define it as an instance property instead; it will still be accessible on the constructor.', name) : _prodInvariant('78', name) : void 0;

	    var isInherited = name in Constructor;
	    !!isInherited ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.', name) : _prodInvariant('79', name) : void 0;
	    Constructor[name] = property;
	  }
	}

	/**
	 * Merge two objects, but throw if both contain the same key.
	 *
	 * @param {object} one The first object, which is mutated.
	 * @param {object} two The second object
	 * @return {object} one after it has been mutated to contain everything in two.
	 */
	function mergeIntoWithNoDuplicateKeys(one, two) {
	  !(one && two && typeof one === 'object' && typeof two === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.') : _prodInvariant('80') : void 0;

	  for (var key in two) {
	    if (two.hasOwnProperty(key)) {
	      !(one[key] === undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Tried to merge two objects with the same key: `%s`. This conflict may be due to a mixin; in particular, this may be caused by two getInitialState() or getDefaultProps() methods returning objects with clashing keys.', key) : _prodInvariant('81', key) : void 0;
	      one[key] = two[key];
	    }
	  }
	  return one;
	}

	/**
	 * Creates a function that invokes two functions and merges their return values.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createMergedResultFunction(one, two) {
	  return function mergedResult() {
	    var a = one.apply(this, arguments);
	    var b = two.apply(this, arguments);
	    if (a == null) {
	      return b;
	    } else if (b == null) {
	      return a;
	    }
	    var c = {};
	    mergeIntoWithNoDuplicateKeys(c, a);
	    mergeIntoWithNoDuplicateKeys(c, b);
	    return c;
	  };
	}

	/**
	 * Creates a function that invokes two functions and ignores their return vales.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createChainedFunction(one, two) {
	  return function chainedFunction() {
	    one.apply(this, arguments);
	    two.apply(this, arguments);
	  };
	}

	/**
	 * Binds a method to the component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 * @param {function} method Method to be bound.
	 * @return {function} The bound method.
	 */
	function bindAutoBindMethod(component, method) {
	  var boundMethod = method.bind(component);
	  if (process.env.NODE_ENV !== 'production') {
	    boundMethod.__reactBoundContext = component;
	    boundMethod.__reactBoundMethod = method;
	    boundMethod.__reactBoundArguments = null;
	    var componentName = component.constructor.displayName;
	    var _bind = boundMethod.bind;
	    boundMethod.bind = function (newThis) {
	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }

	      // User is trying to bind() an autobound method; we effectively will
	      // ignore the value of "this" that the user is trying to use, so
	      // let's warn.
	      if (newThis !== component && newThis !== null) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName) : void 0;
	      } else if (!args.length) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName) : void 0;
	        return boundMethod;
	      }
	      var reboundMethod = _bind.apply(boundMethod, arguments);
	      reboundMethod.__reactBoundContext = component;
	      reboundMethod.__reactBoundMethod = method;
	      reboundMethod.__reactBoundArguments = args;
	      return reboundMethod;
	    };
	  }
	  return boundMethod;
	}

	/**
	 * Binds all auto-bound methods in a component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 */
	function bindAutoBindMethods(component) {
	  var pairs = component.__reactAutoBindPairs;
	  for (var i = 0; i < pairs.length; i += 2) {
	    var autoBindKey = pairs[i];
	    var method = pairs[i + 1];
	    component[autoBindKey] = bindAutoBindMethod(component, method);
	  }
	}

	/**
	 * Add more to the ReactClass base class. These are all legacy features and
	 * therefore not already part of the modern ReactComponent.
	 */
	var ReactClassMixin = {

	  /**
	   * TODO: This will be deprecated because state should always keep a consistent
	   * type signature and the only use case for this, is to avoid that.
	   */
	  replaceState: function (newState, callback) {
	    this.updater.enqueueReplaceState(this, newState);
	    if (callback) {
	      this.updater.enqueueCallback(this, callback, 'replaceState');
	    }
	  },

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function () {
	    return this.updater.isMounted(this);
	  }
	};

	var ReactClassComponent = function () {};
	_assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);

	/**
	 * Module for creating composite components.
	 *
	 * @class ReactClass
	 */
	var ReactClass = {

	  /**
	   * Creates a composite component class given a class specification.
	   * See https://facebook.github.io/react/docs/top-level-api.html#react.createclass
	   *
	   * @param {object} spec Class specification (which must define `render`).
	   * @return {function} Component constructor function.
	   * @public
	   */
	  createClass: function (spec) {
	    var Constructor = function (props, context, updater) {
	      // This constructor gets overridden by mocks. The argument is used
	      // by mocks to assert on what gets mounted.

	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : void 0;
	      }

	      // Wire up auto-binding
	      if (this.__reactAutoBindPairs.length) {
	        bindAutoBindMethods(this);
	      }

	      this.props = props;
	      this.context = context;
	      this.refs = emptyObject;
	      this.updater = updater || ReactNoopUpdateQueue;

	      this.state = null;

	      // ReactClasses doesn't have constructors. Instead, they use the
	      // getInitialState and componentWillMount methods for initialization.

	      var initialState = this.getInitialState ? this.getInitialState() : null;
	      if (process.env.NODE_ENV !== 'production') {
	        // We allow auto-mocks to proceed as if they're returning null.
	        if (initialState === undefined && this.getInitialState._isMockFunction) {
	          // This is probably bad practice. Consider warning here and
	          // deprecating this convenience.
	          initialState = null;
	        }
	      }
	      !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : _prodInvariant('82', Constructor.displayName || 'ReactCompositeComponent') : void 0;

	      this.state = initialState;
	    };
	    Constructor.prototype = new ReactClassComponent();
	    Constructor.prototype.constructor = Constructor;
	    Constructor.prototype.__reactAutoBindPairs = [];

	    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));

	    mixSpecIntoComponent(Constructor, spec);

	    // Initialize the defaultProps property after all mixins have been merged.
	    if (Constructor.getDefaultProps) {
	      Constructor.defaultProps = Constructor.getDefaultProps();
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      // This is a tag to indicate that the use of these method names is ok,
	      // since it's used with createClass. If it's not, then it's likely a
	      // mistake so we'll warn you to use the static property, property
	      // initializer or constructor respectively.
	      if (Constructor.getDefaultProps) {
	        Constructor.getDefaultProps.isReactClassApproved = {};
	      }
	      if (Constructor.prototype.getInitialState) {
	        Constructor.prototype.getInitialState.isReactClassApproved = {};
	      }
	    }

	    !Constructor.prototype.render ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createClass(...): Class specification must implement a `render` method.') : _prodInvariant('83') : void 0;

	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component') : void 0;
	    }

	    // Reduce time spent doing lookups by setting these on the prototype.
	    for (var methodName in ReactClassInterface) {
	      if (!Constructor.prototype[methodName]) {
	        Constructor.prototype[methodName] = null;
	      }
	    }

	    return Constructor;
	  },

	  injection: {
	    injectMixin: function (mixin) {
	      injectedMixins.push(mixin);
	    }
	  }

	};

	module.exports = ReactClass;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypeLocations
	 */

	'use strict';

	var keyMirror = __webpack_require__(24);

	var ReactPropTypeLocations = keyMirror({
	  prop: null,
	  context: null,
	  childContext: null
	});

	module.exports = ReactPropTypeLocations;

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @typechecks static-only
	 */

	'use strict';

	var invariant = __webpack_require__(9);

	/**
	 * Constructs an enumeration with keys equal to their value.
	 *
	 * For example:
	 *
	 *   var COLORS = keyMirror({blue: null, red: null});
	 *   var myColor = COLORS.blue;
	 *   var isColorValid = !!COLORS[myColor];
	 *
	 * The last line could not be performed if the values of the generated enum were
	 * not equal to their keys.
	 *
	 *   Input:  {key1: val1, key2: val2}
	 *   Output: {key1: key1, key2: key2}
	 *
	 * @param {object} obj
	 * @return {object}
	 */
	var keyMirror = function keyMirror(obj) {
	  var ret = {};
	  var key;
	  !(obj instanceof Object && !Array.isArray(obj)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'keyMirror(...): Argument must be an object.') : invariant(false) : void 0;
	  for (key in obj) {
	    if (!obj.hasOwnProperty(key)) {
	      continue;
	    }
	    ret[key] = key;
	  }
	  return ret;
	};

	module.exports = keyMirror;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypeLocationNames
	 */

	'use strict';

	var ReactPropTypeLocationNames = {};

	if (process.env.NODE_ENV !== 'production') {
	  ReactPropTypeLocationNames = {
	    prop: 'prop',
	    context: 'context',
	    childContext: 'child context'
	  };
	}

	module.exports = ReactPropTypeLocationNames;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 26 */
/***/ (function(module, exports) {

	"use strict";

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	/**
	 * Allows extraction of a minified key. Let's the build system minify keys
	 * without losing the ability to dynamically use key strings as values
	 * themselves. Pass in an object with a single key/val pair and it will return
	 * you the string key of that single record. Suppose you want to grab the
	 * value for a key 'className' inside of an object. Key/val minification may
	 * have aliased that key to be 'xa12'. keyOf({className: null}) will return
	 * 'xa12' in that case. Resolve keys you want to use once at startup time, then
	 * reuse those resolutions.
	 */
	var keyOf = function keyOf(oneKeyObj) {
	  var key;
	  for (key in oneKeyObj) {
	    if (!oneKeyObj.hasOwnProperty(key)) {
	      continue;
	    }
	    return key;
	  }
	  return null;
	};

	module.exports = keyOf;

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMFactories
	 */

	'use strict';

	var ReactElement = __webpack_require__(10);

	var mapObject = __webpack_require__(28);

	/**
	 * Create a factory that creates HTML tag elements.
	 *
	 * @param {string} tag Tag name (e.g. `div`).
	 * @private
	 */
	function createDOMFactory(tag) {
	  if (process.env.NODE_ENV !== 'production') {
	    var ReactElementValidator = __webpack_require__(29);
	    return ReactElementValidator.createFactory(tag);
	  }
	  return ReactElement.createFactory(tag);
	}

	/**
	 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
	 * This is also accessible via `React.DOM`.
	 *
	 * @public
	 */
	var ReactDOMFactories = mapObject({
	  a: 'a',
	  abbr: 'abbr',
	  address: 'address',
	  area: 'area',
	  article: 'article',
	  aside: 'aside',
	  audio: 'audio',
	  b: 'b',
	  base: 'base',
	  bdi: 'bdi',
	  bdo: 'bdo',
	  big: 'big',
	  blockquote: 'blockquote',
	  body: 'body',
	  br: 'br',
	  button: 'button',
	  canvas: 'canvas',
	  caption: 'caption',
	  cite: 'cite',
	  code: 'code',
	  col: 'col',
	  colgroup: 'colgroup',
	  data: 'data',
	  datalist: 'datalist',
	  dd: 'dd',
	  del: 'del',
	  details: 'details',
	  dfn: 'dfn',
	  dialog: 'dialog',
	  div: 'div',
	  dl: 'dl',
	  dt: 'dt',
	  em: 'em',
	  embed: 'embed',
	  fieldset: 'fieldset',
	  figcaption: 'figcaption',
	  figure: 'figure',
	  footer: 'footer',
	  form: 'form',
	  h1: 'h1',
	  h2: 'h2',
	  h3: 'h3',
	  h4: 'h4',
	  h5: 'h5',
	  h6: 'h6',
	  head: 'head',
	  header: 'header',
	  hgroup: 'hgroup',
	  hr: 'hr',
	  html: 'html',
	  i: 'i',
	  iframe: 'iframe',
	  img: 'img',
	  input: 'input',
	  ins: 'ins',
	  kbd: 'kbd',
	  keygen: 'keygen',
	  label: 'label',
	  legend: 'legend',
	  li: 'li',
	  link: 'link',
	  main: 'main',
	  map: 'map',
	  mark: 'mark',
	  menu: 'menu',
	  menuitem: 'menuitem',
	  meta: 'meta',
	  meter: 'meter',
	  nav: 'nav',
	  noscript: 'noscript',
	  object: 'object',
	  ol: 'ol',
	  optgroup: 'optgroup',
	  option: 'option',
	  output: 'output',
	  p: 'p',
	  param: 'param',
	  picture: 'picture',
	  pre: 'pre',
	  progress: 'progress',
	  q: 'q',
	  rp: 'rp',
	  rt: 'rt',
	  ruby: 'ruby',
	  s: 's',
	  samp: 'samp',
	  script: 'script',
	  section: 'section',
	  select: 'select',
	  small: 'small',
	  source: 'source',
	  span: 'span',
	  strong: 'strong',
	  style: 'style',
	  sub: 'sub',
	  summary: 'summary',
	  sup: 'sup',
	  table: 'table',
	  tbody: 'tbody',
	  td: 'td',
	  textarea: 'textarea',
	  tfoot: 'tfoot',
	  th: 'th',
	  thead: 'thead',
	  time: 'time',
	  title: 'title',
	  tr: 'tr',
	  track: 'track',
	  u: 'u',
	  ul: 'ul',
	  'var': 'var',
	  video: 'video',
	  wbr: 'wbr',

	  // SVG
	  circle: 'circle',
	  clipPath: 'clipPath',
	  defs: 'defs',
	  ellipse: 'ellipse',
	  g: 'g',
	  image: 'image',
	  line: 'line',
	  linearGradient: 'linearGradient',
	  mask: 'mask',
	  path: 'path',
	  pattern: 'pattern',
	  polygon: 'polygon',
	  polyline: 'polyline',
	  radialGradient: 'radialGradient',
	  rect: 'rect',
	  stop: 'stop',
	  svg: 'svg',
	  text: 'text',
	  tspan: 'tspan'

	}, createDOMFactory);

	module.exports = ReactDOMFactories;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 28 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	/**
	 * Executes the provided `callback` once for each enumerable own property in the
	 * object and constructs a new object from the results. The `callback` is
	 * invoked with three arguments:
	 *
	 *  - the property value
	 *  - the property name
	 *  - the object being traversed
	 *
	 * Properties that are added after the call to `mapObject` will not be visited
	 * by `callback`. If the values of existing properties are changed, the value
	 * passed to `callback` will be the value at the time `mapObject` visits them.
	 * Properties that are deleted before being visited are not visited.
	 *
	 * @grep function objectMap()
	 * @grep function objMap()
	 *
	 * @param {?object} object
	 * @param {function} callback
	 * @param {*} context
	 * @return {?object}
	 */
	function mapObject(object, callback, context) {
	  if (!object) {
	    return null;
	  }
	  var result = {};
	  for (var name in object) {
	    if (hasOwnProperty.call(object, name)) {
	      result[name] = callback.call(context, object[name], name, object);
	    }
	  }
	  return result;
	}

	module.exports = mapObject;

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactElementValidator
	 */

	/**
	 * ReactElementValidator provides a wrapper around a element factory
	 * which validates the props passed to the element. This is intended to be
	 * used only in DEV and could be replaced by a static type checker for languages
	 * that support it.
	 */

	'use strict';

	var ReactCurrentOwner = __webpack_require__(11);
	var ReactComponentTreeDevtool = __webpack_require__(30);
	var ReactElement = __webpack_require__(10);
	var ReactPropTypeLocations = __webpack_require__(23);

	var checkReactTypeSpec = __webpack_require__(31);

	var canDefineProperty = __webpack_require__(14);
	var getIteratorFn = __webpack_require__(16);
	var warning = __webpack_require__(12);

	function getDeclarationErrorAddendum() {
	  if (ReactCurrentOwner.current) {
	    var name = ReactCurrentOwner.current.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * Warn if there's no key explicitly set on dynamic arrays of children or
	 * object keys are not valid. This allows us to keep track of children between
	 * updates.
	 */
	var ownerHasKeyUseWarning = {};

	function getCurrentComponentErrorInfo(parentType) {
	  var info = getDeclarationErrorAddendum();

	  if (!info) {
	    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
	    if (parentName) {
	      info = ' Check the top-level render call using <' + parentName + '>.';
	    }
	  }
	  return info;
	}

	/**
	 * Warn if the element doesn't have an explicit key assigned to it.
	 * This element is in an array. The array could grow and shrink or be
	 * reordered. All children that haven't already been validated are required to
	 * have a "key" property assigned to it. Error statuses are cached so a warning
	 * will only be shown once.
	 *
	 * @internal
	 * @param {ReactElement} element Element that requires a key.
	 * @param {*} parentType element's parent's type.
	 */
	function validateExplicitKey(element, parentType) {
	  if (!element._store || element._store.validated || element.key != null) {
	    return;
	  }
	  element._store.validated = true;

	  var memoizer = ownerHasKeyUseWarning.uniqueKey || (ownerHasKeyUseWarning.uniqueKey = {});

	  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
	  if (memoizer[currentComponentErrorInfo]) {
	    return;
	  }
	  memoizer[currentComponentErrorInfo] = true;

	  // Usually the current owner is the offender, but if it accepts children as a
	  // property, it may be the creator of the child that's responsible for
	  // assigning it a key.
	  var childOwner = '';
	  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
	    // Give the component that originally created this child.
	    childOwner = ' It was passed a child from ' + element._owner.getName() + '.';
	  }

	  process.env.NODE_ENV !== 'production' ? warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.%s', currentComponentErrorInfo, childOwner, ReactComponentTreeDevtool.getCurrentStackAddendum(element)) : void 0;
	}

	/**
	 * Ensure that every element either is passed in a static location, in an
	 * array with an explicit keys property defined, or in an object literal
	 * with valid key property.
	 *
	 * @internal
	 * @param {ReactNode} node Statically passed child of any type.
	 * @param {*} parentType node's parent's type.
	 */
	function validateChildKeys(node, parentType) {
	  if (typeof node !== 'object') {
	    return;
	  }
	  if (Array.isArray(node)) {
	    for (var i = 0; i < node.length; i++) {
	      var child = node[i];
	      if (ReactElement.isValidElement(child)) {
	        validateExplicitKey(child, parentType);
	      }
	    }
	  } else if (ReactElement.isValidElement(node)) {
	    // This element was passed in a valid location.
	    if (node._store) {
	      node._store.validated = true;
	    }
	  } else if (node) {
	    var iteratorFn = getIteratorFn(node);
	    // Entry iterators provide implicit keys.
	    if (iteratorFn) {
	      if (iteratorFn !== node.entries) {
	        var iterator = iteratorFn.call(node);
	        var step;
	        while (!(step = iterator.next()).done) {
	          if (ReactElement.isValidElement(step.value)) {
	            validateExplicitKey(step.value, parentType);
	          }
	        }
	      }
	    }
	  }
	}

	/**
	 * Given an element, validate that its props follow the propTypes definition,
	 * provided by the type.
	 *
	 * @param {ReactElement} element
	 */
	function validatePropTypes(element) {
	  var componentClass = element.type;
	  if (typeof componentClass !== 'function') {
	    return;
	  }
	  var name = componentClass.displayName || componentClass.name;
	  if (componentClass.propTypes) {
	    checkReactTypeSpec(componentClass.propTypes, element.props, ReactPropTypeLocations.prop, name, element, null);
	  }
	  if (typeof componentClass.getDefaultProps === 'function') {
	    process.env.NODE_ENV !== 'production' ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : void 0;
	  }
	}

	var ReactElementValidator = {

	  createElement: function (type, props, children) {
	    var validType = typeof type === 'string' || typeof type === 'function';
	    // We warn in this case but don't throw. We expect the element creation to
	    // succeed and there will likely be errors in render.
	    process.env.NODE_ENV !== 'production' ? warning(validType, 'React.createElement: type should not be null, undefined, boolean, or ' + 'number. It should be a string (for DOM elements) or a ReactClass ' + '(for composite components).%s', getDeclarationErrorAddendum()) : void 0;

	    var element = ReactElement.createElement.apply(this, arguments);

	    // The result can be nullish if a mock or a custom function is used.
	    // TODO: Drop this when these are no longer allowed as the type argument.
	    if (element == null) {
	      return element;
	    }

	    // Skip key warning if the type isn't valid since our key validation logic
	    // doesn't expect a non-string/function type and can throw confusing errors.
	    // We don't want exception behavior to differ between dev and prod.
	    // (Rendering will throw with a helpful message and as soon as the type is
	    // fixed, the key warnings will appear.)
	    if (validType) {
	      for (var i = 2; i < arguments.length; i++) {
	        validateChildKeys(arguments[i], type);
	      }
	    }

	    validatePropTypes(element);

	    return element;
	  },

	  createFactory: function (type) {
	    var validatedFactory = ReactElementValidator.createElement.bind(null, type);
	    // Legacy hook TODO: Warn if this is accessed
	    validatedFactory.type = type;

	    if (process.env.NODE_ENV !== 'production') {
	      if (canDefineProperty) {
	        Object.defineProperty(validatedFactory, 'type', {
	          enumerable: false,
	          get: function () {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.') : void 0;
	            Object.defineProperty(this, 'type', {
	              value: type
	            });
	            return type;
	          }
	        });
	      }
	    }

	    return validatedFactory;
	  },

	  cloneElement: function (element, props, children) {
	    var newElement = ReactElement.cloneElement.apply(this, arguments);
	    for (var i = 2; i < arguments.length; i++) {
	      validateChildKeys(arguments[i], newElement.type);
	    }
	    validatePropTypes(newElement);
	    return newElement;
	  }

	};

	module.exports = ReactElementValidator;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponentTreeDevtool
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(8);

	var ReactCurrentOwner = __webpack_require__(11);

	var invariant = __webpack_require__(9);
	var warning = __webpack_require__(12);

	var tree = {};
	var unmountedIDs = {};
	var rootIDs = {};

	function updateTree(id, update) {
	  if (!tree[id]) {
	    tree[id] = {
	      element: null,
	      parentID: null,
	      ownerID: null,
	      text: null,
	      childIDs: [],
	      displayName: 'Unknown',
	      isMounted: false,
	      updateCount: 0
	    };
	  }
	  update(tree[id]);
	}

	function purgeDeep(id) {
	  var item = tree[id];
	  if (item) {
	    var childIDs = item.childIDs;

	    delete tree[id];
	    childIDs.forEach(purgeDeep);
	  }
	}

	function describeComponentFrame(name, source, ownerName) {
	  return '\n    in ' + name + (source ? ' (at ' + source.fileName.replace(/^.*[\\\/]/, '') + ':' + source.lineNumber + ')' : ownerName ? ' (created by ' + ownerName + ')' : '');
	}

	function describeID(id) {
	  var name = ReactComponentTreeDevtool.getDisplayName(id);
	  var element = ReactComponentTreeDevtool.getElement(id);
	  var ownerID = ReactComponentTreeDevtool.getOwnerID(id);
	  var ownerName;
	  if (ownerID) {
	    ownerName = ReactComponentTreeDevtool.getDisplayName(ownerID);
	  }
	  process.env.NODE_ENV !== 'production' ? warning(element, 'ReactComponentTreeDevtool: Missing React element for debugID %s when ' + 'building stack', id) : void 0;
	  return describeComponentFrame(name, element && element._source, ownerName);
	}

	var ReactComponentTreeDevtool = {
	  onSetDisplayName: function (id, displayName) {
	    updateTree(id, function (item) {
	      return item.displayName = displayName;
	    });
	  },
	  onSetChildren: function (id, nextChildIDs) {
	    updateTree(id, function (item) {
	      item.childIDs = nextChildIDs;

	      nextChildIDs.forEach(function (nextChildID) {
	        var nextChild = tree[nextChildID];
	        !nextChild ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected devtool events to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('68') : void 0;
	        !(nextChild.displayName != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onSetDisplayName() to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('69') : void 0;
	        !(nextChild.childIDs != null || nextChild.text != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onSetChildren() or onSetText() to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('70') : void 0;
	        !nextChild.isMounted ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onMountComponent() to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('71') : void 0;
	        if (nextChild.parentID == null) {
	          nextChild.parentID = id;
	          // TODO: This shouldn't be necessary but mounting a new root during in
	          // componentWillMount currently causes not-yet-mounted components to
	          // be purged from our tree data so their parent ID is missing.
	        }
	        !(nextChild.parentID === id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onSetParent() and onSetChildren() to be consistent (%s has parents %s and %s).', nextChildID, nextChild.parentID, id) : _prodInvariant('72', nextChildID, nextChild.parentID, id) : void 0;
	      });
	    });
	  },
	  onSetOwner: function (id, ownerID) {
	    updateTree(id, function (item) {
	      return item.ownerID = ownerID;
	    });
	  },
	  onSetParent: function (id, parentID) {
	    updateTree(id, function (item) {
	      return item.parentID = parentID;
	    });
	  },
	  onSetText: function (id, text) {
	    updateTree(id, function (item) {
	      return item.text = text;
	    });
	  },
	  onBeforeMountComponent: function (id, element) {
	    updateTree(id, function (item) {
	      return item.element = element;
	    });
	  },
	  onBeforeUpdateComponent: function (id, element) {
	    updateTree(id, function (item) {
	      return item.element = element;
	    });
	  },
	  onMountComponent: function (id) {
	    updateTree(id, function (item) {
	      return item.isMounted = true;
	    });
	  },
	  onMountRootComponent: function (id) {
	    rootIDs[id] = true;
	  },
	  onUpdateComponent: function (id) {
	    updateTree(id, function (item) {
	      return item.updateCount++;
	    });
	  },
	  onUnmountComponent: function (id) {
	    updateTree(id, function (item) {
	      return item.isMounted = false;
	    });
	    unmountedIDs[id] = true;
	    delete rootIDs[id];
	  },
	  purgeUnmountedComponents: function () {
	    if (ReactComponentTreeDevtool._preventPurging) {
	      // Should only be used for testing.
	      return;
	    }

	    for (var id in unmountedIDs) {
	      purgeDeep(id);
	    }
	    unmountedIDs = {};
	  },
	  isMounted: function (id) {
	    var item = tree[id];
	    return item ? item.isMounted : false;
	  },
	  getCurrentStackAddendum: function (topElement) {
	    var info = '';
	    if (topElement) {
	      var type = topElement.type;
	      var name = typeof type === 'function' ? type.displayName || type.name : type;
	      var owner = topElement._owner;
	      info += describeComponentFrame(name || 'Unknown', topElement._source, owner && owner.getName());
	    }

	    var currentOwner = ReactCurrentOwner.current;
	    var id = currentOwner && currentOwner._debugID;

	    info += ReactComponentTreeDevtool.getStackAddendumByID(id);
	    return info;
	  },
	  getStackAddendumByID: function (id) {
	    var info = '';
	    while (id) {
	      info += describeID(id);
	      id = ReactComponentTreeDevtool.getParentID(id);
	    }
	    return info;
	  },
	  getChildIDs: function (id) {
	    var item = tree[id];
	    return item ? item.childIDs : [];
	  },
	  getDisplayName: function (id) {
	    var item = tree[id];
	    return item ? item.displayName : 'Unknown';
	  },
	  getElement: function (id) {
	    var item = tree[id];
	    return item ? item.element : null;
	  },
	  getOwnerID: function (id) {
	    var item = tree[id];
	    return item ? item.ownerID : null;
	  },
	  getParentID: function (id) {
	    var item = tree[id];
	    return item ? item.parentID : null;
	  },
	  getSource: function (id) {
	    var item = tree[id];
	    var element = item ? item.element : null;
	    var source = element != null ? element._source : null;
	    return source;
	  },
	  getText: function (id) {
	    var item = tree[id];
	    return item ? item.text : null;
	  },
	  getUpdateCount: function (id) {
	    var item = tree[id];
	    return item ? item.updateCount : 0;
	  },
	  getRootIDs: function () {
	    return Object.keys(rootIDs);
	  },
	  getRegisteredIDs: function () {
	    return Object.keys(tree);
	  }
	};

	module.exports = ReactComponentTreeDevtool;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule checkReactTypeSpec
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(8);

	var ReactPropTypeLocationNames = __webpack_require__(25);
	var ReactPropTypesSecret = __webpack_require__(32);

	var invariant = __webpack_require__(9);
	var warning = __webpack_require__(12);

	var ReactComponentTreeDevtool;

	if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
	  // Temporary hack.
	  // Inline requires don't work well with Jest:
	  // https://github.com/facebook/react/issues/7240
	  // Remove the inline requires when we don't need them anymore:
	  // https://github.com/facebook/react/pull/7178
	  ReactComponentTreeDevtool = __webpack_require__(30);
	}

	var loggedTypeFailures = {};

	/**
	 * Assert that the values match with the type specs.
	 * Error messages are memorized and will only be shown once.
	 *
	 * @param {object} typeSpecs Map of name to a ReactPropType
	 * @param {object} values Runtime values that need to be type-checked
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @param {string} componentName Name of the component for error messages.
	 * @param {?object} element The React element that is being type-checked
	 * @param {?number} debugID The React component instance that is being type-checked
	 * @private
	 */
	function checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {
	  for (var typeSpecName in typeSpecs) {
	    if (typeSpecs.hasOwnProperty(typeSpecName)) {
	      var error;
	      // Prop type validation may throw. In case they do, we don't want to
	      // fail the render phase where it didn't fail before. So we log it.
	      // After these have been cleaned up, we'll let them throw.
	      try {
	        // This is intentionally an invariant that gets caught. It's the same
	        // behavior as without this statement except with a better message.
	        !(typeof typeSpecs[typeSpecName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;
	        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
	      } catch (ex) {
	        error = ex;
	      }
	      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error) : void 0;
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;

	        var componentStackInfo = '';

	        if (process.env.NODE_ENV !== 'production') {
	          if (!ReactComponentTreeDevtool) {
	            ReactComponentTreeDevtool = __webpack_require__(30);
	          }
	          if (debugID !== null) {
	            componentStackInfo = ReactComponentTreeDevtool.getStackAddendumByID(debugID);
	          } else if (element !== null) {
	            componentStackInfo = ReactComponentTreeDevtool.getCurrentStackAddendum(element);
	          }
	        }

	        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;
	      }
	    }
	  }
	}

	module.exports = checkReactTypeSpec;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 32 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypesSecret
	 */

	'use strict';

	var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

	module.exports = ReactPropTypesSecret;

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypes
	 */

	'use strict';

	var ReactElement = __webpack_require__(10);
	var ReactPropTypeLocationNames = __webpack_require__(25);
	var ReactPropTypesSecret = __webpack_require__(32);

	var emptyFunction = __webpack_require__(13);
	var getIteratorFn = __webpack_require__(16);
	var warning = __webpack_require__(12);

	/**
	 * Collection of methods that allow declaration and validation of props that are
	 * supplied to React components. Example usage:
	 *
	 *   var Props = require('ReactPropTypes');
	 *   var MyArticle = React.createClass({
	 *     propTypes: {
	 *       // An optional string prop named "description".
	 *       description: Props.string,
	 *
	 *       // A required enum prop named "category".
	 *       category: Props.oneOf(['News','Photos']).isRequired,
	 *
	 *       // A prop named "dialog" that requires an instance of Dialog.
	 *       dialog: Props.instanceOf(Dialog).isRequired
	 *     },
	 *     render: function() { ... }
	 *   });
	 *
	 * A more formal specification of how these methods are used:
	 *
	 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	 *   decl := ReactPropTypes.{type}(.isRequired)?
	 *
	 * Each and every declaration produces a function with the same signature. This
	 * allows the creation of custom validation functions. For example:
	 *
	 *  var MyLink = React.createClass({
	 *    propTypes: {
	 *      // An optional string or URI prop named "href".
	 *      href: function(props, propName, componentName) {
	 *        var propValue = props[propName];
	 *        if (propValue != null && typeof propValue !== 'string' &&
	 *            !(propValue instanceof URI)) {
	 *          return new Error(
	 *            'Expected a string or an URI for ' + propName + ' in ' +
	 *            componentName
	 *          );
	 *        }
	 *      }
	 *    },
	 *    render: function() {...}
	 *  });
	 *
	 * @internal
	 */

	var ANONYMOUS = '<<anonymous>>';

	var ReactPropTypes = {
	  array: createPrimitiveTypeChecker('array'),
	  bool: createPrimitiveTypeChecker('boolean'),
	  func: createPrimitiveTypeChecker('function'),
	  number: createPrimitiveTypeChecker('number'),
	  object: createPrimitiveTypeChecker('object'),
	  string: createPrimitiveTypeChecker('string'),
	  symbol: createPrimitiveTypeChecker('symbol'),

	  any: createAnyTypeChecker(),
	  arrayOf: createArrayOfTypeChecker,
	  element: createElementTypeChecker(),
	  instanceOf: createInstanceTypeChecker,
	  node: createNodeChecker(),
	  objectOf: createObjectOfTypeChecker,
	  oneOf: createEnumTypeChecker,
	  oneOfType: createUnionTypeChecker,
	  shape: createShapeTypeChecker
	};

	/**
	 * inlined Object.is polyfill to avoid requiring consumers ship their own
	 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	 */
	/*eslint-disable no-self-compare*/
	function is(x, y) {
	  // SameValue algorithm
	  if (x === y) {
	    // Steps 1-5, 7-10
	    // Steps 6.b-6.e: +0 != -0
	    return x !== 0 || 1 / x === 1 / y;
	  } else {
	    // Step 6.a: NaN == NaN
	    return x !== x && y !== y;
	  }
	}
	/*eslint-enable no-self-compare*/

	function createChainableTypeChecker(validate) {
	  if (process.env.NODE_ENV !== 'production') {
	    var manualPropTypeCallCache = {};
	  }
	  function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
	    componentName = componentName || ANONYMOUS;
	    propFullName = propFullName || propName;
	    if (process.env.NODE_ENV !== 'production') {
	      if (secret !== ReactPropTypesSecret && typeof console !== 'undefined') {
	        var cacheKey = componentName + ':' + propName;
	        if (!manualPropTypeCallCache[cacheKey]) {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'You are manually calling a React.PropTypes validation ' + 'function for the `%s` prop on `%s`. This is deprecated ' + 'and will not work in the next major version. You may be ' + 'seeing this warning due to a third-party PropTypes library. ' + 'See https://fb.me/react-warning-dont-call-proptypes for details.', propFullName, componentName) : void 0;
	          manualPropTypeCallCache[cacheKey] = true;
	        }
	      }
	    }
	    if (props[propName] == null) {
	      var locationName = ReactPropTypeLocationNames[location];
	      if (isRequired) {
	        return new Error('Required ' + locationName + ' `' + propFullName + '` was not specified in ' + ('`' + componentName + '`.'));
	      }
	      return null;
	    } else {
	      return validate(props, propName, componentName, location, propFullName);
	    }
	  }

	  var chainedCheckType = checkType.bind(null, false);
	  chainedCheckType.isRequired = checkType.bind(null, true);

	  return chainedCheckType;
	}

	function createPrimitiveTypeChecker(expectedType) {
	  function validate(props, propName, componentName, location, propFullName, secret) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== expectedType) {
	      var locationName = ReactPropTypeLocationNames[location];
	      // `propValue` being instance of, say, date/regexp, pass the 'object'
	      // check, but we can offer a more precise error message here rather than
	      // 'of type `object`'.
	      var preciseType = getPreciseType(propValue);

	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createAnyTypeChecker() {
	  return createChainableTypeChecker(emptyFunction.thatReturns(null));
	}

	function createArrayOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (typeof typeChecker !== 'function') {
	      return new Error('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
	    }
	    var propValue = props[propName];
	    if (!Array.isArray(propValue)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var propType = getPropType(propValue);
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
	    }
	    for (var i = 0; i < propValue.length; i++) {
	      var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
	      if (error instanceof Error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createElementTypeChecker() {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    if (!ReactElement.isValidElement(propValue)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var propType = getPropType(propValue);
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createInstanceTypeChecker(expectedClass) {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!(props[propName] instanceof expectedClass)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var expectedClassName = expectedClass.name || ANONYMOUS;
	      var actualClassName = getClassName(props[propName]);
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createEnumTypeChecker(expectedValues) {
	  if (!Array.isArray(expectedValues)) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOf, expected an instance of array.') : void 0;
	    return emptyFunction.thatReturnsNull;
	  }

	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    for (var i = 0; i < expectedValues.length; i++) {
	      if (is(propValue, expectedValues[i])) {
	        return null;
	      }
	    }

	    var locationName = ReactPropTypeLocationNames[location];
	    var valuesString = JSON.stringify(expectedValues);
	    return new Error('Invalid ' + locationName + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
	  }
	  return createChainableTypeChecker(validate);
	}

	function createObjectOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (typeof typeChecker !== 'function') {
	      return new Error('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
	    }
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
	    }
	    for (var key in propValue) {
	      if (propValue.hasOwnProperty(key)) {
	        var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	        if (error instanceof Error) {
	          return error;
	        }
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createUnionTypeChecker(arrayOfTypeCheckers) {
	  if (!Array.isArray(arrayOfTypeCheckers)) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
	    return emptyFunction.thatReturnsNull;
	  }

	  function validate(props, propName, componentName, location, propFullName) {
	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	      var checker = arrayOfTypeCheckers[i];
	      if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
	        return null;
	      }
	    }

	    var locationName = ReactPropTypeLocationNames[location];
	    return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
	  }
	  return createChainableTypeChecker(validate);
	}

	function createNodeChecker() {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!isNode(props[propName])) {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createShapeTypeChecker(shapeTypes) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	    }
	    for (var key in shapeTypes) {
	      var checker = shapeTypes[key];
	      if (!checker) {
	        continue;
	      }
	      var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	      if (error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function isNode(propValue) {
	  switch (typeof propValue) {
	    case 'number':
	    case 'string':
	    case 'undefined':
	      return true;
	    case 'boolean':
	      return !propValue;
	    case 'object':
	      if (Array.isArray(propValue)) {
	        return propValue.every(isNode);
	      }
	      if (propValue === null || ReactElement.isValidElement(propValue)) {
	        return true;
	      }

	      var iteratorFn = getIteratorFn(propValue);
	      if (iteratorFn) {
	        var iterator = iteratorFn.call(propValue);
	        var step;
	        if (iteratorFn !== propValue.entries) {
	          while (!(step = iterator.next()).done) {
	            if (!isNode(step.value)) {
	              return false;
	            }
	          }
	        } else {
	          // Iterator will provide entry [k,v] tuples rather than values.
	          while (!(step = iterator.next()).done) {
	            var entry = step.value;
	            if (entry) {
	              if (!isNode(entry[1])) {
	                return false;
	              }
	            }
	          }
	        }
	      } else {
	        return false;
	      }

	      return true;
	    default:
	      return false;
	  }
	}

	function isSymbol(propType, propValue) {
	  // Native Symbol.
	  if (propType === 'symbol') {
	    return true;
	  }

	  // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
	  if (propValue['@@toStringTag'] === 'Symbol') {
	    return true;
	  }

	  // Fallback for non-spec compliant Symbols which are polyfilled.
	  if (typeof Symbol === 'function' && propValue instanceof Symbol) {
	    return true;
	  }

	  return false;
	}

	// Equivalent of `typeof` but with special handling for array and regexp.
	function getPropType(propValue) {
	  var propType = typeof propValue;
	  if (Array.isArray(propValue)) {
	    return 'array';
	  }
	  if (propValue instanceof RegExp) {
	    // Old webkits (at least until Android 4.0) return 'function' rather than
	    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	    // passes PropTypes.object.
	    return 'object';
	  }
	  if (isSymbol(propType, propValue)) {
	    return 'symbol';
	  }
	  return propType;
	}

	// This handles more types than `getPropType`. Only used for error messages.
	// See `createPrimitiveTypeChecker`.
	function getPreciseType(propValue) {
	  var propType = getPropType(propValue);
	  if (propType === 'object') {
	    if (propValue instanceof Date) {
	      return 'date';
	    } else if (propValue instanceof RegExp) {
	      return 'regexp';
	    }
	  }
	  return propType;
	}

	// Returns class name of the object, if any.
	function getClassName(propValue) {
	  if (!propValue.constructor || !propValue.constructor.name) {
	    return ANONYMOUS;
	  }
	  return propValue.constructor.name;
	}

	module.exports = ReactPropTypes;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 34 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactVersion
	 */

	'use strict';

	module.exports = '15.3.0';

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule onlyChild
	 */
	'use strict';

	var _prodInvariant = __webpack_require__(8);

	var ReactElement = __webpack_require__(10);

	var invariant = __webpack_require__(9);

	/**
	 * Returns the first child in a collection of children and verifies that there
	 * is only one child in the collection.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.only
	 *
	 * The current implementation of this function assumes that a single child gets
	 * passed without a wrapper, but the purpose of this helper function is to
	 * abstract away the particular structure of children.
	 *
	 * @param {?object} children Child collection structure.
	 * @return {ReactElement} The first and only `ReactElement` contained in the
	 * structure.
	 */
	function onlyChild(children) {
	  !ReactElement.isValidElement(children) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'onlyChild must be passed a children with exactly one child.') : _prodInvariant('23') : void 0;
	  return children;
	}

	module.exports = onlyChild;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(37);


/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOM
	 */

	/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/

	'use strict';

	var ReactDOMComponentTree = __webpack_require__(38);
	var ReactDefaultInjection = __webpack_require__(41);
	var ReactMount = __webpack_require__(168);
	var ReactReconciler = __webpack_require__(61);
	var ReactUpdates = __webpack_require__(58);
	var ReactVersion = __webpack_require__(34);

	var findDOMNode = __webpack_require__(173);
	var getHostComponentFromComposite = __webpack_require__(174);
	var renderSubtreeIntoContainer = __webpack_require__(175);
	var warning = __webpack_require__(12);

	ReactDefaultInjection.inject();

	var ReactDOM = {
	  findDOMNode: findDOMNode,
	  render: ReactMount.render,
	  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
	  version: ReactVersion,

	  /* eslint-disable camelcase */
	  unstable_batchedUpdates: ReactUpdates.batchedUpdates,
	  unstable_renderSubtreeIntoContainer: renderSubtreeIntoContainer
	};

	// Inject the runtime into a devtools global hook regardless of browser.
	// Allows for debugging when the hook is injected on the page.
	/* eslint-enable camelcase */
	if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
	  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
	    ComponentTree: {
	      getClosestInstanceFromNode: ReactDOMComponentTree.getClosestInstanceFromNode,
	      getNodeFromInstance: function (inst) {
	        // inst is an internal instance (but could be a composite)
	        if (inst._renderedComponent) {
	          inst = getHostComponentFromComposite(inst);
	        }
	        if (inst) {
	          return ReactDOMComponentTree.getNodeFromInstance(inst);
	        } else {
	          return null;
	        }
	      }
	    },
	    Mount: ReactMount,
	    Reconciler: ReactReconciler
	  });
	}

	if (process.env.NODE_ENV !== 'production') {
	  var ExecutionEnvironment = __webpack_require__(51);
	  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {

	    // First check if devtools is not installed
	    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
	      // If we're in Chrome or Firefox, provide a download link if not installed.
	      if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
	        // Firefox does not have the issue with devtools loaded over file://
	        var showFileUrlMessage = window.location.protocol.indexOf('http') === -1 && navigator.userAgent.indexOf('Firefox') === -1;
	        console.debug('Download the React DevTools ' + (showFileUrlMessage ? 'and use an HTTP server (instead of a file: URL) ' : '') + 'for a better development experience: ' + 'https://fb.me/react-devtools');
	      }
	    }

	    var testFunc = function testFn() {};
	    process.env.NODE_ENV !== 'production' ? warning((testFunc.name || testFunc.toString()).indexOf('testFn') !== -1, 'It looks like you\'re using a minified copy of the development build ' + 'of React. When deploying React apps to production, make sure to use ' + 'the production build which skips development warnings and is faster. ' + 'See https://fb.me/react-minification for more details.') : void 0;

	    // If we're in IE8, check to see if we are in compatibility mode and provide
	    // information on preventing compatibility mode
	    var ieCompatibilityMode = document.documentMode && document.documentMode < 8;

	    process.env.NODE_ENV !== 'production' ? warning(!ieCompatibilityMode, 'Internet Explorer is running in compatibility mode; please add the ' + 'following tag to your HTML to prevent this from happening: ' + '<meta http-equiv="X-UA-Compatible" content="IE=edge" />') : void 0;

	    var expectedFeatures = [
	    // shims
	    Array.isArray, Array.prototype.every, Array.prototype.forEach, Array.prototype.indexOf, Array.prototype.map, Date.now, Function.prototype.bind, Object.keys, String.prototype.split, String.prototype.trim];

	    for (var i = 0; i < expectedFeatures.length; i++) {
	      if (!expectedFeatures[i]) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'One or more ES5 shims expected by React are not available: ' + 'https://fb.me/react-warning-polyfills') : void 0;
	        break;
	      }
	    }
	  }
	}

	module.exports = ReactDOM;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMComponentTree
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(8);

	var DOMProperty = __webpack_require__(39);
	var ReactDOMComponentFlags = __webpack_require__(40);

	var invariant = __webpack_require__(9);

	var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
	var Flags = ReactDOMComponentFlags;

	var internalInstanceKey = '__reactInternalInstance$' + Math.random().toString(36).slice(2);

	/**
	 * Drill down (through composites and empty components) until we get a host or
	 * host text component.
	 *
	 * This is pretty polymorphic but unavoidable with the current structure we have
	 * for `_renderedChildren`.
	 */
	function getRenderedHostOrTextFromComponent(component) {
	  var rendered;
	  while (rendered = component._renderedComponent) {
	    component = rendered;
	  }
	  return component;
	}

	/**
	 * Populate `_hostNode` on the rendered host/text component with the given
	 * DOM node. The passed `inst` can be a composite.
	 */
	function precacheNode(inst, node) {
	  var hostInst = getRenderedHostOrTextFromComponent(inst);
	  hostInst._hostNode = node;
	  node[internalInstanceKey] = hostInst;
	}

	function uncacheNode(inst) {
	  var node = inst._hostNode;
	  if (node) {
	    delete node[internalInstanceKey];
	    inst._hostNode = null;
	  }
	}

	/**
	 * Populate `_hostNode` on each child of `inst`, assuming that the children
	 * match up with the DOM (element) children of `node`.
	 *
	 * We cache entire levels at once to avoid an n^2 problem where we access the
	 * children of a node sequentially and have to walk from the start to our target
	 * node every time.
	 *
	 * Since we update `_renderedChildren` and the actual DOM at (slightly)
	 * different times, we could race here and see a newer `_renderedChildren` than
	 * the DOM nodes we see. To avoid this, ReactMultiChild calls
	 * `prepareToManageChildren` before we change `_renderedChildren`, at which
	 * time the container's child nodes are always cached (until it unmounts).
	 */
	function precacheChildNodes(inst, node) {
	  if (inst._flags & Flags.hasCachedChildNodes) {
	    return;
	  }
	  var children = inst._renderedChildren;
	  var childNode = node.firstChild;
	  outer: for (var name in children) {
	    if (!children.hasOwnProperty(name)) {
	      continue;
	    }
	    var childInst = children[name];
	    var childID = getRenderedHostOrTextFromComponent(childInst)._domID;
	    if (childID == null) {
	      // We're currently unmounting this child in ReactMultiChild; skip it.
	      continue;
	    }
	    // We assume the child nodes are in the same order as the child instances.
	    for (; childNode !== null; childNode = childNode.nextSibling) {
	      if (childNode.nodeType === 1 && childNode.getAttribute(ATTR_NAME) === String(childID) || childNode.nodeType === 8 && childNode.nodeValue === ' react-text: ' + childID + ' ' || childNode.nodeType === 8 && childNode.nodeValue === ' react-empty: ' + childID + ' ') {
	        precacheNode(childInst, childNode);
	        continue outer;
	      }
	    }
	    // We reached the end of the DOM children without finding an ID match.
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Unable to find element with ID %s.', childID) : _prodInvariant('32', childID) : void 0;
	  }
	  inst._flags |= Flags.hasCachedChildNodes;
	}

	/**
	 * Given a DOM node, return the closest ReactDOMComponent or
	 * ReactDOMTextComponent instance ancestor.
	 */
	function getClosestInstanceFromNode(node) {
	  if (node[internalInstanceKey]) {
	    return node[internalInstanceKey];
	  }

	  // Walk up the tree until we find an ancestor whose instance we have cached.
	  var parents = [];
	  while (!node[internalInstanceKey]) {
	    parents.push(node);
	    if (node.parentNode) {
	      node = node.parentNode;
	    } else {
	      // Top of the tree. This node must not be part of a React tree (or is
	      // unmounted, potentially).
	      return null;
	    }
	  }

	  var closest;
	  var inst;
	  for (; node && (inst = node[internalInstanceKey]); node = parents.pop()) {
	    closest = inst;
	    if (parents.length) {
	      precacheChildNodes(inst, node);
	    }
	  }

	  return closest;
	}

	/**
	 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
	 * instance, or null if the node was not rendered by this React.
	 */
	function getInstanceFromNode(node) {
	  var inst = getClosestInstanceFromNode(node);
	  if (inst != null && inst._hostNode === node) {
	    return inst;
	  } else {
	    return null;
	  }
	}

	/**
	 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
	 * DOM node.
	 */
	function getNodeFromInstance(inst) {
	  // Without this first invariant, passing a non-DOM-component triggers the next
	  // invariant for a missing parent, which is super confusing.
	  !(inst._hostNode !== undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;

	  if (inst._hostNode) {
	    return inst._hostNode;
	  }

	  // Walk up the tree until we find an ancestor whose DOM node we have cached.
	  var parents = [];
	  while (!inst._hostNode) {
	    parents.push(inst);
	    !inst._hostParent ? process.env.NODE_ENV !== 'production' ? invariant(false, 'React DOM tree root should always have a node reference.') : _prodInvariant('34') : void 0;
	    inst = inst._hostParent;
	  }

	  // Now parents contains each ancestor that does *not* have a cached native
	  // node, and `inst` is the deepest ancestor that does.
	  for (; parents.length; inst = parents.pop()) {
	    precacheChildNodes(inst, inst._hostNode);
	  }

	  return inst._hostNode;
	}

	var ReactDOMComponentTree = {
	  getClosestInstanceFromNode: getClosestInstanceFromNode,
	  getInstanceFromNode: getInstanceFromNode,
	  getNodeFromInstance: getNodeFromInstance,
	  precacheChildNodes: precacheChildNodes,
	  precacheNode: precacheNode,
	  uncacheNode: uncacheNode
	};

	module.exports = ReactDOMComponentTree;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMProperty
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(8);

	var invariant = __webpack_require__(9);

	function checkMask(value, bitmask) {
	  return (value & bitmask) === bitmask;
	}

	var DOMPropertyInjection = {
	  /**
	   * Mapping from normalized, camelcased property names to a configuration that
	   * specifies how the associated DOM property should be accessed or rendered.
	   */
	  MUST_USE_PROPERTY: 0x1,
	  HAS_BOOLEAN_VALUE: 0x4,
	  HAS_NUMERIC_VALUE: 0x8,
	  HAS_POSITIVE_NUMERIC_VALUE: 0x10 | 0x8,
	  HAS_OVERLOADED_BOOLEAN_VALUE: 0x20,

	  /**
	   * Inject some specialized knowledge about the DOM. This takes a config object
	   * with the following properties:
	   *
	   * isCustomAttribute: function that given an attribute name will return true
	   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
	   * attributes where it's impossible to enumerate all of the possible
	   * attribute names,
	   *
	   * Properties: object mapping DOM property name to one of the
	   * DOMPropertyInjection constants or null. If your attribute isn't in here,
	   * it won't get written to the DOM.
	   *
	   * DOMAttributeNames: object mapping React attribute name to the DOM
	   * attribute name. Attribute names not specified use the **lowercase**
	   * normalized name.
	   *
	   * DOMAttributeNamespaces: object mapping React attribute name to the DOM
	   * attribute namespace URL. (Attribute names not specified use no namespace.)
	   *
	   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
	   * Property names not specified use the normalized name.
	   *
	   * DOMMutationMethods: Properties that require special mutation methods. If
	   * `value` is undefined, the mutation method should unset the property.
	   *
	   * @param {object} domPropertyConfig the config as described above.
	   */
	  injectDOMPropertyConfig: function (domPropertyConfig) {
	    var Injection = DOMPropertyInjection;
	    var Properties = domPropertyConfig.Properties || {};
	    var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};
	    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
	    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
	    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

	    if (domPropertyConfig.isCustomAttribute) {
	      DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);
	    }

	    for (var propName in Properties) {
	      !!DOMProperty.properties.hasOwnProperty(propName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'injectDOMPropertyConfig(...): You\'re trying to inject DOM property \'%s\' which has already been injected. You may be accidentally injecting the same DOM property config twice, or you may be injecting two configs that have conflicting property names.', propName) : _prodInvariant('48', propName) : void 0;

	      var lowerCased = propName.toLowerCase();
	      var propConfig = Properties[propName];

	      var propertyInfo = {
	        attributeName: lowerCased,
	        attributeNamespace: null,
	        propertyName: propName,
	        mutationMethod: null,

	        mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),
	        hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),
	        hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),
	        hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),
	        hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE)
	      };
	      !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or numeric value, but not a combination: %s', propName) : _prodInvariant('50', propName) : void 0;

	      if (process.env.NODE_ENV !== 'production') {
	        DOMProperty.getPossibleStandardName[lowerCased] = propName;
	      }

	      if (DOMAttributeNames.hasOwnProperty(propName)) {
	        var attributeName = DOMAttributeNames[propName];
	        propertyInfo.attributeName = attributeName;
	        if (process.env.NODE_ENV !== 'production') {
	          DOMProperty.getPossibleStandardName[attributeName] = propName;
	        }
	      }

	      if (DOMAttributeNamespaces.hasOwnProperty(propName)) {
	        propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];
	      }

	      if (DOMPropertyNames.hasOwnProperty(propName)) {
	        propertyInfo.propertyName = DOMPropertyNames[propName];
	      }

	      if (DOMMutationMethods.hasOwnProperty(propName)) {
	        propertyInfo.mutationMethod = DOMMutationMethods[propName];
	      }

	      DOMProperty.properties[propName] = propertyInfo;
	    }
	  }
	};

	/* eslint-disable max-len */
	var ATTRIBUTE_NAME_START_CHAR = ':A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD';
	/* eslint-enable max-len */

	/**
	 * DOMProperty exports lookup objects that can be used like functions:
	 *
	 *   > DOMProperty.isValid['id']
	 *   true
	 *   > DOMProperty.isValid['foobar']
	 *   undefined
	 *
	 * Although this may be confusing, it performs better in general.
	 *
	 * @see http://jsperf.com/key-exists
	 * @see http://jsperf.com/key-missing
	 */
	var DOMProperty = {

	  ID_ATTRIBUTE_NAME: 'data-reactid',
	  ROOT_ATTRIBUTE_NAME: 'data-reactroot',

	  ATTRIBUTE_NAME_START_CHAR: ATTRIBUTE_NAME_START_CHAR,
	  ATTRIBUTE_NAME_CHAR: ATTRIBUTE_NAME_START_CHAR + '\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040',

	  /**
	   * Map from property "standard name" to an object with info about how to set
	   * the property in the DOM. Each object contains:
	   *
	   * attributeName:
	   *   Used when rendering markup or with `*Attribute()`.
	   * attributeNamespace
	   * propertyName:
	   *   Used on DOM node instances. (This includes properties that mutate due to
	   *   external factors.)
	   * mutationMethod:
	   *   If non-null, used instead of the property or `setAttribute()` after
	   *   initial render.
	   * mustUseProperty:
	   *   Whether the property must be accessed and mutated as an object property.
	   * hasBooleanValue:
	   *   Whether the property should be removed when set to a falsey value.
	   * hasNumericValue:
	   *   Whether the property must be numeric or parse as a numeric and should be
	   *   removed when set to a falsey value.
	   * hasPositiveNumericValue:
	   *   Whether the property must be positive numeric or parse as a positive
	   *   numeric and should be removed when set to a falsey value.
	   * hasOverloadedBooleanValue:
	   *   Whether the property can be used as a flag as well as with a value.
	   *   Removed when strictly equal to false; present without a value when
	   *   strictly equal to true; present with a value otherwise.
	   */
	  properties: {},

	  /**
	   * Mapping from lowercase property names to the properly cased version, used
	   * to warn in the case of missing properties. Available only in __DEV__.
	   * @type {Object}
	   */
	  getPossibleStandardName: process.env.NODE_ENV !== 'production' ? {} : null,

	  /**
	   * All of the isCustomAttribute() functions that have been injected.
	   */
	  _isCustomAttributeFunctions: [],

	  /**
	   * Checks whether a property name is a custom attribute.
	   * @method
	   */
	  isCustomAttribute: function (attributeName) {
	    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
	      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
	      if (isCustomAttributeFn(attributeName)) {
	        return true;
	      }
	    }
	    return false;
	  },

	  injection: DOMPropertyInjection
	};

	module.exports = DOMProperty;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 40 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMComponentFlags
	 */

	'use strict';

	var ReactDOMComponentFlags = {
	  hasCachedChildNodes: 1 << 0
	};

	module.exports = ReactDOMComponentFlags;

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultInjection
	 */

	'use strict';

	var BeforeInputEventPlugin = __webpack_require__(42);
	var ChangeEventPlugin = __webpack_require__(57);
	var DefaultEventPluginOrder = __webpack_require__(75);
	var EnterLeaveEventPlugin = __webpack_require__(76);
	var HTMLDOMPropertyConfig = __webpack_require__(81);
	var ReactComponentBrowserEnvironment = __webpack_require__(82);
	var ReactDOMComponent = __webpack_require__(96);
	var ReactDOMComponentTree = __webpack_require__(38);
	var ReactDOMEmptyComponent = __webpack_require__(139);
	var ReactDOMTreeTraversal = __webpack_require__(140);
	var ReactDOMTextComponent = __webpack_require__(141);
	var ReactDefaultBatchingStrategy = __webpack_require__(142);
	var ReactEventListener = __webpack_require__(143);
	var ReactInjection = __webpack_require__(146);
	var ReactReconcileTransaction = __webpack_require__(147);
	var SVGDOMPropertyConfig = __webpack_require__(155);
	var SelectEventPlugin = __webpack_require__(156);
	var SimpleEventPlugin = __webpack_require__(157);

	var alreadyInjected = false;

	function inject() {
	  if (alreadyInjected) {
	    // TODO: This is currently true because these injections are shared between
	    // the client and the server package. They should be built independently
	    // and not share any injection state. Then this problem will be solved.
	    return;
	  }
	  alreadyInjected = true;

	  ReactInjection.EventEmitter.injectReactEventListener(ReactEventListener);

	  /**
	   * Inject modules for resolving DOM hierarchy and plugin ordering.
	   */
	  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
	  ReactInjection.EventPluginUtils.injectComponentTree(ReactDOMComponentTree);
	  ReactInjection.EventPluginUtils.injectTreeTraversal(ReactDOMTreeTraversal);

	  /**
	   * Some important event plugins included by default (without having to require
	   * them).
	   */
	  ReactInjection.EventPluginHub.injectEventPluginsByName({
	    SimpleEventPlugin: SimpleEventPlugin,
	    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
	    ChangeEventPlugin: ChangeEventPlugin,
	    SelectEventPlugin: SelectEventPlugin,
	    BeforeInputEventPlugin: BeforeInputEventPlugin
	  });

	  ReactInjection.HostComponent.injectGenericComponentClass(ReactDOMComponent);

	  ReactInjection.HostComponent.injectTextComponentClass(ReactDOMTextComponent);

	  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

	  ReactInjection.EmptyComponent.injectEmptyComponentFactory(function (instantiate) {
	    return new ReactDOMEmptyComponent(instantiate);
	  });

	  ReactInjection.Updates.injectReconcileTransaction(ReactReconcileTransaction);
	  ReactInjection.Updates.injectBatchingStrategy(ReactDefaultBatchingStrategy);

	  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);
	}

	module.exports = {
	  inject: inject
	};

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule BeforeInputEventPlugin
	 */

	'use strict';

	var EventConstants = __webpack_require__(43);
	var EventPropagators = __webpack_require__(44);
	var ExecutionEnvironment = __webpack_require__(51);
	var FallbackCompositionState = __webpack_require__(52);
	var SyntheticCompositionEvent = __webpack_require__(54);
	var SyntheticInputEvent = __webpack_require__(56);

	var keyOf = __webpack_require__(26);

	var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
	var START_KEYCODE = 229;

	var canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;

	var documentMode = null;
	if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
	  documentMode = document.documentMode;
	}

	// Webkit offers a very useful `textInput` event that can be used to
	// directly represent `beforeInput`. The IE `textinput` event is not as
	// useful, so we don't use it.
	var canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();

	// In IE9+, we have access to composition events, but the data supplied
	// by the native compositionend event may be incorrect. Japanese ideographic
	// spaces, for instance (\u3000) are not recorded correctly.
	var useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);

	/**
	 * Opera <= 12 includes TextEvent in window, but does not fire
	 * text input events. Rely on keypress instead.
	 */
	function isPresto() {
	  var opera = window.opera;
	  return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;
	}

	var SPACEBAR_CODE = 32;
	var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

	var topLevelTypes = EventConstants.topLevelTypes;

	// Events and their corresponding property names.
	var eventTypes = {
	  beforeInput: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onBeforeInput: null }),
	      captured: keyOf({ onBeforeInputCapture: null })
	    },
	    dependencies: [topLevelTypes.topCompositionEnd, topLevelTypes.topKeyPress, topLevelTypes.topTextInput, topLevelTypes.topPaste]
	  },
	  compositionEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCompositionEnd: null }),
	      captured: keyOf({ onCompositionEndCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionEnd, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
	  },
	  compositionStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCompositionStart: null }),
	      captured: keyOf({ onCompositionStartCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionStart, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
	  },
	  compositionUpdate: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCompositionUpdate: null }),
	      captured: keyOf({ onCompositionUpdateCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionUpdate, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
	  }
	};

	// Track whether we've ever handled a keypress on the space key.
	var hasSpaceKeypress = false;

	/**
	 * Return whether a native keypress event is assumed to be a command.
	 * This is required because Firefox fires `keypress` events for key commands
	 * (cut, copy, select-all, etc.) even though no character is inserted.
	 */
	function isKeypressCommand(nativeEvent) {
	  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
	  // ctrlKey && altKey is equivalent to AltGr, and is not a command.
	  !(nativeEvent.ctrlKey && nativeEvent.altKey);
	}

	/**
	 * Translate native top level events into event types.
	 *
	 * @param {string} topLevelType
	 * @return {object}
	 */
	function getCompositionEventType(topLevelType) {
	  switch (topLevelType) {
	    case topLevelTypes.topCompositionStart:
	      return eventTypes.compositionStart;
	    case topLevelTypes.topCompositionEnd:
	      return eventTypes.compositionEnd;
	    case topLevelTypes.topCompositionUpdate:
	      return eventTypes.compositionUpdate;
	  }
	}

	/**
	 * Does our fallback best-guess model think this event signifies that
	 * composition has begun?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionStart(topLevelType, nativeEvent) {
	  return topLevelType === topLevelTypes.topKeyDown && nativeEvent.keyCode === START_KEYCODE;
	}

	/**
	 * Does our fallback mode think that this event is the end of composition?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionEnd(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case topLevelTypes.topKeyUp:
	      // Command keys insert or clear IME input.
	      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
	    case topLevelTypes.topKeyDown:
	      // Expect IME keyCode on each keydown. If we get any other
	      // code we must have exited earlier.
	      return nativeEvent.keyCode !== START_KEYCODE;
	    case topLevelTypes.topKeyPress:
	    case topLevelTypes.topMouseDown:
	    case topLevelTypes.topBlur:
	      // Events are not possible without cancelling IME.
	      return true;
	    default:
	      return false;
	  }
	}

	/**
	 * Google Input Tools provides composition data via a CustomEvent,
	 * with the `data` property populated in the `detail` object. If this
	 * is available on the event object, use it. If not, this is a plain
	 * composition event and we have nothing special to extract.
	 *
	 * @param {object} nativeEvent
	 * @return {?string}
	 */
	function getDataFromCustomEvent(nativeEvent) {
	  var detail = nativeEvent.detail;
	  if (typeof detail === 'object' && 'data' in detail) {
	    return detail.data;
	  }
	  return null;
	}

	// Track the current IME composition fallback object, if any.
	var currentComposition = null;

	/**
	 * @return {?object} A SyntheticCompositionEvent.
	 */
	function extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	  var eventType;
	  var fallbackData;

	  if (canUseCompositionEvent) {
	    eventType = getCompositionEventType(topLevelType);
	  } else if (!currentComposition) {
	    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
	      eventType = eventTypes.compositionStart;
	    }
	  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	    eventType = eventTypes.compositionEnd;
	  }

	  if (!eventType) {
	    return null;
	  }

	  if (useFallbackCompositionData) {
	    // The current composition is stored statically and must not be
	    // overwritten while composition continues.
	    if (!currentComposition && eventType === eventTypes.compositionStart) {
	      currentComposition = FallbackCompositionState.getPooled(nativeEventTarget);
	    } else if (eventType === eventTypes.compositionEnd) {
	      if (currentComposition) {
	        fallbackData = currentComposition.getData();
	      }
	    }
	  }

	  var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);

	  if (fallbackData) {
	    // Inject data generated from fallback path into the synthetic event.
	    // This matches the property of native CompositionEventInterface.
	    event.data = fallbackData;
	  } else {
	    var customData = getDataFromCustomEvent(nativeEvent);
	    if (customData !== null) {
	      event.data = customData;
	    }
	  }

	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}

	/**
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The string corresponding to this `beforeInput` event.
	 */
	function getNativeBeforeInputChars(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case topLevelTypes.topCompositionEnd:
	      return getDataFromCustomEvent(nativeEvent);
	    case topLevelTypes.topKeyPress:
	      /**
	       * If native `textInput` events are available, our goal is to make
	       * use of them. However, there is a special case: the spacebar key.
	       * In Webkit, preventing default on a spacebar `textInput` event
	       * cancels character insertion, but it *also* causes the browser
	       * to fall back to its default spacebar behavior of scrolling the
	       * page.
	       *
	       * Tracking at:
	       * https://code.google.com/p/chromium/issues/detail?id=355103
	       *
	       * To avoid this issue, use the keypress event as if no `textInput`
	       * event is available.
	       */
	      var which = nativeEvent.which;
	      if (which !== SPACEBAR_CODE) {
	        return null;
	      }

	      hasSpaceKeypress = true;
	      return SPACEBAR_CHAR;

	    case topLevelTypes.topTextInput:
	      // Record the characters to be added to the DOM.
	      var chars = nativeEvent.data;

	      // If it's a spacebar character, assume that we have already handled
	      // it at the keypress level and bail immediately. Android Chrome
	      // doesn't give us keycodes, so we need to blacklist it.
	      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
	        return null;
	      }

	      return chars;

	    default:
	      // For other native event types, do nothing.
	      return null;
	  }
	}

	/**
	 * For browsers that do not provide the `textInput` event, extract the
	 * appropriate string to use for SyntheticInputEvent.
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The fallback string for this `beforeInput` event.
	 */
	function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
	  // If we are currently composing (IME) and using a fallback to do so,
	  // try to extract the composed characters from the fallback object.
	  if (currentComposition) {
	    if (topLevelType === topLevelTypes.topCompositionEnd || isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	      var chars = currentComposition.getData();
	      FallbackCompositionState.release(currentComposition);
	      currentComposition = null;
	      return chars;
	    }
	    return null;
	  }

	  switch (topLevelType) {
	    case topLevelTypes.topPaste:
	      // If a paste event occurs after a keypress, throw out the input
	      // chars. Paste events should not lead to BeforeInput events.
	      return null;
	    case topLevelTypes.topKeyPress:
	      /**
	       * As of v27, Firefox may fire keypress events even when no character
	       * will be inserted. A few possibilities:
	       *
	       * - `which` is `0`. Arrow keys, Esc key, etc.
	       *
	       * - `which` is the pressed key code, but no char is available.
	       *   Ex: 'AltGr + d` in Polish. There is no modified character for
	       *   this key combination and no character is inserted into the
	       *   document, but FF fires the keypress for char code `100` anyway.
	       *   No `input` event will occur.
	       *
	       * - `which` is the pressed key code, but a command combination is
	       *   being used. Ex: `Cmd+C`. No character is inserted, and no
	       *   `input` event will occur.
	       */
	      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
	        return String.fromCharCode(nativeEvent.which);
	      }
	      return null;
	    case topLevelTypes.topCompositionEnd:
	      return useFallbackCompositionData ? null : nativeEvent.data;
	    default:
	      return null;
	  }
	}

	/**
	 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
	 * `textInput` or fallback behavior.
	 *
	 * @return {?object} A SyntheticInputEvent.
	 */
	function extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	  var chars;

	  if (canUseTextInputEvent) {
	    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
	  } else {
	    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
	  }

	  // If no characters are being inserted, no BeforeInput event should
	  // be fired.
	  if (!chars) {
	    return null;
	  }

	  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);

	  event.data = chars;
	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}

	/**
	 * Create an `onBeforeInput` event to match
	 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
	 *
	 * This event plugin is based on the native `textInput` event
	 * available in Chrome, Safari, Opera, and IE. This event fires after
	 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
	 *
	 * `beforeInput` is spec'd but not implemented in any browsers, and
	 * the `input` event does not provide any useful information about what has
	 * actually been added, contrary to the spec. Thus, `textInput` is the best
	 * available event to identify the characters that have actually been inserted
	 * into the target node.
	 *
	 * This plugin is also responsible for emitting `composition` events, thus
	 * allowing us to share composition fallback code for both `beforeInput` and
	 * `composition` event types.
	 */
	var BeforeInputEventPlugin = {

	  eventTypes: eventTypes,

	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    return [extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget)];
	  }
	};

	module.exports = BeforeInputEventPlugin;

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventConstants
	 */

	'use strict';

	var keyMirror = __webpack_require__(24);

	var PropagationPhases = keyMirror({ bubbled: null, captured: null });

	/**
	 * Types of raw signals from the browser caught at the top level.
	 */
	var topLevelTypes = keyMirror({
	  topAbort: null,
	  topAnimationEnd: null,
	  topAnimationIteration: null,
	  topAnimationStart: null,
	  topBlur: null,
	  topCanPlay: null,
	  topCanPlayThrough: null,
	  topChange: null,
	  topClick: null,
	  topCompositionEnd: null,
	  topCompositionStart: null,
	  topCompositionUpdate: null,
	  topContextMenu: null,
	  topCopy: null,
	  topCut: null,
	  topDoubleClick: null,
	  topDrag: null,
	  topDragEnd: null,
	  topDragEnter: null,
	  topDragExit: null,
	  topDragLeave: null,
	  topDragOver: null,
	  topDragStart: null,
	  topDrop: null,
	  topDurationChange: null,
	  topEmptied: null,
	  topEncrypted: null,
	  topEnded: null,
	  topError: null,
	  topFocus: null,
	  topInput: null,
	  topInvalid: null,
	  topKeyDown: null,
	  topKeyPress: null,
	  topKeyUp: null,
	  topLoad: null,
	  topLoadedData: null,
	  topLoadedMetadata: null,
	  topLoadStart: null,
	  topMouseDown: null,
	  topMouseMove: null,
	  topMouseOut: null,
	  topMouseOver: null,
	  topMouseUp: null,
	  topPaste: null,
	  topPause: null,
	  topPlay: null,
	  topPlaying: null,
	  topProgress: null,
	  topRateChange: null,
	  topReset: null,
	  topScroll: null,
	  topSeeked: null,
	  topSeeking: null,
	  topSelectionChange: null,
	  topStalled: null,
	  topSubmit: null,
	  topSuspend: null,
	  topTextInput: null,
	  topTimeUpdate: null,
	  topTouchCancel: null,
	  topTouchEnd: null,
	  topTouchMove: null,
	  topTouchStart: null,
	  topTransitionEnd: null,
	  topVolumeChange: null,
	  topWaiting: null,
	  topWheel: null
	});

	var EventConstants = {
	  topLevelTypes: topLevelTypes,
	  PropagationPhases: PropagationPhases
	};

	module.exports = EventConstants;

/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPropagators
	 */

	'use strict';

	var EventConstants = __webpack_require__(43);
	var EventPluginHub = __webpack_require__(45);
	var EventPluginUtils = __webpack_require__(47);

	var accumulateInto = __webpack_require__(49);
	var forEachAccumulated = __webpack_require__(50);
	var warning = __webpack_require__(12);

	var PropagationPhases = EventConstants.PropagationPhases;
	var getListener = EventPluginHub.getListener;

	/**
	 * Some event types have a notion of different registration names for different
	 * "phases" of propagation. This finds listeners by a given phase.
	 */
	function listenerAtPhase(inst, event, propagationPhase) {
	  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
	  return getListener(inst, registrationName);
	}

	/**
	 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
	 * here, allows us to not have to bind or create functions for each event.
	 * Mutating the event's members allows us to not have to create a wrapping
	 * "dispatch" object that pairs the event with the listener.
	 */
	function accumulateDirectionalDispatches(inst, upwards, event) {
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(inst, 'Dispatching inst must not be null') : void 0;
	  }
	  var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;
	  var listener = listenerAtPhase(inst, event, phase);
	  if (listener) {
	    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	    event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
	  }
	}

	/**
	 * Collect dispatches (must be entirely collected before dispatching - see unit
	 * tests). Lazily allocate the array to conserve memory.  We must loop through
	 * each event and perform the traversal for each one. We cannot perform a
	 * single traversal for the entire collection of events because each event may
	 * have a different target.
	 */
	function accumulateTwoPhaseDispatchesSingle(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    EventPluginUtils.traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
	  }
	}

	/**
	 * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.
	 */
	function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    var targetInst = event._targetInst;
	    var parentInst = targetInst ? EventPluginUtils.getParentInstance(targetInst) : null;
	    EventPluginUtils.traverseTwoPhase(parentInst, accumulateDirectionalDispatches, event);
	  }
	}

	/**
	 * Accumulates without regard to direction, does not look for phased
	 * registration names. Same as `accumulateDirectDispatchesSingle` but without
	 * requiring that the `dispatchMarker` be the same as the dispatched ID.
	 */
	function accumulateDispatches(inst, ignoredDirection, event) {
	  if (event && event.dispatchConfig.registrationName) {
	    var registrationName = event.dispatchConfig.registrationName;
	    var listener = getListener(inst, registrationName);
	    if (listener) {
	      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	      event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
	    }
	  }
	}

	/**
	 * Accumulates dispatches on an `SyntheticEvent`, but only for the
	 * `dispatchMarker`.
	 * @param {SyntheticEvent} event
	 */
	function accumulateDirectDispatchesSingle(event) {
	  if (event && event.dispatchConfig.registrationName) {
	    accumulateDispatches(event._targetInst, null, event);
	  }
	}

	function accumulateTwoPhaseDispatches(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
	}

	function accumulateTwoPhaseDispatchesSkipTarget(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
	}

	function accumulateEnterLeaveDispatches(leave, enter, from, to) {
	  EventPluginUtils.traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
	}

	function accumulateDirectDispatches(events) {
	  forEachAccumulated(events, accumulateDirectDispatchesSingle);
	}

	/**
	 * A small set of propagation patterns, each of which will accept a small amount
	 * of information, and generate a set of "dispatch ready event objects" - which
	 * are sets of events that have already been annotated with a set of dispatched
	 * listener functions/ids. The API is designed this way to discourage these
	 * propagation strategies from actually executing the dispatches, since we
	 * always want to collect the entire set of dispatches before executing event a
	 * single one.
	 *
	 * @constructor EventPropagators
	 */
	var EventPropagators = {
	  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
	  accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
	  accumulateDirectDispatches: accumulateDirectDispatches,
	  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
	};

	module.exports = EventPropagators;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginHub
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(8);

	var EventPluginRegistry = __webpack_require__(46);
	var EventPluginUtils = __webpack_require__(47);
	var ReactErrorUtils = __webpack_require__(48);

	var accumulateInto = __webpack_require__(49);
	var forEachAccumulated = __webpack_require__(50);
	var invariant = __webpack_require__(9);

	/**
	 * Internal store for event listeners
	 */
	var listenerBank = {};

	/**
	 * Internal queue of events that have accumulated their dispatches and are
	 * waiting to have their dispatches executed.
	 */
	var eventQueue = null;

	/**
	 * Dispatches an event and releases it back into the pool, unless persistent.
	 *
	 * @param {?object} event Synthetic event to be dispatched.
	 * @param {boolean} simulated If the event is simulated (changes exn behavior)
	 * @private
	 */
	var executeDispatchesAndRelease = function (event, simulated) {
	  if (event) {
	    EventPluginUtils.executeDispatchesInOrder(event, simulated);

	    if (!event.isPersistent()) {
	      event.constructor.release(event);
	    }
	  }
	};
	var executeDispatchesAndReleaseSimulated = function (e) {
	  return executeDispatchesAndRelease(e, true);
	};
	var executeDispatchesAndReleaseTopLevel = function (e) {
	  return executeDispatchesAndRelease(e, false);
	};

	var getDictionaryKey = function (inst) {
	  return '.' + inst._rootNodeID;
	};

	/**
	 * This is a unified interface for event plugins to be installed and configured.
	 *
	 * Event plugins can implement the following properties:
	 *
	 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
	 *     Required. When a top-level event is fired, this method is expected to
	 *     extract synthetic events that will in turn be queued and dispatched.
	 *
	 *   `eventTypes` {object}
	 *     Optional, plugins that fire events must publish a mapping of registration
	 *     names that are used to register listeners. Values of this mapping must
	 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
	 *
	 *   `executeDispatch` {function(object, function, string)}
	 *     Optional, allows plugins to override how an event gets dispatched. By
	 *     default, the listener is simply invoked.
	 *
	 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
	 *
	 * @public
	 */
	var EventPluginHub = {

	  /**
	   * Methods for injecting dependencies.
	   */
	  injection: {

	    /**
	     * @param {array} InjectedEventPluginOrder
	     * @public
	     */
	    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

	    /**
	     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	     */
	    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName

	  },

	  /**
	   * Stores `listener` at `listenerBank[registrationName][key]`. Is idempotent.
	   *
	   * @param {object} inst The instance, which is the source of events.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {function} listener The callback to store.
	   */
	  putListener: function (inst, registrationName, listener) {
	    !(typeof listener === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener) : _prodInvariant('94', registrationName, typeof listener) : void 0;

	    var key = getDictionaryKey(inst);
	    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});
	    bankForRegistrationName[key] = listener;

	    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	    if (PluginModule && PluginModule.didPutListener) {
	      PluginModule.didPutListener(inst, registrationName, listener);
	    }
	  },

	  /**
	   * @param {object} inst The instance, which is the source of events.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @return {?function} The stored callback.
	   */
	  getListener: function (inst, registrationName) {
	    var bankForRegistrationName = listenerBank[registrationName];
	    var key = getDictionaryKey(inst);
	    return bankForRegistrationName && bankForRegistrationName[key];
	  },

	  /**
	   * Deletes a listener from the registration bank.
	   *
	   * @param {object} inst The instance, which is the source of events.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   */
	  deleteListener: function (inst, registrationName) {
	    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	    if (PluginModule && PluginModule.willDeleteListener) {
	      PluginModule.willDeleteListener(inst, registrationName);
	    }

	    var bankForRegistrationName = listenerBank[registrationName];
	    // TODO: This should never be null -- when is it?
	    if (bankForRegistrationName) {
	      var key = getDictionaryKey(inst);
	      delete bankForRegistrationName[key];
	    }
	  },

	  /**
	   * Deletes all listeners for the DOM element with the supplied ID.
	   *
	   * @param {object} inst The instance, which is the source of events.
	   */
	  deleteAllListeners: function (inst) {
	    var key = getDictionaryKey(inst);
	    for (var registrationName in listenerBank) {
	      if (!listenerBank.hasOwnProperty(registrationName)) {
	        continue;
	      }

	      if (!listenerBank[registrationName][key]) {
	        continue;
	      }

	      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	      if (PluginModule && PluginModule.willDeleteListener) {
	        PluginModule.willDeleteListener(inst, registrationName);
	      }

	      delete listenerBank[registrationName][key];
	    }
	  },

	  /**
	   * Allows registered plugins an opportunity to extract events from top-level
	   * native browser events.
	   *
	   * @return {*} An accumulation of synthetic events.
	   * @internal
	   */
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var events;
	    var plugins = EventPluginRegistry.plugins;
	    for (var i = 0; i < plugins.length; i++) {
	      // Not every plugin in the ordering may be loaded at runtime.
	      var possiblePlugin = plugins[i];
	      if (possiblePlugin) {
	        var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
	        if (extractedEvents) {
	          events = accumulateInto(events, extractedEvents);
	        }
	      }
	    }
	    return events;
	  },

	  /**
	   * Enqueues a synthetic event that should be dispatched when
	   * `processEventQueue` is invoked.
	   *
	   * @param {*} events An accumulation of synthetic events.
	   * @internal
	   */
	  enqueueEvents: function (events) {
	    if (events) {
	      eventQueue = accumulateInto(eventQueue, events);
	    }
	  },

	  /**
	   * Dispatches all synthetic events on the event queue.
	   *
	   * @internal
	   */
	  processEventQueue: function (simulated) {
	    // Set `eventQueue` to null before processing it so that we can tell if more
	    // events get enqueued while processing.
	    var processingEventQueue = eventQueue;
	    eventQueue = null;
	    if (simulated) {
	      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
	    } else {
	      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
	    }
	    !!eventQueue ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.') : _prodInvariant('95') : void 0;
	    // This would be a good time to rethrow if any of the event handlers threw.
	    ReactErrorUtils.rethrowCaughtError();
	  },

	  /**
	   * These are needed for tests only. Do not use!
	   */
	  __purge: function () {
	    listenerBank = {};
	  },

	  __getListenerBank: function () {
	    return listenerBank;
	  }

	};

	module.exports = EventPluginHub;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginRegistry
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(8);

	var invariant = __webpack_require__(9);

	/**
	 * Injectable ordering of event plugins.
	 */
	var EventPluginOrder = null;

	/**
	 * Injectable mapping from names to event plugin modules.
	 */
	var namesToPlugins = {};

	/**
	 * Recomputes the plugin list using the injected plugins and plugin ordering.
	 *
	 * @private
	 */
	function recomputePluginOrdering() {
	  if (!EventPluginOrder) {
	    // Wait until an `EventPluginOrder` is injected.
	    return;
	  }
	  for (var pluginName in namesToPlugins) {
	    var PluginModule = namesToPlugins[pluginName];
	    var pluginIndex = EventPluginOrder.indexOf(pluginName);
	    !(pluginIndex > -1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.', pluginName) : _prodInvariant('96', pluginName) : void 0;
	    if (EventPluginRegistry.plugins[pluginIndex]) {
	      continue;
	    }
	    !PluginModule.extractEvents ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.', pluginName) : _prodInvariant('97', pluginName) : void 0;
	    EventPluginRegistry.plugins[pluginIndex] = PluginModule;
	    var publishedEvents = PluginModule.eventTypes;
	    for (var eventName in publishedEvents) {
	      !publishEventForPlugin(publishedEvents[eventName], PluginModule, eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : _prodInvariant('98', eventName, pluginName) : void 0;
	    }
	  }
	}

	/**
	 * Publishes an event so that it can be dispatched by the supplied plugin.
	 *
	 * @param {object} dispatchConfig Dispatch configuration for the event.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @return {boolean} True if the event was successfully published.
	 * @private
	 */
	function publishEventForPlugin(dispatchConfig, PluginModule, eventName) {
	  !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.', eventName) : _prodInvariant('99', eventName) : void 0;
	  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

	  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
	  if (phasedRegistrationNames) {
	    for (var phaseName in phasedRegistrationNames) {
	      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
	        var phasedRegistrationName = phasedRegistrationNames[phaseName];
	        publishRegistrationName(phasedRegistrationName, PluginModule, eventName);
	      }
	    }
	    return true;
	  } else if (dispatchConfig.registrationName) {
	    publishRegistrationName(dispatchConfig.registrationName, PluginModule, eventName);
	    return true;
	  }
	  return false;
	}

	/**
	 * Publishes a registration name that is used to identify dispatched events and
	 * can be used with `EventPluginHub.putListener` to register listeners.
	 *
	 * @param {string} registrationName Registration name to add.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @private
	 */
	function publishRegistrationName(registrationName, PluginModule, eventName) {
	  !!EventPluginRegistry.registrationNameModules[registrationName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.', registrationName) : _prodInvariant('100', registrationName) : void 0;
	  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;
	  EventPluginRegistry.registrationNameDependencies[registrationName] = PluginModule.eventTypes[eventName].dependencies;

	  if (process.env.NODE_ENV !== 'production') {
	    var lowerCasedName = registrationName.toLowerCase();
	    EventPluginRegistry.possibleRegistrationNames[lowerCasedName] = registrationName;

	    if (registrationName === 'onDoubleClick') {
	      EventPluginRegistry.possibleRegistrationNames.ondblclick = registrationName;
	    }
	  }
	}

	/**
	 * Registers plugins so that they can extract and dispatch events.
	 *
	 * @see {EventPluginHub}
	 */
	var EventPluginRegistry = {

	  /**
	   * Ordered list of injected plugins.
	   */
	  plugins: [],

	  /**
	   * Mapping from event name to dispatch config
	   */
	  eventNameDispatchConfigs: {},

	  /**
	   * Mapping from registration name to plugin module
	   */
	  registrationNameModules: {},

	  /**
	   * Mapping from registration name to event name
	   */
	  registrationNameDependencies: {},

	  /**
	   * Mapping from lowercase registration names to the properly cased version,
	   * used to warn in the case of missing event handlers. Available
	   * only in __DEV__.
	   * @type {Object}
	   */
	  possibleRegistrationNames: process.env.NODE_ENV !== 'production' ? {} : null,

	  /**
	   * Injects an ordering of plugins (by plugin name). This allows the ordering
	   * to be decoupled from injection of the actual plugins so that ordering is
	   * always deterministic regardless of packaging, on-the-fly injection, etc.
	   *
	   * @param {array} InjectedEventPluginOrder
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginOrder}
	   */
	  injectEventPluginOrder: function (InjectedEventPluginOrder) {
	    !!EventPluginOrder ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.') : _prodInvariant('101') : void 0;
	    // Clone the ordering so it cannot be dynamically mutated.
	    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);
	    recomputePluginOrdering();
	  },

	  /**
	   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
	   * in the ordering injected by `injectEventPluginOrder`.
	   *
	   * Plugins can be injected as part of page initialization or on-the-fly.
	   *
	   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginsByName}
	   */
	  injectEventPluginsByName: function (injectedNamesToPlugins) {
	    var isOrderingDirty = false;
	    for (var pluginName in injectedNamesToPlugins) {
	      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
	        continue;
	      }
	      var PluginModule = injectedNamesToPlugins[pluginName];
	      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== PluginModule) {
	        !!namesToPlugins[pluginName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.', pluginName) : _prodInvariant('102', pluginName) : void 0;
	        namesToPlugins[pluginName] = PluginModule;
	        isOrderingDirty = true;
	      }
	    }
	    if (isOrderingDirty) {
	      recomputePluginOrdering();
	    }
	  },

	  /**
	   * Looks up the plugin for the supplied event.
	   *
	   * @param {object} event A synthetic event.
	   * @return {?object} The plugin that created the supplied event.
	   * @internal
	   */
	  getPluginModuleForEvent: function (event) {
	    var dispatchConfig = event.dispatchConfig;
	    if (dispatchConfig.registrationName) {
	      return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;
	    }
	    for (var phase in dispatchConfig.phasedRegistrationNames) {
	      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {
	        continue;
	      }
	      var PluginModule = EventPluginRegistry.registrationNameModules[dispatchConfig.phasedRegistrationNames[phase]];
	      if (PluginModule) {
	        return PluginModule;
	      }
	    }
	    return null;
	  },

	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _resetEventPlugins: function () {
	    EventPluginOrder = null;
	    for (var pluginName in namesToPlugins) {
	      if (namesToPlugins.hasOwnProperty(pluginName)) {
	        delete namesToPlugins[pluginName];
	      }
	    }
	    EventPluginRegistry.plugins.length = 0;

	    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
	    for (var eventName in eventNameDispatchConfigs) {
	      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
	        delete eventNameDispatchConfigs[eventName];
	      }
	    }

	    var registrationNameModules = EventPluginRegistry.registrationNameModules;
	    for (var registrationName in registrationNameModules) {
	      if (registrationNameModules.hasOwnProperty(registrationName)) {
	        delete registrationNameModules[registrationName];
	      }
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      var possibleRegistrationNames = EventPluginRegistry.possibleRegistrationNames;
	      for (var lowerCasedName in possibleRegistrationNames) {
	        if (possibleRegistrationNames.hasOwnProperty(lowerCasedName)) {
	          delete possibleRegistrationNames[lowerCasedName];
	        }
	      }
	    }
	  }

	};

	module.exports = EventPluginRegistry;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginUtils
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(8);

	var EventConstants = __webpack_require__(43);
	var ReactErrorUtils = __webpack_require__(48);

	var invariant = __webpack_require__(9);
	var warning = __webpack_require__(12);

	/**
	 * Injected dependencies:
	 */

	/**
	 * - `ComponentTree`: [required] Module that can convert between React instances
	 *   and actual node references.
	 */
	var ComponentTree;
	var TreeTraversal;
	var injection = {
	  injectComponentTree: function (Injected) {
	    ComponentTree = Injected;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(Injected && Injected.getNodeFromInstance && Injected.getInstanceFromNode, 'EventPluginUtils.injection.injectComponentTree(...): Injected ' + 'module is missing getNodeFromInstance or getInstanceFromNode.') : void 0;
	    }
	  },
	  injectTreeTraversal: function (Injected) {
	    TreeTraversal = Injected;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(Injected && Injected.isAncestor && Injected.getLowestCommonAncestor, 'EventPluginUtils.injection.injectTreeTraversal(...): Injected ' + 'module is missing isAncestor or getLowestCommonAncestor.') : void 0;
	    }
	  }
	};

	var topLevelTypes = EventConstants.topLevelTypes;

	function isEndish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseUp || topLevelType === topLevelTypes.topTouchEnd || topLevelType === topLevelTypes.topTouchCancel;
	}

	function isMoveish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseMove || topLevelType === topLevelTypes.topTouchMove;
	}
	function isStartish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseDown || topLevelType === topLevelTypes.topTouchStart;
	}

	var validateEventDispatches;
	if (process.env.NODE_ENV !== 'production') {
	  validateEventDispatches = function (event) {
	    var dispatchListeners = event._dispatchListeners;
	    var dispatchInstances = event._dispatchInstances;

	    var listenersIsArr = Array.isArray(dispatchListeners);
	    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;

	    var instancesIsArr = Array.isArray(dispatchInstances);
	    var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;

	    process.env.NODE_ENV !== 'production' ? warning(instancesIsArr === listenersIsArr && instancesLen === listenersLen, 'EventPluginUtils: Invalid `event`.') : void 0;
	  };
	}

	/**
	 * Dispatch the event to the listener.
	 * @param {SyntheticEvent} event SyntheticEvent to handle
	 * @param {boolean} simulated If the event is simulated (changes exn behavior)
	 * @param {function} listener Application-level callback
	 * @param {*} inst Internal component instance
	 */
	function executeDispatch(event, simulated, listener, inst) {
	  var type = event.type || 'unknown-event';
	  event.currentTarget = EventPluginUtils.getNodeFromInstance(inst);
	  if (simulated) {
	    ReactErrorUtils.invokeGuardedCallbackWithCatch(type, listener, event);
	  } else {
	    ReactErrorUtils.invokeGuardedCallback(type, listener, event);
	  }
	  event.currentTarget = null;
	}

	/**
	 * Standard/simple iteration through an event's collected dispatches.
	 */
	function executeDispatchesInOrder(event, simulated) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchInstances = event._dispatchInstances;
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and Instances are two parallel arrays that are always in sync.
	      executeDispatch(event, simulated, dispatchListeners[i], dispatchInstances[i]);
	    }
	  } else if (dispatchListeners) {
	    executeDispatch(event, simulated, dispatchListeners, dispatchInstances);
	  }
	  event._dispatchListeners = null;
	  event._dispatchInstances = null;
	}

	/**
	 * Standard/simple iteration through an event's collected dispatches, but stops
	 * at the first dispatch execution returning true, and returns that id.
	 *
	 * @return {?string} id of the first dispatch execution who's listener returns
	 * true, or null if no listener returned true.
	 */
	function executeDispatchesInOrderStopAtTrueImpl(event) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchInstances = event._dispatchInstances;
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and Instances are two parallel arrays that are always in sync.
	      if (dispatchListeners[i](event, dispatchInstances[i])) {
	        return dispatchInstances[i];
	      }
	    }
	  } else if (dispatchListeners) {
	    if (dispatchListeners(event, dispatchInstances)) {
	      return dispatchInstances;
	    }
	  }
	  return null;
	}

	/**
	 * @see executeDispatchesInOrderStopAtTrueImpl
	 */
	function executeDispatchesInOrderStopAtTrue(event) {
	  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
	  event._dispatchInstances = null;
	  event._dispatchListeners = null;
	  return ret;
	}

	/**
	 * Execution of a "direct" dispatch - there must be at most one dispatch
	 * accumulated on the event or it is considered an error. It doesn't really make
	 * sense for an event with multiple dispatches (bubbled) to keep track of the
	 * return values at each dispatch execution, but it does tend to make sense when
	 * dealing with "direct" dispatches.
	 *
	 * @return {*} The return value of executing the single dispatch.
	 */
	function executeDirectDispatch(event) {
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  var dispatchListener = event._dispatchListeners;
	  var dispatchInstance = event._dispatchInstances;
	  !!Array.isArray(dispatchListener) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'executeDirectDispatch(...): Invalid `event`.') : _prodInvariant('103') : void 0;
	  event.currentTarget = dispatchListener ? EventPluginUtils.getNodeFromInstance(dispatchInstance) : null;
	  var res = dispatchListener ? dispatchListener(event) : null;
	  event.currentTarget = null;
	  event._dispatchListeners = null;
	  event._dispatchInstances = null;
	  return res;
	}

	/**
	 * @param {SyntheticEvent} event
	 * @return {boolean} True iff number of dispatches accumulated is greater than 0.
	 */
	function hasDispatches(event) {
	  return !!event._dispatchListeners;
	}

	/**
	 * General utilities that are useful in creating custom Event Plugins.
	 */
	var EventPluginUtils = {
	  isEndish: isEndish,
	  isMoveish: isMoveish,
	  isStartish: isStartish,

	  executeDirectDispatch: executeDirectDispatch,
	  executeDispatchesInOrder: executeDispatchesInOrder,
	  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
	  hasDispatches: hasDispatches,

	  getInstanceFromNode: function (node) {
	    return ComponentTree.getInstanceFromNode(node);
	  },
	  getNodeFromInstance: function (node) {
	    return ComponentTree.getNodeFromInstance(node);
	  },
	  isAncestor: function (a, b) {
	    return TreeTraversal.isAncestor(a, b);
	  },
	  getLowestCommonAncestor: function (a, b) {
	    return TreeTraversal.getLowestCommonAncestor(a, b);
	  },
	  getParentInstance: function (inst) {
	    return TreeTraversal.getParentInstance(inst);
	  },
	  traverseTwoPhase: function (target, fn, arg) {
	    return TreeTraversal.traverseTwoPhase(target, fn, arg);
	  },
	  traverseEnterLeave: function (from, to, fn, argFrom, argTo) {
	    return TreeTraversal.traverseEnterLeave(from, to, fn, argFrom, argTo);
	  },

	  injection: injection
	};

	module.exports = EventPluginUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactErrorUtils
	 */

	'use strict';

	var caughtError = null;

	/**
	 * Call a function while guarding against errors that happens within it.
	 *
	 * @param {?String} name of the guard to use for logging or debugging
	 * @param {Function} func The function to invoke
	 * @param {*} a First argument
	 * @param {*} b Second argument
	 */
	function invokeGuardedCallback(name, func, a, b) {
	  try {
	    return func(a, b);
	  } catch (x) {
	    if (caughtError === null) {
	      caughtError = x;
	    }
	    return undefined;
	  }
	}

	var ReactErrorUtils = {
	  invokeGuardedCallback: invokeGuardedCallback,

	  /**
	   * Invoked by ReactTestUtils.Simulate so that any errors thrown by the event
	   * handler are sure to be rethrown by rethrowCaughtError.
	   */
	  invokeGuardedCallbackWithCatch: invokeGuardedCallback,

	  /**
	   * During execution of guarded functions we will capture the first error which
	   * we will rethrow to be handled by the top level error handler.
	   */
	  rethrowCaughtError: function () {
	    if (caughtError) {
	      var error = caughtError;
	      caughtError = null;
	      throw error;
	    }
	  }
	};

	if (process.env.NODE_ENV !== 'production') {
	  /**
	   * To help development we can get better devtools integration by simulating a
	   * real browser event.
	   */
	  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
	    var fakeNode = document.createElement('react');
	    ReactErrorUtils.invokeGuardedCallback = function (name, func, a, b) {
	      var boundFunc = func.bind(null, a, b);
	      var evtType = 'react-' + name;
	      fakeNode.addEventListener(evtType, boundFunc, false);
	      var evt = document.createEvent('Event');
	      evt.initEvent(evtType, false, false);
	      fakeNode.dispatchEvent(evt);
	      fakeNode.removeEventListener(evtType, boundFunc, false);
	    };
	  }
	}

	module.exports = ReactErrorUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule accumulateInto
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(8);

	var invariant = __webpack_require__(9);

	/**
	 * Accumulates items that must not be null or undefined into the first one. This
	 * is used to conserve memory by avoiding array allocations, and thus sacrifices
	 * API cleanness. Since `current` can be null before being passed in and not
	 * null after this function, make sure to assign it back to `current`:
	 *
	 * `a = accumulateInto(a, b);`
	 *
	 * This API should be sparingly used. Try `accumulate` for something cleaner.
	 *
	 * @return {*|array<*>} An accumulation of items.
	 */

	function accumulateInto(current, next) {
	  !(next != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : _prodInvariant('30') : void 0;

	  if (current == null) {
	    return next;
	  }

	  // Both are not empty. Warning: Never call x.concat(y) when you are not
	  // certain that x is an Array (x could be a string with concat method).
	  if (Array.isArray(current)) {
	    if (Array.isArray(next)) {
	      current.push.apply(current, next);
	      return current;
	    }
	    current.push(next);
	    return current;
	  }

	  if (Array.isArray(next)) {
	    // A bit too dangerous to mutate `next`.
	    return [current].concat(next);
	  }

	  return [current, next];
	}

	module.exports = accumulateInto;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 50 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule forEachAccumulated
	 * 
	 */

	'use strict';

	/**
	 * @param {array} arr an "accumulation" of items which is either an Array or
	 * a single item. Useful when paired with the `accumulate` module. This is a
	 * simple utility that allows us to reason about a collection of items, but
	 * handling the case when there is exactly one item (and we do not need to
	 * allocate an array).
	 */

	function forEachAccumulated(arr, cb, scope) {
	  if (Array.isArray(arr)) {
	    arr.forEach(cb, scope);
	  } else if (arr) {
	    cb.call(scope, arr);
	  }
	}

	module.exports = forEachAccumulated;

/***/ }),
/* 51 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

	/**
	 * Simple, lightweight module assisting with the detection and context of
	 * Worker. Helps avoid circular dependencies and allows code to reason about
	 * whether or not they are in a Worker, even if they never include the main
	 * `ReactWorker` dependency.
	 */
	var ExecutionEnvironment = {

	  canUseDOM: canUseDOM,

	  canUseWorkers: typeof Worker !== 'undefined',

	  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),

	  canUseViewport: canUseDOM && !!window.screen,

	  isInWorker: !canUseDOM // For now, this is true - might change in the future.

	};

	module.exports = ExecutionEnvironment;

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule FallbackCompositionState
	 */

	'use strict';

	var _assign = __webpack_require__(5);

	var PooledClass = __webpack_require__(7);

	var getTextContentAccessor = __webpack_require__(53);

	/**
	 * This helper class stores information about text content of a target node,
	 * allowing comparison of content before and after a given event.
	 *
	 * Identify the node where selection currently begins, then observe
	 * both its text content and its current position in the DOM. Since the
	 * browser may natively replace the target node during composition, we can
	 * use its position to find its replacement.
	 *
	 * @param {DOMEventTarget} root
	 */
	function FallbackCompositionState(root) {
	  this._root = root;
	  this._startText = this.getText();
	  this._fallbackText = null;
	}

	_assign(FallbackCompositionState.prototype, {
	  destructor: function () {
	    this._root = null;
	    this._startText = null;
	    this._fallbackText = null;
	  },

	  /**
	   * Get current text of input.
	   *
	   * @return {string}
	   */
	  getText: function () {
	    if ('value' in this._root) {
	      return this._root.value;
	    }
	    return this._root[getTextContentAccessor()];
	  },

	  /**
	   * Determine the differing substring between the initially stored
	   * text content and the current content.
	   *
	   * @return {string}
	   */
	  getData: function () {
	    if (this._fallbackText) {
	      return this._fallbackText;
	    }

	    var start;
	    var startValue = this._startText;
	    var startLength = startValue.length;
	    var end;
	    var endValue = this.getText();
	    var endLength = endValue.length;

	    for (start = 0; start < startLength; start++) {
	      if (startValue[start] !== endValue[start]) {
	        break;
	      }
	    }

	    var minEnd = startLength - start;
	    for (end = 1; end <= minEnd; end++) {
	      if (startValue[startLength - end] !== endValue[endLength - end]) {
	        break;
	      }
	    }

	    var sliceTail = end > 1 ? 1 - end : undefined;
	    this._fallbackText = endValue.slice(start, sliceTail);
	    return this._fallbackText;
	  }
	});

	PooledClass.addPoolingTo(FallbackCompositionState);

	module.exports = FallbackCompositionState;

/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getTextContentAccessor
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(51);

	var contentKey = null;

	/**
	 * Gets the key used to access text content on a DOM node.
	 *
	 * @return {?string} Key used to access text content.
	 * @internal
	 */
	function getTextContentAccessor() {
	  if (!contentKey && ExecutionEnvironment.canUseDOM) {
	    // Prefer textContent to innerText because many browsers support both but
	    // SVG <text> elements don't support innerText even when <div> does.
	    contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';
	  }
	  return contentKey;
	}

	module.exports = getTextContentAccessor;

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticCompositionEvent
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(55);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
	 */
	var CompositionEventInterface = {
	  data: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);

	module.exports = SyntheticCompositionEvent;

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticEvent
	 */

	'use strict';

	var _assign = __webpack_require__(5);

	var PooledClass = __webpack_require__(7);

	var emptyFunction = __webpack_require__(13);
	var warning = __webpack_require__(12);

	var didWarnForAddedNewProperty = false;
	var isProxySupported = typeof Proxy === 'function';

	var shouldBeReleasedProperties = ['dispatchConfig', '_targetInst', 'nativeEvent', 'isDefaultPrevented', 'isPropagationStopped', '_dispatchListeners', '_dispatchInstances'];

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var EventInterface = {
	  type: null,
	  target: null,
	  // currentTarget is set when dispatching; no use in copying it here
	  currentTarget: emptyFunction.thatReturnsNull,
	  eventPhase: null,
	  bubbles: null,
	  cancelable: null,
	  timeStamp: function (event) {
	    return event.timeStamp || Date.now();
	  },
	  defaultPrevented: null,
	  isTrusted: null
	};

	/**
	 * Synthetic events are dispatched by event plugins, typically in response to a
	 * top-level event delegation handler.
	 *
	 * These systems should generally use pooling to reduce the frequency of garbage
	 * collection. The system should check `isPersistent` to determine whether the
	 * event should be released into the pool after being dispatched. Users that
	 * need a persisted event should invoke `persist`.
	 *
	 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
	 * normalizing browser quirks. Subclasses do not necessarily have to implement a
	 * DOM interface; custom application-specific events can also subclass this.
	 *
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {*} targetInst Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @param {DOMEventTarget} nativeEventTarget Target node.
	 */
	function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
	  if (process.env.NODE_ENV !== 'production') {
	    // these have a getter/setter for warnings
	    delete this.nativeEvent;
	    delete this.preventDefault;
	    delete this.stopPropagation;
	  }

	  this.dispatchConfig = dispatchConfig;
	  this._targetInst = targetInst;
	  this.nativeEvent = nativeEvent;

	  var Interface = this.constructor.Interface;
	  for (var propName in Interface) {
	    if (!Interface.hasOwnProperty(propName)) {
	      continue;
	    }
	    if (process.env.NODE_ENV !== 'production') {
	      delete this[propName]; // this has a getter/setter for warnings
	    }
	    var normalize = Interface[propName];
	    if (normalize) {
	      this[propName] = normalize(nativeEvent);
	    } else {
	      if (propName === 'target') {
	        this.target = nativeEventTarget;
	      } else {
	        this[propName] = nativeEvent[propName];
	      }
	    }
	  }

	  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
	  if (defaultPrevented) {
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  } else {
	    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
	  }
	  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
	  return this;
	}

	_assign(SyntheticEvent.prototype, {

	  preventDefault: function () {
	    this.defaultPrevented = true;
	    var event = this.nativeEvent;
	    if (!event) {
	      return;
	    }

	    if (event.preventDefault) {
	      event.preventDefault();
	    } else {
	      event.returnValue = false;
	    }
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  },

	  stopPropagation: function () {
	    var event = this.nativeEvent;
	    if (!event) {
	      return;
	    }

	    if (event.stopPropagation) {
	      event.stopPropagation();
	    } else {
	      event.cancelBubble = true;
	    }
	    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
	  },

	  /**
	   * We release all dispatched `SyntheticEvent`s after each event loop, adding
	   * them back into the pool. This allows a way to hold onto a reference that
	   * won't be added back into the pool.
	   */
	  persist: function () {
	    this.isPersistent = emptyFunction.thatReturnsTrue;
	  },

	  /**
	   * Checks if this event should be released back into the pool.
	   *
	   * @return {boolean} True if this should not be released, false otherwise.
	   */
	  isPersistent: emptyFunction.thatReturnsFalse,

	  /**
	   * `PooledClass` looks for `destructor` on each instance it releases.
	   */
	  destructor: function () {
	    var Interface = this.constructor.Interface;
	    for (var propName in Interface) {
	      if (process.env.NODE_ENV !== 'production') {
	        Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
	      } else {
	        this[propName] = null;
	      }
	    }
	    for (var i = 0; i < shouldBeReleasedProperties.length; i++) {
	      this[shouldBeReleasedProperties[i]] = null;
	    }
	    if (process.env.NODE_ENV !== 'production') {
	      Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));
	      Object.defineProperty(this, 'preventDefault', getPooledWarningPropertyDefinition('preventDefault', emptyFunction));
	      Object.defineProperty(this, 'stopPropagation', getPooledWarningPropertyDefinition('stopPropagation', emptyFunction));
	    }
	  }

	});

	SyntheticEvent.Interface = EventInterface;

	if (process.env.NODE_ENV !== 'production') {
	  if (isProxySupported) {
	    /*eslint-disable no-func-assign */
	    SyntheticEvent = new Proxy(SyntheticEvent, {
	      construct: function (target, args) {
	        return this.apply(target, Object.create(target.prototype), args);
	      },
	      apply: function (constructor, that, args) {
	        return new Proxy(constructor.apply(that, args), {
	          set: function (target, prop, value) {
	            if (prop !== 'isPersistent' && !target.constructor.Interface.hasOwnProperty(prop) && shouldBeReleasedProperties.indexOf(prop) === -1) {
	              process.env.NODE_ENV !== 'production' ? warning(didWarnForAddedNewProperty || target.isPersistent(), 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re adding a new property in the synthetic event object. ' + 'The property is never released. See ' + 'https://fb.me/react-event-pooling for more information.') : void 0;
	              didWarnForAddedNewProperty = true;
	            }
	            target[prop] = value;
	            return true;
	          }
	        });
	      }
	    });
	    /*eslint-enable no-func-assign */
	  }
	}
	/**
	 * Helper to reduce boilerplate when creating subclasses.
	 *
	 * @param {function} Class
	 * @param {?object} Interface
	 */
	SyntheticEvent.augmentClass = function (Class, Interface) {
	  var Super = this;

	  var E = function () {};
	  E.prototype = Super.prototype;
	  var prototype = new E();

	  _assign(prototype, Class.prototype);
	  Class.prototype = prototype;
	  Class.prototype.constructor = Class;

	  Class.Interface = _assign({}, Super.Interface, Interface);
	  Class.augmentClass = Super.augmentClass;

	  PooledClass.addPoolingTo(Class, PooledClass.fourArgumentPooler);
	};

	PooledClass.addPoolingTo(SyntheticEvent, PooledClass.fourArgumentPooler);

	module.exports = SyntheticEvent;

	/**
	  * Helper to nullify syntheticEvent instance properties when destructing
	  *
	  * @param {object} SyntheticEvent
	  * @param {String} propName
	  * @return {object} defineProperty object
	  */
	function getPooledWarningPropertyDefinition(propName, getVal) {
	  var isFunction = typeof getVal === 'function';
	  return {
	    configurable: true,
	    set: set,
	    get: get
	  };

	  function set(val) {
	    var action = isFunction ? 'setting the method' : 'setting the property';
	    warn(action, 'This is effectively a no-op');
	    return val;
	  }

	  function get() {
	    var action = isFunction ? 'accessing the method' : 'accessing the property';
	    var result = isFunction ? 'This is a no-op function' : 'This is set to null';
	    warn(action, result);
	    return getVal;
	  }

	  function warn(action, result) {
	    var warningCondition = false;
	    process.env.NODE_ENV !== 'production' ? warning(warningCondition, 'This synthetic event is reused for performance reasons. If you\'re seeing this, ' + 'you\'re %s `%s` on a released/nullified synthetic event. %s. ' + 'If you must keep the original synthetic event around, use event.persist(). ' + 'See https://fb.me/react-event-pooling for more information.', action, propName, result) : void 0;
	  }
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticInputEvent
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(55);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
	 *      /#events-inputevents
	 */
	var InputEventInterface = {
	  data: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticInputEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticInputEvent, InputEventInterface);

	module.exports = SyntheticInputEvent;

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ChangeEventPlugin
	 */

	'use strict';

	var EventConstants = __webpack_require__(43);
	var EventPluginHub = __webpack_require__(45);
	var EventPropagators = __webpack_require__(44);
	var ExecutionEnvironment = __webpack_require__(51);
	var ReactDOMComponentTree = __webpack_require__(38);
	var ReactUpdates = __webpack_require__(58);
	var SyntheticEvent = __webpack_require__(55);

	var getEventTarget = __webpack_require__(72);
	var isEventSupported = __webpack_require__(73);
	var isTextInputElement = __webpack_require__(74);
	var keyOf = __webpack_require__(26);

	var topLevelTypes = EventConstants.topLevelTypes;

	var eventTypes = {
	  change: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onChange: null }),
	      captured: keyOf({ onChangeCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topChange, topLevelTypes.topClick, topLevelTypes.topFocus, topLevelTypes.topInput, topLevelTypes.topKeyDown, topLevelTypes.topKeyUp, topLevelTypes.topSelectionChange]
	  }
	};

	/**
	 * For IE shims
	 */
	var activeElement = null;
	var activeElementInst = null;
	var activeElementValue = null;
	var activeElementValueProp = null;

	/**
	 * SECTION: handle `change` event
	 */
	function shouldUseChangeEvent(elem) {
	  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
	  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
	}

	var doesChangeEventBubble = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // See `handleChange` comment below
	  doesChangeEventBubble = isEventSupported('change') && (!('documentMode' in document) || document.documentMode > 8);
	}

	function manualDispatchChangeEvent(nativeEvent) {
	  var event = SyntheticEvent.getPooled(eventTypes.change, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
	  EventPropagators.accumulateTwoPhaseDispatches(event);

	  // If change and propertychange bubbled, we'd just bind to it like all the
	  // other events and have it go through ReactBrowserEventEmitter. Since it
	  // doesn't, we manually listen for the events and so we have to enqueue and
	  // process the abstract event manually.
	  //
	  // Batching is necessary here in order to ensure that all event handlers run
	  // before the next rerender (including event handlers attached to ancestor
	  // elements instead of directly on the input). Without this, controlled
	  // components don't work properly in conjunction with event bubbling because
	  // the component is rerendered and the value reverted before all the event
	  // handlers can run. See https://github.com/facebook/react/issues/708.
	  ReactUpdates.batchedUpdates(runEventInBatch, event);
	}

	function runEventInBatch(event) {
	  EventPluginHub.enqueueEvents(event);
	  EventPluginHub.processEventQueue(false);
	}

	function startWatchingForChangeEventIE8(target, targetInst) {
	  activeElement = target;
	  activeElementInst = targetInst;
	  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
	}

	function stopWatchingForChangeEventIE8() {
	  if (!activeElement) {
	    return;
	  }
	  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
	  activeElement = null;
	  activeElementInst = null;
	}

	function getTargetInstForChangeEvent(topLevelType, targetInst) {
	  if (topLevelType === topLevelTypes.topChange) {
	    return targetInst;
	  }
	}
	function handleEventsForChangeEventIE8(topLevelType, target, targetInst) {
	  if (topLevelType === topLevelTypes.topFocus) {
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForChangeEventIE8();
	    startWatchingForChangeEventIE8(target, targetInst);
	  } else if (topLevelType === topLevelTypes.topBlur) {
	    stopWatchingForChangeEventIE8();
	  }
	}

	/**
	 * SECTION: handle `input` event
	 */
	var isInputEventSupported = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // IE9 claims to support the input event but fails to trigger it when
	  // deleting text, so we ignore its input events.
	  // IE10+ fire input events to often, such when a placeholder
	  // changes or when an input with a placeholder is focused.
	  isInputEventSupported = isEventSupported('input') && (!('documentMode' in document) || document.documentMode > 11);
	}

	/**
	 * (For IE <=11) Replacement getter/setter for the `value` property that gets
	 * set on the active element.
	 */
	var newValueProp = {
	  get: function () {
	    return activeElementValueProp.get.call(this);
	  },
	  set: function (val) {
	    // Cast to a string so we can do equality checks.
	    activeElementValue = '' + val;
	    activeElementValueProp.set.call(this, val);
	  }
	};

	/**
	 * (For IE <=11) Starts tracking propertychange events on the passed-in element
	 * and override the value property so that we can distinguish user events from
	 * value changes in JS.
	 */
	function startWatchingForValueChange(target, targetInst) {
	  activeElement = target;
	  activeElementInst = targetInst;
	  activeElementValue = target.value;
	  activeElementValueProp = Object.getOwnPropertyDescriptor(target.constructor.prototype, 'value');

	  // Not guarded in a canDefineProperty check: IE8 supports defineProperty only
	  // on DOM elements
	  Object.defineProperty(activeElement, 'value', newValueProp);
	  if (activeElement.attachEvent) {
	    activeElement.attachEvent('onpropertychange', handlePropertyChange);
	  } else {
	    activeElement.addEventListener('propertychange', handlePropertyChange, false);
	  }
	}

	/**
	 * (For IE <=11) Removes the event listeners from the currently-tracked element,
	 * if any exists.
	 */
	function stopWatchingForValueChange() {
	  if (!activeElement) {
	    return;
	  }

	  // delete restores the original property definition
	  delete activeElement.value;

	  if (activeElement.detachEvent) {
	    activeElement.detachEvent('onpropertychange', handlePropertyChange);
	  } else {
	    activeElement.removeEventListener('propertychange', handlePropertyChange, false);
	  }

	  activeElement = null;
	  activeElementInst = null;
	  activeElementValue = null;
	  activeElementValueProp = null;
	}

	/**
	 * (For IE <=11) Handles a propertychange event, sending a `change` event if
	 * the value of the active element has changed.
	 */
	function handlePropertyChange(nativeEvent) {
	  if (nativeEvent.propertyName !== 'value') {
	    return;
	  }
	  var value = nativeEvent.srcElement.value;
	  if (value === activeElementValue) {
	    return;
	  }
	  activeElementValue = value;

	  manualDispatchChangeEvent(nativeEvent);
	}

	/**
	 * If a `change` event should be fired, returns the target's ID.
	 */
	function getTargetInstForInputEvent(topLevelType, targetInst) {
	  if (topLevelType === topLevelTypes.topInput) {
	    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
	    // what we want so fall through here and trigger an abstract event
	    return targetInst;
	  }
	}

	function handleEventsForInputEventIE(topLevelType, target, targetInst) {
	  if (topLevelType === topLevelTypes.topFocus) {
	    // In IE8, we can capture almost all .value changes by adding a
	    // propertychange handler and looking for events with propertyName
	    // equal to 'value'
	    // In IE9-11, propertychange fires for most input events but is buggy and
	    // doesn't fire when text is deleted, but conveniently, selectionchange
	    // appears to fire in all of the remaining cases so we catch those and
	    // forward the event if the value has changed
	    // In either case, we don't want to call the event handler if the value
	    // is changed from JS so we redefine a setter for `.value` that updates
	    // our activeElementValue variable, allowing us to ignore those changes
	    //
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForValueChange();
	    startWatchingForValueChange(target, targetInst);
	  } else if (topLevelType === topLevelTypes.topBlur) {
	    stopWatchingForValueChange();
	  }
	}

	// For IE8 and IE9.
	function getTargetInstForInputEventIE(topLevelType, targetInst) {
	  if (topLevelType === topLevelTypes.topSelectionChange || topLevelType === topLevelTypes.topKeyUp || topLevelType === topLevelTypes.topKeyDown) {
	    // On the selectionchange event, the target is just document which isn't
	    // helpful for us so just check activeElement instead.
	    //
	    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
	    // propertychange on the first input event after setting `value` from a
	    // script and fires only keydown, keypress, keyup. Catching keyup usually
	    // gets it and catching keydown lets us fire an event for the first
	    // keystroke if user does a key repeat (it'll be a little delayed: right
	    // before the second keystroke). Other input methods (e.g., paste) seem to
	    // fire selectionchange normally.
	    if (activeElement && activeElement.value !== activeElementValue) {
	      activeElementValue = activeElement.value;
	      return activeElementInst;
	    }
	  }
	}

	/**
	 * SECTION: handle `click` event
	 */
	function shouldUseClickEvent(elem) {
	  // Use the `click` event to detect changes to checkbox and radio inputs.
	  // This approach works across all browsers, whereas `change` does not fire
	  // until `blur` in IE8.
	  return elem.nodeName && elem.nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
	}

	function getTargetInstForClickEvent(topLevelType, targetInst) {
	  if (topLevelType === topLevelTypes.topClick) {
	    return targetInst;
	  }
	}

	/**
	 * This plugin creates an `onChange` event that normalizes change events
	 * across form elements. This event fires at a time when it's possible to
	 * change the element's value without seeing a flicker.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - select
	 */
	var ChangeEventPlugin = {

	  eventTypes: eventTypes,

	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;

	    var getTargetInstFunc, handleEventFunc;
	    if (shouldUseChangeEvent(targetNode)) {
	      if (doesChangeEventBubble) {
	        getTargetInstFunc = getTargetInstForChangeEvent;
	      } else {
	        handleEventFunc = handleEventsForChangeEventIE8;
	      }
	    } else if (isTextInputElement(targetNode)) {
	      if (isInputEventSupported) {
	        getTargetInstFunc = getTargetInstForInputEvent;
	      } else {
	        getTargetInstFunc = getTargetInstForInputEventIE;
	        handleEventFunc = handleEventsForInputEventIE;
	      }
	    } else if (shouldUseClickEvent(targetNode)) {
	      getTargetInstFunc = getTargetInstForClickEvent;
	    }

	    if (getTargetInstFunc) {
	      var inst = getTargetInstFunc(topLevelType, targetInst);
	      if (inst) {
	        var event = SyntheticEvent.getPooled(eventTypes.change, inst, nativeEvent, nativeEventTarget);
	        event.type = 'change';
	        EventPropagators.accumulateTwoPhaseDispatches(event);
	        return event;
	      }
	    }

	    if (handleEventFunc) {
	      handleEventFunc(topLevelType, targetNode, targetInst);
	    }
	  }

	};

	module.exports = ChangeEventPlugin;

/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactUpdates
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(8),
	    _assign = __webpack_require__(5);

	var CallbackQueue = __webpack_require__(59);
	var PooledClass = __webpack_require__(7);
	var ReactFeatureFlags = __webpack_require__(60);
	var ReactReconciler = __webpack_require__(61);
	var Transaction = __webpack_require__(71);

	var invariant = __webpack_require__(9);

	var dirtyComponents = [];
	var updateBatchNumber = 0;
	var asapCallbackQueue = CallbackQueue.getPooled();
	var asapEnqueued = false;

	var batchingStrategy = null;

	function ensureInjected() {
	  !(ReactUpdates.ReactReconcileTransaction && batchingStrategy) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must inject a reconcile transaction class and batching strategy') : _prodInvariant('123') : void 0;
	}

	var NESTED_UPDATES = {
	  initialize: function () {
	    this.dirtyComponentsLength = dirtyComponents.length;
	  },
	  close: function () {
	    if (this.dirtyComponentsLength !== dirtyComponents.length) {
	      // Additional updates were enqueued by componentDidUpdate handlers or
	      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
	      // these new updates so that if A's componentDidUpdate calls setState on
	      // B, B will update before the callback A's updater provided when calling
	      // setState.
	      dirtyComponents.splice(0, this.dirtyComponentsLength);
	      flushBatchedUpdates();
	    } else {
	      dirtyComponents.length = 0;
	    }
	  }
	};

	var UPDATE_QUEUEING = {
	  initialize: function () {
	    this.callbackQueue.reset();
	  },
	  close: function () {
	    this.callbackQueue.notifyAll();
	  }
	};

	var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

	function ReactUpdatesFlushTransaction() {
	  this.reinitializeTransaction();
	  this.dirtyComponentsLength = null;
	  this.callbackQueue = CallbackQueue.getPooled();
	  this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled(
	  /* useCreateElement */true);
	}

	_assign(ReactUpdatesFlushTransaction.prototype, Transaction.Mixin, {
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },

	  destructor: function () {
	    this.dirtyComponentsLength = null;
	    CallbackQueue.release(this.callbackQueue);
	    this.callbackQueue = null;
	    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
	    this.reconcileTransaction = null;
	  },

	  perform: function (method, scope, a) {
	    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
	    // with this transaction's wrappers around it.
	    return Transaction.Mixin.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);
	  }
	});

	PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

	function batchedUpdates(callback, a, b, c, d, e) {
	  ensureInjected();
	  batchingStrategy.batchedUpdates(callback, a, b, c, d, e);
	}

	/**
	 * Array comparator for ReactComponents by mount ordering.
	 *
	 * @param {ReactComponent} c1 first component you're comparing
	 * @param {ReactComponent} c2 second component you're comparing
	 * @return {number} Return value usable by Array.prototype.sort().
	 */
	function mountOrderComparator(c1, c2) {
	  return c1._mountOrder - c2._mountOrder;
	}

	function runBatchedUpdates(transaction) {
	  var len = transaction.dirtyComponentsLength;
	  !(len === dirtyComponents.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected flush transaction\'s stored dirty-components length (%s) to match dirty-components array length (%s).', len, dirtyComponents.length) : _prodInvariant('124', len, dirtyComponents.length) : void 0;

	  // Since reconciling a component higher in the owner hierarchy usually (not
	  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
	  // them before their children by sorting the array.
	  dirtyComponents.sort(mountOrderComparator);

	  // Any updates enqueued while reconciling must be performed after this entire
	  // batch. Otherwise, if dirtyComponents is [A, B] where A has children B and
	  // C, B could update twice in a single batch if C's render enqueues an update
	  // to B (since B would have already updated, we should skip it, and the only
	  // way we can know to do so is by checking the batch counter).
	  updateBatchNumber++;

	  for (var i = 0; i < len; i++) {
	    // If a component is unmounted before pending changes apply, it will still
	    // be here, but we assume that it has cleared its _pendingCallbacks and
	    // that performUpdateIfNecessary is a noop.
	    var component = dirtyComponents[i];

	    // If performUpdateIfNecessary happens to enqueue any new updates, we
	    // shouldn't execute the callbacks until the next render happens, so
	    // stash the callbacks first
	    var callbacks = component._pendingCallbacks;
	    component._pendingCallbacks = null;

	    var markerName;
	    if (ReactFeatureFlags.logTopLevelRenders) {
	      var namedComponent = component;
	      // Duck type TopLevelWrapper. This is probably always true.
	      if (component._currentElement.props === component._renderedComponent._currentElement) {
	        namedComponent = component._renderedComponent;
	      }
	      markerName = 'React update: ' + namedComponent.getName();
	      console.time(markerName);
	    }

	    ReactReconciler.performUpdateIfNecessary(component, transaction.reconcileTransaction, updateBatchNumber);

	    if (markerName) {
	      console.timeEnd(markerName);
	    }

	    if (callbacks) {
	      for (var j = 0; j < callbacks.length; j++) {
	        transaction.callbackQueue.enqueue(callbacks[j], component.getPublicInstance());
	      }
	    }
	  }
	}

	var flushBatchedUpdates = function () {
	  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
	  // array and perform any updates enqueued by mount-ready handlers (i.e.,
	  // componentDidUpdate) but we need to check here too in order to catch
	  // updates enqueued by setState callbacks and asap calls.
	  while (dirtyComponents.length || asapEnqueued) {
	    if (dirtyComponents.length) {
	      var transaction = ReactUpdatesFlushTransaction.getPooled();
	      transaction.perform(runBatchedUpdates, null, transaction);
	      ReactUpdatesFlushTransaction.release(transaction);
	    }

	    if (asapEnqueued) {
	      asapEnqueued = false;
	      var queue = asapCallbackQueue;
	      asapCallbackQueue = CallbackQueue.getPooled();
	      queue.notifyAll();
	      CallbackQueue.release(queue);
	    }
	  }
	};

	/**
	 * Mark a component as needing a rerender, adding an optional callback to a
	 * list of functions which will be executed once the rerender occurs.
	 */
	function enqueueUpdate(component) {
	  ensureInjected();

	  // Various parts of our code (such as ReactCompositeComponent's
	  // _renderValidatedComponent) assume that calls to render aren't nested;
	  // verify that that's the case. (This is called by each top-level update
	  // function, like setState, forceUpdate, etc.; creation and
	  // destruction of top-level components is guarded in ReactMount.)

	  if (!batchingStrategy.isBatchingUpdates) {
	    batchingStrategy.batchedUpdates(enqueueUpdate, component);
	    return;
	  }

	  dirtyComponents.push(component);
	  if (component._updateBatchNumber == null) {
	    component._updateBatchNumber = updateBatchNumber + 1;
	  }
	}

	/**
	 * Enqueue a callback to be run at the end of the current batching cycle. Throws
	 * if no updates are currently being performed.
	 */
	function asap(callback, context) {
	  !batchingStrategy.isBatchingUpdates ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates.asap: Can\'t enqueue an asap callback in a context whereupdates are not being batched.') : _prodInvariant('125') : void 0;
	  asapCallbackQueue.enqueue(callback, context);
	  asapEnqueued = true;
	}

	var ReactUpdatesInjection = {
	  injectReconcileTransaction: function (ReconcileTransaction) {
	    !ReconcileTransaction ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a reconcile transaction class') : _prodInvariant('126') : void 0;
	    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
	  },

	  injectBatchingStrategy: function (_batchingStrategy) {
	    !_batchingStrategy ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batching strategy') : _prodInvariant('127') : void 0;
	    !(typeof _batchingStrategy.batchedUpdates === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batchedUpdates() function') : _prodInvariant('128') : void 0;
	    !(typeof _batchingStrategy.isBatchingUpdates === 'boolean') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide an isBatchingUpdates boolean attribute') : _prodInvariant('129') : void 0;
	    batchingStrategy = _batchingStrategy;
	  }
	};

	var ReactUpdates = {
	  /**
	   * React references `ReactReconcileTransaction` using this property in order
	   * to allow dependency injection.
	   *
	   * @internal
	   */
	  ReactReconcileTransaction: null,

	  batchedUpdates: batchedUpdates,
	  enqueueUpdate: enqueueUpdate,
	  flushBatchedUpdates: flushBatchedUpdates,
	  injection: ReactUpdatesInjection,
	  asap: asap
	};

	module.exports = ReactUpdates;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CallbackQueue
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(8),
	    _assign = __webpack_require__(5);

	var PooledClass = __webpack_require__(7);

	var invariant = __webpack_require__(9);

	/**
	 * A specialized pseudo-event module to help keep track of components waiting to
	 * be notified when their DOM representations are available for use.
	 *
	 * This implements `PooledClass`, so you should never need to instantiate this.
	 * Instead, use `CallbackQueue.getPooled()`.
	 *
	 * @class ReactMountReady
	 * @implements PooledClass
	 * @internal
	 */
	function CallbackQueue() {
	  this._callbacks = null;
	  this._contexts = null;
	}

	_assign(CallbackQueue.prototype, {

	  /**
	   * Enqueues a callback to be invoked when `notifyAll` is invoked.
	   *
	   * @param {function} callback Invoked when `notifyAll` is invoked.
	   * @param {?object} context Context to call `callback` with.
	   * @internal
	   */
	  enqueue: function (callback, context) {
	    this._callbacks = this._callbacks || [];
	    this._contexts = this._contexts || [];
	    this._callbacks.push(callback);
	    this._contexts.push(context);
	  },

	  /**
	   * Invokes all enqueued callbacks and clears the queue. This is invoked after
	   * the DOM representation of a component has been created or updated.
	   *
	   * @internal
	   */
	  notifyAll: function () {
	    var callbacks = this._callbacks;
	    var contexts = this._contexts;
	    if (callbacks) {
	      !(callbacks.length === contexts.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Mismatched list of contexts in callback queue') : _prodInvariant('24') : void 0;
	      this._callbacks = null;
	      this._contexts = null;
	      for (var i = 0; i < callbacks.length; i++) {
	        callbacks[i].call(contexts[i]);
	      }
	      callbacks.length = 0;
	      contexts.length = 0;
	    }
	  },

	  checkpoint: function () {
	    return this._callbacks ? this._callbacks.length : 0;
	  },

	  rollback: function (len) {
	    if (this._callbacks) {
	      this._callbacks.length = len;
	      this._contexts.length = len;
	    }
	  },

	  /**
	   * Resets the internal queue.
	   *
	   * @internal
	   */
	  reset: function () {
	    this._callbacks = null;
	    this._contexts = null;
	  },

	  /**
	   * `PooledClass` looks for this.
	   */
	  destructor: function () {
	    this.reset();
	  }

	});

	PooledClass.addPoolingTo(CallbackQueue);

	module.exports = CallbackQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 60 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactFeatureFlags
	 * 
	 */

	'use strict';

	var ReactFeatureFlags = {
	  // When true, call console.time() before and .timeEnd() after each top-level
	  // render (both initial renders and updates). Useful when looking at prod-mode
	  // timeline profiles in Chrome, for example.
	  logTopLevelRenders: false
	};

	module.exports = ReactFeatureFlags;

/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactReconciler
	 */

	'use strict';

	var ReactRef = __webpack_require__(62);
	var ReactInstrumentation = __webpack_require__(64);

	var warning = __webpack_require__(12);

	/**
	 * Helper to call ReactRef.attachRefs with this composite component, split out
	 * to avoid allocations in the transaction mount-ready queue.
	 */
	function attachRefs() {
	  ReactRef.attachRefs(this, this._currentElement);
	}

	var ReactReconciler = {

	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {?object} the containing host component instance
	   * @param {?object} info about the host container
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function (internalInstance, transaction, hostParent, hostContainerInfo, context) {
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onBeforeMountComponent(internalInstance._debugID, internalInstance._currentElement);
	        ReactInstrumentation.debugTool.onBeginReconcilerTimer(internalInstance._debugID, 'mountComponent');
	      }
	    }
	    var markup = internalInstance.mountComponent(transaction, hostParent, hostContainerInfo, context);
	    if (internalInstance._currentElement && internalInstance._currentElement.ref != null) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onEndReconcilerTimer(internalInstance._debugID, 'mountComponent');
	        ReactInstrumentation.debugTool.onMountComponent(internalInstance._debugID);
	      }
	    }
	    return markup;
	  },

	  /**
	   * Returns a value that can be passed to
	   * ReactComponentEnvironment.replaceNodeWithMarkup.
	   */
	  getHostNode: function (internalInstance) {
	    return internalInstance.getHostNode();
	  },

	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function (internalInstance, safely) {
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onBeginReconcilerTimer(internalInstance._debugID, 'unmountComponent');
	      }
	    }
	    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
	    internalInstance.unmountComponent(safely);
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onEndReconcilerTimer(internalInstance._debugID, 'unmountComponent');
	        ReactInstrumentation.debugTool.onUnmountComponent(internalInstance._debugID);
	      }
	    }
	  },

	  /**
	   * Update a component using a new element.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @internal
	   */
	  receiveComponent: function (internalInstance, nextElement, transaction, context) {
	    var prevElement = internalInstance._currentElement;

	    if (nextElement === prevElement && context === internalInstance._context) {
	      // Since elements are immutable after the owner is rendered,
	      // we can do a cheap identity compare here to determine if this is a
	      // superfluous reconcile. It's possible for state to be mutable but such
	      // change should trigger an update of the owner which would recreate
	      // the element. We explicitly check for the existence of an owner since
	      // it's possible for an element created outside a composite to be
	      // deeply mutated and reused.

	      // TODO: Bailing out early is just a perf optimization right?
	      // TODO: Removing the return statement should affect correctness?
	      return;
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, nextElement);
	        ReactInstrumentation.debugTool.onBeginReconcilerTimer(internalInstance._debugID, 'receiveComponent');
	      }
	    }

	    var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);

	    if (refsChanged) {
	      ReactRef.detachRefs(internalInstance, prevElement);
	    }

	    internalInstance.receiveComponent(nextElement, transaction, context);

	    if (refsChanged && internalInstance._currentElement && internalInstance._currentElement.ref != null) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onEndReconcilerTimer(internalInstance._debugID, 'receiveComponent');
	        ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);
	      }
	    }
	  },

	  /**
	   * Flush any dirty changes in a component.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function (internalInstance, transaction, updateBatchNumber) {
	    if (internalInstance._updateBatchNumber !== updateBatchNumber) {
	      // The component's enqueued batch number should always be the current
	      // batch or the following one.
	      process.env.NODE_ENV !== 'production' ? warning(internalInstance._updateBatchNumber == null || internalInstance._updateBatchNumber === updateBatchNumber + 1, 'performUpdateIfNecessary: Unexpected batch number (current %s, ' + 'pending %s)', updateBatchNumber, internalInstance._updateBatchNumber) : void 0;
	      return;
	    }
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onBeginReconcilerTimer(internalInstance._debugID, 'performUpdateIfNecessary');
	        ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, internalInstance._currentElement);
	      }
	    }
	    internalInstance.performUpdateIfNecessary(transaction);
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onEndReconcilerTimer(internalInstance._debugID, 'performUpdateIfNecessary');
	        ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);
	      }
	    }
	  }

	};

	module.exports = ReactReconciler;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactRef
	 */

	'use strict';

	var ReactOwner = __webpack_require__(63);

	var ReactRef = {};

	function attachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(component.getPublicInstance());
	  } else {
	    // Legacy ref
	    ReactOwner.addComponentAsRefTo(component, ref, owner);
	  }
	}

	function detachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(null);
	  } else {
	    // Legacy ref
	    ReactOwner.removeComponentAsRefFrom(component, ref, owner);
	  }
	}

	ReactRef.attachRefs = function (instance, element) {
	  if (element === null || element === false) {
	    return;
	  }
	  var ref = element.ref;
	  if (ref != null) {
	    attachRef(ref, instance, element._owner);
	  }
	};

	ReactRef.shouldUpdateRefs = function (prevElement, nextElement) {
	  // If either the owner or a `ref` has changed, make sure the newest owner
	  // has stored a reference to `this`, and the previous owner (if different)
	  // has forgotten the reference to `this`. We use the element instead
	  // of the public this.props because the post processing cannot determine
	  // a ref. The ref conceptually lives on the element.

	  // TODO: Should this even be possible? The owner cannot change because
	  // it's forbidden by shouldUpdateReactComponent. The ref can change
	  // if you swap the keys of but not the refs. Reconsider where this check
	  // is made. It probably belongs where the key checking and
	  // instantiateReactComponent is done.

	  var prevEmpty = prevElement === null || prevElement === false;
	  var nextEmpty = nextElement === null || nextElement === false;

	  return(
	    // This has a few false positives w/r/t empty components.
	    prevEmpty || nextEmpty || nextElement.ref !== prevElement.ref ||
	    // If owner changes but we have an unchanged function ref, don't update refs
	    typeof nextElement.ref === 'string' && nextElement._owner !== prevElement._owner
	  );
	};

	ReactRef.detachRefs = function (instance, element) {
	  if (element === null || element === false) {
	    return;
	  }
	  var ref = element.ref;
	  if (ref != null) {
	    detachRef(ref, instance, element._owner);
	  }
	};

	module.exports = ReactRef;

/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactOwner
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(8);

	var invariant = __webpack_require__(9);

	/**
	 * ReactOwners are capable of storing references to owned components.
	 *
	 * All components are capable of //being// referenced by owner components, but
	 * only ReactOwner components are capable of //referencing// owned components.
	 * The named reference is known as a "ref".
	 *
	 * Refs are available when mounted and updated during reconciliation.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return (
	 *         <div onClick={this.handleClick}>
	 *           <CustomComponent ref="custom" />
	 *         </div>
	 *       );
	 *     },
	 *     handleClick: function() {
	 *       this.refs.custom.handleClick();
	 *     },
	 *     componentDidMount: function() {
	 *       this.refs.custom.initialize();
	 *     }
	 *   });
	 *
	 * Refs should rarely be used. When refs are used, they should only be done to
	 * control data that is not handled by React's data flow.
	 *
	 * @class ReactOwner
	 */
	var ReactOwner = {

	  /**
	   * @param {?object} object
	   * @return {boolean} True if `object` is a valid owner.
	   * @final
	   */
	  isValidOwner: function (object) {
	    return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');
	  },

	  /**
	   * Adds a component by ref to an owner component.
	   *
	   * @param {ReactComponent} component Component to reference.
	   * @param {string} ref Name by which to refer to the component.
	   * @param {ReactOwner} owner Component on which to record the ref.
	   * @final
	   * @internal
	   */
	  addComponentAsRefTo: function (component, ref, owner) {
	    !ReactOwner.isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might be adding a ref to a component that was not created inside a component\'s `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).') : _prodInvariant('119') : void 0;
	    owner.attachRef(ref, component);
	  },

	  /**
	   * Removes a component by ref from an owner component.
	   *
	   * @param {ReactComponent} component Component to dereference.
	   * @param {string} ref Name of the ref to remove.
	   * @param {ReactOwner} owner Component on which the ref is recorded.
	   * @final
	   * @internal
	   */
	  removeComponentAsRefFrom: function (component, ref, owner) {
	    !ReactOwner.isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might be removing a ref to a component that was not created inside a component\'s `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).') : _prodInvariant('120') : void 0;
	    var ownerPublicInstance = owner.getPublicInstance();
	    // Check that `component`'s owner is still alive and that `component` is still the current ref
	    // because we do not want to detach the ref if another component stole it.
	    if (ownerPublicInstance && ownerPublicInstance.refs[ref] === component.getPublicInstance()) {
	      owner.detachRef(ref);
	    }
	  }

	};

	module.exports = ReactOwner;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInstrumentation
	 */

	'use strict';

	var debugTool = null;

	if (process.env.NODE_ENV !== 'production') {
	  var ReactDebugTool = __webpack_require__(65);
	  debugTool = ReactDebugTool;
	}

	module.exports = { debugTool: debugTool };
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDebugTool
	 */

	'use strict';

	var ReactInvalidSetStateWarningDevTool = __webpack_require__(66);
	var ReactHostOperationHistoryDevtool = __webpack_require__(67);
	var ReactComponentTreeDevtool = __webpack_require__(30);
	var ReactChildrenMutationWarningDevtool = __webpack_require__(68);
	var ExecutionEnvironment = __webpack_require__(51);

	var performanceNow = __webpack_require__(69);
	var warning = __webpack_require__(12);

	var eventHandlers = [];
	var handlerDoesThrowForEvent = {};

	function emitEvent(handlerFunctionName, arg1, arg2, arg3, arg4, arg5) {
	  eventHandlers.forEach(function (handler) {
	    try {
	      if (handler[handlerFunctionName]) {
	        handler[handlerFunctionName](arg1, arg2, arg3, arg4, arg5);
	      }
	    } catch (e) {
	      process.env.NODE_ENV !== 'production' ? warning(handlerDoesThrowForEvent[handlerFunctionName], 'exception thrown by devtool while handling %s: %s', handlerFunctionName, e + '\n' + e.stack) : void 0;
	      handlerDoesThrowForEvent[handlerFunctionName] = true;
	    }
	  });
	}

	var isProfiling = false;
	var flushHistory = [];
	var lifeCycleTimerStack = [];
	var currentFlushNesting = 0;
	var currentFlushMeasurements = null;
	var currentFlushStartTime = null;
	var currentTimerDebugID = null;
	var currentTimerStartTime = null;
	var currentTimerNestedFlushDuration = null;
	var currentTimerType = null;

	var lifeCycleTimerHasWarned = false;

	function clearHistory() {
	  ReactComponentTreeDevtool.purgeUnmountedComponents();
	  ReactHostOperationHistoryDevtool.clearHistory();
	}

	function getTreeSnapshot(registeredIDs) {
	  return registeredIDs.reduce(function (tree, id) {
	    var ownerID = ReactComponentTreeDevtool.getOwnerID(id);
	    var parentID = ReactComponentTreeDevtool.getParentID(id);
	    tree[id] = {
	      displayName: ReactComponentTreeDevtool.getDisplayName(id),
	      text: ReactComponentTreeDevtool.getText(id),
	      updateCount: ReactComponentTreeDevtool.getUpdateCount(id),
	      childIDs: ReactComponentTreeDevtool.getChildIDs(id),
	      // Text nodes don't have owners but this is close enough.
	      ownerID: ownerID || ReactComponentTreeDevtool.getOwnerID(parentID),
	      parentID: parentID
	    };
	    return tree;
	  }, {});
	}

	function resetMeasurements() {
	  var previousStartTime = currentFlushStartTime;
	  var previousMeasurements = currentFlushMeasurements || [];
	  var previousOperations = ReactHostOperationHistoryDevtool.getHistory();

	  if (currentFlushNesting === 0) {
	    currentFlushStartTime = null;
	    currentFlushMeasurements = null;
	    clearHistory();
	    return;
	  }

	  if (previousMeasurements.length || previousOperations.length) {
	    var registeredIDs = ReactComponentTreeDevtool.getRegisteredIDs();
	    flushHistory.push({
	      duration: performanceNow() - previousStartTime,
	      measurements: previousMeasurements || [],
	      operations: previousOperations || [],
	      treeSnapshot: getTreeSnapshot(registeredIDs)
	    });
	  }

	  clearHistory();
	  currentFlushStartTime = performanceNow();
	  currentFlushMeasurements = [];
	}

	function checkDebugID(debugID) {
	  process.env.NODE_ENV !== 'production' ? warning(debugID, 'ReactDebugTool: debugID may not be empty.') : void 0;
	}

	function beginLifeCycleTimer(debugID, timerType) {
	  if (currentFlushNesting === 0) {
	    return;
	  }
	  if (currentTimerType && !lifeCycleTimerHasWarned) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'There is an internal error in the React performance measurement code. ' + 'Did not expect %s timer to start while %s timer is still in ' + 'progress for %s instance.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another') : void 0;
	    lifeCycleTimerHasWarned = true;
	  }
	  currentTimerStartTime = performanceNow();
	  currentTimerNestedFlushDuration = 0;
	  currentTimerDebugID = debugID;
	  currentTimerType = timerType;
	}

	function endLifeCycleTimer(debugID, timerType) {
	  if (currentFlushNesting === 0) {
	    return;
	  }
	  if (currentTimerType !== timerType && !lifeCycleTimerHasWarned) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'There is an internal error in the React performance measurement code. ' + 'We did not expect %s timer to stop while %s timer is still in ' + 'progress for %s instance. Please report this as a bug in React.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another') : void 0;
	    lifeCycleTimerHasWarned = true;
	  }
	  if (isProfiling) {
	    currentFlushMeasurements.push({
	      timerType: timerType,
	      instanceID: debugID,
	      duration: performanceNow() - currentTimerStartTime - currentTimerNestedFlushDuration
	    });
	  }
	  currentTimerStartTime = null;
	  currentTimerNestedFlushDuration = null;
	  currentTimerDebugID = null;
	  currentTimerType = null;
	}

	function pauseCurrentLifeCycleTimer() {
	  var currentTimer = {
	    startTime: currentTimerStartTime,
	    nestedFlushStartTime: performanceNow(),
	    debugID: currentTimerDebugID,
	    timerType: currentTimerType
	  };
	  lifeCycleTimerStack.push(currentTimer);
	  currentTimerStartTime = null;
	  currentTimerNestedFlushDuration = null;
	  currentTimerDebugID = null;
	  currentTimerType = null;
	}

	function resumeCurrentLifeCycleTimer() {
	  var _lifeCycleTimerStack$ = lifeCycleTimerStack.pop();

	  var startTime = _lifeCycleTimerStack$.startTime;
	  var nestedFlushStartTime = _lifeCycleTimerStack$.nestedFlushStartTime;
	  var debugID = _lifeCycleTimerStack$.debugID;
	  var timerType = _lifeCycleTimerStack$.timerType;

	  var nestedFlushDuration = performanceNow() - nestedFlushStartTime;
	  currentTimerStartTime = startTime;
	  currentTimerNestedFlushDuration += nestedFlushDuration;
	  currentTimerDebugID = debugID;
	  currentTimerType = timerType;
	}

	var ReactDebugTool = {
	  addDevtool: function (devtool) {
	    eventHandlers.push(devtool);
	  },
	  removeDevtool: function (devtool) {
	    for (var i = 0; i < eventHandlers.length; i++) {
	      if (eventHandlers[i] === devtool) {
	        eventHandlers.splice(i, 1);
	        i--;
	      }
	    }
	  },
	  isProfiling: function () {
	    return isProfiling;
	  },
	  beginProfiling: function () {
	    if (isProfiling) {
	      return;
	    }

	    isProfiling = true;
	    flushHistory.length = 0;
	    resetMeasurements();
	    ReactDebugTool.addDevtool(ReactHostOperationHistoryDevtool);
	  },
	  endProfiling: function () {
	    if (!isProfiling) {
	      return;
	    }

	    isProfiling = false;
	    resetMeasurements();
	    ReactDebugTool.removeDevtool(ReactHostOperationHistoryDevtool);
	  },
	  getFlushHistory: function () {
	    return flushHistory;
	  },
	  onBeginFlush: function () {
	    currentFlushNesting++;
	    resetMeasurements();
	    pauseCurrentLifeCycleTimer();
	    emitEvent('onBeginFlush');
	  },
	  onEndFlush: function () {
	    resetMeasurements();
	    currentFlushNesting--;
	    resumeCurrentLifeCycleTimer();
	    emitEvent('onEndFlush');
	  },
	  onBeginLifeCycleTimer: function (debugID, timerType) {
	    checkDebugID(debugID);
	    emitEvent('onBeginLifeCycleTimer', debugID, timerType);
	    beginLifeCycleTimer(debugID, timerType);
	  },
	  onEndLifeCycleTimer: function (debugID, timerType) {
	    checkDebugID(debugID);
	    endLifeCycleTimer(debugID, timerType);
	    emitEvent('onEndLifeCycleTimer', debugID, timerType);
	  },
	  onBeginReconcilerTimer: function (debugID, timerType) {
	    checkDebugID(debugID);
	    emitEvent('onBeginReconcilerTimer', debugID, timerType);
	  },
	  onEndReconcilerTimer: function (debugID, timerType) {
	    checkDebugID(debugID);
	    emitEvent('onEndReconcilerTimer', debugID, timerType);
	  },
	  onError: function (debugID) {
	    if (currentTimerDebugID != null) {
	      endLifeCycleTimer(currentTimerDebugID, currentTimerType);
	    }
	    emitEvent('onError', debugID);
	  },
	  onBeginProcessingChildContext: function () {
	    emitEvent('onBeginProcessingChildContext');
	  },
	  onEndProcessingChildContext: function () {
	    emitEvent('onEndProcessingChildContext');
	  },
	  onHostOperation: function (debugID, type, payload) {
	    checkDebugID(debugID);
	    emitEvent('onHostOperation', debugID, type, payload);
	  },
	  onComponentHasMounted: function (debugID) {
	    checkDebugID(debugID);
	    emitEvent('onComponentHasMounted', debugID);
	  },
	  onComponentHasUpdated: function (debugID) {
	    checkDebugID(debugID);
	    emitEvent('onComponentHasUpdated', debugID);
	  },
	  onSetState: function () {
	    emitEvent('onSetState');
	  },
	  onSetDisplayName: function (debugID, displayName) {
	    checkDebugID(debugID);
	    emitEvent('onSetDisplayName', debugID, displayName);
	  },
	  onSetChildren: function (debugID, childDebugIDs) {
	    checkDebugID(debugID);
	    childDebugIDs.forEach(checkDebugID);
	    emitEvent('onSetChildren', debugID, childDebugIDs);
	  },
	  onSetOwner: function (debugID, ownerDebugID) {
	    checkDebugID(debugID);
	    emitEvent('onSetOwner', debugID, ownerDebugID);
	  },
	  onSetParent: function (debugID, parentDebugID) {
	    checkDebugID(debugID);
	    emitEvent('onSetParent', debugID, parentDebugID);
	  },
	  onSetText: function (debugID, text) {
	    checkDebugID(debugID);
	    emitEvent('onSetText', debugID, text);
	  },
	  onMountRootComponent: function (debugID) {
	    checkDebugID(debugID);
	    emitEvent('onMountRootComponent', debugID);
	  },
	  onBeforeMountComponent: function (debugID, element) {
	    checkDebugID(debugID);
	    emitEvent('onBeforeMountComponent', debugID, element);
	  },
	  onMountComponent: function (debugID) {
	    checkDebugID(debugID);
	    emitEvent('onMountComponent', debugID);
	  },
	  onBeforeUpdateComponent: function (debugID, element) {
	    checkDebugID(debugID);
	    emitEvent('onBeforeUpdateComponent', debugID, element);
	  },
	  onUpdateComponent: function (debugID) {
	    checkDebugID(debugID);
	    emitEvent('onUpdateComponent', debugID);
	  },
	  onUnmountComponent: function (debugID) {
	    checkDebugID(debugID);
	    emitEvent('onUnmountComponent', debugID);
	  },
	  onTestEvent: function () {
	    emitEvent('onTestEvent');
	  }
	};

	ReactDebugTool.addDevtool(ReactInvalidSetStateWarningDevTool);
	ReactDebugTool.addDevtool(ReactComponentTreeDevtool);
	ReactDebugTool.addDevtool(ReactChildrenMutationWarningDevtool);
	var url = ExecutionEnvironment.canUseDOM && window.location.href || '';
	if (/[?&]react_perf\b/.test(url)) {
	  ReactDebugTool.beginProfiling();
	}

	module.exports = ReactDebugTool;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInvalidSetStateWarningDevTool
	 */

	'use strict';

	var warning = __webpack_require__(12);

	if (process.env.NODE_ENV !== 'production') {
	  var processingChildContext = false;

	  var warnInvalidSetState = function () {
	    process.env.NODE_ENV !== 'production' ? warning(!processingChildContext, 'setState(...): Cannot call setState() inside getChildContext()') : void 0;
	  };
	}

	var ReactInvalidSetStateWarningDevTool = {
	  onBeginProcessingChildContext: function () {
	    processingChildContext = true;
	  },
	  onEndProcessingChildContext: function () {
	    processingChildContext = false;
	  },
	  onSetState: function () {
	    warnInvalidSetState();
	  }
	};

	module.exports = ReactInvalidSetStateWarningDevTool;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 67 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactHostOperationHistoryDevtool
	 */

	'use strict';

	var history = [];

	var ReactHostOperationHistoryDevtool = {
	  onHostOperation: function (debugID, type, payload) {
	    history.push({
	      instanceID: debugID,
	      type: type,
	      payload: payload
	    });
	  },
	  clearHistory: function () {
	    if (ReactHostOperationHistoryDevtool._preventClearing) {
	      // Should only be used for tests.
	      return;
	    }

	    history = [];
	  },
	  getHistory: function () {
	    return history;
	  }
	};

	module.exports = ReactHostOperationHistoryDevtool;

/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactChildrenMutationWarningDevtool
	 */

	'use strict';

	var ReactComponentTreeDevtool = __webpack_require__(30);

	var warning = __webpack_require__(12);

	var elements = {};

	function handleElement(debugID, element) {
	  if (element == null) {
	    return;
	  }
	  if (element._shadowChildren === undefined) {
	    return;
	  }
	  if (element._shadowChildren === element.props.children) {
	    return;
	  }
	  var isMutated = false;
	  if (Array.isArray(element._shadowChildren)) {
	    if (element._shadowChildren.length === element.props.children.length) {
	      for (var i = 0; i < element._shadowChildren.length; i++) {
	        if (element._shadowChildren[i] !== element.props.children[i]) {
	          isMutated = true;
	        }
	      }
	    } else {
	      isMutated = true;
	    }
	  }
	  process.env.NODE_ENV !== 'production' ? warning(Array.isArray(element._shadowChildren) && !isMutated, 'Component\'s children should not be mutated.%s', ReactComponentTreeDevtool.getStackAddendumByID(debugID)) : void 0;
	}

	var ReactDOMUnknownPropertyDevtool = {
	  onBeforeMountComponent: function (debugID, element) {
	    elements[debugID] = element;
	  },
	  onBeforeUpdateComponent: function (debugID, element) {
	    elements[debugID] = element;
	  },
	  onComponentHasMounted: function (debugID) {
	    handleElement(debugID, elements[debugID]);
	    delete elements[debugID];
	  },
	  onComponentHasUpdated: function (debugID) {
	    handleElement(debugID, elements[debugID]);
	    delete elements[debugID];
	  }
	};

	module.exports = ReactDOMUnknownPropertyDevtool;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @typechecks
	 */

	var performance = __webpack_require__(70);

	var performanceNow;

	/**
	 * Detect if we can use `window.performance.now()` and gracefully fallback to
	 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
	 * because of Facebook's testing infrastructure.
	 */
	if (performance.now) {
	  performanceNow = function performanceNow() {
	    return performance.now();
	  };
	} else {
	  performanceNow = function performanceNow() {
	    return Date.now();
	  };
	}

	module.exports = performanceNow;

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @typechecks
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(51);

	var performance;

	if (ExecutionEnvironment.canUseDOM) {
	  performance = window.performance || window.msPerformance || window.webkitPerformance;
	}

	module.exports = performance || {};

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Transaction
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(8);

	var invariant = __webpack_require__(9);

	/**
	 * `Transaction` creates a black box that is able to wrap any method such that
	 * certain invariants are maintained before and after the method is invoked
	 * (Even if an exception is thrown while invoking the wrapped method). Whoever
	 * instantiates a transaction can provide enforcers of the invariants at
	 * creation time. The `Transaction` class itself will supply one additional
	 * automatic invariant for you - the invariant that any transaction instance
	 * should not be run while it is already being run. You would typically create a
	 * single instance of a `Transaction` for reuse multiple times, that potentially
	 * is used to wrap several different methods. Wrappers are extremely simple -
	 * they only require implementing two methods.
	 *
	 * <pre>
	 *                       wrappers (injected at creation time)
	 *                                      +        +
	 *                                      |        |
	 *                    +-----------------|--------|--------------+
	 *                    |                 v        |              |
	 *                    |      +---------------+   |              |
	 *                    |   +--|    wrapper1   |---|----+         |
	 *                    |   |  +---------------+   v    |         |
	 *                    |   |          +-------------+  |         |
	 *                    |   |     +----|   wrapper2  |--------+   |
	 *                    |   |     |    +-------------+  |     |   |
	 *                    |   |     |                     |     |   |
	 *                    |   v     v                     v     v   | wrapper
	 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
	 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
	 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | +---+ +---+   +---------+   +---+ +---+ |
	 *                    |  initialize                    close    |
	 *                    +-----------------------------------------+
	 * </pre>
	 *
	 * Use cases:
	 * - Preserving the input selection ranges before/after reconciliation.
	 *   Restoring selection even in the event of an unexpected error.
	 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
	 *   while guaranteeing that afterwards, the event system is reactivated.
	 * - Flushing a queue of collected DOM mutations to the main UI thread after a
	 *   reconciliation takes place in a worker thread.
	 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
	 *   content.
	 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
	 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
	 * - (Future use case): Layout calculations before and after DOM updates.
	 *
	 * Transactional plugin API:
	 * - A module that has an `initialize` method that returns any precomputation.
	 * - and a `close` method that accepts the precomputation. `close` is invoked
	 *   when the wrapped process is completed, or has failed.
	 *
	 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
	 * that implement `initialize` and `close`.
	 * @return {Transaction} Single transaction for reuse in thread.
	 *
	 * @class Transaction
	 */
	var Mixin = {
	  /**
	   * Sets up this instance so that it is prepared for collecting metrics. Does
	   * so such that this setup method may be used on an instance that is already
	   * initialized, in a way that does not consume additional memory upon reuse.
	   * That can be useful if you decide to make your subclass of this mixin a
	   * "PooledClass".
	   */
	  reinitializeTransaction: function () {
	    this.transactionWrappers = this.getTransactionWrappers();
	    if (this.wrapperInitData) {
	      this.wrapperInitData.length = 0;
	    } else {
	      this.wrapperInitData = [];
	    }
	    this._isInTransaction = false;
	  },

	  _isInTransaction: false,

	  /**
	   * @abstract
	   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
	   */
	  getTransactionWrappers: null,

	  isInTransaction: function () {
	    return !!this._isInTransaction;
	  },

	  /**
	   * Executes the function within a safety window. Use this for the top level
	   * methods that result in large amounts of computation/mutations that would
	   * need to be safety checked. The optional arguments helps prevent the need
	   * to bind in many cases.
	   *
	   * @param {function} method Member of scope to call.
	   * @param {Object} scope Scope to invoke from.
	   * @param {Object?=} a Argument to pass to the method.
	   * @param {Object?=} b Argument to pass to the method.
	   * @param {Object?=} c Argument to pass to the method.
	   * @param {Object?=} d Argument to pass to the method.
	   * @param {Object?=} e Argument to pass to the method.
	   * @param {Object?=} f Argument to pass to the method.
	   *
	   * @return {*} Return value from `method`.
	   */
	  perform: function (method, scope, a, b, c, d, e, f) {
	    !!this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.perform(...): Cannot initialize a transaction when there is already an outstanding transaction.') : _prodInvariant('27') : void 0;
	    var errorThrown;
	    var ret;
	    try {
	      this._isInTransaction = true;
	      // Catching errors makes debugging more difficult, so we start with
	      // errorThrown set to true before setting it to false after calling
	      // close -- if it's still set to true in the finally block, it means
	      // one of these calls threw.
	      errorThrown = true;
	      this.initializeAll(0);
	      ret = method.call(scope, a, b, c, d, e, f);
	      errorThrown = false;
	    } finally {
	      try {
	        if (errorThrown) {
	          // If `method` throws, prefer to show that stack trace over any thrown
	          // by invoking `closeAll`.
	          try {
	            this.closeAll(0);
	          } catch (err) {}
	        } else {
	          // Since `method` didn't throw, we don't want to silence the exception
	          // here.
	          this.closeAll(0);
	        }
	      } finally {
	        this._isInTransaction = false;
	      }
	    }
	    return ret;
	  },

	  initializeAll: function (startIndex) {
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      try {
	        // Catching errors makes debugging more difficult, so we start with the
	        // OBSERVED_ERROR state before overwriting it with the real return value
	        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
	        // block, it means wrapper.initialize threw.
	        this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;
	        this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;
	      } finally {
	        if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {
	          // The initializer for wrapper i threw an error; initialize the
	          // remaining wrappers but silence any exceptions from them to ensure
	          // that the first error is the one to bubble up.
	          try {
	            this.initializeAll(i + 1);
	          } catch (err) {}
	        }
	      }
	    }
	  },

	  /**
	   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
	   * them the respective return values of `this.transactionWrappers.init[i]`
	   * (`close`rs that correspond to initializers that failed will not be
	   * invoked).
	   */
	  closeAll: function (startIndex) {
	    !this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.closeAll(): Cannot close transaction when none are open.') : _prodInvariant('28') : void 0;
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      var initData = this.wrapperInitData[i];
	      var errorThrown;
	      try {
	        // Catching errors makes debugging more difficult, so we start with
	        // errorThrown set to true before setting it to false after calling
	        // close -- if it's still set to true in the finally block, it means
	        // wrapper.close threw.
	        errorThrown = true;
	        if (initData !== Transaction.OBSERVED_ERROR && wrapper.close) {
	          wrapper.close.call(this, initData);
	        }
	        errorThrown = false;
	      } finally {
	        if (errorThrown) {
	          // The closer for wrapper i threw an error; close the remaining
	          // wrappers but silence any exceptions from them to ensure that the
	          // first error is the one to bubble up.
	          try {
	            this.closeAll(i + 1);
	          } catch (e) {}
	        }
	      }
	    }
	    this.wrapperInitData.length = 0;
	  }
	};

	var Transaction = {

	  Mixin: Mixin,

	  /**
	   * Token to look for to determine if an error occurred.
	   */
	  OBSERVED_ERROR: {}

	};

	module.exports = Transaction;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 72 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventTarget
	 */

	'use strict';

	/**
	 * Gets the target node from a native browser event by accounting for
	 * inconsistencies in browser DOM APIs.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {DOMEventTarget} Target node.
	 */

	function getEventTarget(nativeEvent) {
	  var target = nativeEvent.target || nativeEvent.srcElement || window;

	  // Normalize SVG <use> element events #4963
	  if (target.correspondingUseElement) {
	    target = target.correspondingUseElement;
	  }

	  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
	  // @see http://www.quirksmode.org/js/events_properties.html
	  return target.nodeType === 3 ? target.parentNode : target;
	}

	module.exports = getEventTarget;

/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isEventSupported
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(51);

	var useHasFeature;
	if (ExecutionEnvironment.canUseDOM) {
	  useHasFeature = document.implementation && document.implementation.hasFeature &&
	  // always returns true in newer browsers as per the standard.
	  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
	  document.implementation.hasFeature('', '') !== true;
	}

	/**
	 * Checks if an event is supported in the current execution environment.
	 *
	 * NOTE: This will not work correctly for non-generic events such as `change`,
	 * `reset`, `load`, `error`, and `select`.
	 *
	 * Borrows from Modernizr.
	 *
	 * @param {string} eventNameSuffix Event name, e.g. "click".
	 * @param {?boolean} capture Check if the capture phase is supported.
	 * @return {boolean} True if the event is supported.
	 * @internal
	 * @license Modernizr 3.0.0pre (Custom Build) | MIT
	 */
	function isEventSupported(eventNameSuffix, capture) {
	  if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {
	    return false;
	  }

	  var eventName = 'on' + eventNameSuffix;
	  var isSupported = eventName in document;

	  if (!isSupported) {
	    var element = document.createElement('div');
	    element.setAttribute(eventName, 'return;');
	    isSupported = typeof element[eventName] === 'function';
	  }

	  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
	    // This is the only way to test support for the `wheel` event in IE9+.
	    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
	  }

	  return isSupported;
	}

	module.exports = isEventSupported;

/***/ }),
/* 74 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isTextInputElement
	 * 
	 */

	'use strict';

	/**
	 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
	 */

	var supportedInputTypes = {
	  'color': true,
	  'date': true,
	  'datetime': true,
	  'datetime-local': true,
	  'email': true,
	  'month': true,
	  'number': true,
	  'password': true,
	  'range': true,
	  'search': true,
	  'tel': true,
	  'text': true,
	  'time': true,
	  'url': true,
	  'week': true
	};

	function isTextInputElement(elem) {
	  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();

	  if (nodeName === 'input') {
	    return !!supportedInputTypes[elem.type];
	  }

	  if (nodeName === 'textarea') {
	    return true;
	  }

	  return false;
	}

	module.exports = isTextInputElement;

/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DefaultEventPluginOrder
	 */

	'use strict';

	var keyOf = __webpack_require__(26);

	/**
	 * Module that is injectable into `EventPluginHub`, that specifies a
	 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
	 * plugins, without having to package every one of them. This is better than
	 * having plugins be ordered in the same order that they are injected because
	 * that ordering would be influenced by the packaging order.
	 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
	 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
	 */
	var DefaultEventPluginOrder = [keyOf({ ResponderEventPlugin: null }), keyOf({ SimpleEventPlugin: null }), keyOf({ TapEventPlugin: null }), keyOf({ EnterLeaveEventPlugin: null }), keyOf({ ChangeEventPlugin: null }), keyOf({ SelectEventPlugin: null }), keyOf({ BeforeInputEventPlugin: null })];

	module.exports = DefaultEventPluginOrder;

/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EnterLeaveEventPlugin
	 */

	'use strict';

	var EventConstants = __webpack_require__(43);
	var EventPropagators = __webpack_require__(44);
	var ReactDOMComponentTree = __webpack_require__(38);
	var SyntheticMouseEvent = __webpack_require__(77);

	var keyOf = __webpack_require__(26);

	var topLevelTypes = EventConstants.topLevelTypes;

	var eventTypes = {
	  mouseEnter: {
	    registrationName: keyOf({ onMouseEnter: null }),
	    dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]
	  },
	  mouseLeave: {
	    registrationName: keyOf({ onMouseLeave: null }),
	    dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]
	  }
	};

	var EnterLeaveEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * For almost every interaction we care about, there will be both a top-level
	   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
	   * we do not extract duplicate events. However, moving the mouse into the
	   * browser from outside will not fire a `mouseout` event. In this case, we use
	   * the `mouseover` top-level event.
	   */
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    if (topLevelType === topLevelTypes.topMouseOver && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
	      return null;
	    }
	    if (topLevelType !== topLevelTypes.topMouseOut && topLevelType !== topLevelTypes.topMouseOver) {
	      // Must not be a mouse in or mouse out - ignoring.
	      return null;
	    }

	    var win;
	    if (nativeEventTarget.window === nativeEventTarget) {
	      // `nativeEventTarget` is probably a window object.
	      win = nativeEventTarget;
	    } else {
	      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	      var doc = nativeEventTarget.ownerDocument;
	      if (doc) {
	        win = doc.defaultView || doc.parentWindow;
	      } else {
	        win = window;
	      }
	    }

	    var from;
	    var to;
	    if (topLevelType === topLevelTypes.topMouseOut) {
	      from = targetInst;
	      var related = nativeEvent.relatedTarget || nativeEvent.toElement;
	      to = related ? ReactDOMComponentTree.getClosestInstanceFromNode(related) : null;
	    } else {
	      // Moving to a node from outside the window.
	      from = null;
	      to = targetInst;
	    }

	    if (from === to) {
	      // Nothing pertains to our managed components.
	      return null;
	    }

	    var fromNode = from == null ? win : ReactDOMComponentTree.getNodeFromInstance(from);
	    var toNode = to == null ? win : ReactDOMComponentTree.getNodeFromInstance(to);

	    var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, from, nativeEvent, nativeEventTarget);
	    leave.type = 'mouseleave';
	    leave.target = fromNode;
	    leave.relatedTarget = toNode;

	    var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, to, nativeEvent, nativeEventTarget);
	    enter.type = 'mouseenter';
	    enter.target = toNode;
	    enter.relatedTarget = fromNode;

	    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, from, to);

	    return [leave, enter];
	  }

	};

	module.exports = EnterLeaveEventPlugin;

/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticMouseEvent
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(78);
	var ViewportMetrics = __webpack_require__(79);

	var getEventModifierState = __webpack_require__(80);

	/**
	 * @interface MouseEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var MouseEventInterface = {
	  screenX: null,
	  screenY: null,
	  clientX: null,
	  clientY: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  getModifierState: getEventModifierState,
	  button: function (event) {
	    // Webkit, Firefox, IE9+
	    // which:  1 2 3
	    // button: 0 1 2 (standard)
	    var button = event.button;
	    if ('which' in event) {
	      return button;
	    }
	    // IE<9
	    // which:  undefined
	    // button: 0 0 0
	    // button: 1 4 2 (onmouseup)
	    return button === 2 ? 2 : button === 4 ? 1 : 0;
	  },
	  buttons: null,
	  relatedTarget: function (event) {
	    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
	  },
	  // "Proprietary" Interface.
	  pageX: function (event) {
	    return 'pageX' in event ? event.pageX : event.clientX + ViewportMetrics.currentScrollLeft;
	  },
	  pageY: function (event) {
	    return 'pageY' in event ? event.pageY : event.clientY + ViewportMetrics.currentScrollTop;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

	module.exports = SyntheticMouseEvent;

/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticUIEvent
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(55);

	var getEventTarget = __webpack_require__(72);

	/**
	 * @interface UIEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var UIEventInterface = {
	  view: function (event) {
	    if (event.view) {
	      return event.view;
	    }

	    var target = getEventTarget(event);
	    if (target.window === target) {
	      // target is a window object
	      return target;
	    }

	    var doc = target.ownerDocument;
	    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	    if (doc) {
	      return doc.defaultView || doc.parentWindow;
	    } else {
	      return window;
	    }
	  },
	  detail: function (event) {
	    return event.detail || 0;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

	module.exports = SyntheticUIEvent;

/***/ }),
/* 79 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ViewportMetrics
	 */

	'use strict';

	var ViewportMetrics = {

	  currentScrollLeft: 0,

	  currentScrollTop: 0,

	  refreshScrollValues: function (scrollPosition) {
	    ViewportMetrics.currentScrollLeft = scrollPosition.x;
	    ViewportMetrics.currentScrollTop = scrollPosition.y;
	  }

	};

	module.exports = ViewportMetrics;

/***/ }),
/* 80 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventModifierState
	 */

	'use strict';

	/**
	 * Translation from modifier key to the associated property in the event.
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
	 */

	var modifierKeyToProp = {
	  'Alt': 'altKey',
	  'Control': 'ctrlKey',
	  'Meta': 'metaKey',
	  'Shift': 'shiftKey'
	};

	// IE8 does not implement getModifierState so we simply map it to the only
	// modifier keys exposed by the event itself, does not support Lock-keys.
	// Currently, all major browsers except Chrome seems to support Lock-keys.
	function modifierStateGetter(keyArg) {
	  var syntheticEvent = this;
	  var nativeEvent = syntheticEvent.nativeEvent;
	  if (nativeEvent.getModifierState) {
	    return nativeEvent.getModifierState(keyArg);
	  }
	  var keyProp = modifierKeyToProp[keyArg];
	  return keyProp ? !!nativeEvent[keyProp] : false;
	}

	function getEventModifierState(nativeEvent) {
	  return modifierStateGetter;
	}

	module.exports = getEventModifierState;

/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule HTMLDOMPropertyConfig
	 */

	'use strict';

	var DOMProperty = __webpack_require__(39);

	var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
	var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
	var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
	var HAS_POSITIVE_NUMERIC_VALUE = DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
	var HAS_OVERLOADED_BOOLEAN_VALUE = DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

	var HTMLDOMPropertyConfig = {
	  isCustomAttribute: RegExp.prototype.test.bind(new RegExp('^(data|aria)-[' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$')),
	  Properties: {
	    /**
	     * Standard Properties
	     */
	    accept: 0,
	    acceptCharset: 0,
	    accessKey: 0,
	    action: 0,
	    allowFullScreen: HAS_BOOLEAN_VALUE,
	    allowTransparency: 0,
	    alt: 0,
	    async: HAS_BOOLEAN_VALUE,
	    autoComplete: 0,
	    // autoFocus is polyfilled/normalized by AutoFocusUtils
	    // autoFocus: HAS_BOOLEAN_VALUE,
	    autoPlay: HAS_BOOLEAN_VALUE,
	    capture: HAS_BOOLEAN_VALUE,
	    cellPadding: 0,
	    cellSpacing: 0,
	    charSet: 0,
	    challenge: 0,
	    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    cite: 0,
	    classID: 0,
	    className: 0,
	    cols: HAS_POSITIVE_NUMERIC_VALUE,
	    colSpan: 0,
	    content: 0,
	    contentEditable: 0,
	    contextMenu: 0,
	    controls: HAS_BOOLEAN_VALUE,
	    coords: 0,
	    crossOrigin: 0,
	    data: 0, // For `<object />` acts as `src`.
	    dateTime: 0,
	    'default': HAS_BOOLEAN_VALUE,
	    defer: HAS_BOOLEAN_VALUE,
	    dir: 0,
	    disabled: HAS_BOOLEAN_VALUE,
	    download: HAS_OVERLOADED_BOOLEAN_VALUE,
	    draggable: 0,
	    encType: 0,
	    form: 0,
	    formAction: 0,
	    formEncType: 0,
	    formMethod: 0,
	    formNoValidate: HAS_BOOLEAN_VALUE,
	    formTarget: 0,
	    frameBorder: 0,
	    headers: 0,
	    height: 0,
	    hidden: HAS_BOOLEAN_VALUE,
	    high: 0,
	    href: 0,
	    hrefLang: 0,
	    htmlFor: 0,
	    httpEquiv: 0,
	    icon: 0,
	    id: 0,
	    inputMode: 0,
	    integrity: 0,
	    is: 0,
	    keyParams: 0,
	    keyType: 0,
	    kind: 0,
	    label: 0,
	    lang: 0,
	    list: 0,
	    loop: HAS_BOOLEAN_VALUE,
	    low: 0,
	    manifest: 0,
	    marginHeight: 0,
	    marginWidth: 0,
	    max: 0,
	    maxLength: 0,
	    media: 0,
	    mediaGroup: 0,
	    method: 0,
	    min: 0,
	    minLength: 0,
	    // Caution; `option.selected` is not updated if `select.multiple` is
	    // disabled with `removeAttribute`.
	    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    name: 0,
	    nonce: 0,
	    noValidate: HAS_BOOLEAN_VALUE,
	    open: HAS_BOOLEAN_VALUE,
	    optimum: 0,
	    pattern: 0,
	    placeholder: 0,
	    poster: 0,
	    preload: 0,
	    profile: 0,
	    radioGroup: 0,
	    readOnly: HAS_BOOLEAN_VALUE,
	    referrerPolicy: 0,
	    rel: 0,
	    required: HAS_BOOLEAN_VALUE,
	    reversed: HAS_BOOLEAN_VALUE,
	    role: 0,
	    rows: HAS_POSITIVE_NUMERIC_VALUE,
	    rowSpan: HAS_NUMERIC_VALUE,
	    sandbox: 0,
	    scope: 0,
	    scoped: HAS_BOOLEAN_VALUE,
	    scrolling: 0,
	    seamless: HAS_BOOLEAN_VALUE,
	    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    shape: 0,
	    size: HAS_POSITIVE_NUMERIC_VALUE,
	    sizes: 0,
	    span: HAS_POSITIVE_NUMERIC_VALUE,
	    spellCheck: 0,
	    src: 0,
	    srcDoc: 0,
	    srcLang: 0,
	    srcSet: 0,
	    start: HAS_NUMERIC_VALUE,
	    step: 0,
	    style: 0,
	    summary: 0,
	    tabIndex: 0,
	    target: 0,
	    title: 0,
	    // Setting .type throws on non-<input> tags
	    type: 0,
	    useMap: 0,
	    value: 0,
	    width: 0,
	    wmode: 0,
	    wrap: 0,

	    /**
	     * RDFa Properties
	     */
	    about: 0,
	    datatype: 0,
	    inlist: 0,
	    prefix: 0,
	    // property is also supported for OpenGraph in meta tags.
	    property: 0,
	    resource: 0,
	    'typeof': 0,
	    vocab: 0,

	    /**
	     * Non-standard Properties
	     */
	    // autoCapitalize and autoCorrect are supported in Mobile Safari for
	    // keyboard hints.
	    autoCapitalize: 0,
	    autoCorrect: 0,
	    // autoSave allows WebKit/Blink to persist values of input fields on page reloads
	    autoSave: 0,
	    // color is for Safari mask-icon link
	    color: 0,
	    // itemProp, itemScope, itemType are for
	    // Microdata support. See http://schema.org/docs/gs.html
	    itemProp: 0,
	    itemScope: HAS_BOOLEAN_VALUE,
	    itemType: 0,
	    // itemID and itemRef are for Microdata support as well but
	    // only specified in the WHATWG spec document. See
	    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
	    itemID: 0,
	    itemRef: 0,
	    // results show looking glass icon and recent searches on input
	    // search fields in WebKit/Blink
	    results: 0,
	    // IE-only attribute that specifies security restrictions on an iframe
	    // as an alternative to the sandbox attribute on IE<10
	    security: 0,
	    // IE-only attribute that controls focus behavior
	    unselectable: 0
	  },
	  DOMAttributeNames: {
	    acceptCharset: 'accept-charset',
	    className: 'class',
	    htmlFor: 'for',
	    httpEquiv: 'http-equiv'
	  },
	  DOMPropertyNames: {}
	};

	module.exports = HTMLDOMPropertyConfig;

/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponentBrowserEnvironment
	 */

	'use strict';

	var DOMChildrenOperations = __webpack_require__(83);
	var ReactDOMIDOperations = __webpack_require__(95);

	/**
	 * Abstracts away all functionality of the reconciler that requires knowledge of
	 * the browser context. TODO: These callers should be refactored to avoid the
	 * need for this injection.
	 */
	var ReactComponentBrowserEnvironment = {

	  processChildrenUpdates: ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,

	  replaceNodeWithMarkup: DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup,

	  /**
	   * If a particular environment requires that some resources be cleaned up,
	   * specify this in the injected Mixin. In the DOM, we would likely want to
	   * purge any cached node ID lookups.
	   *
	   * @private
	   */
	  unmountIDFromEnvironment: function (rootNodeID) {}

	};

	module.exports = ReactComponentBrowserEnvironment;

/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMChildrenOperations
	 */

	'use strict';

	var DOMLazyTree = __webpack_require__(84);
	var Danger = __webpack_require__(90);
	var ReactMultiChildUpdateTypes = __webpack_require__(94);
	var ReactDOMComponentTree = __webpack_require__(38);
	var ReactInstrumentation = __webpack_require__(64);

	var createMicrosoftUnsafeLocalFunction = __webpack_require__(87);
	var setInnerHTML = __webpack_require__(86);
	var setTextContent = __webpack_require__(88);

	function getNodeAfter(parentNode, node) {
	  // Special case for text components, which return [open, close] comments
	  // from getHostNode.
	  if (Array.isArray(node)) {
	    node = node[1];
	  }
	  return node ? node.nextSibling : parentNode.firstChild;
	}

	/**
	 * Inserts `childNode` as a child of `parentNode` at the `index`.
	 *
	 * @param {DOMElement} parentNode Parent node in which to insert.
	 * @param {DOMElement} childNode Child node to insert.
	 * @param {number} index Index at which to insert the child.
	 * @internal
	 */
	var insertChildAt = createMicrosoftUnsafeLocalFunction(function (parentNode, childNode, referenceNode) {
	  // We rely exclusively on `insertBefore(node, null)` instead of also using
	  // `appendChild(node)`. (Using `undefined` is not allowed by all browsers so
	  // we are careful to use `null`.)
	  parentNode.insertBefore(childNode, referenceNode);
	});

	function insertLazyTreeChildAt(parentNode, childTree, referenceNode) {
	  DOMLazyTree.insertTreeBefore(parentNode, childTree, referenceNode);
	}

	function moveChild(parentNode, childNode, referenceNode) {
	  if (Array.isArray(childNode)) {
	    moveDelimitedText(parentNode, childNode[0], childNode[1], referenceNode);
	  } else {
	    insertChildAt(parentNode, childNode, referenceNode);
	  }
	}

	function removeChild(parentNode, childNode) {
	  if (Array.isArray(childNode)) {
	    var closingComment = childNode[1];
	    childNode = childNode[0];
	    removeDelimitedText(parentNode, childNode, closingComment);
	    parentNode.removeChild(closingComment);
	  }
	  parentNode.removeChild(childNode);
	}

	function moveDelimitedText(parentNode, openingComment, closingComment, referenceNode) {
	  var node = openingComment;
	  while (true) {
	    var nextNode = node.nextSibling;
	    insertChildAt(parentNode, node, referenceNode);
	    if (node === closingComment) {
	      break;
	    }
	    node = nextNode;
	  }
	}

	function removeDelimitedText(parentNode, startNode, closingComment) {
	  while (true) {
	    var node = startNode.nextSibling;
	    if (node === closingComment) {
	      // The closing comment is removed by ReactMultiChild.
	      break;
	    } else {
	      parentNode.removeChild(node);
	    }
	  }
	}

	function replaceDelimitedText(openingComment, closingComment, stringText) {
	  var parentNode = openingComment.parentNode;
	  var nodeAfterComment = openingComment.nextSibling;
	  if (nodeAfterComment === closingComment) {
	    // There are no text nodes between the opening and closing comments; insert
	    // a new one if stringText isn't empty.
	    if (stringText) {
	      insertChildAt(parentNode, document.createTextNode(stringText), nodeAfterComment);
	    }
	  } else {
	    if (stringText) {
	      // Set the text content of the first node after the opening comment, and
	      // remove all following nodes up until the closing comment.
	      setTextContent(nodeAfterComment, stringText);
	      removeDelimitedText(parentNode, nodeAfterComment, closingComment);
	    } else {
	      removeDelimitedText(parentNode, openingComment, closingComment);
	    }
	  }

	  if (process.env.NODE_ENV !== 'production') {
	    ReactInstrumentation.debugTool.onHostOperation(ReactDOMComponentTree.getInstanceFromNode(openingComment)._debugID, 'replace text', stringText);
	  }
	}

	var dangerouslyReplaceNodeWithMarkup = Danger.dangerouslyReplaceNodeWithMarkup;
	if (process.env.NODE_ENV !== 'production') {
	  dangerouslyReplaceNodeWithMarkup = function (oldChild, markup, prevInstance) {
	    Danger.dangerouslyReplaceNodeWithMarkup(oldChild, markup);
	    if (prevInstance._debugID !== 0) {
	      ReactInstrumentation.debugTool.onHostOperation(prevInstance._debugID, 'replace with', markup.toString());
	    } else {
	      var nextInstance = ReactDOMComponentTree.getInstanceFromNode(markup.node);
	      if (nextInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onHostOperation(nextInstance._debugID, 'mount', markup.toString());
	      }
	    }
	  };
	}

	/**
	 * Operations for updating with DOM children.
	 */
	var DOMChildrenOperations = {

	  dangerouslyReplaceNodeWithMarkup: dangerouslyReplaceNodeWithMarkup,

	  replaceDelimitedText: replaceDelimitedText,

	  /**
	   * Updates a component's children by processing a series of updates. The
	   * update configurations are each expected to have a `parentNode` property.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @internal
	   */
	  processUpdates: function (parentNode, updates) {
	    if (process.env.NODE_ENV !== 'production') {
	      var parentNodeDebugID = ReactDOMComponentTree.getInstanceFromNode(parentNode)._debugID;
	    }

	    for (var k = 0; k < updates.length; k++) {
	      var update = updates[k];
	      switch (update.type) {
	        case ReactMultiChildUpdateTypes.INSERT_MARKUP:
	          insertLazyTreeChildAt(parentNode, update.content, getNodeAfter(parentNode, update.afterNode));
	          if (process.env.NODE_ENV !== 'production') {
	            ReactInstrumentation.debugTool.onHostOperation(parentNodeDebugID, 'insert child', { toIndex: update.toIndex, content: update.content.toString() });
	          }
	          break;
	        case ReactMultiChildUpdateTypes.MOVE_EXISTING:
	          moveChild(parentNode, update.fromNode, getNodeAfter(parentNode, update.afterNode));
	          if (process.env.NODE_ENV !== 'production') {
	            ReactInstrumentation.debugTool.onHostOperation(parentNodeDebugID, 'move child', { fromIndex: update.fromIndex, toIndex: update.toIndex });
	          }
	          break;
	        case ReactMultiChildUpdateTypes.SET_MARKUP:
	          setInnerHTML(parentNode, update.content);
	          if (process.env.NODE_ENV !== 'production') {
	            ReactInstrumentation.debugTool.onHostOperation(parentNodeDebugID, 'replace children', update.content.toString());
	          }
	          break;
	        case ReactMultiChildUpdateTypes.TEXT_CONTENT:
	          setTextContent(parentNode, update.content);
	          if (process.env.NODE_ENV !== 'production') {
	            ReactInstrumentation.debugTool.onHostOperation(parentNodeDebugID, 'replace text', update.content.toString());
	          }
	          break;
	        case ReactMultiChildUpdateTypes.REMOVE_NODE:
	          removeChild(parentNode, update.fromNode);
	          if (process.env.NODE_ENV !== 'production') {
	            ReactInstrumentation.debugTool.onHostOperation(parentNodeDebugID, 'remove child', { fromIndex: update.fromIndex });
	          }
	          break;
	      }
	    }
	  }

	};

	module.exports = DOMChildrenOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMLazyTree
	 */

	'use strict';

	var DOMNamespaces = __webpack_require__(85);
	var setInnerHTML = __webpack_require__(86);

	var createMicrosoftUnsafeLocalFunction = __webpack_require__(87);
	var setTextContent = __webpack_require__(88);

	var ELEMENT_NODE_TYPE = 1;
	var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

	/**
	 * In IE (8-11) and Edge, appending nodes with no children is dramatically
	 * faster than appending a full subtree, so we essentially queue up the
	 * .appendChild calls here and apply them so each node is added to its parent
	 * before any children are added.
	 *
	 * In other browsers, doing so is slower or neutral compared to the other order
	 * (in Firefox, twice as slow) so we only do this inversion in IE.
	 *
	 * See https://github.com/spicyj/innerhtml-vs-createelement-vs-clonenode.
	 */
	var enableLazy = typeof document !== 'undefined' && typeof document.documentMode === 'number' || typeof navigator !== 'undefined' && typeof navigator.userAgent === 'string' && /\bEdge\/\d/.test(navigator.userAgent);

	function insertTreeChildren(tree) {
	  if (!enableLazy) {
	    return;
	  }
	  var node = tree.node;
	  var children = tree.children;
	  if (children.length) {
	    for (var i = 0; i < children.length; i++) {
	      insertTreeBefore(node, children[i], null);
	    }
	  } else if (tree.html != null) {
	    setInnerHTML(node, tree.html);
	  } else if (tree.text != null) {
	    setTextContent(node, tree.text);
	  }
	}

	var insertTreeBefore = createMicrosoftUnsafeLocalFunction(function (parentNode, tree, referenceNode) {
	  // DocumentFragments aren't actually part of the DOM after insertion so
	  // appending children won't update the DOM. We need to ensure the fragment
	  // is properly populated first, breaking out of our lazy approach for just
	  // this level. Also, some <object> plugins (like Flash Player) will read
	  // <param> nodes immediately upon insertion into the DOM, so <object>
	  // must also be populated prior to insertion into the DOM.
	  if (tree.node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE || tree.node.nodeType === ELEMENT_NODE_TYPE && tree.node.nodeName.toLowerCase() === 'object' && (tree.node.namespaceURI == null || tree.node.namespaceURI === DOMNamespaces.html)) {
	    insertTreeChildren(tree);
	    parentNode.insertBefore(tree.node, referenceNode);
	  } else {
	    parentNode.insertBefore(tree.node, referenceNode);
	    insertTreeChildren(tree);
	  }
	});

	function replaceChildWithTree(oldNode, newTree) {
	  oldNode.parentNode.replaceChild(newTree.node, oldNode);
	  insertTreeChildren(newTree);
	}

	function queueChild(parentTree, childTree) {
	  if (enableLazy) {
	    parentTree.children.push(childTree);
	  } else {
	    parentTree.node.appendChild(childTree.node);
	  }
	}

	function queueHTML(tree, html) {
	  if (enableLazy) {
	    tree.html = html;
	  } else {
	    setInnerHTML(tree.node, html);
	  }
	}

	function queueText(tree, text) {
	  if (enableLazy) {
	    tree.text = text;
	  } else {
	    setTextContent(tree.node, text);
	  }
	}

	function toString() {
	  return this.node.nodeName;
	}

	function DOMLazyTree(node) {
	  return {
	    node: node,
	    children: [],
	    html: null,
	    text: null,
	    toString: toString
	  };
	}

	DOMLazyTree.insertTreeBefore = insertTreeBefore;
	DOMLazyTree.replaceChildWithTree = replaceChildWithTree;
	DOMLazyTree.queueChild = queueChild;
	DOMLazyTree.queueHTML = queueHTML;
	DOMLazyTree.queueText = queueText;

	module.exports = DOMLazyTree;

/***/ }),
/* 85 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMNamespaces
	 */

	'use strict';

	var DOMNamespaces = {
	  html: 'http://www.w3.org/1999/xhtml',
	  mathml: 'http://www.w3.org/1998/Math/MathML',
	  svg: 'http://www.w3.org/2000/svg'
	};

	module.exports = DOMNamespaces;

/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule setInnerHTML
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(51);
	var DOMNamespaces = __webpack_require__(85);

	var WHITESPACE_TEST = /^[ \r\n\t\f]/;
	var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;

	var createMicrosoftUnsafeLocalFunction = __webpack_require__(87);

	// SVG temp container for IE lacking innerHTML
	var reusableSVGContainer;

	/**
	 * Set the innerHTML property of a node, ensuring that whitespace is preserved
	 * even in IE8.
	 *
	 * @param {DOMElement} node
	 * @param {string} html
	 * @internal
	 */
	var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
	  // IE does not have innerHTML for SVG nodes, so instead we inject the
	  // new markup in a temp node and then move the child nodes across into
	  // the target node
	  if (node.namespaceURI === DOMNamespaces.svg && !('innerHTML' in node)) {
	    reusableSVGContainer = reusableSVGContainer || document.createElement('div');
	    reusableSVGContainer.innerHTML = '<svg>' + html + '</svg>';
	    var newNodes = reusableSVGContainer.firstChild.childNodes;
	    for (var i = 0; i < newNodes.length; i++) {
	      node.appendChild(newNodes[i]);
	    }
	  } else {
	    node.innerHTML = html;
	  }
	});

	if (ExecutionEnvironment.canUseDOM) {
	  // IE8: When updating a just created node with innerHTML only leading
	  // whitespace is removed. When updating an existing node with innerHTML
	  // whitespace in root TextNodes is also collapsed.
	  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

	  // Feature detection; only IE8 is known to behave improperly like this.
	  var testElement = document.createElement('div');
	  testElement.innerHTML = ' ';
	  if (testElement.innerHTML === '') {
	    setInnerHTML = function (node, html) {
	      // Magic theory: IE8 supposedly differentiates between added and updated
	      // nodes when processing innerHTML, innerHTML on updated nodes suffers
	      // from worse whitespace behavior. Re-adding a node like this triggers
	      // the initial and more favorable whitespace behavior.
	      // TODO: What to do on a detached node?
	      if (node.parentNode) {
	        node.parentNode.replaceChild(node, node);
	      }

	      // We also implement a workaround for non-visible tags disappearing into
	      // thin air on IE8, this only happens if there is no visible text
	      // in-front of the non-visible tags. Piggyback on the whitespace fix
	      // and simply check if any non-visible tags appear in the source.
	      if (WHITESPACE_TEST.test(html) || html[0] === '<' && NONVISIBLE_TEST.test(html)) {
	        // Recover leading whitespace by temporarily prepending any character.
	        // \uFEFF has the potential advantage of being zero-width/invisible.
	        // UglifyJS drops U+FEFF chars when parsing, so use String.fromCharCode
	        // in hopes that this is preserved even if "\uFEFF" is transformed to
	        // the actual Unicode character (by Babel, for example).
	        // https://github.com/mishoo/UglifyJS2/blob/v2.4.20/lib/parse.js#L216
	        node.innerHTML = String.fromCharCode(0xFEFF) + html;

	        // deleteData leaves an empty `TextNode` which offsets the index of all
	        // children. Definitely want to avoid this.
	        var textNode = node.firstChild;
	        if (textNode.data.length === 1) {
	          node.removeChild(textNode);
	        } else {
	          textNode.deleteData(0, 1);
	        }
	      } else {
	        node.innerHTML = html;
	      }
	    };
	  }
	  testElement = null;
	}

	module.exports = setInnerHTML;

/***/ }),
/* 87 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule createMicrosoftUnsafeLocalFunction
	 */

	/* globals MSApp */

	'use strict';

	/**
	 * Create a function which has 'unsafe' privileges (required by windows8 apps)
	 */

	var createMicrosoftUnsafeLocalFunction = function (func) {
	  if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
	    return function (arg0, arg1, arg2, arg3) {
	      MSApp.execUnsafeLocalFunction(function () {
	        return func(arg0, arg1, arg2, arg3);
	      });
	    };
	  } else {
	    return func;
	  }
	};

	module.exports = createMicrosoftUnsafeLocalFunction;

/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule setTextContent
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(51);
	var escapeTextContentForBrowser = __webpack_require__(89);
	var setInnerHTML = __webpack_require__(86);

	/**
	 * Set the textContent property of a node, ensuring that whitespace is preserved
	 * even in IE8. innerText is a poor substitute for textContent and, among many
	 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
	 * as it should.
	 *
	 * @param {DOMElement} node
	 * @param {string} text
	 * @internal
	 */
	var setTextContent = function (node, text) {
	  if (text) {
	    var firstChild = node.firstChild;

	    if (firstChild && firstChild === node.lastChild && firstChild.nodeType === 3) {
	      firstChild.nodeValue = text;
	      return;
	    }
	  }
	  node.textContent = text;
	};

	if (ExecutionEnvironment.canUseDOM) {
	  if (!('textContent' in document.documentElement)) {
	    setTextContent = function (node, text) {
	      setInnerHTML(node, escapeTextContentForBrowser(text));
	    };
	  }
	}

	module.exports = setTextContent;

/***/ }),
/* 89 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * Based on the escape-html library, which is used under the MIT License below:
	 *
	 * Copyright (c) 2012-2013 TJ Holowaychuk
	 * Copyright (c) 2015 Andreas Lubbe
	 * Copyright (c) 2015 Tiancheng "Timothy" Gu
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining
	 * a copy of this software and associated documentation files (the
	 * 'Software'), to deal in the Software without restriction, including
	 * without limitation the rights to use, copy, modify, merge, publish,
	 * distribute, sublicense, and/or sell copies of the Software, and to
	 * permit persons to whom the Software is furnished to do so, subject to
	 * the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be
	 * included in all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
	 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
	 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
	 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
	 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
	 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
	 *
	 * @providesModule escapeTextContentForBrowser
	 */

	'use strict';

	// code copied and modified from escape-html
	/**
	 * Module variables.
	 * @private
	 */

	var matchHtmlRegExp = /["'&<>]/;

	/**
	 * Escape special characters in the given string of html.
	 *
	 * @param  {string} string The string to escape for inserting into HTML
	 * @return {string}
	 * @public
	 */

	function escapeHtml(string) {
	  var str = '' + string;
	  var match = matchHtmlRegExp.exec(str);

	  if (!match) {
	    return str;
	  }

	  var escape;
	  var html = '';
	  var index = 0;
	  var lastIndex = 0;

	  for (index = match.index; index < str.length; index++) {
	    switch (str.charCodeAt(index)) {
	      case 34:
	        // "
	        escape = '&quot;';
	        break;
	      case 38:
	        // &
	        escape = '&amp;';
	        break;
	      case 39:
	        // '
	        escape = '&#x27;'; // modified from escape-html; used to be '&#39'
	        break;
	      case 60:
	        // <
	        escape = '&lt;';
	        break;
	      case 62:
	        // >
	        escape = '&gt;';
	        break;
	      default:
	        continue;
	    }

	    if (lastIndex !== index) {
	      html += str.substring(lastIndex, index);
	    }

	    lastIndex = index + 1;
	    html += escape;
	  }

	  return lastIndex !== index ? html + str.substring(lastIndex, index) : html;
	}
	// end code copied and modified from escape-html

	/**
	 * Escapes text to prevent scripting attacks.
	 *
	 * @param {*} text Text value to escape.
	 * @return {string} An escaped string.
	 */
	function escapeTextContentForBrowser(text) {
	  if (typeof text === 'boolean' || typeof text === 'number') {
	    // this shortcircuit helps perf for types that we know will never have
	    // special characters, especially given that this function is used often
	    // for numeric dom ids.
	    return '' + text;
	  }
	  return escapeHtml(text);
	}

	module.exports = escapeTextContentForBrowser;

/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Danger
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(8);

	var DOMLazyTree = __webpack_require__(84);
	var ExecutionEnvironment = __webpack_require__(51);

	var createNodesFromMarkup = __webpack_require__(91);
	var emptyFunction = __webpack_require__(13);
	var invariant = __webpack_require__(9);

	var Danger = {

	  /**
	   * Replaces a node with a string of markup at its current position within its
	   * parent. The markup must render into a single root node.
	   *
	   * @param {DOMElement} oldChild Child node to replace.
	   * @param {string} markup Markup to render in place of the child node.
	   * @internal
	   */
	  dangerouslyReplaceNodeWithMarkup: function (oldChild, markup) {
	    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a worker thread. Make sure `window` and `document` are available globally before requiring React when unit testing or use ReactDOMServer.renderToString() for server rendering.') : _prodInvariant('56') : void 0;
	    !markup ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : _prodInvariant('57') : void 0;
	    !(oldChild.nodeName !== 'HTML') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the <html> node. This is because browser quirks make this unreliable and/or slow. If you want to render to the root you must use server rendering. See ReactDOMServer.renderToString().') : _prodInvariant('58') : void 0;

	    if (typeof markup === 'string') {
	      var newChild = createNodesFromMarkup(markup, emptyFunction)[0];
	      oldChild.parentNode.replaceChild(newChild, oldChild);
	    } else {
	      DOMLazyTree.replaceChildWithTree(oldChild, markup);
	    }
	  }

	};

	module.exports = Danger;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @typechecks
	 */

	/*eslint-disable fb-www/unsafe-html*/

	var ExecutionEnvironment = __webpack_require__(51);

	var createArrayFromMixed = __webpack_require__(92);
	var getMarkupWrap = __webpack_require__(93);
	var invariant = __webpack_require__(9);

	/**
	 * Dummy container used to render all markup.
	 */
	var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

	/**
	 * Pattern used by `getNodeName`.
	 */
	var nodeNamePattern = /^\s*<(\w+)/;

	/**
	 * Extracts the `nodeName` of the first element in a string of markup.
	 *
	 * @param {string} markup String of markup.
	 * @return {?string} Node name of the supplied markup.
	 */
	function getNodeName(markup) {
	  var nodeNameMatch = markup.match(nodeNamePattern);
	  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
	}

	/**
	 * Creates an array containing the nodes rendered from the supplied markup. The
	 * optionally supplied `handleScript` function will be invoked once for each
	 * <script> element that is rendered. If no `handleScript` function is supplied,
	 * an exception is thrown if any <script> elements are rendered.
	 *
	 * @param {string} markup A string of valid HTML markup.
	 * @param {?function} handleScript Invoked once for each rendered <script>.
	 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
	 */
	function createNodesFromMarkup(markup, handleScript) {
	  var node = dummyNode;
	  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : void 0;
	  var nodeName = getNodeName(markup);

	  var wrap = nodeName && getMarkupWrap(nodeName);
	  if (wrap) {
	    node.innerHTML = wrap[1] + markup + wrap[2];

	    var wrapDepth = wrap[0];
	    while (wrapDepth--) {
	      node = node.lastChild;
	    }
	  } else {
	    node.innerHTML = markup;
	  }

	  var scripts = node.getElementsByTagName('script');
	  if (scripts.length) {
	    !handleScript ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : void 0;
	    createArrayFromMixed(scripts).forEach(handleScript);
	  }

	  var nodes = Array.from(node.childNodes);
	  while (node.lastChild) {
	    node.removeChild(node.lastChild);
	  }
	  return nodes;
	}

	module.exports = createNodesFromMarkup;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @typechecks
	 */

	var invariant = __webpack_require__(9);

	/**
	 * Convert array-like objects to arrays.
	 *
	 * This API assumes the caller knows the contents of the data type. For less
	 * well defined inputs use createArrayFromMixed.
	 *
	 * @param {object|function|filelist} obj
	 * @return {array}
	 */
	function toArray(obj) {
	  var length = obj.length;

	  // Some browsers builtin objects can report typeof 'function' (e.g. NodeList
	  // in old versions of Safari).
	  !(!Array.isArray(obj) && (typeof obj === 'object' || typeof obj === 'function')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : void 0;

	  !(typeof length === 'number') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : void 0;

	  !(length === 0 || length - 1 in obj) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : void 0;

	  !(typeof obj.callee !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object can\'t be `arguments`. Use rest params ' + '(function(...args) {}) or Array.from() instead.') : invariant(false) : void 0;

	  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
	  // without method will throw during the slice call and skip straight to the
	  // fallback.
	  if (obj.hasOwnProperty) {
	    try {
	      return Array.prototype.slice.call(obj);
	    } catch (e) {
	      // IE < 9 does not support Array#slice on collections objects
	    }
	  }

	  // Fall back to copying key by key. This assumes all keys have a value,
	  // so will not preserve sparsely populated inputs.
	  var ret = Array(length);
	  for (var ii = 0; ii < length; ii++) {
	    ret[ii] = obj[ii];
	  }
	  return ret;
	}

	/**
	 * Perform a heuristic test to determine if an object is "array-like".
	 *
	 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
	 *   Joshu replied: "Mu."
	 *
	 * This function determines if its argument has "array nature": it returns
	 * true if the argument is an actual array, an `arguments' object, or an
	 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
	 *
	 * It will return false for other array-like objects like Filelist.
	 *
	 * @param {*} obj
	 * @return {boolean}
	 */
	function hasArrayNature(obj) {
	  return (
	    // not null/false
	    !!obj && (
	    // arrays are objects, NodeLists are functions in Safari
	    typeof obj == 'object' || typeof obj == 'function') &&
	    // quacks like an array
	    'length' in obj &&
	    // not window
	    !('setInterval' in obj) &&
	    // no DOM node should be considered an array-like
	    // a 'select' element has 'length' and 'item' properties on IE8
	    typeof obj.nodeType != 'number' && (
	    // a real array
	    Array.isArray(obj) ||
	    // arguments
	    'callee' in obj ||
	    // HTMLCollection/NodeList
	    'item' in obj)
	  );
	}

	/**
	 * Ensure that the argument is an array by wrapping it in an array if it is not.
	 * Creates a copy of the argument if it is already an array.
	 *
	 * This is mostly useful idiomatically:
	 *
	 *   var createArrayFromMixed = require('createArrayFromMixed');
	 *
	 *   function takesOneOrMoreThings(things) {
	 *     things = createArrayFromMixed(things);
	 *     ...
	 *   }
	 *
	 * This allows you to treat `things' as an array, but accept scalars in the API.
	 *
	 * If you need to convert an array-like object, like `arguments`, into an array
	 * use toArray instead.
	 *
	 * @param {*} obj
	 * @return {array}
	 */
	function createArrayFromMixed(obj) {
	  if (!hasArrayNature(obj)) {
	    return [obj];
	  } else if (Array.isArray(obj)) {
	    return obj.slice();
	  } else {
	    return toArray(obj);
	  }
	}

	module.exports = createArrayFromMixed;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	/*eslint-disable fb-www/unsafe-html */

	var ExecutionEnvironment = __webpack_require__(51);

	var invariant = __webpack_require__(9);

	/**
	 * Dummy container used to detect which wraps are necessary.
	 */
	var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

	/**
	 * Some browsers cannot use `innerHTML` to render certain elements standalone,
	 * so we wrap them, render the wrapped nodes, then extract the desired node.
	 *
	 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
	 */

	var shouldWrap = {};

	var selectWrap = [1, '<select multiple="true">', '</select>'];
	var tableWrap = [1, '<table>', '</table>'];
	var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

	var svgWrap = [1, '<svg xmlns="http://www.w3.org/2000/svg">', '</svg>'];

	var markupWrap = {
	  '*': [1, '?<div>', '</div>'],

	  'area': [1, '<map>', '</map>'],
	  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
	  'legend': [1, '<fieldset>', '</fieldset>'],
	  'param': [1, '<object>', '</object>'],
	  'tr': [2, '<table><tbody>', '</tbody></table>'],

	  'optgroup': selectWrap,
	  'option': selectWrap,

	  'caption': tableWrap,
	  'colgroup': tableWrap,
	  'tbody': tableWrap,
	  'tfoot': tableWrap,
	  'thead': tableWrap,

	  'td': trWrap,
	  'th': trWrap
	};

	// Initialize the SVG elements since we know they'll always need to be wrapped
	// consistently. If they are created inside a <div> they will be initialized in
	// the wrong namespace (and will not display).
	var svgElements = ['circle', 'clipPath', 'defs', 'ellipse', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'text', 'tspan'];
	svgElements.forEach(function (nodeName) {
	  markupWrap[nodeName] = svgWrap;
	  shouldWrap[nodeName] = true;
	});

	/**
	 * Gets the markup wrap configuration for the supplied `nodeName`.
	 *
	 * NOTE: This lazily detects which wraps are necessary for the current browser.
	 *
	 * @param {string} nodeName Lowercase `nodeName`.
	 * @return {?array} Markup wrap configuration, if applicable.
	 */
	function getMarkupWrap(nodeName) {
	  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Markup wrapping node not initialized') : invariant(false) : void 0;
	  if (!markupWrap.hasOwnProperty(nodeName)) {
	    nodeName = '*';
	  }
	  if (!shouldWrap.hasOwnProperty(nodeName)) {
	    if (nodeName === '*') {
	      dummyNode.innerHTML = '<link />';
	    } else {
	      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
	    }
	    shouldWrap[nodeName] = !dummyNode.firstChild;
	  }
	  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
	}

	module.exports = getMarkupWrap;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMultiChildUpdateTypes
	 */

	'use strict';

	var keyMirror = __webpack_require__(24);

	/**
	 * When a component's children are updated, a series of update configuration
	 * objects are created in order to batch and serialize the required changes.
	 *
	 * Enumerates all the possible types of update configurations.
	 *
	 * @internal
	 */
	var ReactMultiChildUpdateTypes = keyMirror({
	  INSERT_MARKUP: null,
	  MOVE_EXISTING: null,
	  REMOVE_NODE: null,
	  SET_MARKUP: null,
	  TEXT_CONTENT: null
	});

	module.exports = ReactMultiChildUpdateTypes;

/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMIDOperations
	 */

	'use strict';

	var DOMChildrenOperations = __webpack_require__(83);
	var ReactDOMComponentTree = __webpack_require__(38);

	/**
	 * Operations used to process updates to DOM nodes.
	 */
	var ReactDOMIDOperations = {

	  /**
	   * Updates a component's children by processing a series of updates.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @internal
	   */
	  dangerouslyProcessChildrenUpdates: function (parentInst, updates) {
	    var node = ReactDOMComponentTree.getNodeFromInstance(parentInst);
	    DOMChildrenOperations.processUpdates(node, updates);
	  }
	};

	module.exports = ReactDOMIDOperations;

/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMComponent
	 */

	/* global hasOwnProperty:true */

	'use strict';

	var _prodInvariant = __webpack_require__(8),
	    _assign = __webpack_require__(5);

	var AutoFocusUtils = __webpack_require__(97);
	var CSSPropertyOperations = __webpack_require__(99);
	var DOMLazyTree = __webpack_require__(84);
	var DOMNamespaces = __webpack_require__(85);
	var DOMProperty = __webpack_require__(39);
	var DOMPropertyOperations = __webpack_require__(107);
	var EventConstants = __webpack_require__(43);
	var EventPluginHub = __webpack_require__(45);
	var EventPluginRegistry = __webpack_require__(46);
	var ReactBrowserEventEmitter = __webpack_require__(113);
	var ReactComponentBrowserEnvironment = __webpack_require__(82);
	var ReactDOMButton = __webpack_require__(116);
	var ReactDOMComponentFlags = __webpack_require__(40);
	var ReactDOMComponentTree = __webpack_require__(38);
	var ReactDOMInput = __webpack_require__(118);
	var ReactDOMOption = __webpack_require__(120);
	var ReactDOMSelect = __webpack_require__(121);
	var ReactDOMTextarea = __webpack_require__(122);
	var ReactInstrumentation = __webpack_require__(64);
	var ReactMultiChild = __webpack_require__(123);
	var ReactServerRenderingTransaction = __webpack_require__(135);

	var emptyFunction = __webpack_require__(13);
	var escapeTextContentForBrowser = __webpack_require__(89);
	var invariant = __webpack_require__(9);
	var isEventSupported = __webpack_require__(73);
	var keyOf = __webpack_require__(26);
	var shallowEqual = __webpack_require__(130);
	var validateDOMNesting = __webpack_require__(138);
	var warning = __webpack_require__(12);

	var Flags = ReactDOMComponentFlags;
	var deleteListener = EventPluginHub.deleteListener;
	var getNode = ReactDOMComponentTree.getNodeFromInstance;
	var listenTo = ReactBrowserEventEmitter.listenTo;
	var registrationNameModules = EventPluginRegistry.registrationNameModules;

	// For quickly matching children type, to test if can be treated as content.
	var CONTENT_TYPES = { 'string': true, 'number': true };

	var STYLE = keyOf({ style: null });
	var HTML = keyOf({ __html: null });
	var RESERVED_PROPS = {
	  children: null,
	  dangerouslySetInnerHTML: null,
	  suppressContentEditableWarning: null
	};

	// Node type for document fragments (Node.DOCUMENT_FRAGMENT_NODE).
	var DOC_FRAGMENT_TYPE = 11;

	function getDeclarationErrorAddendum(internalInstance) {
	  if (internalInstance) {
	    var owner = internalInstance._currentElement._owner || null;
	    if (owner) {
	      var name = owner.getName();
	      if (name) {
	        return ' This DOM node was rendered by `' + name + '`.';
	      }
	    }
	  }
	  return '';
	}

	function friendlyStringify(obj) {
	  if (typeof obj === 'object') {
	    if (Array.isArray(obj)) {
	      return '[' + obj.map(friendlyStringify).join(', ') + ']';
	    } else {
	      var pairs = [];
	      for (var key in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, key)) {
	          var keyEscaped = /^[a-z$_][\w$_]*$/i.test(key) ? key : JSON.stringify(key);
	          pairs.push(keyEscaped + ': ' + friendlyStringify(obj[key]));
	        }
	      }
	      return '{' + pairs.join(', ') + '}';
	    }
	  } else if (typeof obj === 'string') {
	    return JSON.stringify(obj);
	  } else if (typeof obj === 'function') {
	    return '[function object]';
	  }
	  // Differs from JSON.stringify in that undefined because undefined and that
	  // inf and nan don't become null
	  return String(obj);
	}

	var styleMutationWarning = {};

	function checkAndWarnForMutatedStyle(style1, style2, component) {
	  if (style1 == null || style2 == null) {
	    return;
	  }
	  if (shallowEqual(style1, style2)) {
	    return;
	  }

	  var componentName = component._tag;
	  var owner = component._currentElement._owner;
	  var ownerName;
	  if (owner) {
	    ownerName = owner.getName();
	  }

	  var hash = ownerName + '|' + componentName;

	  if (styleMutationWarning.hasOwnProperty(hash)) {
	    return;
	  }

	  styleMutationWarning[hash] = true;

	  process.env.NODE_ENV !== 'production' ? warning(false, '`%s` was passed a style object that has previously been mutated. ' + 'Mutating `style` is deprecated. Consider cloning it beforehand. Check ' + 'the `render` %s. Previous style: %s. Mutated style: %s.', componentName, owner ? 'of `' + ownerName + '`' : 'using <' + componentName + '>', friendlyStringify(style1), friendlyStringify(style2)) : void 0;
	}

	/**
	 * @param {object} component
	 * @param {?object} props
	 */
	function assertValidProps(component, props) {
	  if (!props) {
	    return;
	  }
	  // Note the use of `==` which checks for null or undefined.
	  if (voidElementTags[component._tag]) {
	    !(props.children == null && props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.%s', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : _prodInvariant('137', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : void 0;
	  }
	  if (props.dangerouslySetInnerHTML != null) {
	    !(props.children == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : _prodInvariant('60') : void 0;
	    !(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.') : _prodInvariant('61') : void 0;
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(props.innerHTML == null, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.') : void 0;
	    process.env.NODE_ENV !== 'production' ? warning(props.suppressContentEditableWarning || !props.contentEditable || props.children == null, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : void 0;
	    process.env.NODE_ENV !== 'production' ? warning(props.onFocusIn == null && props.onFocusOut == null, 'React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.') : void 0;
	  }
	  !(props.style == null || typeof props.style === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + \'em\'}} when using JSX.%s', getDeclarationErrorAddendum(component)) : _prodInvariant('62', getDeclarationErrorAddendum(component)) : void 0;
	}

	function enqueuePutListener(inst, registrationName, listener, transaction) {
	  if (transaction instanceof ReactServerRenderingTransaction) {
	    return;
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    // IE8 has no API for event capturing and the `onScroll` event doesn't
	    // bubble.
	    process.env.NODE_ENV !== 'production' ? warning(registrationName !== 'onScroll' || isEventSupported('scroll', true), 'This browser doesn\'t support the `onScroll` event') : void 0;
	  }
	  var containerInfo = inst._hostContainerInfo;
	  var isDocumentFragment = containerInfo._node && containerInfo._node.nodeType === DOC_FRAGMENT_TYPE;
	  var doc = isDocumentFragment ? containerInfo._node : containerInfo._ownerDocument;
	  listenTo(registrationName, doc);
	  transaction.getReactMountReady().enqueue(putListener, {
	    inst: inst,
	    registrationName: registrationName,
	    listener: listener
	  });
	}

	function putListener() {
	  var listenerToPut = this;
	  EventPluginHub.putListener(listenerToPut.inst, listenerToPut.registrationName, listenerToPut.listener);
	}

	function inputPostMount() {
	  var inst = this;
	  ReactDOMInput.postMountWrapper(inst);
	}

	function textareaPostMount() {
	  var inst = this;
	  ReactDOMTextarea.postMountWrapper(inst);
	}

	function optionPostMount() {
	  var inst = this;
	  ReactDOMOption.postMountWrapper(inst);
	}

	var setContentChildForInstrumentation = emptyFunction;
	if (process.env.NODE_ENV !== 'production') {
	  setContentChildForInstrumentation = function (content) {
	    var hasExistingContent = this._contentDebugID != null;
	    var debugID = this._debugID;
	    var contentDebugID = debugID + '#text';

	    if (content == null) {
	      if (hasExistingContent) {
	        ReactInstrumentation.debugTool.onUnmountComponent(this._contentDebugID);
	      }
	      this._contentDebugID = null;
	      return;
	    }

	    this._contentDebugID = contentDebugID;
	    var text = '' + content;

	    ReactInstrumentation.debugTool.onSetDisplayName(contentDebugID, '#text');
	    ReactInstrumentation.debugTool.onSetParent(contentDebugID, debugID);
	    ReactInstrumentation.debugTool.onSetText(contentDebugID, text);

	    if (hasExistingContent) {
	      ReactInstrumentation.debugTool.onBeforeUpdateComponent(contentDebugID, content);
	      ReactInstrumentation.debugTool.onUpdateComponent(contentDebugID);
	    } else {
	      ReactInstrumentation.debugTool.onBeforeMountComponent(contentDebugID, content);
	      ReactInstrumentation.debugTool.onMountComponent(contentDebugID);
	      ReactInstrumentation.debugTool.onSetChildren(debugID, [contentDebugID]);
	    }
	  };
	}

	// There are so many media events, it makes sense to just
	// maintain a list rather than create a `trapBubbledEvent` for each
	var mediaEvents = {
	  topAbort: 'abort',
	  topCanPlay: 'canplay',
	  topCanPlayThrough: 'canplaythrough',
	  topDurationChange: 'durationchange',
	  topEmptied: 'emptied',
	  topEncrypted: 'encrypted',
	  topEnded: 'ended',
	  topError: 'error',
	  topLoadedData: 'loadeddata',
	  topLoadedMetadata: 'loadedmetadata',
	  topLoadStart: 'loadstart',
	  topPause: 'pause',
	  topPlay: 'play',
	  topPlaying: 'playing',
	  topProgress: 'progress',
	  topRateChange: 'ratechange',
	  topSeeked: 'seeked',
	  topSeeking: 'seeking',
	  topStalled: 'stalled',
	  topSuspend: 'suspend',
	  topTimeUpdate: 'timeupdate',
	  topVolumeChange: 'volumechange',
	  topWaiting: 'waiting'
	};

	function trapBubbledEventsLocal() {
	  var inst = this;
	  // If a component renders to null or if another component fatals and causes
	  // the state of the tree to be corrupted, `node` here can be null.
	  !inst._rootNodeID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Must be mounted to trap events') : _prodInvariant('63') : void 0;
	  var node = getNode(inst);
	  !node ? process.env.NODE_ENV !== 'production' ? invariant(false, 'trapBubbledEvent(...): Requires node to be rendered.') : _prodInvariant('64') : void 0;

	  switch (inst._tag) {
	    case 'iframe':
	    case 'object':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load', node)];
	      break;
	    case 'video':
	    case 'audio':

	      inst._wrapperState.listeners = [];
	      // Create listener for each media event
	      for (var event in mediaEvents) {
	        if (mediaEvents.hasOwnProperty(event)) {
	          inst._wrapperState.listeners.push(ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes[event], mediaEvents[event], node));
	        }
	      }
	      break;
	    case 'source':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error', node)];
	      break;
	    case 'img':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error', node), ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load', node)];
	      break;
	    case 'form':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topReset, 'reset', node), ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit, 'submit', node)];
	      break;
	    case 'input':
	    case 'select':
	    case 'textarea':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topInvalid, 'invalid', node)];
	      break;
	  }
	}

	function postUpdateSelectWrapper() {
	  ReactDOMSelect.postUpdateWrapper(this);
	}

	// For HTML, certain tags should omit their close tag. We keep a whitelist for
	// those special-case tags.

	var omittedCloseTags = {
	  'area': true,
	  'base': true,
	  'br': true,
	  'col': true,
	  'embed': true,
	  'hr': true,
	  'img': true,
	  'input': true,
	  'keygen': true,
	  'link': true,
	  'meta': true,
	  'param': true,
	  'source': true,
	  'track': true,
	  'wbr': true
	};

	// NOTE: menuitem's close tag should be omitted, but that causes problems.
	var newlineEatingTags = {
	  'listing': true,
	  'pre': true,
	  'textarea': true
	};

	// For HTML, certain tags cannot have children. This has the same purpose as
	// `omittedCloseTags` except that `menuitem` should still have its closing tag.

	var voidElementTags = _assign({
	  'menuitem': true
	}, omittedCloseTags);

	// We accept any tag to be rendered but since this gets injected into arbitrary
	// HTML, we want to make sure that it's a safe tag.
	// http://www.w3.org/TR/REC-xml/#NT-Name

	var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
	var validatedTagCache = {};
	var hasOwnProperty = {}.hasOwnProperty;

	function validateDangerousTag(tag) {
	  if (!hasOwnProperty.call(validatedTagCache, tag)) {
	    !VALID_TAG_REGEX.test(tag) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Invalid tag: %s', tag) : _prodInvariant('65', tag) : void 0;
	    validatedTagCache[tag] = true;
	  }
	}

	function isCustomComponent(tagName, props) {
	  return tagName.indexOf('-') >= 0 || props.is != null;
	}

	var globalIdCounter = 1;

	/**
	 * Creates a new React class that is idempotent and capable of containing other
	 * React components. It accepts event listeners and DOM properties that are
	 * valid according to `DOMProperty`.
	 *
	 *  - Event listeners: `onClick`, `onMouseDown`, etc.
	 *  - DOM properties: `className`, `name`, `title`, etc.
	 *
	 * The `style` property functions differently from the DOM API. It accepts an
	 * object mapping of style properties to values.
	 *
	 * @constructor ReactDOMComponent
	 * @extends ReactMultiChild
	 */
	function ReactDOMComponent(element) {
	  var tag = element.type;
	  validateDangerousTag(tag);
	  this._currentElement = element;
	  this._tag = tag.toLowerCase();
	  this._namespaceURI = null;
	  this._renderedChildren = null;
	  this._previousStyle = null;
	  this._previousStyleCopy = null;
	  this._hostNode = null;
	  this._hostParent = null;
	  this._rootNodeID = null;
	  this._domID = null;
	  this._hostContainerInfo = null;
	  this._wrapperState = null;
	  this._topLevelWrapper = null;
	  this._flags = 0;
	  if (process.env.NODE_ENV !== 'production') {
	    this._ancestorInfo = null;
	    setContentChildForInstrumentation.call(this, null);
	  }
	}

	ReactDOMComponent.displayName = 'ReactDOMComponent';

	ReactDOMComponent.Mixin = {

	  /**
	   * Generates root tag markup then recurses. This method has side effects and
	   * is not idempotent.
	   *
	   * @internal
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {?ReactDOMComponent} the containing DOM component instance
	   * @param {?object} info about the host container
	   * @param {object} context
	   * @return {string} The computed markup.
	   */
	  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
	    var _this = this;

	    this._rootNodeID = globalIdCounter++;
	    this._domID = hostContainerInfo._idCounter++;
	    this._hostParent = hostParent;
	    this._hostContainerInfo = hostContainerInfo;

	    var props = this._currentElement.props;

	    switch (this._tag) {
	      case 'audio':
	      case 'form':
	      case 'iframe':
	      case 'img':
	      case 'link':
	      case 'object':
	      case 'source':
	      case 'video':
	        this._wrapperState = {
	          listeners: null
	        };
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	      case 'button':
	        props = ReactDOMButton.getHostProps(this, props, hostParent);
	        break;
	      case 'input':
	        ReactDOMInput.mountWrapper(this, props, hostParent);
	        props = ReactDOMInput.getHostProps(this, props);
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	      case 'option':
	        ReactDOMOption.mountWrapper(this, props, hostParent);
	        props = ReactDOMOption.getHostProps(this, props);
	        break;
	      case 'select':
	        ReactDOMSelect.mountWrapper(this, props, hostParent);
	        props = ReactDOMSelect.getHostProps(this, props);
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	      case 'textarea':
	        ReactDOMTextarea.mountWrapper(this, props, hostParent);
	        props = ReactDOMTextarea.getHostProps(this, props);
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	    }

	    assertValidProps(this, props);

	    // We create tags in the namespace of their parent container, except HTML
	    // tags get no namespace.
	    var namespaceURI;
	    var parentTag;
	    if (hostParent != null) {
	      namespaceURI = hostParent._namespaceURI;
	      parentTag = hostParent._tag;
	    } else if (hostContainerInfo._tag) {
	      namespaceURI = hostContainerInfo._namespaceURI;
	      parentTag = hostContainerInfo._tag;
	    }
	    if (namespaceURI == null || namespaceURI === DOMNamespaces.svg && parentTag === 'foreignobject') {
	      namespaceURI = DOMNamespaces.html;
	    }
	    if (namespaceURI === DOMNamespaces.html) {
	      if (this._tag === 'svg') {
	        namespaceURI = DOMNamespaces.svg;
	      } else if (this._tag === 'math') {
	        namespaceURI = DOMNamespaces.mathml;
	      }
	    }
	    this._namespaceURI = namespaceURI;

	    if (process.env.NODE_ENV !== 'production') {
	      var parentInfo;
	      if (hostParent != null) {
	        parentInfo = hostParent._ancestorInfo;
	      } else if (hostContainerInfo._tag) {
	        parentInfo = hostContainerInfo._ancestorInfo;
	      }
	      if (parentInfo) {
	        // parentInfo should always be present except for the top-level
	        // component when server rendering
	        validateDOMNesting(this._tag, this, parentInfo);
	      }
	      this._ancestorInfo = validateDOMNesting.updatedAncestorInfo(parentInfo, this._tag, this);
	    }

	    var mountImage;
	    if (transaction.useCreateElement) {
	      var ownerDocument = hostContainerInfo._ownerDocument;
	      var el;
	      if (namespaceURI === DOMNamespaces.html) {
	        if (this._tag === 'script') {
	          // Create the script via .innerHTML so its "parser-inserted" flag is
	          // set to true and it does not execute
	          var div = ownerDocument.createElement('div');
	          var type = this._currentElement.type;
	          div.innerHTML = '<' + type + '></' + type + '>';
	          el = div.removeChild(div.firstChild);
	        } else if (props.is) {
	          el = ownerDocument.createElement(this._currentElement.type, props.is);
	        } else {
	          // Separate else branch instead of using `props.is || undefined` above becuase of a Firefox bug.
	          // See discussion in https://github.com/facebook/react/pull/6896
	          // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
	          el = ownerDocument.createElement(this._currentElement.type);
	        }
	      } else {
	        el = ownerDocument.createElementNS(namespaceURI, this._currentElement.type);
	      }
	      ReactDOMComponentTree.precacheNode(this, el);
	      this._flags |= Flags.hasCachedChildNodes;
	      if (!this._hostParent) {
	        DOMPropertyOperations.setAttributeForRoot(el);
	      }
	      this._updateDOMProperties(null, props, transaction);
	      var lazyTree = DOMLazyTree(el);
	      this._createInitialChildren(transaction, props, context, lazyTree);
	      mountImage = lazyTree;
	    } else {
	      var tagOpen = this._createOpenTagMarkupAndPutListeners(transaction, props);
	      var tagContent = this._createContentMarkup(transaction, props, context);
	      if (!tagContent && omittedCloseTags[this._tag]) {
	        mountImage = tagOpen + '/>';
	      } else {
	        mountImage = tagOpen + '>' + tagContent + '</' + this._currentElement.type + '>';
	      }
	    }

	    switch (this._tag) {
	      case 'input':
	        transaction.getReactMountReady().enqueue(inputPostMount, this);
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	      case 'textarea':
	        transaction.getReactMountReady().enqueue(textareaPostMount, this);
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	      case 'select':
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	      case 'button':
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	      case 'option':
	        transaction.getReactMountReady().enqueue(optionPostMount, this);
	        break;
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      if (this._debugID) {
	        var callback = function () {
	          return ReactInstrumentation.debugTool.onComponentHasMounted(_this._debugID);
	        };
	        transaction.getReactMountReady().enqueue(callback, this);
	      }
	    }

	    return mountImage;
	  },

	  /**
	   * Creates markup for the open tag and all attributes.
	   *
	   * This method has side effects because events get registered.
	   *
	   * Iterating over object properties is faster than iterating over arrays.
	   * @see http://jsperf.com/obj-vs-arr-iteration
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} props
	   * @return {string} Markup of opening tag.
	   */
	  _createOpenTagMarkupAndPutListeners: function (transaction, props) {
	    var ret = '<' + this._currentElement.type;

	    for (var propKey in props) {
	      if (!props.hasOwnProperty(propKey)) {
	        continue;
	      }
	      var propValue = props[propKey];
	      if (propValue == null) {
	        continue;
	      }
	      if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (propValue) {
	          enqueuePutListener(this, propKey, propValue, transaction);
	        }
	      } else {
	        if (propKey === STYLE) {
	          if (propValue) {
	            if (process.env.NODE_ENV !== 'production') {
	              // See `_updateDOMProperties`. style block
	              this._previousStyle = propValue;
	            }
	            propValue = this._previousStyleCopy = _assign({}, props.style);
	          }
	          propValue = CSSPropertyOperations.createMarkupForStyles(propValue, this);
	        }
	        var markup = null;
	        if (this._tag != null && isCustomComponent(this._tag, props)) {
	          if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
	            markup = DOMPropertyOperations.createMarkupForCustomAttribute(propKey, propValue);
	          }
	        } else {
	          markup = DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
	        }
	        if (markup) {
	          ret += ' ' + markup;
	        }
	      }
	    }

	    // For static pages, no need to put React ID and checksum. Saves lots of
	    // bytes.
	    if (transaction.renderToStaticMarkup) {
	      return ret;
	    }

	    if (!this._hostParent) {
	      ret += ' ' + DOMPropertyOperations.createMarkupForRoot();
	    }
	    ret += ' ' + DOMPropertyOperations.createMarkupForID(this._domID);
	    return ret;
	  },

	  /**
	   * Creates markup for the content between the tags.
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} props
	   * @param {object} context
	   * @return {string} Content markup.
	   */
	  _createContentMarkup: function (transaction, props, context) {
	    var ret = '';

	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        ret = innerHTML.__html;
	      }
	    } else {
	      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      if (contentToUse != null) {
	        // TODO: Validate that text is allowed as a child of this node
	        ret = escapeTextContentForBrowser(contentToUse);
	        if (process.env.NODE_ENV !== 'production') {
	          setContentChildForInstrumentation.call(this, contentToUse);
	        }
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(childrenToUse, transaction, context);
	        ret = mountImages.join('');
	      }
	    }
	    if (newlineEatingTags[this._tag] && ret.charAt(0) === '\n') {
	      // text/html ignores the first character in these tags if it's a newline
	      // Prefer to break application/xml over text/html (for now) by adding
	      // a newline specifically to get eaten by the parser. (Alternately for
	      // textareas, replacing "^\n" with "\r\n" doesn't get eaten, and the first
	      // \r is normalized out by HTMLTextAreaElement#value.)
	      // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>
	      // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>
	      // See: <http://www.w3.org/TR/html5/syntax.html#newlines>
	      // See: Parsing of "textarea" "listing" and "pre" elements
	      //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>
	      return '\n' + ret;
	    } else {
	      return ret;
	    }
	  },

	  _createInitialChildren: function (transaction, props, context, lazyTree) {
	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        DOMLazyTree.queueHTML(lazyTree, innerHTML.__html);
	      }
	    } else {
	      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      if (contentToUse != null) {
	        // TODO: Validate that text is allowed as a child of this node
	        if (process.env.NODE_ENV !== 'production') {
	          setContentChildForInstrumentation.call(this, contentToUse);
	        }
	        DOMLazyTree.queueText(lazyTree, contentToUse);
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(childrenToUse, transaction, context);
	        for (var i = 0; i < mountImages.length; i++) {
	          DOMLazyTree.queueChild(lazyTree, mountImages[i]);
	        }
	      }
	    }
	  },

	  /**
	   * Receives a next element and updates the component.
	   *
	   * @internal
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} context
	   */
	  receiveComponent: function (nextElement, transaction, context) {
	    var prevElement = this._currentElement;
	    this._currentElement = nextElement;
	    this.updateComponent(transaction, prevElement, nextElement, context);
	  },

	  /**
	   * Updates a DOM component after it has already been allocated and
	   * attached to the DOM. Reconciles the root DOM node, then recurses.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevElement
	   * @param {ReactElement} nextElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function (transaction, prevElement, nextElement, context) {
	    var _this2 = this;

	    var lastProps = prevElement.props;
	    var nextProps = this._currentElement.props;

	    switch (this._tag) {
	      case 'button':
	        lastProps = ReactDOMButton.getHostProps(this, lastProps);
	        nextProps = ReactDOMButton.getHostProps(this, nextProps);
	        break;
	      case 'input':
	        ReactDOMInput.updateWrapper(this);
	        lastProps = ReactDOMInput.getHostProps(this, lastProps);
	        nextProps = ReactDOMInput.getHostProps(this, nextProps);
	        break;
	      case 'option':
	        lastProps = ReactDOMOption.getHostProps(this, lastProps);
	        nextProps = ReactDOMOption.getHostProps(this, nextProps);
	        break;
	      case 'select':
	        lastProps = ReactDOMSelect.getHostProps(this, lastProps);
	        nextProps = ReactDOMSelect.getHostProps(this, nextProps);
	        break;
	      case 'textarea':
	        ReactDOMTextarea.updateWrapper(this);
	        lastProps = ReactDOMTextarea.getHostProps(this, lastProps);
	        nextProps = ReactDOMTextarea.getHostProps(this, nextProps);
	        break;
	    }

	    assertValidProps(this, nextProps);
	    this._updateDOMProperties(lastProps, nextProps, transaction);
	    this._updateDOMChildren(lastProps, nextProps, transaction, context);

	    if (this._tag === 'select') {
	      // <select> value update needs to occur after <option> children
	      // reconciliation
	      transaction.getReactMountReady().enqueue(postUpdateSelectWrapper, this);
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      if (this._debugID) {
	        var callback = function () {
	          return ReactInstrumentation.debugTool.onComponentHasUpdated(_this2._debugID);
	        };
	        transaction.getReactMountReady().enqueue(callback, this);
	      }
	    }
	  },

	  /**
	   * Reconciles the properties by detecting differences in property values and
	   * updating the DOM as necessary. This function is probably the single most
	   * critical path for performance optimization.
	   *
	   * TODO: Benchmark whether checking for changed values in memory actually
	   *       improves performance (especially statically positioned elements).
	   * TODO: Benchmark the effects of putting this at the top since 99% of props
	   *       do not change for a given reconciliation.
	   * TODO: Benchmark areas that can be improved with caching.
	   *
	   * @private
	   * @param {object} lastProps
	   * @param {object} nextProps
	   * @param {?DOMElement} node
	   */
	  _updateDOMProperties: function (lastProps, nextProps, transaction) {
	    var propKey;
	    var styleName;
	    var styleUpdates;
	    for (propKey in lastProps) {
	      if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        var lastStyle = this._previousStyleCopy;
	        for (styleName in lastStyle) {
	          if (lastStyle.hasOwnProperty(styleName)) {
	            styleUpdates = styleUpdates || {};
	            styleUpdates[styleName] = '';
	          }
	        }
	        this._previousStyleCopy = null;
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (lastProps[propKey]) {
	          // Only call deleteListener if there was a listener previously or
	          // else willDeleteListener gets called when there wasn't actually a
	          // listener (e.g., onClick={null})
	          deleteListener(this, propKey);
	        }
	      } else if (isCustomComponent(this._tag, lastProps)) {
	        if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
	          DOMPropertyOperations.deleteValueForAttribute(getNode(this), propKey);
	        }
	      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
	        DOMPropertyOperations.deleteValueForProperty(getNode(this), propKey);
	      }
	    }
	    for (propKey in nextProps) {
	      var nextProp = nextProps[propKey];
	      var lastProp = propKey === STYLE ? this._previousStyleCopy : lastProps != null ? lastProps[propKey] : undefined;
	      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        if (nextProp) {
	          if (process.env.NODE_ENV !== 'production') {
	            checkAndWarnForMutatedStyle(this._previousStyleCopy, this._previousStyle, this);
	            this._previousStyle = nextProp;
	          }
	          nextProp = this._previousStyleCopy = _assign({}, nextProp);
	        } else {
	          this._previousStyleCopy = null;
	        }
	        if (lastProp) {
	          // Unset styles on `lastProp` but not on `nextProp`.
	          for (styleName in lastProp) {
	            if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = '';
	            }
	          }
	          // Update styles that changed since `lastProp`.
	          for (styleName in nextProp) {
	            if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = nextProp[styleName];
	            }
	          }
	        } else {
	          // Relies on `updateStylesByID` not mutating `styleUpdates`.
	          styleUpdates = nextProp;
	        }
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (nextProp) {
	          enqueuePutListener(this, propKey, nextProp, transaction);
	        } else if (lastProp) {
	          deleteListener(this, propKey);
	        }
	      } else if (isCustomComponent(this._tag, nextProps)) {
	        if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
	          DOMPropertyOperations.setValueForAttribute(getNode(this), propKey, nextProp);
	        }
	      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
	        var node = getNode(this);
	        // If we're updating to null or undefined, we should remove the property
	        // from the DOM node instead of inadvertently setting to a string. This
	        // brings us in line with the same behavior we have on initial render.
	        if (nextProp != null) {
	          DOMPropertyOperations.setValueForProperty(node, propKey, nextProp);
	        } else {
	          DOMPropertyOperations.deleteValueForProperty(node, propKey);
	        }
	      }
	    }
	    if (styleUpdates) {
	      CSSPropertyOperations.setValueForStyles(getNode(this), styleUpdates, this);
	    }
	  },

	  /**
	   * Reconciles the children with the various properties that affect the
	   * children content.
	   *
	   * @param {object} lastProps
	   * @param {object} nextProps
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   */
	  _updateDOMChildren: function (lastProps, nextProps, transaction, context) {
	    var lastContent = CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
	    var nextContent = CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

	    var lastHtml = lastProps.dangerouslySetInnerHTML && lastProps.dangerouslySetInnerHTML.__html;
	    var nextHtml = nextProps.dangerouslySetInnerHTML && nextProps.dangerouslySetInnerHTML.__html;

	    // Note the use of `!=` which checks for null or undefined.
	    var lastChildren = lastContent != null ? null : lastProps.children;
	    var nextChildren = nextContent != null ? null : nextProps.children;

	    // If we're switching from children to content/html or vice versa, remove
	    // the old content
	    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
	    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
	    if (lastChildren != null && nextChildren == null) {
	      this.updateChildren(null, transaction, context);
	    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
	      this.updateTextContent('');
	      if (process.env.NODE_ENV !== 'production') {
	        ReactInstrumentation.debugTool.onSetChildren(this._debugID, []);
	      }
	    }

	    if (nextContent != null) {
	      if (lastContent !== nextContent) {
	        this.updateTextContent('' + nextContent);
	        if (process.env.NODE_ENV !== 'production') {
	          setContentChildForInstrumentation.call(this, nextContent);
	        }
	      }
	    } else if (nextHtml != null) {
	      if (lastHtml !== nextHtml) {
	        this.updateMarkup('' + nextHtml);
	      }
	      if (process.env.NODE_ENV !== 'production') {
	        ReactInstrumentation.debugTool.onSetChildren(this._debugID, []);
	      }
	    } else if (nextChildren != null) {
	      if (process.env.NODE_ENV !== 'production') {
	        setContentChildForInstrumentation.call(this, null);
	      }

	      this.updateChildren(nextChildren, transaction, context);
	    }
	  },

	  getHostNode: function () {
	    return getNode(this);
	  },

	  /**
	   * Destroys all event registrations for this instance. Does not remove from
	   * the DOM. That must be done by the parent.
	   *
	   * @internal
	   */
	  unmountComponent: function (safely) {
	    switch (this._tag) {
	      case 'audio':
	      case 'form':
	      case 'iframe':
	      case 'img':
	      case 'link':
	      case 'object':
	      case 'source':
	      case 'video':
	        var listeners = this._wrapperState.listeners;
	        if (listeners) {
	          for (var i = 0; i < listeners.length; i++) {
	            listeners[i].remove();
	          }
	        }
	        break;
	      case 'html':
	      case 'head':
	      case 'body':
	        /**
	         * Components like <html> <head> and <body> can't be removed or added
	         * easily in a cross-browser way, however it's valuable to be able to
	         * take advantage of React's reconciliation for styling and <title>
	         * management. So we just document it and throw in dangerous cases.
	         */
	         true ? process.env.NODE_ENV !== 'production' ? invariant(false, '<%s> tried to unmount. Because of cross-browser quirks it is impossible to unmount some top-level components (eg <html>, <head>, and <body>) reliably and efficiently. To fix this, have a single top-level component that never unmounts render these elements.', this._tag) : _prodInvariant('66', this._tag) : void 0;
	        break;
	    }

	    this.unmountChildren(safely);
	    ReactDOMComponentTree.uncacheNode(this);
	    EventPluginHub.deleteAllListeners(this);
	    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
	    this._rootNodeID = null;
	    this._domID = null;
	    this._wrapperState = null;

	    if (process.env.NODE_ENV !== 'production') {
	      setContentChildForInstrumentation.call(this, null);
	    }
	  },

	  getPublicInstance: function () {
	    return getNode(this);
	  }

	};

	_assign(ReactDOMComponent.prototype, ReactDOMComponent.Mixin, ReactMultiChild.Mixin);

	module.exports = ReactDOMComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule AutoFocusUtils
	 */

	'use strict';

	var ReactDOMComponentTree = __webpack_require__(38);

	var focusNode = __webpack_require__(98);

	var AutoFocusUtils = {
	  focusDOMComponent: function () {
	    focusNode(ReactDOMComponentTree.getNodeFromInstance(this));
	  }
	};

	module.exports = AutoFocusUtils;

/***/ }),
/* 98 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	/**
	 * @param {DOMElement} node input/textarea to focus
	 */

	function focusNode(node) {
	  // IE8 can throw "Can't move focus to the control because it is invisible,
	  // not enabled, or of a type that does not accept the focus." for all kinds of
	  // reasons that are too expensive and fragile to test.
	  try {
	    node.focus();
	  } catch (e) {}
	}

	module.exports = focusNode;

/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CSSPropertyOperations
	 */

	'use strict';

	var CSSProperty = __webpack_require__(100);
	var ExecutionEnvironment = __webpack_require__(51);
	var ReactInstrumentation = __webpack_require__(64);

	var camelizeStyleName = __webpack_require__(101);
	var dangerousStyleValue = __webpack_require__(103);
	var hyphenateStyleName = __webpack_require__(104);
	var memoizeStringOnly = __webpack_require__(106);
	var warning = __webpack_require__(12);

	var processStyleName = memoizeStringOnly(function (styleName) {
	  return hyphenateStyleName(styleName);
	});

	var hasShorthandPropertyBug = false;
	var styleFloatAccessor = 'cssFloat';
	if (ExecutionEnvironment.canUseDOM) {
	  var tempStyle = document.createElement('div').style;
	  try {
	    // IE8 throws "Invalid argument." if resetting shorthand style properties.
	    tempStyle.font = '';
	  } catch (e) {
	    hasShorthandPropertyBug = true;
	  }
	  // IE8 only supports accessing cssFloat (standard) as styleFloat
	  if (document.documentElement.style.cssFloat === undefined) {
	    styleFloatAccessor = 'styleFloat';
	  }
	}

	if (process.env.NODE_ENV !== 'production') {
	  // 'msTransform' is correct, but the other prefixes should be capitalized
	  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;

	  // style values shouldn't contain a semicolon
	  var badStyleValueWithSemicolonPattern = /;\s*$/;

	  var warnedStyleNames = {};
	  var warnedStyleValues = {};
	  var warnedForNaNValue = false;

	  var warnHyphenatedStyleName = function (name, owner) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported style property %s. Did you mean %s?%s', name, camelizeStyleName(name), checkRenderMessage(owner)) : void 0;
	  };

	  var warnBadVendoredStyleName = function (name, owner) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?%s', name, name.charAt(0).toUpperCase() + name.slice(1), checkRenderMessage(owner)) : void 0;
	  };

	  var warnStyleValueWithSemicolon = function (name, value, owner) {
	    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
	      return;
	    }

	    warnedStyleValues[value] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Style property values shouldn\'t contain a semicolon.%s ' + 'Try "%s: %s" instead.', checkRenderMessage(owner), name, value.replace(badStyleValueWithSemicolonPattern, '')) : void 0;
	  };

	  var warnStyleValueIsNaN = function (name, value, owner) {
	    if (warnedForNaNValue) {
	      return;
	    }

	    warnedForNaNValue = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, '`NaN` is an invalid value for the `%s` css style property.%s', name, checkRenderMessage(owner)) : void 0;
	  };

	  var checkRenderMessage = function (owner) {
	    if (owner) {
	      var name = owner.getName();
	      if (name) {
	        return ' Check the render method of `' + name + '`.';
	      }
	    }
	    return '';
	  };

	  /**
	   * @param {string} name
	   * @param {*} value
	   * @param {ReactDOMComponent} component
	   */
	  var warnValidStyle = function (name, value, component) {
	    var owner;
	    if (component) {
	      owner = component._currentElement._owner;
	    }
	    if (name.indexOf('-') > -1) {
	      warnHyphenatedStyleName(name, owner);
	    } else if (badVendoredStyleNamePattern.test(name)) {
	      warnBadVendoredStyleName(name, owner);
	    } else if (badStyleValueWithSemicolonPattern.test(value)) {
	      warnStyleValueWithSemicolon(name, value, owner);
	    }

	    if (typeof value === 'number' && isNaN(value)) {
	      warnStyleValueIsNaN(name, value, owner);
	    }
	  };
	}

	/**
	 * Operations for dealing with CSS properties.
	 */
	var CSSPropertyOperations = {

	  /**
	   * Serializes a mapping of style properties for use as inline styles:
	   *
	   *   > createMarkupForStyles({width: '200px', height: 0})
	   *   "width:200px;height:0;"
	   *
	   * Undefined values are ignored so that declarative programming is easier.
	   * The result should be HTML-escaped before insertion into the DOM.
	   *
	   * @param {object} styles
	   * @param {ReactDOMComponent} component
	   * @return {?string}
	   */
	  createMarkupForStyles: function (styles, component) {
	    var serialized = '';
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      var styleValue = styles[styleName];
	      if (process.env.NODE_ENV !== 'production') {
	        warnValidStyle(styleName, styleValue, component);
	      }
	      if (styleValue != null) {
	        serialized += processStyleName(styleName) + ':';
	        serialized += dangerousStyleValue(styleName, styleValue, component) + ';';
	      }
	    }
	    return serialized || null;
	  },

	  /**
	   * Sets the value for multiple styles on a node.  If a value is specified as
	   * '' (empty string), the corresponding style property will be unset.
	   *
	   * @param {DOMElement} node
	   * @param {object} styles
	   * @param {ReactDOMComponent} component
	   */
	  setValueForStyles: function (node, styles, component) {
	    if (process.env.NODE_ENV !== 'production') {
	      ReactInstrumentation.debugTool.onHostOperation(component._debugID, 'update styles', styles);
	    }

	    var style = node.style;
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      if (process.env.NODE_ENV !== 'production') {
	        warnValidStyle(styleName, styles[styleName], component);
	      }
	      var styleValue = dangerousStyleValue(styleName, styles[styleName], component);
	      if (styleName === 'float' || styleName === 'cssFloat') {
	        styleName = styleFloatAccessor;
	      }
	      if (styleValue) {
	        style[styleName] = styleValue;
	      } else {
	        var expansion = hasShorthandPropertyBug && CSSProperty.shorthandPropertyExpansions[styleName];
	        if (expansion) {
	          // Shorthand property that IE8 won't like unsetting, so unset each
	          // component to placate it
	          for (var individualStyleName in expansion) {
	            style[individualStyleName] = '';
	          }
	        } else {
	          style[styleName] = '';
	        }
	      }
	    }
	  }

	};

	module.exports = CSSPropertyOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 100 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CSSProperty
	 */

	'use strict';

	/**
	 * CSS properties which accept numbers but are not in units of "px".
	 */

	var isUnitlessNumber = {
	  animationIterationCount: true,
	  borderImageOutset: true,
	  borderImageSlice: true,
	  borderImageWidth: true,
	  boxFlex: true,
	  boxFlexGroup: true,
	  boxOrdinalGroup: true,
	  columnCount: true,
	  flex: true,
	  flexGrow: true,
	  flexPositive: true,
	  flexShrink: true,
	  flexNegative: true,
	  flexOrder: true,
	  gridRow: true,
	  gridColumn: true,
	  fontWeight: true,
	  lineClamp: true,
	  lineHeight: true,
	  opacity: true,
	  order: true,
	  orphans: true,
	  tabSize: true,
	  widows: true,
	  zIndex: true,
	  zoom: true,

	  // SVG-related properties
	  fillOpacity: true,
	  floodOpacity: true,
	  stopOpacity: true,
	  strokeDasharray: true,
	  strokeDashoffset: true,
	  strokeMiterlimit: true,
	  strokeOpacity: true,
	  strokeWidth: true
	};

	/**
	 * @param {string} prefix vendor-specific prefix, eg: Webkit
	 * @param {string} key style name, eg: transitionDuration
	 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
	 * WebkitTransitionDuration
	 */
	function prefixKey(prefix, key) {
	  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
	}

	/**
	 * Support style names that may come passed in prefixed by adding permutations
	 * of vendor prefixes.
	 */
	var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

	// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
	// infinite loop, because it iterates over the newly added props too.
	Object.keys(isUnitlessNumber).forEach(function (prop) {
	  prefixes.forEach(function (prefix) {
	    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
	  });
	});

	/**
	 * Most style properties can be unset by doing .style[prop] = '' but IE8
	 * doesn't like doing that with shorthand properties so for the properties that
	 * IE8 breaks on, which are listed here, we instead unset each of the
	 * individual properties. See http://bugs.jquery.com/ticket/12385.
	 * The 4-value 'clock' properties like margin, padding, border-width seem to
	 * behave without any problems. Curiously, list-style works too without any
	 * special prodding.
	 */
	var shorthandPropertyExpansions = {
	  background: {
	    backgroundAttachment: true,
	    backgroundColor: true,
	    backgroundImage: true,
	    backgroundPositionX: true,
	    backgroundPositionY: true,
	    backgroundRepeat: true
	  },
	  backgroundPosition: {
	    backgroundPositionX: true,
	    backgroundPositionY: true
	  },
	  border: {
	    borderWidth: true,
	    borderStyle: true,
	    borderColor: true
	  },
	  borderBottom: {
	    borderBottomWidth: true,
	    borderBottomStyle: true,
	    borderBottomColor: true
	  },
	  borderLeft: {
	    borderLeftWidth: true,
	    borderLeftStyle: true,
	    borderLeftColor: true
	  },
	  borderRight: {
	    borderRightWidth: true,
	    borderRightStyle: true,
	    borderRightColor: true
	  },
	  borderTop: {
	    borderTopWidth: true,
	    borderTopStyle: true,
	    borderTopColor: true
	  },
	  font: {
	    fontStyle: true,
	    fontVariant: true,
	    fontWeight: true,
	    fontSize: true,
	    lineHeight: true,
	    fontFamily: true
	  },
	  outline: {
	    outlineWidth: true,
	    outlineStyle: true,
	    outlineColor: true
	  }
	};

	var CSSProperty = {
	  isUnitlessNumber: isUnitlessNumber,
	  shorthandPropertyExpansions: shorthandPropertyExpansions
	};

	module.exports = CSSProperty;

/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @typechecks
	 */

	'use strict';

	var camelize = __webpack_require__(102);

	var msPattern = /^-ms-/;

	/**
	 * Camelcases a hyphenated CSS property name, for example:
	 *
	 *   > camelizeStyleName('background-color')
	 *   < "backgroundColor"
	 *   > camelizeStyleName('-moz-transition')
	 *   < "MozTransition"
	 *   > camelizeStyleName('-ms-transition')
	 *   < "msTransition"
	 *
	 * As Andi Smith suggests
	 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
	 * is converted to lowercase `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelizeStyleName(string) {
	  return camelize(string.replace(msPattern, 'ms-'));
	}

	module.exports = camelizeStyleName;

/***/ }),
/* 102 */
/***/ (function(module, exports) {

	"use strict";

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @typechecks
	 */

	var _hyphenPattern = /-(.)/g;

	/**
	 * Camelcases a hyphenated string, for example:
	 *
	 *   > camelize('background-color')
	 *   < "backgroundColor"
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelize(string) {
	  return string.replace(_hyphenPattern, function (_, character) {
	    return character.toUpperCase();
	  });
	}

	module.exports = camelize;

/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule dangerousStyleValue
	 */

	'use strict';

	var CSSProperty = __webpack_require__(100);
	var warning = __webpack_require__(12);

	var isUnitlessNumber = CSSProperty.isUnitlessNumber;
	var styleWarnings = {};

	/**
	 * Convert a value into the proper css writable value. The style name `name`
	 * should be logical (no hyphens), as specified
	 * in `CSSProperty.isUnitlessNumber`.
	 *
	 * @param {string} name CSS property name such as `topMargin`.
	 * @param {*} value CSS property value such as `10px`.
	 * @param {ReactDOMComponent} component
	 * @return {string} Normalized style value with dimensions applied.
	 */
	function dangerousStyleValue(name, value, component) {
	  // Note that we've removed escapeTextForBrowser() calls here since the
	  // whole string will be escaped when the attribute is injected into
	  // the markup. If you provide unsafe user data here they can inject
	  // arbitrary CSS which may be problematic (I couldn't repro this):
	  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
	  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
	  // This is not an XSS hole but instead a potential CSS injection issue
	  // which has lead to a greater discussion about how we're going to
	  // trust URLs moving forward. See #2115901

	  var isEmpty = value == null || typeof value === 'boolean' || value === '';
	  if (isEmpty) {
	    return '';
	  }

	  var isNonNumeric = isNaN(value);
	  if (isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
	    return '' + value; // cast to string
	  }

	  if (typeof value === 'string') {
	    if (process.env.NODE_ENV !== 'production') {
	      // Allow '0' to pass through without warning. 0 is already special and
	      // doesn't require units, so we don't need to warn about it.
	      if (component && value !== '0') {
	        var owner = component._currentElement._owner;
	        var ownerName = owner ? owner.getName() : null;
	        if (ownerName && !styleWarnings[ownerName]) {
	          styleWarnings[ownerName] = {};
	        }
	        var warned = false;
	        if (ownerName) {
	          var warnings = styleWarnings[ownerName];
	          warned = warnings[name];
	          if (!warned) {
	            warnings[name] = true;
	          }
	        }
	        if (!warned) {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'a `%s` tag (owner: `%s`) was passed a numeric string value ' + 'for CSS property `%s` (value: `%s`) which will be treated ' + 'as a unitless number in a future version of React.', component._currentElement.type, ownerName || 'unknown', name, value) : void 0;
	        }
	      }
	    }
	    value = value.trim();
	  }
	  return value + 'px';
	}

	module.exports = dangerousStyleValue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @typechecks
	 */

	'use strict';

	var hyphenate = __webpack_require__(105);

	var msPattern = /^ms-/;

	/**
	 * Hyphenates a camelcased CSS property name, for example:
	 *
	 *   > hyphenateStyleName('backgroundColor')
	 *   < "background-color"
	 *   > hyphenateStyleName('MozTransition')
	 *   < "-moz-transition"
	 *   > hyphenateStyleName('msTransition')
	 *   < "-ms-transition"
	 *
	 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
	 * is converted to `-ms-`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenateStyleName(string) {
	  return hyphenate(string).replace(msPattern, '-ms-');
	}

	module.exports = hyphenateStyleName;

/***/ }),
/* 105 */
/***/ (function(module, exports) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @typechecks
	 */

	var _uppercasePattern = /([A-Z])/g;

	/**
	 * Hyphenates a camelcased string, for example:
	 *
	 *   > hyphenate('backgroundColor')
	 *   < "background-color"
	 *
	 * For CSS style names, use `hyphenateStyleName` instead which works properly
	 * with all vendor prefixes, including `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenate(string) {
	  return string.replace(_uppercasePattern, '-$1').toLowerCase();
	}

	module.exports = hyphenate;

/***/ }),
/* 106 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Memoizes the return value of a function that accepts one string argument.
	 */

	function memoizeStringOnly(callback) {
	  var cache = {};
	  return function (string) {
	    if (!cache.hasOwnProperty(string)) {
	      cache[string] = callback.call(this, string);
	    }
	    return cache[string];
	  };
	}

	module.exports = memoizeStringOnly;

/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMPropertyOperations
	 */

	'use strict';

	var DOMProperty = __webpack_require__(39);
	var ReactDOMComponentTree = __webpack_require__(38);
	var ReactDOMInstrumentation = __webpack_require__(108);
	var ReactInstrumentation = __webpack_require__(64);

	var quoteAttributeValueForBrowser = __webpack_require__(112);
	var warning = __webpack_require__(12);

	var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + DOMProperty.ATTRIBUTE_NAME_START_CHAR + '][' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$');
	var illegalAttributeNameCache = {};
	var validatedAttributeNameCache = {};

	function isAttributeNameSafe(attributeName) {
	  if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {
	    return true;
	  }
	  if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {
	    return false;
	  }
	  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
	    validatedAttributeNameCache[attributeName] = true;
	    return true;
	  }
	  illegalAttributeNameCache[attributeName] = true;
	  process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid attribute name: `%s`', attributeName) : void 0;
	  return false;
	}

	function shouldIgnoreValue(propertyInfo, value) {
	  return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;
	}

	/**
	 * Operations for dealing with DOM properties.
	 */
	var DOMPropertyOperations = {

	  /**
	   * Creates markup for the ID property.
	   *
	   * @param {string} id Unescaped ID.
	   * @return {string} Markup string.
	   */
	  createMarkupForID: function (id) {
	    return DOMProperty.ID_ATTRIBUTE_NAME + '=' + quoteAttributeValueForBrowser(id);
	  },

	  setAttributeForID: function (node, id) {
	    node.setAttribute(DOMProperty.ID_ATTRIBUTE_NAME, id);
	  },

	  createMarkupForRoot: function () {
	    return DOMProperty.ROOT_ATTRIBUTE_NAME + '=""';
	  },

	  setAttributeForRoot: function (node) {
	    node.setAttribute(DOMProperty.ROOT_ATTRIBUTE_NAME, '');
	  },

	  /**
	   * Creates markup for a property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {?string} Markup string, or null if the property was invalid.
	   */
	  createMarkupForProperty: function (name, value) {
	    if (process.env.NODE_ENV !== 'production') {
	      ReactDOMInstrumentation.debugTool.onCreateMarkupForProperty(name, value);
	    }
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      if (shouldIgnoreValue(propertyInfo, value)) {
	        return '';
	      }
	      var attributeName = propertyInfo.attributeName;
	      if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
	        return attributeName + '=""';
	      }
	      return attributeName + '=' + quoteAttributeValueForBrowser(value);
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      if (value == null) {
	        return '';
	      }
	      return name + '=' + quoteAttributeValueForBrowser(value);
	    }
	    return null;
	  },

	  /**
	   * Creates markup for a custom property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {string} Markup string, or empty string if the property was invalid.
	   */
	  createMarkupForCustomAttribute: function (name, value) {
	    if (!isAttributeNameSafe(name) || value == null) {
	      return '';
	    }
	    return name + '=' + quoteAttributeValueForBrowser(value);
	  },

	  /**
	   * Sets the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   * @param {*} value
	   */
	  setValueForProperty: function (node, name, value) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      var mutationMethod = propertyInfo.mutationMethod;
	      if (mutationMethod) {
	        mutationMethod(node, value);
	      } else if (shouldIgnoreValue(propertyInfo, value)) {
	        this.deleteValueForProperty(node, name);
	        return;
	      } else if (propertyInfo.mustUseProperty) {
	        // Contrary to `setAttribute`, object properties are properly
	        // `toString`ed by IE8/9.
	        node[propertyInfo.propertyName] = value;
	      } else {
	        var attributeName = propertyInfo.attributeName;
	        var namespace = propertyInfo.attributeNamespace;
	        // `setAttribute` with objects becomes only `[object]` in IE8/9,
	        // ('' + value) makes it output the correct toString()-value.
	        if (namespace) {
	          node.setAttributeNS(namespace, attributeName, '' + value);
	        } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
	          node.setAttribute(attributeName, '');
	        } else {
	          node.setAttribute(attributeName, '' + value);
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      DOMPropertyOperations.setValueForAttribute(node, name, value);
	      return;
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      ReactDOMInstrumentation.debugTool.onSetValueForProperty(node, name, value);
	      var payload = {};
	      payload[name] = value;
	      ReactInstrumentation.debugTool.onHostOperation(ReactDOMComponentTree.getInstanceFromNode(node)._debugID, 'update attribute', payload);
	    }
	  },

	  setValueForAttribute: function (node, name, value) {
	    if (!isAttributeNameSafe(name)) {
	      return;
	    }
	    if (value == null) {
	      node.removeAttribute(name);
	    } else {
	      node.setAttribute(name, '' + value);
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      var payload = {};
	      payload[name] = value;
	      ReactInstrumentation.debugTool.onHostOperation(ReactDOMComponentTree.getInstanceFromNode(node)._debugID, 'update attribute', payload);
	    }
	  },

	  /**
	   * Deletes an attributes from a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   */
	  deleteValueForAttribute: function (node, name) {
	    node.removeAttribute(name);
	    if (process.env.NODE_ENV !== 'production') {
	      ReactDOMInstrumentation.debugTool.onDeleteValueForProperty(node, name);
	      ReactInstrumentation.debugTool.onHostOperation(ReactDOMComponentTree.getInstanceFromNode(node)._debugID, 'remove attribute', name);
	    }
	  },

	  /**
	   * Deletes the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   */
	  deleteValueForProperty: function (node, name) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      var mutationMethod = propertyInfo.mutationMethod;
	      if (mutationMethod) {
	        mutationMethod(node, undefined);
	      } else if (propertyInfo.mustUseProperty) {
	        var propName = propertyInfo.propertyName;
	        if (propertyInfo.hasBooleanValue) {
	          node[propName] = false;
	        } else {
	          node[propName] = '';
	        }
	      } else {
	        node.removeAttribute(propertyInfo.attributeName);
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      node.removeAttribute(name);
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      ReactDOMInstrumentation.debugTool.onDeleteValueForProperty(node, name);
	      ReactInstrumentation.debugTool.onHostOperation(ReactDOMComponentTree.getInstanceFromNode(node)._debugID, 'remove attribute', name);
	    }
	  }

	};

	module.exports = DOMPropertyOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMInstrumentation
	 */

	'use strict';

	var debugTool = null;

	if (process.env.NODE_ENV !== 'production') {
	  var ReactDOMDebugTool = __webpack_require__(109);
	  debugTool = ReactDOMDebugTool;
	}

	module.exports = { debugTool: debugTool };
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMDebugTool
	 */

	'use strict';

	var ReactDOMNullInputValuePropDevtool = __webpack_require__(110);
	var ReactDOMUnknownPropertyDevtool = __webpack_require__(111);
	var ReactDebugTool = __webpack_require__(65);

	var warning = __webpack_require__(12);

	var eventHandlers = [];
	var handlerDoesThrowForEvent = {};

	function emitEvent(handlerFunctionName, arg1, arg2, arg3, arg4, arg5) {
	  eventHandlers.forEach(function (handler) {
	    try {
	      if (handler[handlerFunctionName]) {
	        handler[handlerFunctionName](arg1, arg2, arg3, arg4, arg5);
	      }
	    } catch (e) {
	      process.env.NODE_ENV !== 'production' ? warning(handlerDoesThrowForEvent[handlerFunctionName], 'exception thrown by devtool while handling %s: %s', handlerFunctionName, e + '\n' + e.stack) : void 0;
	      handlerDoesThrowForEvent[handlerFunctionName] = true;
	    }
	  });
	}

	var ReactDOMDebugTool = {
	  addDevtool: function (devtool) {
	    ReactDebugTool.addDevtool(devtool);
	    eventHandlers.push(devtool);
	  },
	  removeDevtool: function (devtool) {
	    ReactDebugTool.removeDevtool(devtool);
	    for (var i = 0; i < eventHandlers.length; i++) {
	      if (eventHandlers[i] === devtool) {
	        eventHandlers.splice(i, 1);
	        i--;
	      }
	    }
	  },
	  onCreateMarkupForProperty: function (name, value) {
	    emitEvent('onCreateMarkupForProperty', name, value);
	  },
	  onSetValueForProperty: function (node, name, value) {
	    emitEvent('onSetValueForProperty', node, name, value);
	  },
	  onDeleteValueForProperty: function (node, name) {
	    emitEvent('onDeleteValueForProperty', node, name);
	  },
	  onTestEvent: function () {
	    emitEvent('onTestEvent');
	  }
	};

	ReactDOMDebugTool.addDevtool(ReactDOMUnknownPropertyDevtool);
	ReactDOMDebugTool.addDevtool(ReactDOMNullInputValuePropDevtool);

	module.exports = ReactDOMDebugTool;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMNullInputValuePropDevtool
	 */

	'use strict';

	var ReactComponentTreeDevtool = __webpack_require__(30);

	var warning = __webpack_require__(12);

	var didWarnValueNull = false;

	function handleElement(debugID, element) {
	  if (element == null) {
	    return;
	  }
	  if (element.type !== 'input' && element.type !== 'textarea' && element.type !== 'select') {
	    return;
	  }
	  if (element.props != null && element.props.value === null && !didWarnValueNull) {
	    process.env.NODE_ENV !== 'production' ? warning(false, '`value` prop on `%s` should not be null. ' + 'Consider using the empty string to clear the component or `undefined` ' + 'for uncontrolled components.%s', element.type, ReactComponentTreeDevtool.getStackAddendumByID(debugID)) : void 0;

	    didWarnValueNull = true;
	  }
	}

	var ReactDOMUnknownPropertyDevtool = {
	  onBeforeMountComponent: function (debugID, element) {
	    handleElement(debugID, element);
	  },
	  onBeforeUpdateComponent: function (debugID, element) {
	    handleElement(debugID, element);
	  }
	};

	module.exports = ReactDOMUnknownPropertyDevtool;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMUnknownPropertyDevtool
	 */

	'use strict';

	var DOMProperty = __webpack_require__(39);
	var EventPluginRegistry = __webpack_require__(46);
	var ReactComponentTreeDevtool = __webpack_require__(30);

	var warning = __webpack_require__(12);

	if (process.env.NODE_ENV !== 'production') {
	  var reactProps = {
	    children: true,
	    dangerouslySetInnerHTML: true,
	    key: true,
	    ref: true,

	    autoFocus: true,
	    defaultValue: true,
	    valueLink: true,
	    defaultChecked: true,
	    checkedLink: true,
	    innerHTML: true,
	    suppressContentEditableWarning: true,
	    onFocusIn: true,
	    onFocusOut: true
	  };
	  var warnedProperties = {};

	  var validateProperty = function (tagName, name, debugID) {
	    if (DOMProperty.properties.hasOwnProperty(name) || DOMProperty.isCustomAttribute(name)) {
	      return true;
	    }
	    if (reactProps.hasOwnProperty(name) && reactProps[name] || warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
	      return true;
	    }
	    if (EventPluginRegistry.registrationNameModules.hasOwnProperty(name)) {
	      return true;
	    }
	    warnedProperties[name] = true;
	    var lowerCasedName = name.toLowerCase();

	    // data-* attributes should be lowercase; suggest the lowercase version
	    var standardName = DOMProperty.isCustomAttribute(lowerCasedName) ? lowerCasedName : DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;

	    var registrationName = EventPluginRegistry.possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? EventPluginRegistry.possibleRegistrationNames[lowerCasedName] : null;

	    if (standardName != null) {
	      process.env.NODE_ENV !== 'production' ? warning(standardName == null, 'Unknown DOM property %s. Did you mean %s?%s', name, standardName, ReactComponentTreeDevtool.getStackAddendumByID(debugID)) : void 0;
	      return true;
	    } else if (registrationName != null) {
	      process.env.NODE_ENV !== 'production' ? warning(registrationName == null, 'Unknown event handler property %s. Did you mean `%s`?%s', name, registrationName, ReactComponentTreeDevtool.getStackAddendumByID(debugID)) : void 0;
	      return true;
	    } else {
	      // We were unable to guess which prop the user intended.
	      // It is likely that the user was just blindly spreading/forwarding props
	      // Components should be careful to only render valid props/attributes.
	      // Warning will be invoked in warnUnknownProperties to allow grouping.
	      return false;
	    }
	  };
	}

	var warnUnknownProperties = function (debugID, element) {
	  var unknownProps = [];
	  for (var key in element.props) {
	    var isValid = validateProperty(element.type, key, debugID);
	    if (!isValid) {
	      unknownProps.push(key);
	    }
	  }

	  var unknownPropString = unknownProps.map(function (prop) {
	    return '`' + prop + '`';
	  }).join(', ');

	  if (unknownProps.length === 1) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown prop %s on <%s> tag. Remove this prop from the element. ' + 'For details, see https://fb.me/react-unknown-prop%s', unknownPropString, element.type, ReactComponentTreeDevtool.getStackAddendumByID(debugID)) : void 0;
	  } else if (unknownProps.length > 1) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown props %s on <%s> tag. Remove these props from the element. ' + 'For details, see https://fb.me/react-unknown-prop%s', unknownPropString, element.type, ReactComponentTreeDevtool.getStackAddendumByID(debugID)) : void 0;
	  }
	};

	function handleElement(debugID, element) {
	  if (element == null || typeof element.type !== 'string') {
	    return;
	  }
	  if (element.type.indexOf('-') >= 0 || element.props.is) {
	    return;
	  }
	  warnUnknownProperties(debugID, element);
	}

	var ReactDOMUnknownPropertyDevtool = {
	  onBeforeMountComponent: function (debugID, element) {
	    handleElement(debugID, element);
	  },
	  onBeforeUpdateComponent: function (debugID, element) {
	    handleElement(debugID, element);
	  }
	};

	module.exports = ReactDOMUnknownPropertyDevtool;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule quoteAttributeValueForBrowser
	 */

	'use strict';

	var escapeTextContentForBrowser = __webpack_require__(89);

	/**
	 * Escapes attribute value to prevent scripting attacks.
	 *
	 * @param {*} value Value to escape.
	 * @return {string} An escaped string.
	 */
	function quoteAttributeValueForBrowser(value) {
	  return '"' + escapeTextContentForBrowser(value) + '"';
	}

	module.exports = quoteAttributeValueForBrowser;

/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactBrowserEventEmitter
	 */

	'use strict';

	var _assign = __webpack_require__(5);

	var EventConstants = __webpack_require__(43);
	var EventPluginRegistry = __webpack_require__(46);
	var ReactEventEmitterMixin = __webpack_require__(114);
	var ViewportMetrics = __webpack_require__(79);

	var getVendorPrefixedEventName = __webpack_require__(115);
	var isEventSupported = __webpack_require__(73);

	/**
	 * Summary of `ReactBrowserEventEmitter` event handling:
	 *
	 *  - Top-level delegation is used to trap most native browser events. This
	 *    may only occur in the main thread and is the responsibility of
	 *    ReactEventListener, which is injected and can therefore support pluggable
	 *    event sources. This is the only work that occurs in the main thread.
	 *
	 *  - We normalize and de-duplicate events to account for browser quirks. This
	 *    may be done in the worker thread.
	 *
	 *  - Forward these native events (with the associated top-level type used to
	 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
	 *    to extract any synthetic events.
	 *
	 *  - The `EventPluginHub` will then process each event by annotating them with
	 *    "dispatches", a sequence of listeners and IDs that care about that event.
	 *
	 *  - The `EventPluginHub` then dispatches the events.
	 *
	 * Overview of React and the event system:
	 *
	 * +------------+    .
	 * |    DOM     |    .
	 * +------------+    .
	 *       |           .
	 *       v           .
	 * +------------+    .
	 * | ReactEvent |    .
	 * |  Listener  |    .
	 * +------------+    .                         +-----------+
	 *       |           .               +--------+|SimpleEvent|
	 *       |           .               |         |Plugin     |
	 * +-----|------+    .               v         +-----------+
	 * |     |      |    .    +--------------+                    +------------+
	 * |     +-----------.--->|EventPluginHub|                    |    Event   |
	 * |            |    .    |              |     +-----------+  | Propagators|
	 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
	 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
	 * |            |    .    |              |     +-----------+  |  utilities |
	 * |     +-----------.--->|              |                    +------------+
	 * |     |      |    .    +--------------+
	 * +-----|------+    .                ^        +-----------+
	 *       |           .                |        |Enter/Leave|
	 *       +           .                +-------+|Plugin     |
	 * +-------------+   .                         +-----------+
	 * | application |   .
	 * |-------------|   .
	 * |             |   .
	 * |             |   .
	 * +-------------+   .
	 *                   .
	 *    React Core     .  General Purpose Event Plugin System
	 */

	var hasEventPageXY;
	var alreadyListeningTo = {};
	var isMonitoringScrollValue = false;
	var reactTopListenersCounter = 0;

	// For events like 'submit' which don't consistently bubble (which we trap at a
	// lower node than `document`), binding at `document` would cause duplicate
	// events so we don't include them here
	var topEventMapping = {
	  topAbort: 'abort',
	  topAnimationEnd: getVendorPrefixedEventName('animationend') || 'animationend',
	  topAnimationIteration: getVendorPrefixedEventName('animationiteration') || 'animationiteration',
	  topAnimationStart: getVendorPrefixedEventName('animationstart') || 'animationstart',
	  topBlur: 'blur',
	  topCanPlay: 'canplay',
	  topCanPlayThrough: 'canplaythrough',
	  topChange: 'change',
	  topClick: 'click',
	  topCompositionEnd: 'compositionend',
	  topCompositionStart: 'compositionstart',
	  topCompositionUpdate: 'compositionupdate',
	  topContextMenu: 'contextmenu',
	  topCopy: 'copy',
	  topCut: 'cut',
	  topDoubleClick: 'dblclick',
	  topDrag: 'drag',
	  topDragEnd: 'dragend',
	  topDragEnter: 'dragenter',
	  topDragExit: 'dragexit',
	  topDragLeave: 'dragleave',
	  topDragOver: 'dragover',
	  topDragStart: 'dragstart',
	  topDrop: 'drop',
	  topDurationChange: 'durationchange',
	  topEmptied: 'emptied',
	  topEncrypted: 'encrypted',
	  topEnded: 'ended',
	  topError: 'error',
	  topFocus: 'focus',
	  topInput: 'input',
	  topKeyDown: 'keydown',
	  topKeyPress: 'keypress',
	  topKeyUp: 'keyup',
	  topLoadedData: 'loadeddata',
	  topLoadedMetadata: 'loadedmetadata',
	  topLoadStart: 'loadstart',
	  topMouseDown: 'mousedown',
	  topMouseMove: 'mousemove',
	  topMouseOut: 'mouseout',
	  topMouseOver: 'mouseover',
	  topMouseUp: 'mouseup',
	  topPaste: 'paste',
	  topPause: 'pause',
	  topPlay: 'play',
	  topPlaying: 'playing',
	  topProgress: 'progress',
	  topRateChange: 'ratechange',
	  topScroll: 'scroll',
	  topSeeked: 'seeked',
	  topSeeking: 'seeking',
	  topSelectionChange: 'selectionchange',
	  topStalled: 'stalled',
	  topSuspend: 'suspend',
	  topTextInput: 'textInput',
	  topTimeUpdate: 'timeupdate',
	  topTouchCancel: 'touchcancel',
	  topTouchEnd: 'touchend',
	  topTouchMove: 'touchmove',
	  topTouchStart: 'touchstart',
	  topTransitionEnd: getVendorPrefixedEventName('transitionend') || 'transitionend',
	  topVolumeChange: 'volumechange',
	  topWaiting: 'waiting',
	  topWheel: 'wheel'
	};

	/**
	 * To ensure no conflicts with other potential React instances on the page
	 */
	var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);

	function getListeningForDocument(mountAt) {
	  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
	  // directly.
	  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
	    mountAt[topListenersIDKey] = reactTopListenersCounter++;
	    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
	  }
	  return alreadyListeningTo[mountAt[topListenersIDKey]];
	}

	/**
	 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
	 * example:
	 *
	 *   EventPluginHub.putListener('myID', 'onClick', myFunction);
	 *
	 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
	 *
	 * @internal
	 */
	var ReactBrowserEventEmitter = _assign({}, ReactEventEmitterMixin, {

	  /**
	   * Injectable event backend
	   */
	  ReactEventListener: null,

	  injection: {
	    /**
	     * @param {object} ReactEventListener
	     */
	    injectReactEventListener: function (ReactEventListener) {
	      ReactEventListener.setHandleTopLevel(ReactBrowserEventEmitter.handleTopLevel);
	      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
	    }
	  },

	  /**
	   * Sets whether or not any created callbacks should be enabled.
	   *
	   * @param {boolean} enabled True if callbacks should be enabled.
	   */
	  setEnabled: function (enabled) {
	    if (ReactBrowserEventEmitter.ReactEventListener) {
	      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
	    }
	  },

	  /**
	   * @return {boolean} True if callbacks are enabled.
	   */
	  isEnabled: function () {
	    return !!(ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled());
	  },

	  /**
	   * We listen for bubbled touch events on the document object.
	   *
	   * Firefox v8.01 (and possibly others) exhibited strange behavior when
	   * mounting `onmousemove` events at some node that was not the document
	   * element. The symptoms were that if your mouse is not moving over something
	   * contained within that mount point (for example on the background) the
	   * top-level listeners for `onmousemove` won't be called. However, if you
	   * register the `mousemove` on the document object, then it will of course
	   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
	   * top-level listeners to the document object only, at least for these
	   * movement types of events and possibly all events.
	   *
	   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	   *
	   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
	   * they bubble to document.
	   *
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {object} contentDocumentHandle Document which owns the container
	   */
	  listenTo: function (registrationName, contentDocumentHandle) {
	    var mountAt = contentDocumentHandle;
	    var isListening = getListeningForDocument(mountAt);
	    var dependencies = EventPluginRegistry.registrationNameDependencies[registrationName];

	    var topLevelTypes = EventConstants.topLevelTypes;
	    for (var i = 0; i < dependencies.length; i++) {
	      var dependency = dependencies[i];
	      if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
	        if (dependency === topLevelTypes.topWheel) {
	          if (isEventSupported('wheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'wheel', mountAt);
	          } else if (isEventSupported('mousewheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'mousewheel', mountAt);
	          } else {
	            // Firefox needs to capture a different mouse scroll event.
	            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'DOMMouseScroll', mountAt);
	          }
	        } else if (dependency === topLevelTypes.topScroll) {

	          if (isEventSupported('scroll', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topScroll, 'scroll', mountAt);
	          } else {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topScroll, 'scroll', ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE);
	          }
	        } else if (dependency === topLevelTypes.topFocus || dependency === topLevelTypes.topBlur) {

	          if (isEventSupported('focus', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topFocus, 'focus', mountAt);
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topBlur, 'blur', mountAt);
	          } else if (isEventSupported('focusin')) {
	            // IE has `focusin` and `focusout` events which bubble.
	            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topFocus, 'focusin', mountAt);
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topBlur, 'focusout', mountAt);
	          }

	          // to make sure blur and focus event listeners are only attached once
	          isListening[topLevelTypes.topBlur] = true;
	          isListening[topLevelTypes.topFocus] = true;
	        } else if (topEventMapping.hasOwnProperty(dependency)) {
	          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(dependency, topEventMapping[dependency], mountAt);
	        }

	        isListening[dependency] = true;
	      }
	    }
	  },

	  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelType, handlerBaseName, handle);
	  },

	  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelType, handlerBaseName, handle);
	  },

	  /**
	   * Listens to window scroll and resize events. We cache scroll values so that
	   * application code can access them without triggering reflows.
	   *
	   * ViewportMetrics is only used by SyntheticMouse/TouchEvent and only when
	   * pageX/pageY isn't supported (legacy browsers).
	   *
	   * NOTE: Scroll events do not bubble.
	   *
	   * @see http://www.quirksmode.org/dom/events/scroll.html
	   */
	  ensureScrollValueMonitoring: function () {
	    if (hasEventPageXY === undefined) {
	      hasEventPageXY = document.createEvent && 'pageX' in document.createEvent('MouseEvent');
	    }
	    if (!hasEventPageXY && !isMonitoringScrollValue) {
	      var refresh = ViewportMetrics.refreshScrollValues;
	      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
	      isMonitoringScrollValue = true;
	    }
	  }

	});

	module.exports = ReactBrowserEventEmitter;

/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEventEmitterMixin
	 */

	'use strict';

	var EventPluginHub = __webpack_require__(45);

	function runEventQueueInBatch(events) {
	  EventPluginHub.enqueueEvents(events);
	  EventPluginHub.processEventQueue(false);
	}

	var ReactEventEmitterMixin = {

	  /**
	   * Streams a fired top-level event to `EventPluginHub` where plugins have the
	   * opportunity to create `ReactEvent`s to be dispatched.
	   */
	  handleTopLevel: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var events = EventPluginHub.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
	    runEventQueueInBatch(events);
	  }
	};

	module.exports = ReactEventEmitterMixin;

/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getVendorPrefixedEventName
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(51);

	/**
	 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
	 *
	 * @param {string} styleProp
	 * @param {string} eventName
	 * @returns {object}
	 */
	function makePrefixMap(styleProp, eventName) {
	  var prefixes = {};

	  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
	  prefixes['Webkit' + styleProp] = 'webkit' + eventName;
	  prefixes['Moz' + styleProp] = 'moz' + eventName;
	  prefixes['ms' + styleProp] = 'MS' + eventName;
	  prefixes['O' + styleProp] = 'o' + eventName.toLowerCase();

	  return prefixes;
	}

	/**
	 * A list of event names to a configurable list of vendor prefixes.
	 */
	var vendorPrefixes = {
	  animationend: makePrefixMap('Animation', 'AnimationEnd'),
	  animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
	  animationstart: makePrefixMap('Animation', 'AnimationStart'),
	  transitionend: makePrefixMap('Transition', 'TransitionEnd')
	};

	/**
	 * Event names that have already been detected and prefixed (if applicable).
	 */
	var prefixedEventNames = {};

	/**
	 * Element to check for prefixes on.
	 */
	var style = {};

	/**
	 * Bootstrap if a DOM exists.
	 */
	if (ExecutionEnvironment.canUseDOM) {
	  style = document.createElement('div').style;

	  // On some platforms, in particular some releases of Android 4.x,
	  // the un-prefixed "animation" and "transition" properties are defined on the
	  // style object but the events that fire will still be prefixed, so we need
	  // to check if the un-prefixed events are usable, and if not remove them from the map.
	  if (!('AnimationEvent' in window)) {
	    delete vendorPrefixes.animationend.animation;
	    delete vendorPrefixes.animationiteration.animation;
	    delete vendorPrefixes.animationstart.animation;
	  }

	  // Same as above
	  if (!('TransitionEvent' in window)) {
	    delete vendorPrefixes.transitionend.transition;
	  }
	}

	/**
	 * Attempts to determine the correct vendor prefixed event name.
	 *
	 * @param {string} eventName
	 * @returns {string}
	 */
	function getVendorPrefixedEventName(eventName) {
	  if (prefixedEventNames[eventName]) {
	    return prefixedEventNames[eventName];
	  } else if (!vendorPrefixes[eventName]) {
	    return eventName;
	  }

	  var prefixMap = vendorPrefixes[eventName];

	  for (var styleProp in prefixMap) {
	    if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
	      return prefixedEventNames[eventName] = prefixMap[styleProp];
	    }
	  }

	  return '';
	}

	module.exports = getVendorPrefixedEventName;

/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMButton
	 */

	'use strict';

	var DisabledInputUtils = __webpack_require__(117);

	/**
	 * Implements a <button> host component that does not receive mouse events
	 * when `disabled` is set.
	 */
	var ReactDOMButton = {
	  getHostProps: DisabledInputUtils.getHostProps
	};

	module.exports = ReactDOMButton;

/***/ }),
/* 117 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DisabledInputUtils
	 */

	'use strict';

	var disableableMouseListenerNames = {
	  onClick: true,
	  onDoubleClick: true,
	  onMouseDown: true,
	  onMouseMove: true,
	  onMouseUp: true,

	  onClickCapture: true,
	  onDoubleClickCapture: true,
	  onMouseDownCapture: true,
	  onMouseMoveCapture: true,
	  onMouseUpCapture: true
	};

	/**
	 * Implements a host component that does not receive mouse events
	 * when `disabled` is set.
	 */
	var DisabledInputUtils = {
	  getHostProps: function (inst, props) {
	    if (!props.disabled) {
	      return props;
	    }

	    // Copy the props, except the mouse listeners
	    var hostProps = {};
	    for (var key in props) {
	      if (!disableableMouseListenerNames[key] && props.hasOwnProperty(key)) {
	        hostProps[key] = props[key];
	      }
	    }

	    return hostProps;
	  }
	};

	module.exports = DisabledInputUtils;

/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMInput
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(8),
	    _assign = __webpack_require__(5);

	var DisabledInputUtils = __webpack_require__(117);
	var DOMPropertyOperations = __webpack_require__(107);
	var LinkedValueUtils = __webpack_require__(119);
	var ReactDOMComponentTree = __webpack_require__(38);
	var ReactUpdates = __webpack_require__(58);

	var invariant = __webpack_require__(9);
	var warning = __webpack_require__(12);

	var didWarnValueLink = false;
	var didWarnCheckedLink = false;
	var didWarnValueDefaultValue = false;
	var didWarnCheckedDefaultChecked = false;
	var didWarnControlledToUncontrolled = false;
	var didWarnUncontrolledToControlled = false;

	function forceUpdateIfMounted() {
	  if (this._rootNodeID) {
	    // DOM component is still mounted; update
	    ReactDOMInput.updateWrapper(this);
	  }
	}

	function isControlled(props) {
	  var usesChecked = props.type === 'checkbox' || props.type === 'radio';
	  return usesChecked ? props.checked !== undefined : props.value !== undefined;
	}

	/**
	 * Implements an <input> host component that allows setting these optional
	 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
	 *
	 * If `checked` or `value` are not supplied (or null/undefined), user actions
	 * that affect the checked state or value will trigger updates to the element.
	 *
	 * If they are supplied (and not null/undefined), the rendered element will not
	 * trigger updates to the element. Instead, the props must change in order for
	 * the rendered element to be updated.
	 *
	 * The rendered element will be initialized as unchecked (or `defaultChecked`)
	 * with an empty value (or `defaultValue`).
	 *
	 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
	 */
	var ReactDOMInput = {
	  getHostProps: function (inst, props) {
	    var value = LinkedValueUtils.getValue(props);
	    var checked = LinkedValueUtils.getChecked(props);

	    var hostProps = _assign({
	      // Make sure we set .type before any other properties (setting .value
	      // before .type means .value is lost in IE11 and below)
	      type: undefined,
	      // Make sure we set .step before .value (setting .value before .step
	      // means .value is rounded on mount, based upon step precision)
	      step: undefined
	    }, DisabledInputUtils.getHostProps(inst, props), {
	      defaultChecked: undefined,
	      defaultValue: undefined,
	      value: value != null ? value : inst._wrapperState.initialValue,
	      checked: checked != null ? checked : inst._wrapperState.initialChecked,
	      onChange: inst._wrapperState.onChange
	    });

	    return hostProps;
	  },

	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      LinkedValueUtils.checkPropTypes('input', props, inst._currentElement._owner);

	      var owner = inst._currentElement._owner;

	      if (props.valueLink !== undefined && !didWarnValueLink) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;
	        didWarnValueLink = true;
	      }
	      if (props.checkedLink !== undefined && !didWarnCheckedLink) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '`checkedLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;
	        didWarnCheckedLink = true;
	      }
	      if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
	        didWarnCheckedDefaultChecked = true;
	      }
	      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
	        didWarnValueDefaultValue = true;
	      }
	    }

	    var defaultValue = props.defaultValue;
	    inst._wrapperState = {
	      initialChecked: props.checked != null ? props.checked : props.defaultChecked,
	      initialValue: props.value != null ? props.value : defaultValue,
	      listeners: null,
	      onChange: _handleChange.bind(inst)
	    };

	    if (process.env.NODE_ENV !== 'production') {
	      inst._wrapperState.controlled = isControlled(props);
	    }
	  },

	  updateWrapper: function (inst) {
	    var props = inst._currentElement.props;

	    if (process.env.NODE_ENV !== 'production') {
	      var controlled = isControlled(props);
	      var owner = inst._currentElement._owner;

	      if (!inst._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s is changing an uncontrolled input of type %s to be controlled. ' + 'Input elements should not switch from uncontrolled to controlled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
	        didWarnUncontrolledToControlled = true;
	      }
	      if (inst._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s is changing a controlled input of type %s to be uncontrolled. ' + 'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
	        didWarnControlledToUncontrolled = true;
	      }
	    }

	    // TODO: Shouldn't this be getChecked(props)?
	    var checked = props.checked;
	    if (checked != null) {
	      DOMPropertyOperations.setValueForProperty(ReactDOMComponentTree.getNodeFromInstance(inst), 'checked', checked || false);
	    }

	    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {

	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      var newValue = '' + value;

	      // To avoid side effects (such as losing text selection), only set value if changed
	      if (newValue !== node.value) {
	        node.value = newValue;
	      }
	    } else {
	      if (props.value == null && props.defaultValue != null) {
	        node.defaultValue = '' + props.defaultValue;
	      }
	      if (props.checked == null && props.defaultChecked != null) {
	        node.defaultChecked = !!props.defaultChecked;
	      }
	    }
	  },

	  postMountWrapper: function (inst) {
	    var props = inst._currentElement.props;

	    // This is in postMount because we need access to the DOM node, which is not
	    // available until after the component has mounted.
	    var node = ReactDOMComponentTree.getNodeFromInstance(inst);

	    // Detach value from defaultValue. We won't do anything if we're working on
	    // submit or reset inputs as those values & defaultValues are linked. They
	    // are not resetable nodes so this operation doesn't matter and actually
	    // removes browser-default values (eg "Submit Query") when no value is
	    // provided.
	    if (props.type !== 'submit' && props.type !== 'reset') {
	      node.value = node.value;
	    }

	    // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
	    // this is needed to work around a chrome bug where setting defaultChecked
	    // will sometimes influence the value of checked (even after detachment).
	    // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
	    // We need to temporarily unset name to avoid disrupting radio button groups.
	    var name = node.name;
	    if (name !== '') {
	      node.name = '';
	    }
	    node.defaultChecked = !node.defaultChecked;
	    node.defaultChecked = !node.defaultChecked;
	    if (name !== '') {
	      node.name = name;
	    }
	  }
	};

	function _handleChange(event) {
	  var props = this._currentElement.props;

	  var returnValue = LinkedValueUtils.executeOnChange(props, event);

	  // Here we use asap to wait until all updates have propagated, which
	  // is important when using controlled components within layers:
	  // https://github.com/facebook/react/issues/1698
	  ReactUpdates.asap(forceUpdateIfMounted, this);

	  var name = props.name;
	  if (props.type === 'radio' && name != null) {
	    var rootNode = ReactDOMComponentTree.getNodeFromInstance(this);
	    var queryRoot = rootNode;

	    while (queryRoot.parentNode) {
	      queryRoot = queryRoot.parentNode;
	    }

	    // If `rootNode.form` was non-null, then we could try `form.elements`,
	    // but that sometimes behaves strangely in IE8. We could also try using
	    // `form.getElementsByName`, but that will only return direct children
	    // and won't include inputs that use the HTML5 `form=` attribute. Since
	    // the input might not even be in a form, let's just use the global
	    // `querySelectorAll` to ensure we don't miss anything.
	    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

	    for (var i = 0; i < group.length; i++) {
	      var otherNode = group[i];
	      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
	        continue;
	      }
	      // This will throw if radio buttons rendered by different copies of React
	      // and the same name are rendered into the same form (same as #1939).
	      // That's probably okay; we don't support it just as we don't support
	      // mixing React radio buttons with non-React ones.
	      var otherInstance = ReactDOMComponentTree.getInstanceFromNode(otherNode);
	      !otherInstance ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.') : _prodInvariant('90') : void 0;
	      // If this is a controlled radio button group, forcing the input that
	      // was previously checked to update will cause it to be come re-checked
	      // as appropriate.
	      ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
	    }
	  }

	  return returnValue;
	}

	module.exports = ReactDOMInput;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule LinkedValueUtils
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(8);

	var ReactPropTypes = __webpack_require__(33);
	var ReactPropTypeLocations = __webpack_require__(23);
	var ReactPropTypesSecret = __webpack_require__(32);

	var invariant = __webpack_require__(9);
	var warning = __webpack_require__(12);

	var hasReadOnlyValue = {
	  'button': true,
	  'checkbox': true,
	  'image': true,
	  'hidden': true,
	  'radio': true,
	  'reset': true,
	  'submit': true
	};

	function _assertSingleLink(inputProps) {
	  !(inputProps.checkedLink == null || inputProps.valueLink == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a valueLink. If you want to use checkedLink, you probably don\'t want to use valueLink and vice versa.') : _prodInvariant('87') : void 0;
	}
	function _assertValueLink(inputProps) {
	  _assertSingleLink(inputProps);
	  !(inputProps.value == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a valueLink and a value or onChange event. If you want to use value or onChange, you probably don\'t want to use valueLink.') : _prodInvariant('88') : void 0;
	}

	function _assertCheckedLink(inputProps) {
	  _assertSingleLink(inputProps);
	  !(inputProps.checked == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a checked property or onChange event. If you want to use checked or onChange, you probably don\'t want to use checkedLink') : _prodInvariant('89') : void 0;
	}

	var propTypes = {
	  value: function (props, propName, componentName) {
	    if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {
	      return null;
	    }
	    return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	  },
	  checked: function (props, propName, componentName) {
	    if (!props[propName] || props.onChange || props.readOnly || props.disabled) {
	      return null;
	    }
	    return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	  },
	  onChange: ReactPropTypes.func
	};

	var loggedTypeFailures = {};
	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * Provide a linked `value` attribute for controlled forms. You should not use
	 * this outside of the ReactDOM controlled form components.
	 */
	var LinkedValueUtils = {
	  checkPropTypes: function (tagName, props, owner) {
	    for (var propName in propTypes) {
	      if (propTypes.hasOwnProperty(propName)) {
	        var error = propTypes[propName](props, propName, tagName, ReactPropTypeLocations.prop, null, ReactPropTypesSecret);
	      }
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;

	        var addendum = getDeclarationErrorAddendum(owner);
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed form propType: %s%s', error.message, addendum) : void 0;
	      }
	    }
	  },

	  /**
	   * @param {object} inputProps Props for form component
	   * @return {*} current value of the input either from value prop or link.
	   */
	  getValue: function (inputProps) {
	    if (inputProps.valueLink) {
	      _assertValueLink(inputProps);
	      return inputProps.valueLink.value;
	    }
	    return inputProps.value;
	  },

	  /**
	   * @param {object} inputProps Props for form component
	   * @return {*} current checked status of the input either from checked prop
	   *             or link.
	   */
	  getChecked: function (inputProps) {
	    if (inputProps.checkedLink) {
	      _assertCheckedLink(inputProps);
	      return inputProps.checkedLink.value;
	    }
	    return inputProps.checked;
	  },

	  /**
	   * @param {object} inputProps Props for form component
	   * @param {SyntheticEvent} event change event to handle
	   */
	  executeOnChange: function (inputProps, event) {
	    if (inputProps.valueLink) {
	      _assertValueLink(inputProps);
	      return inputProps.valueLink.requestChange(event.target.value);
	    } else if (inputProps.checkedLink) {
	      _assertCheckedLink(inputProps);
	      return inputProps.checkedLink.requestChange(event.target.checked);
	    } else if (inputProps.onChange) {
	      return inputProps.onChange.call(undefined, event);
	    }
	  }
	};

	module.exports = LinkedValueUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMOption
	 */

	'use strict';

	var _assign = __webpack_require__(5);

	var ReactChildren = __webpack_require__(6);
	var ReactDOMComponentTree = __webpack_require__(38);
	var ReactDOMSelect = __webpack_require__(121);

	var warning = __webpack_require__(12);
	var didWarnInvalidOptionChildren = false;

	function flattenChildren(children) {
	  var content = '';

	  // Flatten children and warn if they aren't strings or numbers;
	  // invalid types are ignored.
	  ReactChildren.forEach(children, function (child) {
	    if (child == null) {
	      return;
	    }
	    if (typeof child === 'string' || typeof child === 'number') {
	      content += child;
	    } else if (!didWarnInvalidOptionChildren) {
	      didWarnInvalidOptionChildren = true;
	      process.env.NODE_ENV !== 'production' ? warning(false, 'Only strings and numbers are supported as <option> children.') : void 0;
	    }
	  });

	  return content;
	}

	/**
	 * Implements an <option> host component that warns when `selected` is set.
	 */
	var ReactDOMOption = {
	  mountWrapper: function (inst, props, hostParent) {
	    // TODO (yungsters): Remove support for `selected` in <option>.
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.') : void 0;
	    }

	    // Look up whether this option is 'selected'
	    var selectValue = null;
	    if (hostParent != null) {
	      var selectParent = hostParent;

	      if (selectParent._tag === 'optgroup') {
	        selectParent = selectParent._hostParent;
	      }

	      if (selectParent != null && selectParent._tag === 'select') {
	        selectValue = ReactDOMSelect.getSelectValueContext(selectParent);
	      }
	    }

	    // If the value is null (e.g., no specified value or after initial mount)
	    // or missing (e.g., for <datalist>), we don't change props.selected
	    var selected = null;
	    if (selectValue != null) {
	      var value;
	      if (props.value != null) {
	        value = props.value + '';
	      } else {
	        value = flattenChildren(props.children);
	      }
	      selected = false;
	      if (Array.isArray(selectValue)) {
	        // multiple
	        for (var i = 0; i < selectValue.length; i++) {
	          if ('' + selectValue[i] === value) {
	            selected = true;
	            break;
	          }
	        }
	      } else {
	        selected = '' + selectValue === value;
	      }
	    }

	    inst._wrapperState = { selected: selected };
	  },

	  postMountWrapper: function (inst) {
	    // value="" should make a value attribute (#6219)
	    var props = inst._currentElement.props;
	    if (props.value != null) {
	      var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	      node.setAttribute('value', props.value);
	    }
	  },

	  getHostProps: function (inst, props) {
	    var hostProps = _assign({ selected: undefined, children: undefined }, props);

	    // Read state only from initial mount because <select> updates value
	    // manually; we need the initial state only for server rendering
	    if (inst._wrapperState.selected != null) {
	      hostProps.selected = inst._wrapperState.selected;
	    }

	    var content = flattenChildren(props.children);

	    if (content) {
	      hostProps.children = content;
	    }

	    return hostProps;
	  }

	};

	module.exports = ReactDOMOption;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMSelect
	 */

	'use strict';

	var _assign = __webpack_require__(5);

	var DisabledInputUtils = __webpack_require__(117);
	var LinkedValueUtils = __webpack_require__(119);
	var ReactDOMComponentTree = __webpack_require__(38);
	var ReactUpdates = __webpack_require__(58);

	var warning = __webpack_require__(12);

	var didWarnValueLink = false;
	var didWarnValueDefaultValue = false;

	function updateOptionsIfPendingUpdateAndMounted() {
	  if (this._rootNodeID && this._wrapperState.pendingUpdate) {
	    this._wrapperState.pendingUpdate = false;

	    var props = this._currentElement.props;
	    var value = LinkedValueUtils.getValue(props);

	    if (value != null) {
	      updateOptions(this, Boolean(props.multiple), value);
	    }
	  }
	}

	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	var valuePropNames = ['value', 'defaultValue'];

	/**
	 * Validation function for `value` and `defaultValue`.
	 * @private
	 */
	function checkSelectPropTypes(inst, props) {
	  var owner = inst._currentElement._owner;
	  LinkedValueUtils.checkPropTypes('select', props, owner);

	  if (props.valueLink !== undefined && !didWarnValueLink) {
	    process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `select` is deprecated; set `value` and `onChange` instead.') : void 0;
	    didWarnValueLink = true;
	  }

	  for (var i = 0; i < valuePropNames.length; i++) {
	    var propName = valuePropNames[i];
	    if (props[propName] == null) {
	      continue;
	    }
	    if (props.multiple) {
	      process.env.NODE_ENV !== 'production' ? warning(Array.isArray(props[propName]), 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum(owner)) : void 0;
	    } else {
	      process.env.NODE_ENV !== 'production' ? warning(!Array.isArray(props[propName]), 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum(owner)) : void 0;
	    }
	  }
	}

	/**
	 * @param {ReactDOMComponent} inst
	 * @param {boolean} multiple
	 * @param {*} propValue A stringable (with `multiple`, a list of stringables).
	 * @private
	 */
	function updateOptions(inst, multiple, propValue) {
	  var selectedValue, i;
	  var options = ReactDOMComponentTree.getNodeFromInstance(inst).options;

	  if (multiple) {
	    selectedValue = {};
	    for (i = 0; i < propValue.length; i++) {
	      selectedValue['' + propValue[i]] = true;
	    }
	    for (i = 0; i < options.length; i++) {
	      var selected = selectedValue.hasOwnProperty(options[i].value);
	      if (options[i].selected !== selected) {
	        options[i].selected = selected;
	      }
	    }
	  } else {
	    // Do not set `select.value` as exact behavior isn't consistent across all
	    // browsers for all cases.
	    selectedValue = '' + propValue;
	    for (i = 0; i < options.length; i++) {
	      if (options[i].value === selectedValue) {
	        options[i].selected = true;
	        return;
	      }
	    }
	    if (options.length) {
	      options[0].selected = true;
	    }
	  }
	}

	/**
	 * Implements a <select> host component that allows optionally setting the
	 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
	 * stringable. If `multiple` is true, the prop must be an array of stringables.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that change the
	 * selected option will trigger updates to the rendered options.
	 *
	 * If it is supplied (and not null/undefined), the rendered options will not
	 * update in response to user actions. Instead, the `value` prop must change in
	 * order for the rendered options to update.
	 *
	 * If `defaultValue` is provided, any options with the supplied values will be
	 * selected.
	 */
	var ReactDOMSelect = {
	  getHostProps: function (inst, props) {
	    return _assign({}, DisabledInputUtils.getHostProps(inst, props), {
	      onChange: inst._wrapperState.onChange,
	      value: undefined
	    });
	  },

	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      checkSelectPropTypes(inst, props);
	    }

	    var value = LinkedValueUtils.getValue(props);
	    inst._wrapperState = {
	      pendingUpdate: false,
	      initialValue: value != null ? value : props.defaultValue,
	      listeners: null,
	      onChange: _handleChange.bind(inst),
	      wasMultiple: Boolean(props.multiple)
	    };

	    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;
	      didWarnValueDefaultValue = true;
	    }
	  },

	  getSelectValueContext: function (inst) {
	    // ReactDOMOption looks at this initial value so the initial generated
	    // markup has correct `selected` attributes
	    return inst._wrapperState.initialValue;
	  },

	  postUpdateWrapper: function (inst) {
	    var props = inst._currentElement.props;

	    // After the initial mount, we control selected-ness manually so don't pass
	    // this value down
	    inst._wrapperState.initialValue = undefined;

	    var wasMultiple = inst._wrapperState.wasMultiple;
	    inst._wrapperState.wasMultiple = Boolean(props.multiple);

	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      inst._wrapperState.pendingUpdate = false;
	      updateOptions(inst, Boolean(props.multiple), value);
	    } else if (wasMultiple !== Boolean(props.multiple)) {
	      // For simplicity, reapply `defaultValue` if `multiple` is toggled.
	      if (props.defaultValue != null) {
	        updateOptions(inst, Boolean(props.multiple), props.defaultValue);
	      } else {
	        // Revert the select back to its default unselected state.
	        updateOptions(inst, Boolean(props.multiple), props.multiple ? [] : '');
	      }
	    }
	  }
	};

	function _handleChange(event) {
	  var props = this._currentElement.props;
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);

	  if (this._rootNodeID) {
	    this._wrapperState.pendingUpdate = true;
	  }
	  ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
	  return returnValue;
	}

	module.exports = ReactDOMSelect;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMTextarea
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(8),
	    _assign = __webpack_require__(5);

	var DisabledInputUtils = __webpack_require__(117);
	var LinkedValueUtils = __webpack_require__(119);
	var ReactDOMComponentTree = __webpack_require__(38);
	var ReactUpdates = __webpack_require__(58);

	var invariant = __webpack_require__(9);
	var warning = __webpack_require__(12);

	var didWarnValueLink = false;
	var didWarnValDefaultVal = false;

	function forceUpdateIfMounted() {
	  if (this._rootNodeID) {
	    // DOM component is still mounted; update
	    ReactDOMTextarea.updateWrapper(this);
	  }
	}

	/**
	 * Implements a <textarea> host component that allows setting `value`, and
	 * `defaultValue`. This differs from the traditional DOM API because value is
	 * usually set as PCDATA children.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that affect the
	 * value will trigger updates to the element.
	 *
	 * If `value` is supplied (and not null/undefined), the rendered element will
	 * not trigger updates to the element. Instead, the `value` prop must change in
	 * order for the rendered element to be updated.
	 *
	 * The rendered element will be initialized with an empty value, the prop
	 * `defaultValue` if specified, or the children content (deprecated).
	 */
	var ReactDOMTextarea = {
	  getHostProps: function (inst, props) {
	    !(props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : _prodInvariant('91') : void 0;

	    // Always set children to the same thing. In IE9, the selection range will
	    // get reset if `textContent` is mutated.  We could add a check in setTextContent
	    // to only set the value if/when the value differs from the node value (which would
	    // completely solve this IE9 bug), but Sebastian+Ben seemed to like this solution.
	    // The value can be a boolean or object so that's why it's forced to be a string.
	    var hostProps = _assign({}, DisabledInputUtils.getHostProps(inst, props), {
	      value: undefined,
	      defaultValue: undefined,
	      children: '' + inst._wrapperState.initialValue,
	      onChange: inst._wrapperState.onChange
	    });

	    return hostProps;
	  },

	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      LinkedValueUtils.checkPropTypes('textarea', props, inst._currentElement._owner);
	      if (props.valueLink !== undefined && !didWarnValueLink) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `textarea` is deprecated; set `value` and `onChange` instead.') : void 0;
	        didWarnValueLink = true;
	      }
	      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;
	        didWarnValDefaultVal = true;
	      }
	    }

	    var value = LinkedValueUtils.getValue(props);
	    var initialValue = value;

	    // Only bother fetching default value if we're going to use it
	    if (value == null) {
	      var defaultValue = props.defaultValue;
	      // TODO (yungsters): Remove support for children content in <textarea>.
	      var children = props.children;
	      if (children != null) {
	        if (process.env.NODE_ENV !== 'production') {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : void 0;
	        }
	        !(defaultValue == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : _prodInvariant('92') : void 0;
	        if (Array.isArray(children)) {
	          !(children.length <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, '<textarea> can only have at most one child.') : _prodInvariant('93') : void 0;
	          children = children[0];
	        }

	        defaultValue = '' + children;
	      }
	      if (defaultValue == null) {
	        defaultValue = '';
	      }
	      initialValue = defaultValue;
	    }

	    inst._wrapperState = {
	      initialValue: '' + initialValue,
	      listeners: null,
	      onChange: _handleChange.bind(inst)
	    };
	  },

	  updateWrapper: function (inst) {
	    var props = inst._currentElement.props;

	    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      var newValue = '' + value;

	      // To avoid side effects (such as losing text selection), only set value if changed
	      if (newValue !== node.value) {
	        node.value = newValue;
	      }
	      if (props.defaultValue == null) {
	        node.defaultValue = newValue;
	      }
	    }
	    if (props.defaultValue != null) {
	      node.defaultValue = props.defaultValue;
	    }
	  },

	  postMountWrapper: function (inst) {
	    // This is in postMount because we need access to the DOM node, which is not
	    // available until after the component has mounted.
	    var node = ReactDOMComponentTree.getNodeFromInstance(inst);

	    // Warning: node.value may be the empty string at this point (IE11) if placeholder is set.
	    node.value = node.textContent; // Detach value from defaultValue
	  }
	};

	function _handleChange(event) {
	  var props = this._currentElement.props;
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);
	  ReactUpdates.asap(forceUpdateIfMounted, this);
	  return returnValue;
	}

	module.exports = ReactDOMTextarea;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMultiChild
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(8);

	var ReactComponentEnvironment = __webpack_require__(124);
	var ReactInstanceMap = __webpack_require__(125);
	var ReactInstrumentation = __webpack_require__(64);
	var ReactMultiChildUpdateTypes = __webpack_require__(94);

	var ReactCurrentOwner = __webpack_require__(11);
	var ReactReconciler = __webpack_require__(61);
	var ReactChildReconciler = __webpack_require__(126);

	var emptyFunction = __webpack_require__(13);
	var flattenChildren = __webpack_require__(134);
	var invariant = __webpack_require__(9);

	/**
	 * Make an update for markup to be rendered and inserted at a supplied index.
	 *
	 * @param {string} markup Markup that renders into an element.
	 * @param {number} toIndex Destination index.
	 * @private
	 */
	function makeInsertMarkup(markup, afterNode, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,
	    content: markup,
	    fromIndex: null,
	    fromNode: null,
	    toIndex: toIndex,
	    afterNode: afterNode
	  };
	}

	/**
	 * Make an update for moving an existing element to another index.
	 *
	 * @param {number} fromIndex Source index of the existing element.
	 * @param {number} toIndex Destination index of the element.
	 * @private
	 */
	function makeMove(child, afterNode, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,
	    content: null,
	    fromIndex: child._mountIndex,
	    fromNode: ReactReconciler.getHostNode(child),
	    toIndex: toIndex,
	    afterNode: afterNode
	  };
	}

	/**
	 * Make an update for removing an element at an index.
	 *
	 * @param {number} fromIndex Index of the element to remove.
	 * @private
	 */
	function makeRemove(child, node) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: ReactMultiChildUpdateTypes.REMOVE_NODE,
	    content: null,
	    fromIndex: child._mountIndex,
	    fromNode: node,
	    toIndex: null,
	    afterNode: null
	  };
	}

	/**
	 * Make an update for setting the markup of a node.
	 *
	 * @param {string} markup Markup that renders into an element.
	 * @private
	 */
	function makeSetMarkup(markup) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: ReactMultiChildUpdateTypes.SET_MARKUP,
	    content: markup,
	    fromIndex: null,
	    fromNode: null,
	    toIndex: null,
	    afterNode: null
	  };
	}

	/**
	 * Make an update for setting the text content.
	 *
	 * @param {string} textContent Text content to set.
	 * @private
	 */
	function makeTextContent(textContent) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,
	    content: textContent,
	    fromIndex: null,
	    fromNode: null,
	    toIndex: null,
	    afterNode: null
	  };
	}

	/**
	 * Push an update, if any, onto the queue. Creates a new queue if none is
	 * passed and always returns the queue. Mutative.
	 */
	function enqueue(queue, update) {
	  if (update) {
	    queue = queue || [];
	    queue.push(update);
	  }
	  return queue;
	}

	/**
	 * Processes any enqueued updates.
	 *
	 * @private
	 */
	function processQueue(inst, updateQueue) {
	  ReactComponentEnvironment.processChildrenUpdates(inst, updateQueue);
	}

	var setParentForInstrumentation = emptyFunction;
	var setChildrenForInstrumentation = emptyFunction;
	if (process.env.NODE_ENV !== 'production') {
	  var getDebugID = function (inst) {
	    if (!inst._debugID) {
	      // Check for ART-like instances. TODO: This is silly/gross.
	      var internal;
	      if (internal = ReactInstanceMap.get(inst)) {
	        inst = internal;
	      }
	    }
	    return inst._debugID;
	  };
	  setParentForInstrumentation = function (child) {
	    if (child._debugID !== 0) {
	      ReactInstrumentation.debugTool.onSetParent(child._debugID, getDebugID(this));
	    }
	  };
	  setChildrenForInstrumentation = function (children) {
	    var debugID = getDebugID(this);
	    // TODO: React Native empty components are also multichild.
	    // This means they still get into this method but don't have _debugID.
	    if (debugID !== 0) {
	      ReactInstrumentation.debugTool.onSetChildren(debugID, children ? Object.keys(children).map(function (key) {
	        return children[key]._debugID;
	      }) : []);
	    }
	  };
	}

	/**
	 * ReactMultiChild are capable of reconciling multiple children.
	 *
	 * @class ReactMultiChild
	 * @internal
	 */
	var ReactMultiChild = {

	  /**
	   * Provides common functionality for components that must reconcile multiple
	   * children. This is used by `ReactDOMComponent` to mount, update, and
	   * unmount child components.
	   *
	   * @lends {ReactMultiChild.prototype}
	   */
	  Mixin: {

	    _reconcilerInstantiateChildren: function (nestedChildren, transaction, context) {
	      if (process.env.NODE_ENV !== 'production') {
	        if (this._currentElement) {
	          try {
	            ReactCurrentOwner.current = this._currentElement._owner;
	            return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context, this._debugID);
	          } finally {
	            ReactCurrentOwner.current = null;
	          }
	        }
	      }
	      return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
	    },

	    _reconcilerUpdateChildren: function (prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context) {
	      var nextChildren;
	      if (process.env.NODE_ENV !== 'production') {
	        if (this._currentElement) {
	          try {
	            ReactCurrentOwner.current = this._currentElement._owner;
	            nextChildren = flattenChildren(nextNestedChildrenElements, this._debugID);
	          } finally {
	            ReactCurrentOwner.current = null;
	          }
	          ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context);
	          return nextChildren;
	        }
	      }
	      nextChildren = flattenChildren(nextNestedChildrenElements);
	      ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context);
	      return nextChildren;
	    },

	    /**
	     * Generates a "mount image" for each of the supplied children. In the case
	     * of `ReactDOMComponent`, a mount image is a string of markup.
	     *
	     * @param {?object} nestedChildren Nested child maps.
	     * @return {array} An array of mounted representations.
	     * @internal
	     */
	    mountChildren: function (nestedChildren, transaction, context) {
	      var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);
	      this._renderedChildren = children;

	      var mountImages = [];
	      var index = 0;
	      for (var name in children) {
	        if (children.hasOwnProperty(name)) {
	          var child = children[name];
	          if (process.env.NODE_ENV !== 'production') {
	            setParentForInstrumentation.call(this, child);
	          }
	          var mountImage = ReactReconciler.mountComponent(child, transaction, this, this._hostContainerInfo, context);
	          child._mountIndex = index++;
	          mountImages.push(mountImage);
	        }
	      }

	      if (process.env.NODE_ENV !== 'production') {
	        setChildrenForInstrumentation.call(this, children);
	      }

	      return mountImages;
	    },

	    /**
	     * Replaces any rendered children with a text content string.
	     *
	     * @param {string} nextContent String of content.
	     * @internal
	     */
	    updateTextContent: function (nextContent) {
	      var prevChildren = this._renderedChildren;
	      // Remove any rendered children.
	      ReactChildReconciler.unmountChildren(prevChildren, false);
	      for (var name in prevChildren) {
	        if (prevChildren.hasOwnProperty(name)) {
	           true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updateTextContent called on non-empty component.') : _prodInvariant('118') : void 0;
	        }
	      }
	      // Set new text content.
	      var updates = [makeTextContent(nextContent)];
	      processQueue(this, updates);
	    },

	    /**
	     * Replaces any rendered children with a markup string.
	     *
	     * @param {string} nextMarkup String of markup.
	     * @internal
	     */
	    updateMarkup: function (nextMarkup) {
	      var prevChildren = this._renderedChildren;
	      // Remove any rendered children.
	      ReactChildReconciler.unmountChildren(prevChildren, false);
	      for (var name in prevChildren) {
	        if (prevChildren.hasOwnProperty(name)) {
	           true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updateTextContent called on non-empty component.') : _prodInvariant('118') : void 0;
	        }
	      }
	      var updates = [makeSetMarkup(nextMarkup)];
	      processQueue(this, updates);
	    },

	    /**
	     * Updates the rendered children with new children.
	     *
	     * @param {?object} nextNestedChildrenElements Nested child element maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @internal
	     */
	    updateChildren: function (nextNestedChildrenElements, transaction, context) {
	      // Hook used by React ART
	      this._updateChildren(nextNestedChildrenElements, transaction, context);
	    },

	    /**
	     * @param {?object} nextNestedChildrenElements Nested child element maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @final
	     * @protected
	     */
	    _updateChildren: function (nextNestedChildrenElements, transaction, context) {
	      var prevChildren = this._renderedChildren;
	      var removedNodes = {};
	      var mountImages = [];
	      var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context);
	      if (!nextChildren && !prevChildren) {
	        return;
	      }
	      var updates = null;
	      var name;
	      // `nextIndex` will increment for each child in `nextChildren`, but
	      // `lastIndex` will be the last index visited in `prevChildren`.
	      var nextIndex = 0;
	      var lastIndex = 0;
	      // `nextMountIndex` will increment for each newly mounted child.
	      var nextMountIndex = 0;
	      var lastPlacedNode = null;
	      for (name in nextChildren) {
	        if (!nextChildren.hasOwnProperty(name)) {
	          continue;
	        }
	        var prevChild = prevChildren && prevChildren[name];
	        var nextChild = nextChildren[name];
	        if (prevChild === nextChild) {
	          updates = enqueue(updates, this.moveChild(prevChild, lastPlacedNode, nextIndex, lastIndex));
	          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	          prevChild._mountIndex = nextIndex;
	        } else {
	          if (prevChild) {
	            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
	            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	            // The `removedNodes` loop below will actually remove the child.
	          }
	          // The child must be instantiated before it's mounted.
	          updates = enqueue(updates, this._mountChildAtIndex(nextChild, mountImages[nextMountIndex], lastPlacedNode, nextIndex, transaction, context));
	          nextMountIndex++;
	        }
	        nextIndex++;
	        lastPlacedNode = ReactReconciler.getHostNode(nextChild);
	      }
	      // Remove children that are no longer present.
	      for (name in removedNodes) {
	        if (removedNodes.hasOwnProperty(name)) {
	          updates = enqueue(updates, this._unmountChild(prevChildren[name], removedNodes[name]));
	        }
	      }
	      if (updates) {
	        processQueue(this, updates);
	      }
	      this._renderedChildren = nextChildren;

	      if (process.env.NODE_ENV !== 'production') {
	        setChildrenForInstrumentation.call(this, nextChildren);
	      }
	    },

	    /**
	     * Unmounts all rendered children. This should be used to clean up children
	     * when this component is unmounted. It does not actually perform any
	     * backend operations.
	     *
	     * @internal
	     */
	    unmountChildren: function (safely) {
	      var renderedChildren = this._renderedChildren;
	      ReactChildReconciler.unmountChildren(renderedChildren, safely);
	      this._renderedChildren = null;
	    },

	    /**
	     * Moves a child component to the supplied index.
	     *
	     * @param {ReactComponent} child Component to move.
	     * @param {number} toIndex Destination index of the element.
	     * @param {number} lastIndex Last index visited of the siblings of `child`.
	     * @protected
	     */
	    moveChild: function (child, afterNode, toIndex, lastIndex) {
	      // If the index of `child` is less than `lastIndex`, then it needs to
	      // be moved. Otherwise, we do not need to move it because a child will be
	      // inserted or moved before `child`.
	      if (child._mountIndex < lastIndex) {
	        return makeMove(child, afterNode, toIndex);
	      }
	    },

	    /**
	     * Creates a child component.
	     *
	     * @param {ReactComponent} child Component to create.
	     * @param {string} mountImage Markup to insert.
	     * @protected
	     */
	    createChild: function (child, afterNode, mountImage) {
	      return makeInsertMarkup(mountImage, afterNode, child._mountIndex);
	    },

	    /**
	     * Removes a child component.
	     *
	     * @param {ReactComponent} child Child to remove.
	     * @protected
	     */
	    removeChild: function (child, node) {
	      return makeRemove(child, node);
	    },

	    /**
	     * Mounts a child with the supplied name.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to mount.
	     * @param {string} name Name of the child.
	     * @param {number} index Index at which to insert the child.
	     * @param {ReactReconcileTransaction} transaction
	     * @private
	     */
	    _mountChildAtIndex: function (child, mountImage, afterNode, index, transaction, context) {
	      child._mountIndex = index;
	      return this.createChild(child, afterNode, mountImage);
	    },

	    /**
	     * Unmounts a rendered child.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to unmount.
	     * @private
	     */
	    _unmountChild: function (child, node) {
	      var update = this.removeChild(child, node);
	      child._mountIndex = null;
	      return update;
	    }

	  }

	};

	module.exports = ReactMultiChild;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponentEnvironment
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(8);

	var invariant = __webpack_require__(9);

	var injected = false;

	var ReactComponentEnvironment = {

	  /**
	   * Optionally injectable environment dependent cleanup hook. (server vs.
	   * browser etc). Example: A browser system caches DOM nodes based on component
	   * ID and must remove that cache entry when this instance is unmounted.
	   */
	  unmountIDFromEnvironment: null,

	  /**
	   * Optionally injectable hook for swapping out mount images in the middle of
	   * the tree.
	   */
	  replaceNodeWithMarkup: null,

	  /**
	   * Optionally injectable hook for processing a queue of child updates. Will
	   * later move into MultiChildComponents.
	   */
	  processChildrenUpdates: null,

	  injection: {
	    injectEnvironment: function (environment) {
	      !!injected ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactCompositeComponent: injectEnvironment() can only be called once.') : _prodInvariant('104') : void 0;
	      ReactComponentEnvironment.unmountIDFromEnvironment = environment.unmountIDFromEnvironment;
	      ReactComponentEnvironment.replaceNodeWithMarkup = environment.replaceNodeWithMarkup;
	      ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;
	      injected = true;
	    }
	  }

	};

	module.exports = ReactComponentEnvironment;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 125 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInstanceMap
	 */

	'use strict';

	/**
	 * `ReactInstanceMap` maintains a mapping from a public facing stateful
	 * instance (key) and the internal representation (value). This allows public
	 * methods to accept the user facing instance as an argument and map them back
	 * to internal methods.
	 */

	// TODO: Replace this with ES6: var ReactInstanceMap = new Map();

	var ReactInstanceMap = {

	  /**
	   * This API should be called `delete` but we'd have to make sure to always
	   * transform these to strings for IE support. When this transform is fully
	   * supported we can rename it.
	   */
	  remove: function (key) {
	    key._reactInternalInstance = undefined;
	  },

	  get: function (key) {
	    return key._reactInternalInstance;
	  },

	  has: function (key) {
	    return key._reactInternalInstance !== undefined;
	  },

	  set: function (key, value) {
	    key._reactInternalInstance = value;
	  }

	};

	module.exports = ReactInstanceMap;

/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactChildReconciler
	 */

	'use strict';

	var ReactReconciler = __webpack_require__(61);

	var instantiateReactComponent = __webpack_require__(127);
	var KeyEscapeUtils = __webpack_require__(17);
	var shouldUpdateReactComponent = __webpack_require__(131);
	var traverseAllChildren = __webpack_require__(15);
	var warning = __webpack_require__(12);

	var ReactComponentTreeDevtool;

	if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
	  // Temporary hack.
	  // Inline requires don't work well with Jest:
	  // https://github.com/facebook/react/issues/7240
	  // Remove the inline requires when we don't need them anymore:
	  // https://github.com/facebook/react/pull/7178
	  ReactComponentTreeDevtool = __webpack_require__(30);
	}

	function instantiateChild(childInstances, child, name, selfDebugID) {
	  // We found a component instance.
	  var keyUnique = childInstances[name] === undefined;
	  if (process.env.NODE_ENV !== 'production') {
	    if (!ReactComponentTreeDevtool) {
	      ReactComponentTreeDevtool = __webpack_require__(30);
	    }
	    process.env.NODE_ENV !== 'production' ? warning(keyUnique, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils.unescape(name), ReactComponentTreeDevtool.getStackAddendumByID(selfDebugID)) : void 0;
	  }
	  if (child != null && keyUnique) {
	    childInstances[name] = instantiateReactComponent(child, true);
	  }
	}

	/**
	 * ReactChildReconciler provides helpers for initializing or updating a set of
	 * children. Its output is suitable for passing it onto ReactMultiChild which
	 * does diffed reordering and insertion.
	 */
	var ReactChildReconciler = {
	  /**
	   * Generates a "mount image" for each of the supplied children. In the case
	   * of `ReactDOMComponent`, a mount image is a string of markup.
	   *
	   * @param {?object} nestedChildNodes Nested child maps.
	   * @return {?object} A set of child instances.
	   * @internal
	   */
	  instantiateChildren: function (nestedChildNodes, transaction, context, selfDebugID // __DEV__ only
	  ) {
	    if (nestedChildNodes == null) {
	      return null;
	    }
	    var childInstances = {};

	    if (process.env.NODE_ENV !== 'production') {
	      traverseAllChildren(nestedChildNodes, function (childInsts, child, name) {
	        return instantiateChild(childInsts, child, name, selfDebugID);
	      }, childInstances);
	    } else {
	      traverseAllChildren(nestedChildNodes, instantiateChild, childInstances);
	    }
	    return childInstances;
	  },

	  /**
	   * Updates the rendered children and returns a new set of children.
	   *
	   * @param {?object} prevChildren Previously initialized set of children.
	   * @param {?object} nextChildren Flat child element maps.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @return {?object} A new set of child instances.
	   * @internal
	   */
	  updateChildren: function (prevChildren, nextChildren, mountImages, removedNodes, transaction, hostParent, hostContainerInfo, context) {
	    // We currently don't have a way to track moves here but if we use iterators
	    // instead of for..in we can zip the iterators and check if an item has
	    // moved.
	    // TODO: If nothing has changed, return the prevChildren object so that we
	    // can quickly bailout if nothing has changed.
	    if (!nextChildren && !prevChildren) {
	      return;
	    }
	    var name;
	    var prevChild;
	    for (name in nextChildren) {
	      if (!nextChildren.hasOwnProperty(name)) {
	        continue;
	      }
	      prevChild = prevChildren && prevChildren[name];
	      var prevElement = prevChild && prevChild._currentElement;
	      var nextElement = nextChildren[name];
	      if (prevChild != null && shouldUpdateReactComponent(prevElement, nextElement)) {
	        ReactReconciler.receiveComponent(prevChild, nextElement, transaction, context);
	        nextChildren[name] = prevChild;
	      } else {
	        if (prevChild) {
	          removedNodes[name] = ReactReconciler.getHostNode(prevChild);
	          ReactReconciler.unmountComponent(prevChild, false);
	        }
	        // The child must be instantiated before it's mounted.
	        var nextChildInstance = instantiateReactComponent(nextElement, true);
	        nextChildren[name] = nextChildInstance;
	        // Creating mount image now ensures refs are resolved in right order
	        // (see https://github.com/facebook/react/pull/7101 for explanation).
	        var nextChildMountImage = ReactReconciler.mountComponent(nextChildInstance, transaction, hostParent, hostContainerInfo, context);
	        mountImages.push(nextChildMountImage);
	      }
	    }
	    // Unmount children that are no longer present.
	    for (name in prevChildren) {
	      if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
	        prevChild = prevChildren[name];
	        removedNodes[name] = ReactReconciler.getHostNode(prevChild);
	        ReactReconciler.unmountComponent(prevChild, false);
	      }
	    }
	  },

	  /**
	   * Unmounts all rendered children. This should be used to clean up children
	   * when this component is unmounted.
	   *
	   * @param {?object} renderedChildren Previously initialized set of children.
	   * @internal
	   */
	  unmountChildren: function (renderedChildren, safely) {
	    for (var name in renderedChildren) {
	      if (renderedChildren.hasOwnProperty(name)) {
	        var renderedChild = renderedChildren[name];
	        ReactReconciler.unmountComponent(renderedChild, safely);
	      }
	    }
	  }

	};

	module.exports = ReactChildReconciler;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule instantiateReactComponent
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(8),
	    _assign = __webpack_require__(5);

	var ReactCompositeComponent = __webpack_require__(128);
	var ReactEmptyComponent = __webpack_require__(132);
	var ReactHostComponent = __webpack_require__(133);
	var ReactInstrumentation = __webpack_require__(64);

	var invariant = __webpack_require__(9);
	var warning = __webpack_require__(12);

	// To avoid a cyclic dependency, we create the final class in this module
	var ReactCompositeComponentWrapper = function (element) {
	  this.construct(element);
	};
	_assign(ReactCompositeComponentWrapper.prototype, ReactCompositeComponent.Mixin, {
	  _instantiateReactComponent: instantiateReactComponent
	});

	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	function getDisplayName(instance) {
	  var element = instance._currentElement;
	  if (element == null) {
	    return '#empty';
	  } else if (typeof element === 'string' || typeof element === 'number') {
	    return '#text';
	  } else if (typeof element.type === 'string') {
	    return element.type;
	  } else if (instance.getName) {
	    return instance.getName() || 'Unknown';
	  } else {
	    return element.type.displayName || element.type.name || 'Unknown';
	  }
	}

	/**
	 * Check if the type reference is a known internal type. I.e. not a user
	 * provided composite type.
	 *
	 * @param {function} type
	 * @return {boolean} Returns true if this is a valid internal type.
	 */
	function isInternalComponentType(type) {
	  return typeof type === 'function' && typeof type.prototype !== 'undefined' && typeof type.prototype.mountComponent === 'function' && typeof type.prototype.receiveComponent === 'function';
	}

	var nextDebugID = 1;

	/**
	 * Given a ReactNode, create an instance that will actually be mounted.
	 *
	 * @param {ReactNode} node
	 * @param {boolean} shouldHaveDebugID
	 * @return {object} A new instance of the element's constructor.
	 * @protected
	 */
	function instantiateReactComponent(node, shouldHaveDebugID) {
	  var instance;

	  if (node === null || node === false) {
	    instance = ReactEmptyComponent.create(instantiateReactComponent);
	  } else if (typeof node === 'object') {
	    var element = node;
	    !(element && (typeof element.type === 'function' || typeof element.type === 'string')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s', element.type == null ? element.type : typeof element.type, getDeclarationErrorAddendum(element._owner)) : _prodInvariant('130', element.type == null ? element.type : typeof element.type, getDeclarationErrorAddendum(element._owner)) : void 0;

	    // Special case string values
	    if (typeof element.type === 'string') {
	      instance = ReactHostComponent.createInternalComponent(element);
	    } else if (isInternalComponentType(element.type)) {
	      // This is temporarily available for custom components that are not string
	      // representations. I.e. ART. Once those are updated to use the string
	      // representation, we can drop this code path.
	      instance = new element.type(element);

	      // We renamed this. Allow the old name for compat. :(
	      if (!instance.getHostNode) {
	        instance.getHostNode = instance.getNativeNode;
	      }
	    } else {
	      instance = new ReactCompositeComponentWrapper(element);
	    }
	  } else if (typeof node === 'string' || typeof node === 'number') {
	    instance = ReactHostComponent.createInstanceForText(node);
	  } else {
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Encountered invalid React node of type %s', typeof node) : _prodInvariant('131', typeof node) : void 0;
	  }

	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(typeof instance.mountComponent === 'function' && typeof instance.receiveComponent === 'function' && typeof instance.getHostNode === 'function' && typeof instance.unmountComponent === 'function', 'Only React Components can be mounted.') : void 0;
	  }

	  // These two fields are used by the DOM and ART diffing algorithms
	  // respectively. Instead of using expandos on components, we should be
	  // storing the state needed by the diffing algorithms elsewhere.
	  instance._mountIndex = 0;
	  instance._mountImage = null;

	  if (process.env.NODE_ENV !== 'production') {
	    if (shouldHaveDebugID) {
	      var debugID = nextDebugID++;
	      instance._debugID = debugID;
	      var displayName = getDisplayName(instance);
	      ReactInstrumentation.debugTool.onSetDisplayName(debugID, displayName);
	      var owner = node && node._owner;
	      if (owner) {
	        ReactInstrumentation.debugTool.onSetOwner(debugID, owner._debugID);
	      }
	    } else {
	      instance._debugID = 0;
	    }
	  }

	  // Internal instances should fully constructed at this point, so they should
	  // not get any new fields added to them at this point.
	  if (process.env.NODE_ENV !== 'production') {
	    if (Object.preventExtensions) {
	      Object.preventExtensions(instance);
	    }
	  }

	  return instance;
	}

	module.exports = instantiateReactComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactCompositeComponent
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(8),
	    _assign = __webpack_require__(5);

	var ReactComponentEnvironment = __webpack_require__(124);
	var ReactCurrentOwner = __webpack_require__(11);
	var ReactElement = __webpack_require__(10);
	var ReactErrorUtils = __webpack_require__(48);
	var ReactInstanceMap = __webpack_require__(125);
	var ReactInstrumentation = __webpack_require__(64);
	var ReactNodeTypes = __webpack_require__(129);
	var ReactPropTypeLocations = __webpack_require__(23);
	var ReactReconciler = __webpack_require__(61);

	var checkReactTypeSpec = __webpack_require__(31);
	var emptyObject = __webpack_require__(20);
	var invariant = __webpack_require__(9);
	var shallowEqual = __webpack_require__(130);
	var shouldUpdateReactComponent = __webpack_require__(131);
	var warning = __webpack_require__(12);

	var CompositeTypes = {
	  ImpureClass: 0,
	  PureClass: 1,
	  StatelessFunctional: 2
	};

	function StatelessComponent(Component) {}
	StatelessComponent.prototype.render = function () {
	  var Component = ReactInstanceMap.get(this)._currentElement.type;
	  var element = Component(this.props, this.context, this.updater);
	  warnIfInvalidElement(Component, element);
	  return element;
	};

	function warnIfInvalidElement(Component, element) {
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(element === null || element === false || ReactElement.isValidElement(element), '%s(...): A valid React element (or null) must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : void 0;
	    process.env.NODE_ENV !== 'production' ? warning(!Component.childContextTypes, '%s(...): childContextTypes cannot be defined on a functional component.', Component.displayName || Component.name || 'Component') : void 0;
	  }
	}

	function invokeComponentDidMountWithTimer() {
	  var publicInstance = this._instance;
	  if (this._debugID !== 0) {
	    ReactInstrumentation.debugTool.onBeginLifeCycleTimer(this._debugID, 'componentDidMount');
	  }
	  publicInstance.componentDidMount();
	  if (this._debugID !== 0) {
	    ReactInstrumentation.debugTool.onEndLifeCycleTimer(this._debugID, 'componentDidMount');
	  }
	}

	function invokeComponentDidUpdateWithTimer(prevProps, prevState, prevContext) {
	  var publicInstance = this._instance;
	  if (this._debugID !== 0) {
	    ReactInstrumentation.debugTool.onBeginLifeCycleTimer(this._debugID, 'componentDidUpdate');
	  }
	  publicInstance.componentDidUpdate(prevProps, prevState, prevContext);
	  if (this._debugID !== 0) {
	    ReactInstrumentation.debugTool.onEndLifeCycleTimer(this._debugID, 'componentDidUpdate');
	  }
	}

	function shouldConstruct(Component) {
	  return !!(Component.prototype && Component.prototype.isReactComponent);
	}

	function isPureComponent(Component) {
	  return !!(Component.prototype && Component.prototype.isPureReactComponent);
	}

	/**
	 * ------------------ The Life-Cycle of a Composite Component ------------------
	 *
	 * - constructor: Initialization of state. The instance is now retained.
	 *   - componentWillMount
	 *   - render
	 *   - [children's constructors]
	 *     - [children's componentWillMount and render]
	 *     - [children's componentDidMount]
	 *     - componentDidMount
	 *
	 *       Update Phases:
	 *       - componentWillReceiveProps (only called if parent updated)
	 *       - shouldComponentUpdate
	 *         - componentWillUpdate
	 *           - render
	 *           - [children's constructors or receive props phases]
	 *         - componentDidUpdate
	 *
	 *     - componentWillUnmount
	 *     - [children's componentWillUnmount]
	 *   - [children destroyed]
	 * - (destroyed): The instance is now blank, released by React and ready for GC.
	 *
	 * -----------------------------------------------------------------------------
	 */

	/**
	 * An incrementing ID assigned to each component when it is mounted. This is
	 * used to enforce the order in which `ReactUpdates` updates dirty components.
	 *
	 * @private
	 */
	var nextMountID = 1;

	/**
	 * @lends {ReactCompositeComponent.prototype}
	 */
	var ReactCompositeComponentMixin = {

	  /**
	   * Base constructor for all composite component.
	   *
	   * @param {ReactElement} element
	   * @final
	   * @internal
	   */
	  construct: function (element) {
	    this._currentElement = element;
	    this._rootNodeID = null;
	    this._compositeType = null;
	    this._instance = null;
	    this._hostParent = null;
	    this._hostContainerInfo = null;

	    // See ReactUpdateQueue
	    this._updateBatchNumber = null;
	    this._pendingElement = null;
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;

	    this._renderedNodeType = null;
	    this._renderedComponent = null;
	    this._context = null;
	    this._mountOrder = 0;
	    this._topLevelWrapper = null;

	    // See ReactUpdates and ReactUpdateQueue.
	    this._pendingCallbacks = null;

	    // ComponentWillUnmount shall only be called once
	    this._calledComponentWillUnmount = false;

	    if (process.env.NODE_ENV !== 'production') {
	      this._warnedAboutRefsInRender = false;
	    }
	  },

	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {?object} hostParent
	   * @param {?object} hostContainerInfo
	   * @param {?object} context
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
	    var _this = this;

	    this._context = context;
	    this._mountOrder = nextMountID++;
	    this._hostParent = hostParent;
	    this._hostContainerInfo = hostContainerInfo;

	    var publicProps = this._currentElement.props;
	    var publicContext = this._processContext(context);

	    var Component = this._currentElement.type;

	    var updateQueue = transaction.getUpdateQueue();

	    // Initialize the public class
	    var doConstruct = shouldConstruct(Component);
	    var inst = this._constructComponent(doConstruct, publicProps, publicContext, updateQueue);
	    var renderedElement;

	    // Support functional components
	    if (!doConstruct && (inst == null || inst.render == null)) {
	      renderedElement = inst;
	      warnIfInvalidElement(Component, renderedElement);
	      !(inst === null || inst === false || ReactElement.isValidElement(inst)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s(...): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : _prodInvariant('105', Component.displayName || Component.name || 'Component') : void 0;
	      inst = new StatelessComponent(Component);
	      this._compositeType = CompositeTypes.StatelessFunctional;
	    } else {
	      if (isPureComponent(Component)) {
	        this._compositeType = CompositeTypes.PureClass;
	      } else {
	        this._compositeType = CompositeTypes.ImpureClass;
	      }
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      // This will throw later in _renderValidatedComponent, but add an early
	      // warning now to help debugging
	      if (inst.render == null) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', Component.displayName || Component.name || 'Component') : void 0;
	      }

	      var propsMutated = inst.props !== publicProps;
	      var componentName = Component.displayName || Component.name || 'Component';

	      process.env.NODE_ENV !== 'production' ? warning(inst.props === undefined || !propsMutated, '%s(...): When calling super() in `%s`, make sure to pass ' + 'up the same props that your component\'s constructor was passed.', componentName, componentName) : void 0;
	    }

	    // These should be set up in the constructor, but as a convenience for
	    // simpler class abstractions, we set them up after the fact.
	    inst.props = publicProps;
	    inst.context = publicContext;
	    inst.refs = emptyObject;
	    inst.updater = updateQueue;

	    this._instance = inst;

	    // Store a reference from the instance back to the internal representation
	    ReactInstanceMap.set(inst, this);

	    if (process.env.NODE_ENV !== 'production') {
	      // Since plain JS classes are defined without any special initialization
	      // logic, we can not catch common errors early. Therefore, we have to
	      // catch them here, at initialization time, instead.
	      process.env.NODE_ENV !== 'production' ? warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', this.getName() || 'a component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', this.getName() || 'a component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.propTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', this.getName() || 'a component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.contextTypes, 'contextTypes was defined as an instance property on %s. Use a ' + 'static property to define contextTypes instead.', this.getName() || 'a component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentShouldUpdate !== 'function', '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', this.getName() || 'A component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentDidUnmount !== 'function', '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', this.getName() || 'A component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentWillRecieveProps !== 'function', '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', this.getName() || 'A component') : void 0;
	    }

	    var initialState = inst.state;
	    if (initialState === undefined) {
	      inst.state = initialState = null;
	    }
	    !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.state: must be set to an object or null', this.getName() || 'ReactCompositeComponent') : _prodInvariant('106', this.getName() || 'ReactCompositeComponent') : void 0;

	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;

	    var markup;
	    if (inst.unstable_handleError) {
	      markup = this.performInitialMountWithErrorHandling(renderedElement, hostParent, hostContainerInfo, transaction, context);
	    } else {
	      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
	    }

	    if (inst.componentDidMount) {
	      if (process.env.NODE_ENV !== 'production') {
	        transaction.getReactMountReady().enqueue(invokeComponentDidMountWithTimer, this);
	      } else {
	        transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
	      }
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      if (this._debugID) {
	        var callback = function (component) {
	          return ReactInstrumentation.debugTool.onComponentHasMounted(_this._debugID);
	        };
	        transaction.getReactMountReady().enqueue(callback, this);
	      }
	    }

	    return markup;
	  },

	  _constructComponent: function (doConstruct, publicProps, publicContext, updateQueue) {
	    if (process.env.NODE_ENV !== 'production') {
	      ReactCurrentOwner.current = this;
	      try {
	        return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);
	      } finally {
	        ReactCurrentOwner.current = null;
	      }
	    } else {
	      return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);
	    }
	  },

	  _constructComponentWithoutOwner: function (doConstruct, publicProps, publicContext, updateQueue) {
	    var Component = this._currentElement.type;
	    var instanceOrElement;
	    if (doConstruct) {
	      if (process.env.NODE_ENV !== 'production') {
	        if (this._debugID !== 0) {
	          ReactInstrumentation.debugTool.onBeginLifeCycleTimer(this._debugID, 'ctor');
	        }
	      }
	      instanceOrElement = new Component(publicProps, publicContext, updateQueue);
	      if (process.env.NODE_ENV !== 'production') {
	        if (this._debugID !== 0) {
	          ReactInstrumentation.debugTool.onEndLifeCycleTimer(this._debugID, 'ctor');
	        }
	      }
	    } else {
	      // This can still be an instance in case of factory components
	      // but we'll count this as time spent rendering as the more common case.
	      if (process.env.NODE_ENV !== 'production') {
	        if (this._debugID !== 0) {
	          ReactInstrumentation.debugTool.onBeginLifeCycleTimer(this._debugID, 'render');
	        }
	      }
	      instanceOrElement = Component(publicProps, publicContext, updateQueue);
	      if (process.env.NODE_ENV !== 'production') {
	        if (this._debugID !== 0) {
	          ReactInstrumentation.debugTool.onEndLifeCycleTimer(this._debugID, 'render');
	        }
	      }
	    }
	    return instanceOrElement;
	  },

	  performInitialMountWithErrorHandling: function (renderedElement, hostParent, hostContainerInfo, transaction, context) {
	    var markup;
	    var checkpoint = transaction.checkpoint();
	    try {
	      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
	    } catch (e) {
	      if (process.env.NODE_ENV !== 'production') {
	        if (this._debugID !== 0) {
	          ReactInstrumentation.debugTool.onError();
	        }
	      }
	      // Roll back to checkpoint, handle error (which may add items to the transaction), and take a new checkpoint
	      transaction.rollback(checkpoint);
	      this._instance.unstable_handleError(e);
	      if (this._pendingStateQueue) {
	        this._instance.state = this._processPendingState(this._instance.props, this._instance.context);
	      }
	      checkpoint = transaction.checkpoint();

	      this._renderedComponent.unmountComponent(true);
	      transaction.rollback(checkpoint);

	      // Try again - we've informed the component about the error, so they can render an error message this time.
	      // If this throws again, the error will bubble up (and can be caught by a higher error boundary).
	      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
	    }
	    return markup;
	  },

	  performInitialMount: function (renderedElement, hostParent, hostContainerInfo, transaction, context) {
	    var inst = this._instance;
	    if (inst.componentWillMount) {
	      if (process.env.NODE_ENV !== 'production') {
	        if (this._debugID !== 0) {
	          ReactInstrumentation.debugTool.onBeginLifeCycleTimer(this._debugID, 'componentWillMount');
	        }
	      }
	      inst.componentWillMount();
	      if (process.env.NODE_ENV !== 'production') {
	        if (this._debugID !== 0) {
	          ReactInstrumentation.debugTool.onEndLifeCycleTimer(this._debugID, 'componentWillMount');
	        }
	      }
	      // When mounting, calls to `setState` by `componentWillMount` will set
	      // `this._pendingStateQueue` without triggering a re-render.
	      if (this._pendingStateQueue) {
	        inst.state = this._processPendingState(inst.props, inst.context);
	      }
	    }

	    // If not a stateless component, we now render
	    if (renderedElement === undefined) {
	      renderedElement = this._renderValidatedComponent();
	    }

	    var nodeType = ReactNodeTypes.getType(renderedElement);
	    this._renderedNodeType = nodeType;
	    var child = this._instantiateReactComponent(renderedElement, nodeType !== ReactNodeTypes.EMPTY /* shouldHaveDebugID */
	    );
	    this._renderedComponent = child;
	    if (process.env.NODE_ENV !== 'production') {
	      if (child._debugID !== 0 && this._debugID !== 0) {
	        ReactInstrumentation.debugTool.onSetParent(child._debugID, this._debugID);
	      }
	    }

	    var markup = ReactReconciler.mountComponent(child, transaction, hostParent, hostContainerInfo, this._processChildContext(context));

	    if (process.env.NODE_ENV !== 'production') {
	      if (this._debugID !== 0) {
	        ReactInstrumentation.debugTool.onSetChildren(this._debugID, child._debugID !== 0 ? [child._debugID] : []);
	      }
	    }

	    return markup;
	  },

	  getHostNode: function () {
	    return ReactReconciler.getHostNode(this._renderedComponent);
	  },

	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function (safely) {
	    if (!this._renderedComponent) {
	      return;
	    }
	    var inst = this._instance;

	    if (inst.componentWillUnmount && !inst._calledComponentWillUnmount) {
	      inst._calledComponentWillUnmount = true;
	      if (process.env.NODE_ENV !== 'production') {
	        if (this._debugID !== 0) {
	          ReactInstrumentation.debugTool.onBeginLifeCycleTimer(this._debugID, 'componentWillUnmount');
	        }
	      }
	      if (safely) {
	        var name = this.getName() + '.componentWillUnmount()';
	        ReactErrorUtils.invokeGuardedCallback(name, inst.componentWillUnmount.bind(inst));
	      } else {
	        inst.componentWillUnmount();
	      }
	      if (process.env.NODE_ENV !== 'production') {
	        if (this._debugID !== 0) {
	          ReactInstrumentation.debugTool.onEndLifeCycleTimer(this._debugID, 'componentWillUnmount');
	        }
	      }
	    }

	    if (this._renderedComponent) {
	      ReactReconciler.unmountComponent(this._renderedComponent, safely);
	      this._renderedNodeType = null;
	      this._renderedComponent = null;
	      this._instance = null;
	    }

	    // Reset pending fields
	    // Even if this component is scheduled for another update in ReactUpdates,
	    // it would still be ignored because these fields are reset.
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;
	    this._pendingCallbacks = null;
	    this._pendingElement = null;

	    // These fields do not really need to be reset since this object is no
	    // longer accessible.
	    this._context = null;
	    this._rootNodeID = null;
	    this._topLevelWrapper = null;

	    // Delete the reference from the instance to this internal representation
	    // which allow the internals to be properly cleaned up even if the user
	    // leaks a reference to the public instance.
	    ReactInstanceMap.remove(inst);

	    // Some existing components rely on inst.props even after they've been
	    // destroyed (in event handlers).
	    // TODO: inst.props = null;
	    // TODO: inst.state = null;
	    // TODO: inst.context = null;
	  },

	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _maskContext: function (context) {
	    var Component = this._currentElement.type;
	    var contextTypes = Component.contextTypes;
	    if (!contextTypes) {
	      return emptyObject;
	    }
	    var maskedContext = {};
	    for (var contextName in contextTypes) {
	      maskedContext[contextName] = context[contextName];
	    }
	    return maskedContext;
	  },

	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`, and asserts that they are valid.
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _processContext: function (context) {
	    var maskedContext = this._maskContext(context);
	    if (process.env.NODE_ENV !== 'production') {
	      var Component = this._currentElement.type;
	      if (Component.contextTypes) {
	        this._checkContextTypes(Component.contextTypes, maskedContext, ReactPropTypeLocations.context);
	      }
	    }
	    return maskedContext;
	  },

	  /**
	   * @param {object} currentContext
	   * @return {object}
	   * @private
	   */
	  _processChildContext: function (currentContext) {
	    var Component = this._currentElement.type;
	    var inst = this._instance;
	    if (process.env.NODE_ENV !== 'production') {
	      ReactInstrumentation.debugTool.onBeginProcessingChildContext();
	    }
	    var childContext = inst.getChildContext && inst.getChildContext();
	    if (process.env.NODE_ENV !== 'production') {
	      ReactInstrumentation.debugTool.onEndProcessingChildContext();
	    }
	    if (childContext) {
	      !(typeof Component.childContextTypes === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().', this.getName() || 'ReactCompositeComponent') : _prodInvariant('107', this.getName() || 'ReactCompositeComponent') : void 0;
	      if (process.env.NODE_ENV !== 'production') {
	        this._checkContextTypes(Component.childContextTypes, childContext, ReactPropTypeLocations.childContext);
	      }
	      for (var name in childContext) {
	        !(name in Component.childContextTypes) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', this.getName() || 'ReactCompositeComponent', name) : _prodInvariant('108', this.getName() || 'ReactCompositeComponent', name) : void 0;
	      }
	      return _assign({}, currentContext, childContext);
	    }
	    return currentContext;
	  },

	  /**
	   * Assert that the context types are valid
	   *
	   * @param {object} typeSpecs Map of context field to a ReactPropType
	   * @param {object} values Runtime values that need to be type-checked
	   * @param {string} location e.g. "prop", "context", "child context"
	   * @private
	   */
	  _checkContextTypes: function (typeSpecs, values, location) {
	    checkReactTypeSpec(typeSpecs, values, location, this.getName(), null, this._debugID);
	  },

	  receiveComponent: function (nextElement, transaction, nextContext) {
	    var prevElement = this._currentElement;
	    var prevContext = this._context;

	    this._pendingElement = null;

	    this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);
	  },

	  /**
	   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
	   * is set, update the component.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function (transaction) {
	    if (this._pendingElement != null) {
	      ReactReconciler.receiveComponent(this, this._pendingElement, transaction, this._context);
	    } else if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
	      this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);
	    } else {
	      this._updateBatchNumber = null;
	    }
	  },

	  /**
	   * Perform an update to a mounted component. The componentWillReceiveProps and
	   * shouldComponentUpdate methods are called, then (assuming the update isn't
	   * skipped) the remaining update lifecycle methods are called and the DOM
	   * representation is updated.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevParentElement
	   * @param {ReactElement} nextParentElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function (transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {
	    var inst = this._instance;
	    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Attempted to update component `%s` that has already been unmounted (or failed to mount).', this.getName() || 'ReactCompositeComponent') : _prodInvariant('136', this.getName() || 'ReactCompositeComponent') : void 0;

	    var willReceive = false;
	    var nextContext;

	    // Determine if the context has changed or not
	    if (this._context === nextUnmaskedContext) {
	      nextContext = inst.context;
	    } else {
	      nextContext = this._processContext(nextUnmaskedContext);
	      willReceive = true;
	    }

	    var prevProps = prevParentElement.props;
	    var nextProps = nextParentElement.props;

	    // Not a simple state update but a props update
	    if (prevParentElement !== nextParentElement) {
	      willReceive = true;
	    }

	    // An update here will schedule an update but immediately set
	    // _pendingStateQueue which will ensure that any state updates gets
	    // immediately reconciled instead of waiting for the next batch.
	    if (willReceive && inst.componentWillReceiveProps) {
	      if (process.env.NODE_ENV !== 'production') {
	        if (this._debugID !== 0) {
	          ReactInstrumentation.debugTool.onBeginLifeCycleTimer(this._debugID, 'componentWillReceiveProps');
	        }
	      }
	      inst.componentWillReceiveProps(nextProps, nextContext);
	      if (process.env.NODE_ENV !== 'production') {
	        if (this._debugID !== 0) {
	          ReactInstrumentation.debugTool.onEndLifeCycleTimer(this._debugID, 'componentWillReceiveProps');
	        }
	      }
	    }

	    var nextState = this._processPendingState(nextProps, nextContext);
	    var shouldUpdate = true;

	    if (!this._pendingForceUpdate) {
	      if (inst.shouldComponentUpdate) {
	        if (process.env.NODE_ENV !== 'production') {
	          if (this._debugID !== 0) {
	            ReactInstrumentation.debugTool.onBeginLifeCycleTimer(this._debugID, 'shouldComponentUpdate');
	          }
	        }
	        shouldUpdate = inst.shouldComponentUpdate(nextProps, nextState, nextContext);
	        if (process.env.NODE_ENV !== 'production') {
	          if (this._debugID !== 0) {
	            ReactInstrumentation.debugTool.onEndLifeCycleTimer(this._debugID, 'shouldComponentUpdate');
	          }
	        }
	      } else {
	        if (this._compositeType === CompositeTypes.PureClass) {
	          shouldUpdate = !shallowEqual(prevProps, nextProps) || !shallowEqual(inst.state, nextState);
	        }
	      }
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(shouldUpdate !== undefined, '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', this.getName() || 'ReactCompositeComponent') : void 0;
	    }

	    this._updateBatchNumber = null;
	    if (shouldUpdate) {
	      this._pendingForceUpdate = false;
	      // Will set `this.props`, `this.state` and `this.context`.
	      this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext);
	    } else {
	      // If it's determined that a component should not update, we still want
	      // to set props and state but we shortcut the rest of the update.
	      this._currentElement = nextParentElement;
	      this._context = nextUnmaskedContext;
	      inst.props = nextProps;
	      inst.state = nextState;
	      inst.context = nextContext;
	    }
	  },

	  _processPendingState: function (props, context) {
	    var inst = this._instance;
	    var queue = this._pendingStateQueue;
	    var replace = this._pendingReplaceState;
	    this._pendingReplaceState = false;
	    this._pendingStateQueue = null;

	    if (!queue) {
	      return inst.state;
	    }

	    if (replace && queue.length === 1) {
	      return queue[0];
	    }

	    var nextState = _assign({}, replace ? queue[0] : inst.state);
	    for (var i = replace ? 1 : 0; i < queue.length; i++) {
	      var partial = queue[i];
	      _assign(nextState, typeof partial === 'function' ? partial.call(inst, nextState, props, context) : partial);
	    }

	    return nextState;
	  },

	  /**
	   * Merges new props and state, notifies delegate methods of update and
	   * performs update.
	   *
	   * @param {ReactElement} nextElement Next element
	   * @param {object} nextProps Next public object to set as properties.
	   * @param {?object} nextState Next object to set as state.
	   * @param {?object} nextContext Next public object to set as context.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {?object} unmaskedContext
	   * @private
	   */
	  _performComponentUpdate: function (nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {
	    var _this2 = this;

	    var inst = this._instance;

	    var hasComponentDidUpdate = Boolean(inst.componentDidUpdate);
	    var prevProps;
	    var prevState;
	    var prevContext;
	    if (hasComponentDidUpdate) {
	      prevProps = inst.props;
	      prevState = inst.state;
	      prevContext = inst.context;
	    }

	    if (inst.componentWillUpdate) {
	      if (process.env.NODE_ENV !== 'production') {
	        if (this._debugID !== 0) {
	          ReactInstrumentation.debugTool.onBeginLifeCycleTimer(this._debugID, 'componentWillUpdate');
	        }
	      }
	      inst.componentWillUpdate(nextProps, nextState, nextContext);
	      if (process.env.NODE_ENV !== 'production') {
	        if (this._debugID !== 0) {
	          ReactInstrumentation.debugTool.onEndLifeCycleTimer(this._debugID, 'componentWillUpdate');
	        }
	      }
	    }

	    this._currentElement = nextElement;
	    this._context = unmaskedContext;
	    inst.props = nextProps;
	    inst.state = nextState;
	    inst.context = nextContext;

	    this._updateRenderedComponent(transaction, unmaskedContext);

	    if (hasComponentDidUpdate) {
	      if (process.env.NODE_ENV !== 'production') {
	        transaction.getReactMountReady().enqueue(invokeComponentDidUpdateWithTimer.bind(this, prevProps, prevState, prevContext), this);
	      } else {
	        transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), inst);
	      }
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      if (this._debugID) {
	        var callback = function () {
	          return ReactInstrumentation.debugTool.onComponentHasUpdated(_this2._debugID);
	        };
	        transaction.getReactMountReady().enqueue(callback, this);
	      }
	    }
	  },

	  /**
	   * Call the component's `render` method and update the DOM accordingly.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  _updateRenderedComponent: function (transaction, context) {
	    var prevComponentInstance = this._renderedComponent;
	    var prevRenderedElement = prevComponentInstance._currentElement;
	    var nextRenderedElement = this._renderValidatedComponent();
	    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
	      ReactReconciler.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._processChildContext(context));
	    } else {
	      var oldHostNode = ReactReconciler.getHostNode(prevComponentInstance);
	      ReactReconciler.unmountComponent(prevComponentInstance, false);

	      var nodeType = ReactNodeTypes.getType(nextRenderedElement);
	      this._renderedNodeType = nodeType;
	      var child = this._instantiateReactComponent(nextRenderedElement, nodeType !== ReactNodeTypes.EMPTY /* shouldHaveDebugID */
	      );
	      this._renderedComponent = child;
	      if (process.env.NODE_ENV !== 'production') {
	        if (child._debugID !== 0 && this._debugID !== 0) {
	          ReactInstrumentation.debugTool.onSetParent(child._debugID, this._debugID);
	        }
	      }

	      var nextMarkup = ReactReconciler.mountComponent(child, transaction, this._hostParent, this._hostContainerInfo, this._processChildContext(context));

	      if (process.env.NODE_ENV !== 'production') {
	        if (this._debugID !== 0) {
	          ReactInstrumentation.debugTool.onSetChildren(this._debugID, child._debugID !== 0 ? [child._debugID] : []);
	        }
	      }

	      this._replaceNodeWithMarkup(oldHostNode, nextMarkup, prevComponentInstance);
	    }
	  },

	  /**
	   * Overridden in shallow rendering.
	   *
	   * @protected
	   */
	  _replaceNodeWithMarkup: function (oldHostNode, nextMarkup, prevInstance) {
	    ReactComponentEnvironment.replaceNodeWithMarkup(oldHostNode, nextMarkup, prevInstance);
	  },

	  /**
	   * @protected
	   */
	  _renderValidatedComponentWithoutOwnerOrContext: function () {
	    var inst = this._instance;

	    if (process.env.NODE_ENV !== 'production') {
	      if (this._debugID !== 0) {
	        ReactInstrumentation.debugTool.onBeginLifeCycleTimer(this._debugID, 'render');
	      }
	    }
	    var renderedComponent = inst.render();
	    if (process.env.NODE_ENV !== 'production') {
	      if (this._debugID !== 0) {
	        ReactInstrumentation.debugTool.onEndLifeCycleTimer(this._debugID, 'render');
	      }
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      // We allow auto-mocks to proceed as if they're returning null.
	      if (renderedComponent === undefined && inst.render._isMockFunction) {
	        // This is probably bad practice. Consider warning here and
	        // deprecating this convenience.
	        renderedComponent = null;
	      }
	    }

	    return renderedComponent;
	  },

	  /**
	   * @private
	   */
	  _renderValidatedComponent: function () {
	    var renderedComponent;
	    if (process.env.NODE_ENV !== 'production' || this._compositeType !== CompositeTypes.StatelessFunctional) {
	      ReactCurrentOwner.current = this;
	      try {
	        renderedComponent = this._renderValidatedComponentWithoutOwnerOrContext();
	      } finally {
	        ReactCurrentOwner.current = null;
	      }
	    } else {
	      renderedComponent = this._renderValidatedComponentWithoutOwnerOrContext();
	    }
	    !(
	    // TODO: An `isValidNode` function would probably be more appropriate
	    renderedComponent === null || renderedComponent === false || ReactElement.isValidElement(renderedComponent)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.render(): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.', this.getName() || 'ReactCompositeComponent') : _prodInvariant('109', this.getName() || 'ReactCompositeComponent') : void 0;

	    return renderedComponent;
	  },

	  /**
	   * Lazily allocates the refs object and stores `component` as `ref`.
	   *
	   * @param {string} ref Reference name.
	   * @param {component} component Component to store as `ref`.
	   * @final
	   * @private
	   */
	  attachRef: function (ref, component) {
	    var inst = this.getPublicInstance();
	    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Stateless function components cannot have refs.') : _prodInvariant('110') : void 0;
	    var publicComponentInstance = component.getPublicInstance();
	    if (process.env.NODE_ENV !== 'production') {
	      var componentName = component && component.getName ? component.getName() : 'a component';
	      process.env.NODE_ENV !== 'production' ? warning(publicComponentInstance != null, 'Stateless function components cannot be given refs ' + '(See ref "%s" in %s created by %s). ' + 'Attempts to access this ref will fail.', ref, componentName, this.getName()) : void 0;
	    }
	    var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
	    refs[ref] = publicComponentInstance;
	  },

	  /**
	   * Detaches a reference name.
	   *
	   * @param {string} ref Name to dereference.
	   * @final
	   * @private
	   */
	  detachRef: function (ref) {
	    var refs = this.getPublicInstance().refs;
	    delete refs[ref];
	  },

	  /**
	   * Get a text description of the component that can be used to identify it
	   * in error messages.
	   * @return {string} The name or null.
	   * @internal
	   */
	  getName: function () {
	    var type = this._currentElement.type;
	    var constructor = this._instance && this._instance.constructor;
	    return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;
	  },

	  /**
	   * Get the publicly accessible representation of this component - i.e. what
	   * is exposed by refs and returned by render. Can be null for stateless
	   * components.
	   *
	   * @return {ReactComponent} the public component instance.
	   * @internal
	   */
	  getPublicInstance: function () {
	    var inst = this._instance;
	    if (this._compositeType === CompositeTypes.StatelessFunctional) {
	      return null;
	    }
	    return inst;
	  },

	  // Stub
	  _instantiateReactComponent: null

	};

	var ReactCompositeComponent = {

	  Mixin: ReactCompositeComponentMixin

	};

	module.exports = ReactCompositeComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactNodeTypes
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(8);

	var ReactElement = __webpack_require__(10);

	var invariant = __webpack_require__(9);

	var ReactNodeTypes = {
	  HOST: 0,
	  COMPOSITE: 1,
	  EMPTY: 2,

	  getType: function (node) {
	    if (node === null || node === false) {
	      return ReactNodeTypes.EMPTY;
	    } else if (ReactElement.isValidElement(node)) {
	      if (typeof node.type === 'function') {
	        return ReactNodeTypes.COMPOSITE;
	      } else {
	        return ReactNodeTypes.HOST;
	      }
	    }
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Unexpected node: %s', node) : _prodInvariant('26', node) : void 0;
	  }
	};

	module.exports = ReactNodeTypes;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 130 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @typechecks
	 * 
	 */

	/*eslint-disable no-self-compare */

	'use strict';

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	/**
	 * inlined Object.is polyfill to avoid requiring consumers ship their own
	 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	 */
	function is(x, y) {
	  // SameValue algorithm
	  if (x === y) {
	    // Steps 1-5, 7-10
	    // Steps 6.b-6.e: +0 != -0
	    // Added the nonzero y check to make Flow happy, but it is redundant
	    return x !== 0 || y !== 0 || 1 / x === 1 / y;
	  } else {
	    // Step 6.a: NaN == NaN
	    return x !== x && y !== y;
	  }
	}

	/**
	 * Performs equality by iterating through keys on an object and returning false
	 * when any key has values which are not strictly equal between the arguments.
	 * Returns true when the values of all keys are strictly equal.
	 */
	function shallowEqual(objA, objB) {
	  if (is(objA, objB)) {
	    return true;
	  }

	  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
	    return false;
	  }

	  var keysA = Object.keys(objA);
	  var keysB = Object.keys(objB);

	  if (keysA.length !== keysB.length) {
	    return false;
	  }

	  // Test for A's keys different from B.
	  for (var i = 0; i < keysA.length; i++) {
	    if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
	      return false;
	    }
	  }

	  return true;
	}

	module.exports = shallowEqual;

/***/ }),
/* 131 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule shouldUpdateReactComponent
	 */

	'use strict';

	/**
	 * Given a `prevElement` and `nextElement`, determines if the existing
	 * instance should be updated as opposed to being destroyed or replaced by a new
	 * instance. Both arguments are elements. This ensures that this logic can
	 * operate on stateless trees without any backing instance.
	 *
	 * @param {?object} prevElement
	 * @param {?object} nextElement
	 * @return {boolean} True if the existing instance should be updated.
	 * @protected
	 */

	function shouldUpdateReactComponent(prevElement, nextElement) {
	  var prevEmpty = prevElement === null || prevElement === false;
	  var nextEmpty = nextElement === null || nextElement === false;
	  if (prevEmpty || nextEmpty) {
	    return prevEmpty === nextEmpty;
	  }

	  var prevType = typeof prevElement;
	  var nextType = typeof nextElement;
	  if (prevType === 'string' || prevType === 'number') {
	    return nextType === 'string' || nextType === 'number';
	  } else {
	    return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;
	  }
	}

	module.exports = shouldUpdateReactComponent;

/***/ }),
/* 132 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEmptyComponent
	 */

	'use strict';

	var emptyComponentFactory;

	var ReactEmptyComponentInjection = {
	  injectEmptyComponentFactory: function (factory) {
	    emptyComponentFactory = factory;
	  }
	};

	var ReactEmptyComponent = {
	  create: function (instantiate) {
	    return emptyComponentFactory(instantiate);
	  }
	};

	ReactEmptyComponent.injection = ReactEmptyComponentInjection;

	module.exports = ReactEmptyComponent;

/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactHostComponent
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(8),
	    _assign = __webpack_require__(5);

	var invariant = __webpack_require__(9);

	var genericComponentClass = null;
	// This registry keeps track of wrapper classes around host tags.
	var tagToComponentClass = {};
	var textComponentClass = null;

	var ReactHostComponentInjection = {
	  // This accepts a class that receives the tag string. This is a catch all
	  // that can render any kind of tag.
	  injectGenericComponentClass: function (componentClass) {
	    genericComponentClass = componentClass;
	  },
	  // This accepts a text component class that takes the text string to be
	  // rendered as props.
	  injectTextComponentClass: function (componentClass) {
	    textComponentClass = componentClass;
	  },
	  // This accepts a keyed object with classes as values. Each key represents a
	  // tag. That particular tag will use this class instead of the generic one.
	  injectComponentClasses: function (componentClasses) {
	    _assign(tagToComponentClass, componentClasses);
	  }
	};

	/**
	 * Get a host internal component class for a specific tag.
	 *
	 * @param {ReactElement} element The element to create.
	 * @return {function} The internal class constructor function.
	 */
	function createInternalComponent(element) {
	  !genericComponentClass ? process.env.NODE_ENV !== 'production' ? invariant(false, 'There is no registered component for the tag %s', element.type) : _prodInvariant('111', element.type) : void 0;
	  return new genericComponentClass(element);
	}

	/**
	 * @param {ReactText} text
	 * @return {ReactComponent}
	 */
	function createInstanceForText(text) {
	  return new textComponentClass(text);
	}

	/**
	 * @param {ReactComponent} component
	 * @return {boolean}
	 */
	function isTextComponent(component) {
	  return component instanceof textComponentClass;
	}

	var ReactHostComponent = {
	  createInternalComponent: createInternalComponent,
	  createInstanceForText: createInstanceForText,
	  isTextComponent: isTextComponent,
	  injection: ReactHostComponentInjection
	};

	module.exports = ReactHostComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule flattenChildren
	 * 
	 */

	'use strict';

	var KeyEscapeUtils = __webpack_require__(17);
	var traverseAllChildren = __webpack_require__(15);
	var warning = __webpack_require__(12);

	var ReactComponentTreeDevtool;

	if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
	  // Temporary hack.
	  // Inline requires don't work well with Jest:
	  // https://github.com/facebook/react/issues/7240
	  // Remove the inline requires when we don't need them anymore:
	  // https://github.com/facebook/react/pull/7178
	  ReactComponentTreeDevtool = __webpack_require__(30);
	}

	/**
	 * @param {function} traverseContext Context passed through traversal.
	 * @param {?ReactComponent} child React child component.
	 * @param {!string} name String name of key path to child.
	 * @param {number=} selfDebugID Optional debugID of the current internal instance.
	 */
	function flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID) {
	  // We found a component instance.
	  if (traverseContext && typeof traverseContext === 'object') {
	    var result = traverseContext;
	    var keyUnique = result[name] === undefined;
	    if (process.env.NODE_ENV !== 'production') {
	      if (!ReactComponentTreeDevtool) {
	        ReactComponentTreeDevtool = __webpack_require__(30);
	      }
	      process.env.NODE_ENV !== 'production' ? warning(keyUnique, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils.unescape(name), ReactComponentTreeDevtool.getStackAddendumByID(selfDebugID)) : void 0;
	    }
	    if (keyUnique && child != null) {
	      result[name] = child;
	    }
	  }
	}

	/**
	 * Flattens children that are typically specified as `props.children`. Any null
	 * children will not be included in the resulting object.
	 * @return {!object} flattened children keyed by name.
	 */
	function flattenChildren(children, selfDebugID) {
	  if (children == null) {
	    return children;
	  }
	  var result = {};

	  if (process.env.NODE_ENV !== 'production') {
	    traverseAllChildren(children, function (traverseContext, child, name) {
	      return flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID);
	    }, result);
	  } else {
	    traverseAllChildren(children, flattenSingleChildIntoContext, result);
	  }
	  return result;
	}

	module.exports = flattenChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactServerRenderingTransaction
	 */

	'use strict';

	var _assign = __webpack_require__(5);

	var PooledClass = __webpack_require__(7);
	var Transaction = __webpack_require__(71);
	var ReactInstrumentation = __webpack_require__(64);
	var ReactServerUpdateQueue = __webpack_require__(136);

	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [];

	if (process.env.NODE_ENV !== 'production') {
	  TRANSACTION_WRAPPERS.push({
	    initialize: ReactInstrumentation.debugTool.onBeginFlush,
	    close: ReactInstrumentation.debugTool.onEndFlush
	  });
	}

	var noopCallbackQueue = {
	  enqueue: function () {}
	};

	/**
	 * @class ReactServerRenderingTransaction
	 * @param {boolean} renderToStaticMarkup
	 */
	function ReactServerRenderingTransaction(renderToStaticMarkup) {
	  this.reinitializeTransaction();
	  this.renderToStaticMarkup = renderToStaticMarkup;
	  this.useCreateElement = false;
	  this.updateQueue = new ReactServerUpdateQueue(this);
	}

	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array} Empty list of operation wrap procedures.
	   */
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },

	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function () {
	    return noopCallbackQueue;
	  },

	  /**
	   * @return {object} The queue to collect React async events.
	   */
	  getUpdateQueue: function () {
	    return this.updateQueue;
	  },

	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be reused.
	   */
	  destructor: function () {},

	  checkpoint: function () {},

	  rollback: function () {}
	};

	_assign(ReactServerRenderingTransaction.prototype, Transaction.Mixin, Mixin);

	PooledClass.addPoolingTo(ReactServerRenderingTransaction);

	module.exports = ReactServerRenderingTransaction;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactServerUpdateQueue
	 * 
	 */

	'use strict';

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var ReactUpdateQueue = __webpack_require__(137);
	var Transaction = __webpack_require__(71);
	var warning = __webpack_require__(12);

	function warnNoop(publicInstance, callerName) {
	  if (process.env.NODE_ENV !== 'production') {
	    var constructor = publicInstance.constructor;
	    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounting component. ' + 'This usually means you called %s() outside componentWillMount() on the server. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;
	  }
	}

	/**
	 * This is the update queue used for server rendering.
	 * It delegates to ReactUpdateQueue while server rendering is in progress and
	 * switches to ReactNoopUpdateQueue after the transaction has completed.
	 * @class ReactServerUpdateQueue
	 * @param {Transaction} transaction
	 */

	var ReactServerUpdateQueue = function () {
	  /* :: transaction: Transaction; */

	  function ReactServerUpdateQueue(transaction) {
	    _classCallCheck(this, ReactServerUpdateQueue);

	    this.transaction = transaction;
	  }

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */


	  ReactServerUpdateQueue.prototype.isMounted = function isMounted(publicInstance) {
	    return false;
	  };

	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */


	  ReactServerUpdateQueue.prototype.enqueueCallback = function enqueueCallback(publicInstance, callback, callerName) {
	    if (this.transaction.isInTransaction()) {
	      ReactUpdateQueue.enqueueCallback(publicInstance, callback, callerName);
	    }
	  };

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */


	  ReactServerUpdateQueue.prototype.enqueueForceUpdate = function enqueueForceUpdate(publicInstance) {
	    if (this.transaction.isInTransaction()) {
	      ReactUpdateQueue.enqueueForceUpdate(publicInstance);
	    } else {
	      warnNoop(publicInstance, 'forceUpdate');
	    }
	  };

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object|function} completeState Next state.
	   * @internal
	   */


	  ReactServerUpdateQueue.prototype.enqueueReplaceState = function enqueueReplaceState(publicInstance, completeState) {
	    if (this.transaction.isInTransaction()) {
	      ReactUpdateQueue.enqueueReplaceState(publicInstance, completeState);
	    } else {
	      warnNoop(publicInstance, 'replaceState');
	    }
	  };

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object|function} partialState Next partial state to be merged with state.
	   * @internal
	   */


	  ReactServerUpdateQueue.prototype.enqueueSetState = function enqueueSetState(publicInstance, partialState) {
	    if (this.transaction.isInTransaction()) {
	      ReactUpdateQueue.enqueueSetState(publicInstance, partialState);
	    } else {
	      warnNoop(publicInstance, 'setState');
	    }
	  };

	  return ReactServerUpdateQueue;
	}();

	module.exports = ReactServerUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactUpdateQueue
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(8);

	var ReactCurrentOwner = __webpack_require__(11);
	var ReactInstanceMap = __webpack_require__(125);
	var ReactInstrumentation = __webpack_require__(64);
	var ReactUpdates = __webpack_require__(58);

	var invariant = __webpack_require__(9);
	var warning = __webpack_require__(12);

	function enqueueUpdate(internalInstance) {
	  ReactUpdates.enqueueUpdate(internalInstance);
	}

	function formatUnexpectedArgument(arg) {
	  var type = typeof arg;
	  if (type !== 'object') {
	    return type;
	  }
	  var displayName = arg.constructor && arg.constructor.name || type;
	  var keys = Object.keys(arg);
	  if (keys.length > 0 && keys.length < 20) {
	    return displayName + ' (keys: ' + keys.join(', ') + ')';
	  }
	  return displayName;
	}

	function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
	  var internalInstance = ReactInstanceMap.get(publicInstance);
	  if (!internalInstance) {
	    if (process.env.NODE_ENV !== 'production') {
	      var ctor = publicInstance.constructor;
	      // Only warn when we have a callerName. Otherwise we should be silent.
	      // We're probably calling from enqueueCallback. We don't want to warn
	      // there because we already warned for the corresponding lifecycle method.
	      process.env.NODE_ENV !== 'production' ? warning(!callerName, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, ctor && (ctor.displayName || ctor.name) || 'ReactClass') : void 0;
	    }
	    return null;
	  }

	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '%s(...): Cannot update during an existing state transition (such as ' + 'within `render` or another component\'s constructor). Render methods ' + 'should be a pure function of props and state; constructor ' + 'side-effects are an anti-pattern, but can be moved to ' + '`componentWillMount`.', callerName) : void 0;
	  }

	  return internalInstance;
	}

	/**
	 * ReactUpdateQueue allows for state updates to be scheduled into a later
	 * reconciliation step.
	 */
	var ReactUpdateQueue = {

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    if (process.env.NODE_ENV !== 'production') {
	      var owner = ReactCurrentOwner.current;
	      if (owner !== null) {
	        process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;
	        owner._warnedAboutRefsInRender = true;
	      }
	    }
	    var internalInstance = ReactInstanceMap.get(publicInstance);
	    if (internalInstance) {
	      // During componentWillMount and render this will still be null but after
	      // that will always render to something. At least for now. So we can use
	      // this hack.
	      return !!internalInstance._renderedComponent;
	    } else {
	      return false;
	    }
	  },

	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @param {string} callerName Name of the calling function in the public API.
	   * @internal
	   */
	  enqueueCallback: function (publicInstance, callback, callerName) {
	    ReactUpdateQueue.validateCallback(callback, callerName);
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);

	    // Previously we would throw an error if we didn't have an internal
	    // instance. Since we want to make it a no-op instead, we mirror the same
	    // behavior we have in other enqueue* methods.
	    // We also need to ignore callbacks in componentWillMount. See
	    // enqueueUpdates.
	    if (!internalInstance) {
	      return null;
	    }

	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    // TODO: The callback here is ignored when setState is called from
	    // componentWillMount. Either fix it or disallow doing so completely in
	    // favor of getInitialState. Alternatively, we can disallow
	    // componentWillMount during server-side rendering.
	    enqueueUpdate(internalInstance);
	  },

	  enqueueCallbackInternal: function (internalInstance, callback) {
	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'forceUpdate');

	    if (!internalInstance) {
	      return;
	    }

	    internalInstance._pendingForceUpdate = true;

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceState');

	    if (!internalInstance) {
	      return;
	    }

	    internalInstance._pendingStateQueue = [completeState];
	    internalInstance._pendingReplaceState = true;

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState) {
	    if (process.env.NODE_ENV !== 'production') {
	      ReactInstrumentation.debugTool.onSetState();
	      process.env.NODE_ENV !== 'production' ? warning(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().') : void 0;
	    }

	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setState');

	    if (!internalInstance) {
	      return;
	    }

	    var queue = internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = []);
	    queue.push(partialState);

	    enqueueUpdate(internalInstance);
	  },

	  enqueueElementInternal: function (internalInstance, nextElement, nextContext) {
	    internalInstance._pendingElement = nextElement;
	    // TODO: introduce _pendingContext instead of setting it directly.
	    internalInstance._context = nextContext;
	    enqueueUpdate(internalInstance);
	  },

	  validateCallback: function (callback, callerName) {
	    !(!callback || typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.', callerName, formatUnexpectedArgument(callback)) : _prodInvariant('122', callerName, formatUnexpectedArgument(callback)) : void 0;
	  }

	};

	module.exports = ReactUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule validateDOMNesting
	 */

	'use strict';

	var _assign = __webpack_require__(5);

	var emptyFunction = __webpack_require__(13);
	var warning = __webpack_require__(12);

	var validateDOMNesting = emptyFunction;

	if (process.env.NODE_ENV !== 'production') {
	  // This validation code was written based on the HTML5 parsing spec:
	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  //
	  // Note: this does not catch all invalid nesting, nor does it try to (as it's
	  // not clear what practical benefit doing so provides); instead, we warn only
	  // for cases where the parser will give a parse tree differing from what React
	  // intended. For example, <b><div></div></b> is invalid but we don't warn
	  // because it still parses correctly; we do warn for other cases like nested
	  // <p> tags where the beginning of the second element implicitly closes the
	  // first, causing a confusing mess.

	  // https://html.spec.whatwg.org/multipage/syntax.html#special
	  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];

	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',

	  // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
	  // TODO: Distinguish by namespace here -- for <title>, including it here
	  // errs on the side of fewer warnings
	  'foreignObject', 'desc', 'title'];

	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
	  var buttonScopeTags = inScopeTags.concat(['button']);

	  // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
	  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];

	  var emptyAncestorInfo = {
	    current: null,

	    formTag: null,
	    aTagInScope: null,
	    buttonTagInScope: null,
	    nobrTagInScope: null,
	    pTagInButtonScope: null,

	    listItemTagAutoclosing: null,
	    dlItemTagAutoclosing: null
	  };

	  var updatedAncestorInfo = function (oldInfo, tag, instance) {
	    var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
	    var info = { tag: tag, instance: instance };

	    if (inScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.aTagInScope = null;
	      ancestorInfo.buttonTagInScope = null;
	      ancestorInfo.nobrTagInScope = null;
	    }
	    if (buttonScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.pTagInButtonScope = null;
	    }

	    // See rules for 'li', 'dd', 'dt' start tags in
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
	      ancestorInfo.listItemTagAutoclosing = null;
	      ancestorInfo.dlItemTagAutoclosing = null;
	    }

	    ancestorInfo.current = info;

	    if (tag === 'form') {
	      ancestorInfo.formTag = info;
	    }
	    if (tag === 'a') {
	      ancestorInfo.aTagInScope = info;
	    }
	    if (tag === 'button') {
	      ancestorInfo.buttonTagInScope = info;
	    }
	    if (tag === 'nobr') {
	      ancestorInfo.nobrTagInScope = info;
	    }
	    if (tag === 'p') {
	      ancestorInfo.pTagInButtonScope = info;
	    }
	    if (tag === 'li') {
	      ancestorInfo.listItemTagAutoclosing = info;
	    }
	    if (tag === 'dd' || tag === 'dt') {
	      ancestorInfo.dlItemTagAutoclosing = info;
	    }

	    return ancestorInfo;
	  };

	  /**
	   * Returns whether
	   */
	  var isTagValidWithParent = function (tag, parentTag) {
	    // First, let's check if we're in an unusual parsing mode...
	    switch (parentTag) {
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
	      case 'select':
	        return tag === 'option' || tag === 'optgroup' || tag === '#text';
	      case 'optgroup':
	        return tag === 'option' || tag === '#text';
	      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
	      // but
	      case 'option':
	        return tag === '#text';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
	      // No special behavior since these rules fall back to "in body" mode for
	      // all except special table nodes which cause bad parsing behavior anyway.

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
	      case 'tr':
	        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
	      case 'tbody':
	      case 'thead':
	      case 'tfoot':
	        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
	      case 'colgroup':
	        return tag === 'col' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
	      case 'table':
	        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
	      case 'head':
	        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
	      case 'html':
	        return tag === 'head' || tag === 'body';
	      case '#document':
	        return tag === 'html';
	    }

	    // Probably in the "in body" parsing mode, so we outlaw only tag combos
	    // where the parsing rules cause implicit opens or closes to be added.
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    switch (tag) {
	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

	      case 'rp':
	      case 'rt':
	        return impliedEndTags.indexOf(parentTag) === -1;

	      case 'body':
	      case 'caption':
	      case 'col':
	      case 'colgroup':
	      case 'frame':
	      case 'head':
	      case 'html':
	      case 'tbody':
	      case 'td':
	      case 'tfoot':
	      case 'th':
	      case 'thead':
	      case 'tr':
	        // These tags are only valid with a few parents that have special child
	        // parsing rules -- if we're down here, then none of those matched and
	        // so we allow it only if we don't know what the parent is, as all other
	        // cases are invalid.
	        return parentTag == null;
	    }

	    return true;
	  };

	  /**
	   * Returns whether
	   */
	  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
	    switch (tag) {
	      case 'address':
	      case 'article':
	      case 'aside':
	      case 'blockquote':
	      case 'center':
	      case 'details':
	      case 'dialog':
	      case 'dir':
	      case 'div':
	      case 'dl':
	      case 'fieldset':
	      case 'figcaption':
	      case 'figure':
	      case 'footer':
	      case 'header':
	      case 'hgroup':
	      case 'main':
	      case 'menu':
	      case 'nav':
	      case 'ol':
	      case 'p':
	      case 'section':
	      case 'summary':
	      case 'ul':

	      case 'pre':
	      case 'listing':

	      case 'table':

	      case 'hr':

	      case 'xmp':

	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return ancestorInfo.pTagInButtonScope;

	      case 'form':
	        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

	      case 'li':
	        return ancestorInfo.listItemTagAutoclosing;

	      case 'dd':
	      case 'dt':
	        return ancestorInfo.dlItemTagAutoclosing;

	      case 'button':
	        return ancestorInfo.buttonTagInScope;

	      case 'a':
	        // Spec says something about storing a list of markers, but it sounds
	        // equivalent to this check.
	        return ancestorInfo.aTagInScope;

	      case 'nobr':
	        return ancestorInfo.nobrTagInScope;
	    }

	    return null;
	  };

	  /**
	   * Given a ReactCompositeComponent instance, return a list of its recursive
	   * owners, starting at the root and ending with the instance itself.
	   */
	  var findOwnerStack = function (instance) {
	    if (!instance) {
	      return [];
	    }

	    var stack = [];
	    do {
	      stack.push(instance);
	    } while (instance = instance._currentElement._owner);
	    stack.reverse();
	    return stack;
	  };

	  var didWarn = {};

	  validateDOMNesting = function (childTag, childInstance, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.current;
	    var parentTag = parentInfo && parentInfo.tag;

	    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
	    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
	    var problematic = invalidParent || invalidAncestor;

	    if (problematic) {
	      var ancestorTag = problematic.tag;
	      var ancestorInstance = problematic.instance;

	      var childOwner = childInstance && childInstance._currentElement._owner;
	      var ancestorOwner = ancestorInstance && ancestorInstance._currentElement._owner;

	      var childOwners = findOwnerStack(childOwner);
	      var ancestorOwners = findOwnerStack(ancestorOwner);

	      var minStackLen = Math.min(childOwners.length, ancestorOwners.length);
	      var i;

	      var deepestCommon = -1;
	      for (i = 0; i < minStackLen; i++) {
	        if (childOwners[i] === ancestorOwners[i]) {
	          deepestCommon = i;
	        } else {
	          break;
	        }
	      }

	      var UNKNOWN = '(unknown)';
	      var childOwnerNames = childOwners.slice(deepestCommon + 1).map(function (inst) {
	        return inst.getName() || UNKNOWN;
	      });
	      var ancestorOwnerNames = ancestorOwners.slice(deepestCommon + 1).map(function (inst) {
	        return inst.getName() || UNKNOWN;
	      });
	      var ownerInfo = [].concat(
	      // If the parent and child instances have a common owner ancestor, start
	      // with that -- otherwise we just start with the parent's owners.
	      deepestCommon !== -1 ? childOwners[deepestCommon].getName() || UNKNOWN : [], ancestorOwnerNames, ancestorTag,
	      // If we're warning about an invalid (non-parent) ancestry, add '...'
	      invalidAncestor ? ['...'] : [], childOwnerNames, childTag).join(' > ');

	      var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + ownerInfo;
	      if (didWarn[warnKey]) {
	        return;
	      }
	      didWarn[warnKey] = true;

	      var tagDisplayName = childTag;
	      if (childTag !== '#text') {
	        tagDisplayName = '<' + childTag + '>';
	      }

	      if (invalidParent) {
	        var info = '';
	        if (ancestorTag === 'table' && childTag === 'tr') {
	          info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
	        }
	        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): %s cannot appear as a child of <%s>. ' + 'See %s.%s', tagDisplayName, ancestorTag, ownerInfo, info) : void 0;
	      } else {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>. See %s.', tagDisplayName, ancestorTag, ownerInfo) : void 0;
	      }
	    }
	  };

	  validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo;

	  // For testing
	  validateDOMNesting.isTagValidInContext = function (tag, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.current;
	    var parentTag = parentInfo && parentInfo.tag;
	    return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);
	  };
	}

	module.exports = validateDOMNesting;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMEmptyComponent
	 */

	'use strict';

	var _assign = __webpack_require__(5);

	var DOMLazyTree = __webpack_require__(84);
	var ReactDOMComponentTree = __webpack_require__(38);

	var ReactDOMEmptyComponent = function (instantiate) {
	  // ReactCompositeComponent uses this:
	  this._currentElement = null;
	  // ReactDOMComponentTree uses these:
	  this._hostNode = null;
	  this._hostParent = null;
	  this._hostContainerInfo = null;
	  this._domID = null;
	};
	_assign(ReactDOMEmptyComponent.prototype, {
	  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
	    var domID = hostContainerInfo._idCounter++;
	    this._domID = domID;
	    this._hostParent = hostParent;
	    this._hostContainerInfo = hostContainerInfo;

	    var nodeValue = ' react-empty: ' + this._domID + ' ';
	    if (transaction.useCreateElement) {
	      var ownerDocument = hostContainerInfo._ownerDocument;
	      var node = ownerDocument.createComment(nodeValue);
	      ReactDOMComponentTree.precacheNode(this, node);
	      return DOMLazyTree(node);
	    } else {
	      if (transaction.renderToStaticMarkup) {
	        // Normally we'd insert a comment node, but since this is a situation
	        // where React won't take over (static pages), we can simply return
	        // nothing.
	        return '';
	      }
	      return '<!--' + nodeValue + '-->';
	    }
	  },
	  receiveComponent: function () {},
	  getHostNode: function () {
	    return ReactDOMComponentTree.getNodeFromInstance(this);
	  },
	  unmountComponent: function () {
	    ReactDOMComponentTree.uncacheNode(this);
	  }
	});

	module.exports = ReactDOMEmptyComponent;

/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMTreeTraversal
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(8);

	var invariant = __webpack_require__(9);

	/**
	 * Return the lowest common ancestor of A and B, or null if they are in
	 * different trees.
	 */
	function getLowestCommonAncestor(instA, instB) {
	  !('_hostNode' in instA) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;
	  !('_hostNode' in instB) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;

	  var depthA = 0;
	  for (var tempA = instA; tempA; tempA = tempA._hostParent) {
	    depthA++;
	  }
	  var depthB = 0;
	  for (var tempB = instB; tempB; tempB = tempB._hostParent) {
	    depthB++;
	  }

	  // If A is deeper, crawl up.
	  while (depthA - depthB > 0) {
	    instA = instA._hostParent;
	    depthA--;
	  }

	  // If B is deeper, crawl up.
	  while (depthB - depthA > 0) {
	    instB = instB._hostParent;
	    depthB--;
	  }

	  // Walk in lockstep until we find a match.
	  var depth = depthA;
	  while (depth--) {
	    if (instA === instB) {
	      return instA;
	    }
	    instA = instA._hostParent;
	    instB = instB._hostParent;
	  }
	  return null;
	}

	/**
	 * Return if A is an ancestor of B.
	 */
	function isAncestor(instA, instB) {
	  !('_hostNode' in instA) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'isAncestor: Invalid argument.') : _prodInvariant('35') : void 0;
	  !('_hostNode' in instB) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'isAncestor: Invalid argument.') : _prodInvariant('35') : void 0;

	  while (instB) {
	    if (instB === instA) {
	      return true;
	    }
	    instB = instB._hostParent;
	  }
	  return false;
	}

	/**
	 * Return the parent instance of the passed-in instance.
	 */
	function getParentInstance(inst) {
	  !('_hostNode' in inst) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getParentInstance: Invalid argument.') : _prodInvariant('36') : void 0;

	  return inst._hostParent;
	}

	/**
	 * Simulates the traversal of a two-phase, capture/bubble event dispatch.
	 */
	function traverseTwoPhase(inst, fn, arg) {
	  var path = [];
	  while (inst) {
	    path.push(inst);
	    inst = inst._hostParent;
	  }
	  var i;
	  for (i = path.length; i-- > 0;) {
	    fn(path[i], false, arg);
	  }
	  for (i = 0; i < path.length; i++) {
	    fn(path[i], true, arg);
	  }
	}

	/**
	 * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
	 * should would receive a `mouseEnter` or `mouseLeave` event.
	 *
	 * Does not invoke the callback on the nearest common ancestor because nothing
	 * "entered" or "left" that element.
	 */
	function traverseEnterLeave(from, to, fn, argFrom, argTo) {
	  var common = from && to ? getLowestCommonAncestor(from, to) : null;
	  var pathFrom = [];
	  while (from && from !== common) {
	    pathFrom.push(from);
	    from = from._hostParent;
	  }
	  var pathTo = [];
	  while (to && to !== common) {
	    pathTo.push(to);
	    to = to._hostParent;
	  }
	  var i;
	  for (i = 0; i < pathFrom.length; i++) {
	    fn(pathFrom[i], true, argFrom);
	  }
	  for (i = pathTo.length; i-- > 0;) {
	    fn(pathTo[i], false, argTo);
	  }
	}

	module.exports = {
	  isAncestor: isAncestor,
	  getLowestCommonAncestor: getLowestCommonAncestor,
	  getParentInstance: getParentInstance,
	  traverseTwoPhase: traverseTwoPhase,
	  traverseEnterLeave: traverseEnterLeave
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMTextComponent
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(8),
	    _assign = __webpack_require__(5);

	var DOMChildrenOperations = __webpack_require__(83);
	var DOMLazyTree = __webpack_require__(84);
	var ReactDOMComponentTree = __webpack_require__(38);
	var ReactInstrumentation = __webpack_require__(64);

	var escapeTextContentForBrowser = __webpack_require__(89);
	var invariant = __webpack_require__(9);
	var validateDOMNesting = __webpack_require__(138);

	/**
	 * Text nodes violate a couple assumptions that React makes about components:
	 *
	 *  - When mounting text into the DOM, adjacent text nodes are merged.
	 *  - Text nodes cannot be assigned a React root ID.
	 *
	 * This component is used to wrap strings between comment nodes so that they
	 * can undergo the same reconciliation that is applied to elements.
	 *
	 * TODO: Investigate representing React components in the DOM with text nodes.
	 *
	 * @class ReactDOMTextComponent
	 * @extends ReactComponent
	 * @internal
	 */
	var ReactDOMTextComponent = function (text) {
	  // TODO: This is really a ReactText (ReactNode), not a ReactElement
	  this._currentElement = text;
	  this._stringText = '' + text;
	  // ReactDOMComponentTree uses these:
	  this._hostNode = null;
	  this._hostParent = null;

	  // Properties
	  this._domID = null;
	  this._mountIndex = 0;
	  this._closingComment = null;
	  this._commentNodes = null;
	};

	_assign(ReactDOMTextComponent.prototype, {

	  /**
	   * Creates the markup for this text node. This node is not intended to have
	   * any features besides containing text content.
	   *
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {string} Markup for this text node.
	   * @internal
	   */
	  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
	    if (process.env.NODE_ENV !== 'production') {
	      ReactInstrumentation.debugTool.onSetText(this._debugID, this._stringText);

	      var parentInfo;
	      if (hostParent != null) {
	        parentInfo = hostParent._ancestorInfo;
	      } else if (hostContainerInfo != null) {
	        parentInfo = hostContainerInfo._ancestorInfo;
	      }
	      if (parentInfo) {
	        // parentInfo should always be present except for the top-level
	        // component when server rendering
	        validateDOMNesting('#text', this, parentInfo);
	      }
	    }

	    var domID = hostContainerInfo._idCounter++;
	    var openingValue = ' react-text: ' + domID + ' ';
	    var closingValue = ' /react-text ';
	    this._domID = domID;
	    this._hostParent = hostParent;
	    if (transaction.useCreateElement) {
	      var ownerDocument = hostContainerInfo._ownerDocument;
	      var openingComment = ownerDocument.createComment(openingValue);
	      var closingComment = ownerDocument.createComment(closingValue);
	      var lazyTree = DOMLazyTree(ownerDocument.createDocumentFragment());
	      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(openingComment));
	      if (this._stringText) {
	        DOMLazyTree.queueChild(lazyTree, DOMLazyTree(ownerDocument.createTextNode(this._stringText)));
	      }
	      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(closingComment));
	      ReactDOMComponentTree.precacheNode(this, openingComment);
	      this._closingComment = closingComment;
	      return lazyTree;
	    } else {
	      var escapedText = escapeTextContentForBrowser(this._stringText);

	      if (transaction.renderToStaticMarkup) {
	        // Normally we'd wrap this between comment nodes for the reasons stated
	        // above, but since this is a situation where React won't take over
	        // (static pages), we can simply return the text as it is.
	        return escapedText;
	      }

	      return '<!--' + openingValue + '-->' + escapedText + '<!--' + closingValue + '-->';
	    }
	  },

	  /**
	   * Updates this component by updating the text content.
	   *
	   * @param {ReactText} nextText The next text content
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  receiveComponent: function (nextText, transaction) {
	    if (nextText !== this._currentElement) {
	      this._currentElement = nextText;
	      var nextStringText = '' + nextText;
	      if (nextStringText !== this._stringText) {
	        // TODO: Save this as pending props and use performUpdateIfNecessary
	        // and/or updateComponent to do the actual update for consistency with
	        // other component types?
	        this._stringText = nextStringText;
	        var commentNodes = this.getHostNode();
	        DOMChildrenOperations.replaceDelimitedText(commentNodes[0], commentNodes[1], nextStringText);

	        if (process.env.NODE_ENV !== 'production') {
	          ReactInstrumentation.debugTool.onSetText(this._debugID, nextStringText);
	        }
	      }
	    }
	  },

	  getHostNode: function () {
	    var hostNode = this._commentNodes;
	    if (hostNode) {
	      return hostNode;
	    }
	    if (!this._closingComment) {
	      var openingComment = ReactDOMComponentTree.getNodeFromInstance(this);
	      var node = openingComment.nextSibling;
	      while (true) {
	        !(node != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Missing closing comment for text component %s', this._domID) : _prodInvariant('67', this._domID) : void 0;
	        if (node.nodeType === 8 && node.nodeValue === ' /react-text ') {
	          this._closingComment = node;
	          break;
	        }
	        node = node.nextSibling;
	      }
	    }
	    hostNode = [this._hostNode, this._closingComment];
	    this._commentNodes = hostNode;
	    return hostNode;
	  },

	  unmountComponent: function () {
	    this._closingComment = null;
	    this._commentNodes = null;
	    ReactDOMComponentTree.uncacheNode(this);
	  }

	});

	module.exports = ReactDOMTextComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultBatchingStrategy
	 */

	'use strict';

	var _assign = __webpack_require__(5);

	var ReactUpdates = __webpack_require__(58);
	var Transaction = __webpack_require__(71);

	var emptyFunction = __webpack_require__(13);

	var RESET_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: function () {
	    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
	  }
	};

	var FLUSH_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
	};

	var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

	function ReactDefaultBatchingStrategyTransaction() {
	  this.reinitializeTransaction();
	}

	_assign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction.Mixin, {
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  }
	});

	var transaction = new ReactDefaultBatchingStrategyTransaction();

	var ReactDefaultBatchingStrategy = {
	  isBatchingUpdates: false,

	  /**
	   * Call the provided function in a context within which calls to `setState`
	   * and friends are batched such that components aren't updated unnecessarily.
	   */
	  batchedUpdates: function (callback, a, b, c, d, e) {
	    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

	    ReactDefaultBatchingStrategy.isBatchingUpdates = true;

	    // The code is written this way to avoid extra allocations
	    if (alreadyBatchingUpdates) {
	      callback(a, b, c, d, e);
	    } else {
	      transaction.perform(callback, null, a, b, c, d, e);
	    }
	  }
	};

	module.exports = ReactDefaultBatchingStrategy;

/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEventListener
	 */

	'use strict';

	var _assign = __webpack_require__(5);

	var EventListener = __webpack_require__(144);
	var ExecutionEnvironment = __webpack_require__(51);
	var PooledClass = __webpack_require__(7);
	var ReactDOMComponentTree = __webpack_require__(38);
	var ReactUpdates = __webpack_require__(58);

	var getEventTarget = __webpack_require__(72);
	var getUnboundedScrollPosition = __webpack_require__(145);

	/**
	 * Find the deepest React component completely containing the root of the
	 * passed-in instance (for use when entire React trees are nested within each
	 * other). If React trees are not nested, returns null.
	 */
	function findParent(inst) {
	  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
	  // traversal, but caching is difficult to do correctly without using a
	  // mutation observer to listen for all DOM changes.
	  while (inst._hostParent) {
	    inst = inst._hostParent;
	  }
	  var rootNode = ReactDOMComponentTree.getNodeFromInstance(inst);
	  var container = rootNode.parentNode;
	  return ReactDOMComponentTree.getClosestInstanceFromNode(container);
	}

	// Used to store ancestor hierarchy in top level callback
	function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
	  this.topLevelType = topLevelType;
	  this.nativeEvent = nativeEvent;
	  this.ancestors = [];
	}
	_assign(TopLevelCallbackBookKeeping.prototype, {
	  destructor: function () {
	    this.topLevelType = null;
	    this.nativeEvent = null;
	    this.ancestors.length = 0;
	  }
	});
	PooledClass.addPoolingTo(TopLevelCallbackBookKeeping, PooledClass.twoArgumentPooler);

	function handleTopLevelImpl(bookKeeping) {
	  var nativeEventTarget = getEventTarget(bookKeeping.nativeEvent);
	  var targetInst = ReactDOMComponentTree.getClosestInstanceFromNode(nativeEventTarget);

	  // Loop through the hierarchy, in case there's any nested components.
	  // It's important that we build the array of ancestors before calling any
	  // event handlers, because event handlers can modify the DOM, leading to
	  // inconsistencies with ReactMount's node cache. See #1105.
	  var ancestor = targetInst;
	  do {
	    bookKeeping.ancestors.push(ancestor);
	    ancestor = ancestor && findParent(ancestor);
	  } while (ancestor);

	  for (var i = 0; i < bookKeeping.ancestors.length; i++) {
	    targetInst = bookKeeping.ancestors[i];
	    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, targetInst, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
	  }
	}

	function scrollValueMonitor(cb) {
	  var scrollPosition = getUnboundedScrollPosition(window);
	  cb(scrollPosition);
	}

	var ReactEventListener = {
	  _enabled: true,
	  _handleTopLevel: null,

	  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

	  setHandleTopLevel: function (handleTopLevel) {
	    ReactEventListener._handleTopLevel = handleTopLevel;
	  },

	  setEnabled: function (enabled) {
	    ReactEventListener._enabled = !!enabled;
	  },

	  isEnabled: function () {
	    return ReactEventListener._enabled;
	  },

	  /**
	   * Traps top-level events by using event bubbling.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} handle Element on which to attach listener.
	   * @return {?object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
	    var element = handle;
	    if (!element) {
	      return null;
	    }
	    return EventListener.listen(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
	  },

	  /**
	   * Traps a top-level event by using event capturing.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} handle Element on which to attach listener.
	   * @return {?object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
	    var element = handle;
	    if (!element) {
	      return null;
	    }
	    return EventListener.capture(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
	  },

	  monitorScrollValue: function (refresh) {
	    var callback = scrollValueMonitor.bind(null, refresh);
	    EventListener.listen(window, 'scroll', callback);
	  },

	  dispatchEvent: function (topLevelType, nativeEvent) {
	    if (!ReactEventListener._enabled) {
	      return;
	    }

	    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(topLevelType, nativeEvent);
	    try {
	      // Event queue being processed in the same cycle allows
	      // `preventDefault`.
	      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
	    } finally {
	      TopLevelCallbackBookKeeping.release(bookKeeping);
	    }
	  }
	};

	module.exports = ReactEventListener;

/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @typechecks
	 */

	var emptyFunction = __webpack_require__(13);

	/**
	 * Upstream version of event listener. Does not take into account specific
	 * nature of platform.
	 */
	var EventListener = {
	  /**
	   * Listen to DOM events during the bubble phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  listen: function listen(target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, false);
	      return {
	        remove: function remove() {
	          target.removeEventListener(eventType, callback, false);
	        }
	      };
	    } else if (target.attachEvent) {
	      target.attachEvent('on' + eventType, callback);
	      return {
	        remove: function remove() {
	          target.detachEvent('on' + eventType, callback);
	        }
	      };
	    }
	  },

	  /**
	   * Listen to DOM events during the capture phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  capture: function capture(target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, true);
	      return {
	        remove: function remove() {
	          target.removeEventListener(eventType, callback, true);
	        }
	      };
	    } else {
	      if (process.env.NODE_ENV !== 'production') {
	        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');
	      }
	      return {
	        remove: emptyFunction
	      };
	    }
	  },

	  registerDefault: function registerDefault() {}
	};

	module.exports = EventListener;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 145 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @typechecks
	 */

	'use strict';

	/**
	 * Gets the scroll position of the supplied element or window.
	 *
	 * The return values are unbounded, unlike `getScrollPosition`. This means they
	 * may be negative or exceed the element boundaries (which is possible using
	 * inertial scrolling).
	 *
	 * @param {DOMWindow|DOMElement} scrollable
	 * @return {object} Map with `x` and `y` keys.
	 */

	function getUnboundedScrollPosition(scrollable) {
	  if (scrollable.Window && scrollable instanceof scrollable.Window) {
	    return {
	      x: scrollable.pageXOffset || scrollable.document.documentElement.scrollLeft,
	      y: scrollable.pageYOffset || scrollable.document.documentElement.scrollTop
	    };
	  }
	  return {
	    x: scrollable.scrollLeft,
	    y: scrollable.scrollTop
	  };
	}

	module.exports = getUnboundedScrollPosition;

/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInjection
	 */

	'use strict';

	var DOMProperty = __webpack_require__(39);
	var EventPluginHub = __webpack_require__(45);
	var EventPluginUtils = __webpack_require__(47);
	var ReactComponentEnvironment = __webpack_require__(124);
	var ReactClass = __webpack_require__(22);
	var ReactEmptyComponent = __webpack_require__(132);
	var ReactBrowserEventEmitter = __webpack_require__(113);
	var ReactHostComponent = __webpack_require__(133);
	var ReactUpdates = __webpack_require__(58);

	var ReactInjection = {
	  Component: ReactComponentEnvironment.injection,
	  Class: ReactClass.injection,
	  DOMProperty: DOMProperty.injection,
	  EmptyComponent: ReactEmptyComponent.injection,
	  EventPluginHub: EventPluginHub.injection,
	  EventPluginUtils: EventPluginUtils.injection,
	  EventEmitter: ReactBrowserEventEmitter.injection,
	  HostComponent: ReactHostComponent.injection,
	  Updates: ReactUpdates.injection
	};

	module.exports = ReactInjection;

/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactReconcileTransaction
	 */

	'use strict';

	var _assign = __webpack_require__(5);

	var CallbackQueue = __webpack_require__(59);
	var PooledClass = __webpack_require__(7);
	var ReactBrowserEventEmitter = __webpack_require__(113);
	var ReactInputSelection = __webpack_require__(148);
	var ReactInstrumentation = __webpack_require__(64);
	var Transaction = __webpack_require__(71);
	var ReactUpdateQueue = __webpack_require__(137);

	/**
	 * Ensures that, when possible, the selection range (currently selected text
	 * input) is not disturbed by performing the transaction.
	 */
	var SELECTION_RESTORATION = {
	  /**
	   * @return {Selection} Selection information.
	   */
	  initialize: ReactInputSelection.getSelectionInformation,
	  /**
	   * @param {Selection} sel Selection information returned from `initialize`.
	   */
	  close: ReactInputSelection.restoreSelection
	};

	/**
	 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
	 * high level DOM manipulations (like temporarily removing a text input from the
	 * DOM).
	 */
	var EVENT_SUPPRESSION = {
	  /**
	   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
	   * the reconciliation.
	   */
	  initialize: function () {
	    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
	    ReactBrowserEventEmitter.setEnabled(false);
	    return currentlyEnabled;
	  },

	  /**
	   * @param {boolean} previouslyEnabled Enabled status of
	   *   `ReactBrowserEventEmitter` before the reconciliation occurred. `close`
	   *   restores the previous value.
	   */
	  close: function (previouslyEnabled) {
	    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
	  }
	};

	/**
	 * Provides a queue for collecting `componentDidMount` and
	 * `componentDidUpdate` callbacks during the transaction.
	 */
	var ON_DOM_READY_QUEUEING = {
	  /**
	   * Initializes the internal `onDOMReady` queue.
	   */
	  initialize: function () {
	    this.reactMountReady.reset();
	  },

	  /**
	   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
	   */
	  close: function () {
	    this.reactMountReady.notifyAll();
	  }
	};

	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];

	if (process.env.NODE_ENV !== 'production') {
	  TRANSACTION_WRAPPERS.push({
	    initialize: ReactInstrumentation.debugTool.onBeginFlush,
	    close: ReactInstrumentation.debugTool.onEndFlush
	  });
	}

	/**
	 * Currently:
	 * - The order that these are listed in the transaction is critical:
	 * - Suppresses events.
	 * - Restores selection range.
	 *
	 * Future:
	 * - Restore document/overflow scroll positions that were unintentionally
	 *   modified via DOM insertions above the top viewport boundary.
	 * - Implement/integrate with customized constraint based layout system and keep
	 *   track of which dimensions must be remeasured.
	 *
	 * @class ReactReconcileTransaction
	 */
	function ReactReconcileTransaction(useCreateElement) {
	  this.reinitializeTransaction();
	  // Only server-side rendering really needs this option (see
	  // `ReactServerRendering`), but server-side uses
	  // `ReactServerRenderingTransaction` instead. This option is here so that it's
	  // accessible and defaults to false when `ReactDOMComponent` and
	  // `ReactDOMTextComponent` checks it in `mountComponent`.`
	  this.renderToStaticMarkup = false;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.useCreateElement = useCreateElement;
	}

	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array<object>} List of operation wrap procedures.
	   *   TODO: convert to array<TransactionWrapper>
	   */
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },

	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function () {
	    return this.reactMountReady;
	  },

	  /**
	   * @return {object} The queue to collect React async events.
	   */
	  getUpdateQueue: function () {
	    return ReactUpdateQueue;
	  },

	  /**
	   * Save current transaction state -- if the return value from this method is
	   * passed to `rollback`, the transaction will be reset to that state.
	   */
	  checkpoint: function () {
	    // reactMountReady is the our only stateful wrapper
	    return this.reactMountReady.checkpoint();
	  },

	  rollback: function (checkpoint) {
	    this.reactMountReady.rollback(checkpoint);
	  },

	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be reused.
	   */
	  destructor: function () {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;
	  }
	};

	_assign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);

	PooledClass.addPoolingTo(ReactReconcileTransaction);

	module.exports = ReactReconcileTransaction;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInputSelection
	 */

	'use strict';

	var ReactDOMSelection = __webpack_require__(149);

	var containsNode = __webpack_require__(151);
	var focusNode = __webpack_require__(98);
	var getActiveElement = __webpack_require__(154);

	function isInDocument(node) {
	  return containsNode(document.documentElement, node);
	}

	/**
	 * @ReactInputSelection: React input selection module. Based on Selection.js,
	 * but modified to be suitable for react and has a couple of bug fixes (doesn't
	 * assume buttons have range selections allowed).
	 * Input selection module for React.
	 */
	var ReactInputSelection = {

	  hasSelectionCapabilities: function (elem) {
	    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	    return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');
	  },

	  getSelectionInformation: function () {
	    var focusedElem = getActiveElement();
	    return {
	      focusedElem: focusedElem,
	      selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null
	    };
	  },

	  /**
	   * @restoreSelection: If any selection information was potentially lost,
	   * restore it. This is useful when performing operations that could remove dom
	   * nodes and place them back in, resulting in focus being lost.
	   */
	  restoreSelection: function (priorSelectionInformation) {
	    var curFocusedElem = getActiveElement();
	    var priorFocusedElem = priorSelectionInformation.focusedElem;
	    var priorSelectionRange = priorSelectionInformation.selectionRange;
	    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
	      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
	        ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);
	      }
	      focusNode(priorFocusedElem);
	    }
	  },

	  /**
	   * @getSelection: Gets the selection bounds of a focused textarea, input or
	   * contentEditable node.
	   * -@input: Look up selection bounds of this input
	   * -@return {start: selectionStart, end: selectionEnd}
	   */
	  getSelection: function (input) {
	    var selection;

	    if ('selectionStart' in input) {
	      // Modern browser with input or textarea.
	      selection = {
	        start: input.selectionStart,
	        end: input.selectionEnd
	      };
	    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {
	      // IE8 input.
	      var range = document.selection.createRange();
	      // There can only be one selection per document in IE, so it must
	      // be in our element.
	      if (range.parentElement() === input) {
	        selection = {
	          start: -range.moveStart('character', -input.value.length),
	          end: -range.moveEnd('character', -input.value.length)
	        };
	      }
	    } else {
	      // Content editable or old IE textarea.
	      selection = ReactDOMSelection.getOffsets(input);
	    }

	    return selection || { start: 0, end: 0 };
	  },

	  /**
	   * @setSelection: Sets the selection bounds of a textarea or input and focuses
	   * the input.
	   * -@input     Set selection bounds of this input or textarea
	   * -@offsets   Object of same form that is returned from get*
	   */
	  setSelection: function (input, offsets) {
	    var start = offsets.start;
	    var end = offsets.end;
	    if (end === undefined) {
	      end = start;
	    }

	    if ('selectionStart' in input) {
	      input.selectionStart = start;
	      input.selectionEnd = Math.min(end, input.value.length);
	    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {
	      var range = input.createTextRange();
	      range.collapse(true);
	      range.moveStart('character', start);
	      range.moveEnd('character', end - start);
	      range.select();
	    } else {
	      ReactDOMSelection.setOffsets(input, offsets);
	    }
	  }
	};

	module.exports = ReactInputSelection;

/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMSelection
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(51);

	var getNodeForCharacterOffset = __webpack_require__(150);
	var getTextContentAccessor = __webpack_require__(53);

	/**
	 * While `isCollapsed` is available on the Selection object and `collapsed`
	 * is available on the Range object, IE11 sometimes gets them wrong.
	 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
	 */
	function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
	  return anchorNode === focusNode && anchorOffset === focusOffset;
	}

	/**
	 * Get the appropriate anchor and focus node/offset pairs for IE.
	 *
	 * The catch here is that IE's selection API doesn't provide information
	 * about whether the selection is forward or backward, so we have to
	 * behave as though it's always forward.
	 *
	 * IE text differs from modern selection in that it behaves as though
	 * block elements end with a new line. This means character offsets will
	 * differ between the two APIs.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getIEOffsets(node) {
	  var selection = document.selection;
	  var selectedRange = selection.createRange();
	  var selectedLength = selectedRange.text.length;

	  // Duplicate selection so we can move range without breaking user selection.
	  var fromStart = selectedRange.duplicate();
	  fromStart.moveToElementText(node);
	  fromStart.setEndPoint('EndToStart', selectedRange);

	  var startOffset = fromStart.text.length;
	  var endOffset = startOffset + selectedLength;

	  return {
	    start: startOffset,
	    end: endOffset
	  };
	}

	/**
	 * @param {DOMElement} node
	 * @return {?object}
	 */
	function getModernOffsets(node) {
	  var selection = window.getSelection && window.getSelection();

	  if (!selection || selection.rangeCount === 0) {
	    return null;
	  }

	  var anchorNode = selection.anchorNode;
	  var anchorOffset = selection.anchorOffset;
	  var focusNode = selection.focusNode;
	  var focusOffset = selection.focusOffset;

	  var currentRange = selection.getRangeAt(0);

	  // In Firefox, range.startContainer and range.endContainer can be "anonymous
	  // divs", e.g. the up/down buttons on an <input type="number">. Anonymous
	  // divs do not seem to expose properties, triggering a "Permission denied
	  // error" if any of its properties are accessed. The only seemingly possible
	  // way to avoid erroring is to access a property that typically works for
	  // non-anonymous divs and catch any error that may otherwise arise. See
	  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
	  try {
	    /* eslint-disable no-unused-expressions */
	    currentRange.startContainer.nodeType;
	    currentRange.endContainer.nodeType;
	    /* eslint-enable no-unused-expressions */
	  } catch (e) {
	    return null;
	  }

	  // If the node and offset values are the same, the selection is collapsed.
	  // `Selection.isCollapsed` is available natively, but IE sometimes gets
	  // this value wrong.
	  var isSelectionCollapsed = isCollapsed(selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);

	  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

	  var tempRange = currentRange.cloneRange();
	  tempRange.selectNodeContents(node);
	  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

	  var isTempRangeCollapsed = isCollapsed(tempRange.startContainer, tempRange.startOffset, tempRange.endContainer, tempRange.endOffset);

	  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
	  var end = start + rangeLength;

	  // Detect whether the selection is backward.
	  var detectionRange = document.createRange();
	  detectionRange.setStart(anchorNode, anchorOffset);
	  detectionRange.setEnd(focusNode, focusOffset);
	  var isBackward = detectionRange.collapsed;

	  return {
	    start: isBackward ? end : start,
	    end: isBackward ? start : end
	  };
	}

	/**
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setIEOffsets(node, offsets) {
	  var range = document.selection.createRange().duplicate();
	  var start, end;

	  if (offsets.end === undefined) {
	    start = offsets.start;
	    end = start;
	  } else if (offsets.start > offsets.end) {
	    start = offsets.end;
	    end = offsets.start;
	  } else {
	    start = offsets.start;
	    end = offsets.end;
	  }

	  range.moveToElementText(node);
	  range.moveStart('character', start);
	  range.setEndPoint('EndToStart', range);
	  range.moveEnd('character', end - start);
	  range.select();
	}

	/**
	 * In modern non-IE browsers, we can support both forward and backward
	 * selections.
	 *
	 * Note: IE10+ supports the Selection object, but it does not support
	 * the `extend` method, which means that even in modern IE, it's not possible
	 * to programmatically create a backward selection. Thus, for all IE
	 * versions, we use the old IE API to create our selections.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setModernOffsets(node, offsets) {
	  if (!window.getSelection) {
	    return;
	  }

	  var selection = window.getSelection();
	  var length = node[getTextContentAccessor()].length;
	  var start = Math.min(offsets.start, length);
	  var end = offsets.end === undefined ? start : Math.min(offsets.end, length);

	  // IE 11 uses modern selection, but doesn't support the extend method.
	  // Flip backward selections, so we can set with a single range.
	  if (!selection.extend && start > end) {
	    var temp = end;
	    end = start;
	    start = temp;
	  }

	  var startMarker = getNodeForCharacterOffset(node, start);
	  var endMarker = getNodeForCharacterOffset(node, end);

	  if (startMarker && endMarker) {
	    var range = document.createRange();
	    range.setStart(startMarker.node, startMarker.offset);
	    selection.removeAllRanges();

	    if (start > end) {
	      selection.addRange(range);
	      selection.extend(endMarker.node, endMarker.offset);
	    } else {
	      range.setEnd(endMarker.node, endMarker.offset);
	      selection.addRange(range);
	    }
	  }
	}

	var useIEOffsets = ExecutionEnvironment.canUseDOM && 'selection' in document && !('getSelection' in window);

	var ReactDOMSelection = {
	  /**
	   * @param {DOMElement} node
	   */
	  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

	  /**
	   * @param {DOMElement|DOMTextNode} node
	   * @param {object} offsets
	   */
	  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
	};

	module.exports = ReactDOMSelection;

/***/ }),
/* 150 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getNodeForCharacterOffset
	 */

	'use strict';

	/**
	 * Given any node return the first leaf node without children.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {DOMElement|DOMTextNode}
	 */

	function getLeafNode(node) {
	  while (node && node.firstChild) {
	    node = node.firstChild;
	  }
	  return node;
	}

	/**
	 * Get the next sibling within a container. This will walk up the
	 * DOM if a node's siblings have been exhausted.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {?DOMElement|DOMTextNode}
	 */
	function getSiblingNode(node) {
	  while (node) {
	    if (node.nextSibling) {
	      return node.nextSibling;
	    }
	    node = node.parentNode;
	  }
	}

	/**
	 * Get object describing the nodes which contain characters at offset.
	 *
	 * @param {DOMElement|DOMTextNode} root
	 * @param {number} offset
	 * @return {?object}
	 */
	function getNodeForCharacterOffset(root, offset) {
	  var node = getLeafNode(root);
	  var nodeStart = 0;
	  var nodeEnd = 0;

	  while (node) {
	    if (node.nodeType === 3) {
	      nodeEnd = nodeStart + node.textContent.length;

	      if (nodeStart <= offset && nodeEnd >= offset) {
	        return {
	          node: node,
	          offset: offset - nodeStart
	        };
	      }

	      nodeStart = nodeEnd;
	    }

	    node = getLeafNode(getSiblingNode(node));
	  }
	}

	module.exports = getNodeForCharacterOffset;

/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	var isTextNode = __webpack_require__(152);

	/*eslint-disable no-bitwise */

	/**
	 * Checks if a given DOM node contains or is another DOM node.
	 */
	function containsNode(outerNode, innerNode) {
	  if (!outerNode || !innerNode) {
	    return false;
	  } else if (outerNode === innerNode) {
	    return true;
	  } else if (isTextNode(outerNode)) {
	    return false;
	  } else if (isTextNode(innerNode)) {
	    return containsNode(outerNode, innerNode.parentNode);
	  } else if ('contains' in outerNode) {
	    return outerNode.contains(innerNode);
	  } else if (outerNode.compareDocumentPosition) {
	    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
	  } else {
	    return false;
	  }
	}

	module.exports = containsNode;

/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @typechecks
	 */

	var isNode = __webpack_require__(153);

	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM text node.
	 */
	function isTextNode(object) {
	  return isNode(object) && object.nodeType == 3;
	}

	module.exports = isTextNode;

/***/ }),
/* 153 */
/***/ (function(module, exports) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @typechecks
	 */

	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM node.
	 */
	function isNode(object) {
	  var doc = object ? object.ownerDocument || object : document;
	  var defaultView = doc.defaultView || window;
	  return !!(object && (typeof defaultView.Node === 'function' ? object instanceof defaultView.Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
	}

	module.exports = isNode;

/***/ }),
/* 154 */
/***/ (function(module, exports) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @typechecks
	 */

	/* eslint-disable fb-www/typeof-undefined */

	/**
	 * Same as document.activeElement but wraps in a try-catch block. In IE it is
	 * not safe to call document.activeElement if there is nothing focused.
	 *
	 * The activeElement will be null only if the document or document body is not
	 * yet defined.
	 *
	 * @param {?DOMDocument} doc Defaults to current document.
	 * @return {?DOMElement}
	 */
	function getActiveElement(doc) /*?DOMElement*/{
	  doc = doc || (typeof document !== 'undefined' ? document : undefined);
	  if (typeof doc === 'undefined') {
	    return null;
	  }
	  try {
	    return doc.activeElement || doc.body;
	  } catch (e) {
	    return doc.body;
	  }
	}

	module.exports = getActiveElement;

/***/ }),
/* 155 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SVGDOMPropertyConfig
	 */

	'use strict';

	var NS = {
	  xlink: 'http://www.w3.org/1999/xlink',
	  xml: 'http://www.w3.org/XML/1998/namespace'
	};

	// We use attributes for everything SVG so let's avoid some duplication and run
	// code instead.
	// The following are all specified in the HTML config already so we exclude here.
	// - class (as className)
	// - color
	// - height
	// - id
	// - lang
	// - max
	// - media
	// - method
	// - min
	// - name
	// - style
	// - target
	// - type
	// - width
	var ATTRS = {
	  accentHeight: 'accent-height',
	  accumulate: 0,
	  additive: 0,
	  alignmentBaseline: 'alignment-baseline',
	  allowReorder: 'allowReorder',
	  alphabetic: 0,
	  amplitude: 0,
	  arabicForm: 'arabic-form',
	  ascent: 0,
	  attributeName: 'attributeName',
	  attributeType: 'attributeType',
	  autoReverse: 'autoReverse',
	  azimuth: 0,
	  baseFrequency: 'baseFrequency',
	  baseProfile: 'baseProfile',
	  baselineShift: 'baseline-shift',
	  bbox: 0,
	  begin: 0,
	  bias: 0,
	  by: 0,
	  calcMode: 'calcMode',
	  capHeight: 'cap-height',
	  clip: 0,
	  clipPath: 'clip-path',
	  clipRule: 'clip-rule',
	  clipPathUnits: 'clipPathUnits',
	  colorInterpolation: 'color-interpolation',
	  colorInterpolationFilters: 'color-interpolation-filters',
	  colorProfile: 'color-profile',
	  colorRendering: 'color-rendering',
	  contentScriptType: 'contentScriptType',
	  contentStyleType: 'contentStyleType',
	  cursor: 0,
	  cx: 0,
	  cy: 0,
	  d: 0,
	  decelerate: 0,
	  descent: 0,
	  diffuseConstant: 'diffuseConstant',
	  direction: 0,
	  display: 0,
	  divisor: 0,
	  dominantBaseline: 'dominant-baseline',
	  dur: 0,
	  dx: 0,
	  dy: 0,
	  edgeMode: 'edgeMode',
	  elevation: 0,
	  enableBackground: 'enable-background',
	  end: 0,
	  exponent: 0,
	  externalResourcesRequired: 'externalResourcesRequired',
	  fill: 0,
	  fillOpacity: 'fill-opacity',
	  fillRule: 'fill-rule',
	  filter: 0,
	  filterRes: 'filterRes',
	  filterUnits: 'filterUnits',
	  floodColor: 'flood-color',
	  floodOpacity: 'flood-opacity',
	  focusable: 0,
	  fontFamily: 'font-family',
	  fontSize: 'font-size',
	  fontSizeAdjust: 'font-size-adjust',
	  fontStretch: 'font-stretch',
	  fontStyle: 'font-style',
	  fontVariant: 'font-variant',
	  fontWeight: 'font-weight',
	  format: 0,
	  from: 0,
	  fx: 0,
	  fy: 0,
	  g1: 0,
	  g2: 0,
	  glyphName: 'glyph-name',
	  glyphOrientationHorizontal: 'glyph-orientation-horizontal',
	  glyphOrientationVertical: 'glyph-orientation-vertical',
	  glyphRef: 'glyphRef',
	  gradientTransform: 'gradientTransform',
	  gradientUnits: 'gradientUnits',
	  hanging: 0,
	  horizAdvX: 'horiz-adv-x',
	  horizOriginX: 'horiz-origin-x',
	  ideographic: 0,
	  imageRendering: 'image-rendering',
	  'in': 0,
	  in2: 0,
	  intercept: 0,
	  k: 0,
	  k1: 0,
	  k2: 0,
	  k3: 0,
	  k4: 0,
	  kernelMatrix: 'kernelMatrix',
	  kernelUnitLength: 'kernelUnitLength',
	  kerning: 0,
	  keyPoints: 'keyPoints',
	  keySplines: 'keySplines',
	  keyTimes: 'keyTimes',
	  lengthAdjust: 'lengthAdjust',
	  letterSpacing: 'letter-spacing',
	  lightingColor: 'lighting-color',
	  limitingConeAngle: 'limitingConeAngle',
	  local: 0,
	  markerEnd: 'marker-end',
	  markerMid: 'marker-mid',
	  markerStart: 'marker-start',
	  markerHeight: 'markerHeight',
	  markerUnits: 'markerUnits',
	  markerWidth: 'markerWidth',
	  mask: 0,
	  maskContentUnits: 'maskContentUnits',
	  maskUnits: 'maskUnits',
	  mathematical: 0,
	  mode: 0,
	  numOctaves: 'numOctaves',
	  offset: 0,
	  opacity: 0,
	  operator: 0,
	  order: 0,
	  orient: 0,
	  orientation: 0,
	  origin: 0,
	  overflow: 0,
	  overlinePosition: 'overline-position',
	  overlineThickness: 'overline-thickness',
	  paintOrder: 'paint-order',
	  panose1: 'panose-1',
	  pathLength: 'pathLength',
	  patternContentUnits: 'patternContentUnits',
	  patternTransform: 'patternTransform',
	  patternUnits: 'patternUnits',
	  pointerEvents: 'pointer-events',
	  points: 0,
	  pointsAtX: 'pointsAtX',
	  pointsAtY: 'pointsAtY',
	  pointsAtZ: 'pointsAtZ',
	  preserveAlpha: 'preserveAlpha',
	  preserveAspectRatio: 'preserveAspectRatio',
	  primitiveUnits: 'primitiveUnits',
	  r: 0,
	  radius: 0,
	  refX: 'refX',
	  refY: 'refY',
	  renderingIntent: 'rendering-intent',
	  repeatCount: 'repeatCount',
	  repeatDur: 'repeatDur',
	  requiredExtensions: 'requiredExtensions',
	  requiredFeatures: 'requiredFeatures',
	  restart: 0,
	  result: 0,
	  rotate: 0,
	  rx: 0,
	  ry: 0,
	  scale: 0,
	  seed: 0,
	  shapeRendering: 'shape-rendering',
	  slope: 0,
	  spacing: 0,
	  specularConstant: 'specularConstant',
	  specularExponent: 'specularExponent',
	  speed: 0,
	  spreadMethod: 'spreadMethod',
	  startOffset: 'startOffset',
	  stdDeviation: 'stdDeviation',
	  stemh: 0,
	  stemv: 0,
	  stitchTiles: 'stitchTiles',
	  stopColor: 'stop-color',
	  stopOpacity: 'stop-opacity',
	  strikethroughPosition: 'strikethrough-position',
	  strikethroughThickness: 'strikethrough-thickness',
	  string: 0,
	  stroke: 0,
	  strokeDasharray: 'stroke-dasharray',
	  strokeDashoffset: 'stroke-dashoffset',
	  strokeLinecap: 'stroke-linecap',
	  strokeLinejoin: 'stroke-linejoin',
	  strokeMiterlimit: 'stroke-miterlimit',
	  strokeOpacity: 'stroke-opacity',
	  strokeWidth: 'stroke-width',
	  surfaceScale: 'surfaceScale',
	  systemLanguage: 'systemLanguage',
	  tableValues: 'tableValues',
	  targetX: 'targetX',
	  targetY: 'targetY',
	  textAnchor: 'text-anchor',
	  textDecoration: 'text-decoration',
	  textRendering: 'text-rendering',
	  textLength: 'textLength',
	  to: 0,
	  transform: 0,
	  u1: 0,
	  u2: 0,
	  underlinePosition: 'underline-position',
	  underlineThickness: 'underline-thickness',
	  unicode: 0,
	  unicodeBidi: 'unicode-bidi',
	  unicodeRange: 'unicode-range',
	  unitsPerEm: 'units-per-em',
	  vAlphabetic: 'v-alphabetic',
	  vHanging: 'v-hanging',
	  vIdeographic: 'v-ideographic',
	  vMathematical: 'v-mathematical',
	  values: 0,
	  vectorEffect: 'vector-effect',
	  version: 0,
	  vertAdvY: 'vert-adv-y',
	  vertOriginX: 'vert-origin-x',
	  vertOriginY: 'vert-origin-y',
	  viewBox: 'viewBox',
	  viewTarget: 'viewTarget',
	  visibility: 0,
	  widths: 0,
	  wordSpacing: 'word-spacing',
	  writingMode: 'writing-mode',
	  x: 0,
	  xHeight: 'x-height',
	  x1: 0,
	  x2: 0,
	  xChannelSelector: 'xChannelSelector',
	  xlinkActuate: 'xlink:actuate',
	  xlinkArcrole: 'xlink:arcrole',
	  xlinkHref: 'xlink:href',
	  xlinkRole: 'xlink:role',
	  xlinkShow: 'xlink:show',
	  xlinkTitle: 'xlink:title',
	  xlinkType: 'xlink:type',
	  xmlBase: 'xml:base',
	  xmlns: 0,
	  xmlnsXlink: 'xmlns:xlink',
	  xmlLang: 'xml:lang',
	  xmlSpace: 'xml:space',
	  y: 0,
	  y1: 0,
	  y2: 0,
	  yChannelSelector: 'yChannelSelector',
	  z: 0,
	  zoomAndPan: 'zoomAndPan'
	};

	var SVGDOMPropertyConfig = {
	  Properties: {},
	  DOMAttributeNamespaces: {
	    xlinkActuate: NS.xlink,
	    xlinkArcrole: NS.xlink,
	    xlinkHref: NS.xlink,
	    xlinkRole: NS.xlink,
	    xlinkShow: NS.xlink,
	    xlinkTitle: NS.xlink,
	    xlinkType: NS.xlink,
	    xmlBase: NS.xml,
	    xmlLang: NS.xml,
	    xmlSpace: NS.xml
	  },
	  DOMAttributeNames: {}
	};

	Object.keys(ATTRS).forEach(function (key) {
	  SVGDOMPropertyConfig.Properties[key] = 0;
	  if (ATTRS[key]) {
	    SVGDOMPropertyConfig.DOMAttributeNames[key] = ATTRS[key];
	  }
	});

	module.exports = SVGDOMPropertyConfig;

/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SelectEventPlugin
	 */

	'use strict';

	var EventConstants = __webpack_require__(43);
	var EventPropagators = __webpack_require__(44);
	var ExecutionEnvironment = __webpack_require__(51);
	var ReactDOMComponentTree = __webpack_require__(38);
	var ReactInputSelection = __webpack_require__(148);
	var SyntheticEvent = __webpack_require__(55);

	var getActiveElement = __webpack_require__(154);
	var isTextInputElement = __webpack_require__(74);
	var keyOf = __webpack_require__(26);
	var shallowEqual = __webpack_require__(130);

	var topLevelTypes = EventConstants.topLevelTypes;

	var skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;

	var eventTypes = {
	  select: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSelect: null }),
	      captured: keyOf({ onSelectCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topContextMenu, topLevelTypes.topFocus, topLevelTypes.topKeyDown, topLevelTypes.topMouseDown, topLevelTypes.topMouseUp, topLevelTypes.topSelectionChange]
	  }
	};

	var activeElement = null;
	var activeElementInst = null;
	var lastSelection = null;
	var mouseDown = false;

	// Track whether a listener exists for this plugin. If none exist, we do
	// not extract events. See #3639.
	var hasListener = false;
	var ON_SELECT_KEY = keyOf({ onSelect: null });

	/**
	 * Get an object which is a unique representation of the current selection.
	 *
	 * The return value will not be consistent across nodes or browsers, but
	 * two identical selections on the same node will return identical objects.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getSelection(node) {
	  if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {
	    return {
	      start: node.selectionStart,
	      end: node.selectionEnd
	    };
	  } else if (window.getSelection) {
	    var selection = window.getSelection();
	    return {
	      anchorNode: selection.anchorNode,
	      anchorOffset: selection.anchorOffset,
	      focusNode: selection.focusNode,
	      focusOffset: selection.focusOffset
	    };
	  } else if (document.selection) {
	    var range = document.selection.createRange();
	    return {
	      parentElement: range.parentElement(),
	      text: range.text,
	      top: range.boundingTop,
	      left: range.boundingLeft
	    };
	  }
	}

	/**
	 * Poll selection to see whether it's changed.
	 *
	 * @param {object} nativeEvent
	 * @return {?SyntheticEvent}
	 */
	function constructSelectEvent(nativeEvent, nativeEventTarget) {
	  // Ensure we have the right element, and that the user is not dragging a
	  // selection (this matches native `select` event behavior). In HTML5, select
	  // fires only on input and textarea thus if there's no focused element we
	  // won't dispatch.
	  if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {
	    return null;
	  }

	  // Only fire when selection has actually changed.
	  var currentSelection = getSelection(activeElement);
	  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
	    lastSelection = currentSelection;

	    var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementInst, nativeEvent, nativeEventTarget);

	    syntheticEvent.type = 'select';
	    syntheticEvent.target = activeElement;

	    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

	    return syntheticEvent;
	  }

	  return null;
	}

	/**
	 * This plugin creates an `onSelect` event that normalizes select events
	 * across form elements.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - contentEditable
	 *
	 * This differs from native browser implementations in the following ways:
	 * - Fires on contentEditable fields as well as inputs.
	 * - Fires for collapsed selection.
	 * - Fires after user input.
	 */
	var SelectEventPlugin = {

	  eventTypes: eventTypes,

	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    if (!hasListener) {
	      return null;
	    }

	    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;

	    switch (topLevelType) {
	      // Track the input node that has focus.
	      case topLevelTypes.topFocus:
	        if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
	          activeElement = targetNode;
	          activeElementInst = targetInst;
	          lastSelection = null;
	        }
	        break;
	      case topLevelTypes.topBlur:
	        activeElement = null;
	        activeElementInst = null;
	        lastSelection = null;
	        break;

	      // Don't fire the event while the user is dragging. This matches the
	      // semantics of the native select event.
	      case topLevelTypes.topMouseDown:
	        mouseDown = true;
	        break;
	      case topLevelTypes.topContextMenu:
	      case topLevelTypes.topMouseUp:
	        mouseDown = false;
	        return constructSelectEvent(nativeEvent, nativeEventTarget);

	      // Chrome and IE fire non-standard event when selection is changed (and
	      // sometimes when it hasn't). IE's event fires out of order with respect
	      // to key and input events on deletion, so we discard it.
	      //
	      // Firefox doesn't support selectionchange, so check selection status
	      // after each key entry. The selection changes after keydown and before
	      // keyup, but we check on keydown as well in the case of holding down a
	      // key, when multiple keydown events are fired but only one keyup is.
	      // This is also our approach for IE handling, for the reason above.
	      case topLevelTypes.topSelectionChange:
	        if (skipSelectionChangeEvent) {
	          break;
	        }
	      // falls through
	      case topLevelTypes.topKeyDown:
	      case topLevelTypes.topKeyUp:
	        return constructSelectEvent(nativeEvent, nativeEventTarget);
	    }

	    return null;
	  },

	  didPutListener: function (inst, registrationName, listener) {
	    if (registrationName === ON_SELECT_KEY) {
	      hasListener = true;
	    }
	  }
	};

	module.exports = SelectEventPlugin;

/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SimpleEventPlugin
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(8);

	var EventConstants = __webpack_require__(43);
	var EventListener = __webpack_require__(144);
	var EventPropagators = __webpack_require__(44);
	var ReactDOMComponentTree = __webpack_require__(38);
	var SyntheticAnimationEvent = __webpack_require__(158);
	var SyntheticClipboardEvent = __webpack_require__(159);
	var SyntheticEvent = __webpack_require__(55);
	var SyntheticFocusEvent = __webpack_require__(160);
	var SyntheticKeyboardEvent = __webpack_require__(161);
	var SyntheticMouseEvent = __webpack_require__(77);
	var SyntheticDragEvent = __webpack_require__(164);
	var SyntheticTouchEvent = __webpack_require__(165);
	var SyntheticTransitionEvent = __webpack_require__(166);
	var SyntheticUIEvent = __webpack_require__(78);
	var SyntheticWheelEvent = __webpack_require__(167);

	var emptyFunction = __webpack_require__(13);
	var getEventCharCode = __webpack_require__(162);
	var invariant = __webpack_require__(9);
	var keyOf = __webpack_require__(26);

	var topLevelTypes = EventConstants.topLevelTypes;

	var eventTypes = {
	  abort: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onAbort: true }),
	      captured: keyOf({ onAbortCapture: true })
	    }
	  },
	  animationEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onAnimationEnd: true }),
	      captured: keyOf({ onAnimationEndCapture: true })
	    }
	  },
	  animationIteration: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onAnimationIteration: true }),
	      captured: keyOf({ onAnimationIterationCapture: true })
	    }
	  },
	  animationStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onAnimationStart: true }),
	      captured: keyOf({ onAnimationStartCapture: true })
	    }
	  },
	  blur: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onBlur: true }),
	      captured: keyOf({ onBlurCapture: true })
	    }
	  },
	  canPlay: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCanPlay: true }),
	      captured: keyOf({ onCanPlayCapture: true })
	    }
	  },
	  canPlayThrough: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCanPlayThrough: true }),
	      captured: keyOf({ onCanPlayThroughCapture: true })
	    }
	  },
	  click: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onClick: true }),
	      captured: keyOf({ onClickCapture: true })
	    }
	  },
	  contextMenu: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onContextMenu: true }),
	      captured: keyOf({ onContextMenuCapture: true })
	    }
	  },
	  copy: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCopy: true }),
	      captured: keyOf({ onCopyCapture: true })
	    }
	  },
	  cut: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCut: true }),
	      captured: keyOf({ onCutCapture: true })
	    }
	  },
	  doubleClick: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDoubleClick: true }),
	      captured: keyOf({ onDoubleClickCapture: true })
	    }
	  },
	  drag: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDrag: true }),
	      captured: keyOf({ onDragCapture: true })
	    }
	  },
	  dragEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragEnd: true }),
	      captured: keyOf({ onDragEndCapture: true })
	    }
	  },
	  dragEnter: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragEnter: true }),
	      captured: keyOf({ onDragEnterCapture: true })
	    }
	  },
	  dragExit: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragExit: true }),
	      captured: keyOf({ onDragExitCapture: true })
	    }
	  },
	  dragLeave: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragLeave: true }),
	      captured: keyOf({ onDragLeaveCapture: true })
	    }
	  },
	  dragOver: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragOver: true }),
	      captured: keyOf({ onDragOverCapture: true })
	    }
	  },
	  dragStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragStart: true }),
	      captured: keyOf({ onDragStartCapture: true })
	    }
	  },
	  drop: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDrop: true }),
	      captured: keyOf({ onDropCapture: true })
	    }
	  },
	  durationChange: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDurationChange: true }),
	      captured: keyOf({ onDurationChangeCapture: true })
	    }
	  },
	  emptied: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onEmptied: true }),
	      captured: keyOf({ onEmptiedCapture: true })
	    }
	  },
	  encrypted: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onEncrypted: true }),
	      captured: keyOf({ onEncryptedCapture: true })
	    }
	  },
	  ended: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onEnded: true }),
	      captured: keyOf({ onEndedCapture: true })
	    }
	  },
	  error: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onError: true }),
	      captured: keyOf({ onErrorCapture: true })
	    }
	  },
	  focus: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onFocus: true }),
	      captured: keyOf({ onFocusCapture: true })
	    }
	  },
	  input: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onInput: true }),
	      captured: keyOf({ onInputCapture: true })
	    }
	  },
	  invalid: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onInvalid: true }),
	      captured: keyOf({ onInvalidCapture: true })
	    }
	  },
	  keyDown: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onKeyDown: true }),
	      captured: keyOf({ onKeyDownCapture: true })
	    }
	  },
	  keyPress: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onKeyPress: true }),
	      captured: keyOf({ onKeyPressCapture: true })
	    }
	  },
	  keyUp: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onKeyUp: true }),
	      captured: keyOf({ onKeyUpCapture: true })
	    }
	  },
	  load: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoad: true }),
	      captured: keyOf({ onLoadCapture: true })
	    }
	  },
	  loadedData: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoadedData: true }),
	      captured: keyOf({ onLoadedDataCapture: true })
	    }
	  },
	  loadedMetadata: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoadedMetadata: true }),
	      captured: keyOf({ onLoadedMetadataCapture: true })
	    }
	  },
	  loadStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoadStart: true }),
	      captured: keyOf({ onLoadStartCapture: true })
	    }
	  },
	  // Note: We do not allow listening to mouseOver events. Instead, use the
	  // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.
	  mouseDown: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseDown: true }),
	      captured: keyOf({ onMouseDownCapture: true })
	    }
	  },
	  mouseMove: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseMove: true }),
	      captured: keyOf({ onMouseMoveCapture: true })
	    }
	  },
	  mouseOut: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseOut: true }),
	      captured: keyOf({ onMouseOutCapture: true })
	    }
	  },
	  mouseOver: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseOver: true }),
	      captured: keyOf({ onMouseOverCapture: true })
	    }
	  },
	  mouseUp: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseUp: true }),
	      captured: keyOf({ onMouseUpCapture: true })
	    }
	  },
	  paste: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPaste: true }),
	      captured: keyOf({ onPasteCapture: true })
	    }
	  },
	  pause: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPause: true }),
	      captured: keyOf({ onPauseCapture: true })
	    }
	  },
	  play: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPlay: true }),
	      captured: keyOf({ onPlayCapture: true })
	    }
	  },
	  playing: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPlaying: true }),
	      captured: keyOf({ onPlayingCapture: true })
	    }
	  },
	  progress: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onProgress: true }),
	      captured: keyOf({ onProgressCapture: true })
	    }
	  },
	  rateChange: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onRateChange: true }),
	      captured: keyOf({ onRateChangeCapture: true })
	    }
	  },
	  reset: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onReset: true }),
	      captured: keyOf({ onResetCapture: true })
	    }
	  },
	  scroll: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onScroll: true }),
	      captured: keyOf({ onScrollCapture: true })
	    }
	  },
	  seeked: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSeeked: true }),
	      captured: keyOf({ onSeekedCapture: true })
	    }
	  },
	  seeking: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSeeking: true }),
	      captured: keyOf({ onSeekingCapture: true })
	    }
	  },
	  stalled: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onStalled: true }),
	      captured: keyOf({ onStalledCapture: true })
	    }
	  },
	  submit: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSubmit: true }),
	      captured: keyOf({ onSubmitCapture: true })
	    }
	  },
	  suspend: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSuspend: true }),
	      captured: keyOf({ onSuspendCapture: true })
	    }
	  },
	  timeUpdate: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTimeUpdate: true }),
	      captured: keyOf({ onTimeUpdateCapture: true })
	    }
	  },
	  touchCancel: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchCancel: true }),
	      captured: keyOf({ onTouchCancelCapture: true })
	    }
	  },
	  touchEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchEnd: true }),
	      captured: keyOf({ onTouchEndCapture: true })
	    }
	  },
	  touchMove: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchMove: true }),
	      captured: keyOf({ onTouchMoveCapture: true })
	    }
	  },
	  touchStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchStart: true }),
	      captured: keyOf({ onTouchStartCapture: true })
	    }
	  },
	  transitionEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTransitionEnd: true }),
	      captured: keyOf({ onTransitionEndCapture: true })
	    }
	  },
	  volumeChange: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onVolumeChange: true }),
	      captured: keyOf({ onVolumeChangeCapture: true })
	    }
	  },
	  waiting: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onWaiting: true }),
	      captured: keyOf({ onWaitingCapture: true })
	    }
	  },
	  wheel: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onWheel: true }),
	      captured: keyOf({ onWheelCapture: true })
	    }
	  }
	};

	var topLevelEventsToDispatchConfig = {
	  topAbort: eventTypes.abort,
	  topAnimationEnd: eventTypes.animationEnd,
	  topAnimationIteration: eventTypes.animationIteration,
	  topAnimationStart: eventTypes.animationStart,
	  topBlur: eventTypes.blur,
	  topCanPlay: eventTypes.canPlay,
	  topCanPlayThrough: eventTypes.canPlayThrough,
	  topClick: eventTypes.click,
	  topContextMenu: eventTypes.contextMenu,
	  topCopy: eventTypes.copy,
	  topCut: eventTypes.cut,
	  topDoubleClick: eventTypes.doubleClick,
	  topDrag: eventTypes.drag,
	  topDragEnd: eventTypes.dragEnd,
	  topDragEnter: eventTypes.dragEnter,
	  topDragExit: eventTypes.dragExit,
	  topDragLeave: eventTypes.dragLeave,
	  topDragOver: eventTypes.dragOver,
	  topDragStart: eventTypes.dragStart,
	  topDrop: eventTypes.drop,
	  topDurationChange: eventTypes.durationChange,
	  topEmptied: eventTypes.emptied,
	  topEncrypted: eventTypes.encrypted,
	  topEnded: eventTypes.ended,
	  topError: eventTypes.error,
	  topFocus: eventTypes.focus,
	  topInput: eventTypes.input,
	  topInvalid: eventTypes.invalid,
	  topKeyDown: eventTypes.keyDown,
	  topKeyPress: eventTypes.keyPress,
	  topKeyUp: eventTypes.keyUp,
	  topLoad: eventTypes.load,
	  topLoadedData: eventTypes.loadedData,
	  topLoadedMetadata: eventTypes.loadedMetadata,
	  topLoadStart: eventTypes.loadStart,
	  topMouseDown: eventTypes.mouseDown,
	  topMouseMove: eventTypes.mouseMove,
	  topMouseOut: eventTypes.mouseOut,
	  topMouseOver: eventTypes.mouseOver,
	  topMouseUp: eventTypes.mouseUp,
	  topPaste: eventTypes.paste,
	  topPause: eventTypes.pause,
	  topPlay: eventTypes.play,
	  topPlaying: eventTypes.playing,
	  topProgress: eventTypes.progress,
	  topRateChange: eventTypes.rateChange,
	  topReset: eventTypes.reset,
	  topScroll: eventTypes.scroll,
	  topSeeked: eventTypes.seeked,
	  topSeeking: eventTypes.seeking,
	  topStalled: eventTypes.stalled,
	  topSubmit: eventTypes.submit,
	  topSuspend: eventTypes.suspend,
	  topTimeUpdate: eventTypes.timeUpdate,
	  topTouchCancel: eventTypes.touchCancel,
	  topTouchEnd: eventTypes.touchEnd,
	  topTouchMove: eventTypes.touchMove,
	  topTouchStart: eventTypes.touchStart,
	  topTransitionEnd: eventTypes.transitionEnd,
	  topVolumeChange: eventTypes.volumeChange,
	  topWaiting: eventTypes.waiting,
	  topWheel: eventTypes.wheel
	};

	for (var type in topLevelEventsToDispatchConfig) {
	  topLevelEventsToDispatchConfig[type].dependencies = [type];
	}

	var ON_CLICK_KEY = keyOf({ onClick: null });
	var onClickListeners = {};

	function getDictionaryKey(inst) {
	  return '.' + inst._rootNodeID;
	}

	var SimpleEventPlugin = {

	  eventTypes: eventTypes,

	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
	    if (!dispatchConfig) {
	      return null;
	    }
	    var EventConstructor;
	    switch (topLevelType) {
	      case topLevelTypes.topAbort:
	      case topLevelTypes.topCanPlay:
	      case topLevelTypes.topCanPlayThrough:
	      case topLevelTypes.topDurationChange:
	      case topLevelTypes.topEmptied:
	      case topLevelTypes.topEncrypted:
	      case topLevelTypes.topEnded:
	      case topLevelTypes.topError:
	      case topLevelTypes.topInput:
	      case topLevelTypes.topInvalid:
	      case topLevelTypes.topLoad:
	      case topLevelTypes.topLoadedData:
	      case topLevelTypes.topLoadedMetadata:
	      case topLevelTypes.topLoadStart:
	      case topLevelTypes.topPause:
	      case topLevelTypes.topPlay:
	      case topLevelTypes.topPlaying:
	      case topLevelTypes.topProgress:
	      case topLevelTypes.topRateChange:
	      case topLevelTypes.topReset:
	      case topLevelTypes.topSeeked:
	      case topLevelTypes.topSeeking:
	      case topLevelTypes.topStalled:
	      case topLevelTypes.topSubmit:
	      case topLevelTypes.topSuspend:
	      case topLevelTypes.topTimeUpdate:
	      case topLevelTypes.topVolumeChange:
	      case topLevelTypes.topWaiting:
	        // HTML Events
	        // @see http://www.w3.org/TR/html5/index.html#events-0
	        EventConstructor = SyntheticEvent;
	        break;
	      case topLevelTypes.topKeyPress:
	        // Firefox creates a keypress event for function keys too. This removes
	        // the unwanted keypress events. Enter is however both printable and
	        // non-printable. One would expect Tab to be as well (but it isn't).
	        if (getEventCharCode(nativeEvent) === 0) {
	          return null;
	        }
	      /* falls through */
	      case topLevelTypes.topKeyDown:
	      case topLevelTypes.topKeyUp:
	        EventConstructor = SyntheticKeyboardEvent;
	        break;
	      case topLevelTypes.topBlur:
	      case topLevelTypes.topFocus:
	        EventConstructor = SyntheticFocusEvent;
	        break;
	      case topLevelTypes.topClick:
	        // Firefox creates a click event on right mouse clicks. This removes the
	        // unwanted click events.
	        if (nativeEvent.button === 2) {
	          return null;
	        }
	      /* falls through */
	      case topLevelTypes.topContextMenu:
	      case topLevelTypes.topDoubleClick:
	      case topLevelTypes.topMouseDown:
	      case topLevelTypes.topMouseMove:
	      case topLevelTypes.topMouseOut:
	      case topLevelTypes.topMouseOver:
	      case topLevelTypes.topMouseUp:
	        EventConstructor = SyntheticMouseEvent;
	        break;
	      case topLevelTypes.topDrag:
	      case topLevelTypes.topDragEnd:
	      case topLevelTypes.topDragEnter:
	      case topLevelTypes.topDragExit:
	      case topLevelTypes.topDragLeave:
	      case topLevelTypes.topDragOver:
	      case topLevelTypes.topDragStart:
	      case topLevelTypes.topDrop:
	        EventConstructor = SyntheticDragEvent;
	        break;
	      case topLevelTypes.topTouchCancel:
	      case topLevelTypes.topTouchEnd:
	      case topLevelTypes.topTouchMove:
	      case topLevelTypes.topTouchStart:
	        EventConstructor = SyntheticTouchEvent;
	        break;
	      case topLevelTypes.topAnimationEnd:
	      case topLevelTypes.topAnimationIteration:
	      case topLevelTypes.topAnimationStart:
	        EventConstructor = SyntheticAnimationEvent;
	        break;
	      case topLevelTypes.topTransitionEnd:
	        EventConstructor = SyntheticTransitionEvent;
	        break;
	      case topLevelTypes.topScroll:
	        EventConstructor = SyntheticUIEvent;
	        break;
	      case topLevelTypes.topWheel:
	        EventConstructor = SyntheticWheelEvent;
	        break;
	      case topLevelTypes.topCopy:
	      case topLevelTypes.topCut:
	      case topLevelTypes.topPaste:
	        EventConstructor = SyntheticClipboardEvent;
	        break;
	    }
	    !EventConstructor ? process.env.NODE_ENV !== 'production' ? invariant(false, 'SimpleEventPlugin: Unhandled event type, `%s`.', topLevelType) : _prodInvariant('86', topLevelType) : void 0;
	    var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);
	    EventPropagators.accumulateTwoPhaseDispatches(event);
	    return event;
	  },

	  didPutListener: function (inst, registrationName, listener) {
	    // Mobile Safari does not fire properly bubble click events on
	    // non-interactive elements, which means delegated click listeners do not
	    // fire. The workaround for this bug involves attaching an empty click
	    // listener on the target node.
	    if (registrationName === ON_CLICK_KEY) {
	      var key = getDictionaryKey(inst);
	      var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	      if (!onClickListeners[key]) {
	        onClickListeners[key] = EventListener.listen(node, 'click', emptyFunction);
	      }
	    }
	  },

	  willDeleteListener: function (inst, registrationName) {
	    if (registrationName === ON_CLICK_KEY) {
	      var key = getDictionaryKey(inst);
	      onClickListeners[key].remove();
	      delete onClickListeners[key];
	    }
	  }

	};

	module.exports = SimpleEventPlugin;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticAnimationEvent
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(55);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
	 */
	var AnimationEventInterface = {
	  animationName: null,
	  elapsedTime: null,
	  pseudoElement: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticAnimationEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticAnimationEvent, AnimationEventInterface);

	module.exports = SyntheticAnimationEvent;

/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticClipboardEvent
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(55);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/clipboard-apis/
	 */
	var ClipboardEventInterface = {
	  clipboardData: function (event) {
	    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

	module.exports = SyntheticClipboardEvent;

/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticFocusEvent
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(78);

	/**
	 * @interface FocusEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var FocusEventInterface = {
	  relatedTarget: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

	module.exports = SyntheticFocusEvent;

/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticKeyboardEvent
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(78);

	var getEventCharCode = __webpack_require__(162);
	var getEventKey = __webpack_require__(163);
	var getEventModifierState = __webpack_require__(80);

	/**
	 * @interface KeyboardEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var KeyboardEventInterface = {
	  key: getEventKey,
	  location: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  repeat: null,
	  locale: null,
	  getModifierState: getEventModifierState,
	  // Legacy Interface
	  charCode: function (event) {
	    // `charCode` is the result of a KeyPress event and represents the value of
	    // the actual printable character.

	    // KeyPress is deprecated, but its replacement is not yet final and not
	    // implemented in any major browser. Only KeyPress has charCode.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    return 0;
	  },
	  keyCode: function (event) {
	    // `keyCode` is the result of a KeyDown/Up event and represents the value of
	    // physical keyboard key.

	    // The actual meaning of the value depends on the users' keyboard layout
	    // which cannot be detected. Assuming that it is a US keyboard layout
	    // provides a surprisingly accurate mapping for US and European users.
	    // Due to this, it is left to the user to implement at this time.
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  },
	  which: function (event) {
	    // `which` is an alias for either `keyCode` or `charCode` depending on the
	    // type of the event.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

	module.exports = SyntheticKeyboardEvent;

/***/ }),
/* 162 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventCharCode
	 */

	'use strict';

	/**
	 * `charCode` represents the actual "character code" and is safe to use with
	 * `String.fromCharCode`. As such, only keys that correspond to printable
	 * characters produce a valid `charCode`, the only exception to this is Enter.
	 * The Tab-key is considered non-printable and does not have a `charCode`,
	 * presumably because it does not produce a tab-character in browsers.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {number} Normalized `charCode` property.
	 */

	function getEventCharCode(nativeEvent) {
	  var charCode;
	  var keyCode = nativeEvent.keyCode;

	  if ('charCode' in nativeEvent) {
	    charCode = nativeEvent.charCode;

	    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
	    if (charCode === 0 && keyCode === 13) {
	      charCode = 13;
	    }
	  } else {
	    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
	    charCode = keyCode;
	  }

	  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
	  // Must not discard the (non-)printable Enter-key.
	  if (charCode >= 32 || charCode === 13) {
	    return charCode;
	  }

	  return 0;
	}

	module.exports = getEventCharCode;

/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventKey
	 */

	'use strict';

	var getEventCharCode = __webpack_require__(162);

	/**
	 * Normalization of deprecated HTML5 `key` values
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var normalizeKey = {
	  'Esc': 'Escape',
	  'Spacebar': ' ',
	  'Left': 'ArrowLeft',
	  'Up': 'ArrowUp',
	  'Right': 'ArrowRight',
	  'Down': 'ArrowDown',
	  'Del': 'Delete',
	  'Win': 'OS',
	  'Menu': 'ContextMenu',
	  'Apps': 'ContextMenu',
	  'Scroll': 'ScrollLock',
	  'MozPrintableKey': 'Unidentified'
	};

	/**
	 * Translation from legacy `keyCode` to HTML5 `key`
	 * Only special keys supported, all others depend on keyboard layout or browser
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var translateToKey = {
	  8: 'Backspace',
	  9: 'Tab',
	  12: 'Clear',
	  13: 'Enter',
	  16: 'Shift',
	  17: 'Control',
	  18: 'Alt',
	  19: 'Pause',
	  20: 'CapsLock',
	  27: 'Escape',
	  32: ' ',
	  33: 'PageUp',
	  34: 'PageDown',
	  35: 'End',
	  36: 'Home',
	  37: 'ArrowLeft',
	  38: 'ArrowUp',
	  39: 'ArrowRight',
	  40: 'ArrowDown',
	  45: 'Insert',
	  46: 'Delete',
	  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
	  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
	  144: 'NumLock',
	  145: 'ScrollLock',
	  224: 'Meta'
	};

	/**
	 * @param {object} nativeEvent Native browser event.
	 * @return {string} Normalized `key` property.
	 */
	function getEventKey(nativeEvent) {
	  if (nativeEvent.key) {
	    // Normalize inconsistent values reported by browsers due to
	    // implementations of a working draft specification.

	    // FireFox implements `key` but returns `MozPrintableKey` for all
	    // printable characters (normalized to `Unidentified`), ignore it.
	    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
	    if (key !== 'Unidentified') {
	      return key;
	    }
	  }

	  // Browser does not implement `key`, polyfill as much of it as we can.
	  if (nativeEvent.type === 'keypress') {
	    var charCode = getEventCharCode(nativeEvent);

	    // The enter-key is technically both printable and non-printable and can
	    // thus be captured by `keypress`, no other non-printable key should.
	    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
	  }
	  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
	    // While user keyboard layout determines the actual meaning of each
	    // `keyCode` value, almost all function keys have a universal value.
	    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
	  }
	  return '';
	}

	module.exports = getEventKey;

/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticDragEvent
	 */

	'use strict';

	var SyntheticMouseEvent = __webpack_require__(77);

	/**
	 * @interface DragEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var DragEventInterface = {
	  dataTransfer: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

	module.exports = SyntheticDragEvent;

/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticTouchEvent
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(78);

	var getEventModifierState = __webpack_require__(80);

	/**
	 * @interface TouchEvent
	 * @see http://www.w3.org/TR/touch-events/
	 */
	var TouchEventInterface = {
	  touches: null,
	  targetTouches: null,
	  changedTouches: null,
	  altKey: null,
	  metaKey: null,
	  ctrlKey: null,
	  shiftKey: null,
	  getModifierState: getEventModifierState
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

	module.exports = SyntheticTouchEvent;

/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticTransitionEvent
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(55);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
	 */
	var TransitionEventInterface = {
	  propertyName: null,
	  elapsedTime: null,
	  pseudoElement: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticTransitionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticTransitionEvent, TransitionEventInterface);

	module.exports = SyntheticTransitionEvent;

/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticWheelEvent
	 */

	'use strict';

	var SyntheticMouseEvent = __webpack_require__(77);

	/**
	 * @interface WheelEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var WheelEventInterface = {
	  deltaX: function (event) {
	    return 'deltaX' in event ? event.deltaX :
	    // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
	    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
	  },
	  deltaY: function (event) {
	    return 'deltaY' in event ? event.deltaY :
	    // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
	    'wheelDeltaY' in event ? -event.wheelDeltaY :
	    // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
	    'wheelDelta' in event ? -event.wheelDelta : 0;
	  },
	  deltaZ: null,

	  // Browsers without "deltaMode" is reporting in raw wheel delta where one
	  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
	  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
	  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
	  deltaMode: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticMouseEvent}
	 */
	function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

	module.exports = SyntheticWheelEvent;

/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMount
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(8);

	var DOMLazyTree = __webpack_require__(84);
	var DOMProperty = __webpack_require__(39);
	var ReactBrowserEventEmitter = __webpack_require__(113);
	var ReactCurrentOwner = __webpack_require__(11);
	var ReactDOMComponentTree = __webpack_require__(38);
	var ReactDOMContainerInfo = __webpack_require__(169);
	var ReactDOMFeatureFlags = __webpack_require__(170);
	var ReactElement = __webpack_require__(10);
	var ReactFeatureFlags = __webpack_require__(60);
	var ReactInstanceMap = __webpack_require__(125);
	var ReactInstrumentation = __webpack_require__(64);
	var ReactMarkupChecksum = __webpack_require__(171);
	var ReactReconciler = __webpack_require__(61);
	var ReactUpdateQueue = __webpack_require__(137);
	var ReactUpdates = __webpack_require__(58);

	var emptyObject = __webpack_require__(20);
	var instantiateReactComponent = __webpack_require__(127);
	var invariant = __webpack_require__(9);
	var setInnerHTML = __webpack_require__(86);
	var shouldUpdateReactComponent = __webpack_require__(131);
	var warning = __webpack_require__(12);

	var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
	var ROOT_ATTR_NAME = DOMProperty.ROOT_ATTRIBUTE_NAME;

	var ELEMENT_NODE_TYPE = 1;
	var DOC_NODE_TYPE = 9;
	var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

	var instancesByReactRootID = {};

	/**
	 * Finds the index of the first character
	 * that's not common between the two given strings.
	 *
	 * @return {number} the index of the character where the strings diverge
	 */
	function firstDifferenceIndex(string1, string2) {
	  var minLen = Math.min(string1.length, string2.length);
	  for (var i = 0; i < minLen; i++) {
	    if (string1.charAt(i) !== string2.charAt(i)) {
	      return i;
	    }
	  }
	  return string1.length === string2.length ? -1 : minLen;
	}

	/**
	 * @param {DOMElement|DOMDocument} container DOM element that may contain
	 * a React component
	 * @return {?*} DOM element that may have the reactRoot ID, or null.
	 */
	function getReactRootElementInContainer(container) {
	  if (!container) {
	    return null;
	  }

	  if (container.nodeType === DOC_NODE_TYPE) {
	    return container.documentElement;
	  } else {
	    return container.firstChild;
	  }
	}

	function internalGetID(node) {
	  // If node is something like a window, document, or text node, none of
	  // which support attributes or a .getAttribute method, gracefully return
	  // the empty string, as if the attribute were missing.
	  return node.getAttribute && node.getAttribute(ATTR_NAME) || '';
	}

	/**
	 * Mounts this component and inserts it into the DOM.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {ReactReconcileTransaction} transaction
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function mountComponentIntoNode(wrapperInstance, container, transaction, shouldReuseMarkup, context) {
	  var markerName;
	  if (ReactFeatureFlags.logTopLevelRenders) {
	    var wrappedElement = wrapperInstance._currentElement.props;
	    var type = wrappedElement.type;
	    markerName = 'React mount: ' + (typeof type === 'string' ? type : type.displayName || type.name);
	    console.time(markerName);
	  }

	  var markup = ReactReconciler.mountComponent(wrapperInstance, transaction, null, ReactDOMContainerInfo(wrapperInstance, container), context);

	  if (markerName) {
	    console.timeEnd(markerName);
	  }

	  wrapperInstance._renderedComponent._topLevelWrapper = wrapperInstance;
	  ReactMount._mountImageIntoNode(markup, container, wrapperInstance, shouldReuseMarkup, transaction);
	}

	/**
	 * Batched mount.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function batchedMountComponentIntoNode(componentInstance, container, shouldReuseMarkup, context) {
	  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(
	  /* useCreateElement */
	  !shouldReuseMarkup && ReactDOMFeatureFlags.useCreateElement);
	  transaction.perform(mountComponentIntoNode, null, componentInstance, container, transaction, shouldReuseMarkup, context);
	  ReactUpdates.ReactReconcileTransaction.release(transaction);
	}

	/**
	 * Unmounts a component and removes it from the DOM.
	 *
	 * @param {ReactComponent} instance React component instance.
	 * @param {DOMElement} container DOM element to unmount from.
	 * @final
	 * @internal
	 * @see {ReactMount.unmountComponentAtNode}
	 */
	function unmountComponentFromNode(instance, container, safely) {
	  if (process.env.NODE_ENV !== 'production') {
	    ReactInstrumentation.debugTool.onBeginFlush();
	  }
	  ReactReconciler.unmountComponent(instance, safely);
	  if (process.env.NODE_ENV !== 'production') {
	    ReactInstrumentation.debugTool.onEndFlush();
	  }

	  if (container.nodeType === DOC_NODE_TYPE) {
	    container = container.documentElement;
	  }

	  // http://jsperf.com/emptying-a-node
	  while (container.lastChild) {
	    container.removeChild(container.lastChild);
	  }
	}

	/**
	 * True if the supplied DOM node has a direct React-rendered child that is
	 * not a React root element. Useful for warning in `render`,
	 * `unmountComponentAtNode`, etc.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM element contains a direct child that was
	 * rendered by React but is not a root element.
	 * @internal
	 */
	function hasNonRootReactChild(container) {
	  var rootEl = getReactRootElementInContainer(container);
	  if (rootEl) {
	    var inst = ReactDOMComponentTree.getInstanceFromNode(rootEl);
	    return !!(inst && inst._hostParent);
	  }
	}

	function getHostRootInstanceInContainer(container) {
	  var rootEl = getReactRootElementInContainer(container);
	  var prevHostInstance = rootEl && ReactDOMComponentTree.getInstanceFromNode(rootEl);
	  return prevHostInstance && !prevHostInstance._hostParent ? prevHostInstance : null;
	}

	function getTopLevelWrapperInContainer(container) {
	  var root = getHostRootInstanceInContainer(container);
	  return root ? root._hostContainerInfo._topLevelWrapper : null;
	}

	/**
	 * Temporary (?) hack so that we can store all top-level pending updates on
	 * composites instead of having to worry about different types of components
	 * here.
	 */
	var topLevelRootCounter = 1;
	var TopLevelWrapper = function () {
	  this.rootID = topLevelRootCounter++;
	};
	TopLevelWrapper.prototype.isReactComponent = {};
	if (process.env.NODE_ENV !== 'production') {
	  TopLevelWrapper.displayName = 'TopLevelWrapper';
	}
	TopLevelWrapper.prototype.render = function () {
	  // this.props is actually a ReactElement
	  return this.props;
	};

	/**
	 * Mounting is the process of initializing a React component by creating its
	 * representative DOM elements and inserting them into a supplied `container`.
	 * Any prior content inside `container` is destroyed in the process.
	 *
	 *   ReactMount.render(
	 *     component,
	 *     document.getElementById('container')
	 *   );
	 *
	 *   <div id="container">                   <-- Supplied `container`.
	 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
	 *       // ...                                 component.
	 *     </div>
	 *   </div>
	 *
	 * Inside of `container`, the first element rendered is the "reactRoot".
	 */
	var ReactMount = {

	  TopLevelWrapper: TopLevelWrapper,

	  /**
	   * Used by devtools. The keys are not important.
	   */
	  _instancesByReactRootID: instancesByReactRootID,

	  /**
	   * This is a hook provided to support rendering React components while
	   * ensuring that the apparent scroll position of its `container` does not
	   * change.
	   *
	   * @param {DOMElement} container The `container` being rendered into.
	   * @param {function} renderCallback This must be called once to do the render.
	   */
	  scrollMonitor: function (container, renderCallback) {
	    renderCallback();
	  },

	  /**
	   * Take a component that's already mounted into the DOM and replace its props
	   * @param {ReactComponent} prevComponent component instance already in the DOM
	   * @param {ReactElement} nextElement component instance to render
	   * @param {DOMElement} container container to render into
	   * @param {?function} callback function triggered on completion
	   */
	  _updateRootComponent: function (prevComponent, nextElement, nextContext, container, callback) {
	    ReactMount.scrollMonitor(container, function () {
	      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement, nextContext);
	      if (callback) {
	        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
	      }
	    });

	    return prevComponent;
	  },

	  /**
	   * Render a new component into the DOM. Hooked by devtools!
	   *
	   * @param {ReactElement} nextElement element to render
	   * @param {DOMElement} container container to render into
	   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
	   * @return {ReactComponent} nextComponent
	   */
	  _renderNewRootComponent: function (nextElement, container, shouldReuseMarkup, context) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case.
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '_renderNewRootComponent(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from ' + 'render is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;

	    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '_registerComponent(...): Target container is not a DOM element.') : _prodInvariant('37') : void 0;

	    ReactBrowserEventEmitter.ensureScrollValueMonitoring();
	    var componentInstance = instantiateReactComponent(nextElement, false);

	    // The initial render is synchronous but any updates that happen during
	    // rendering, in componentWillMount or componentDidMount, will be batched
	    // according to the current batching strategy.

	    ReactUpdates.batchedUpdates(batchedMountComponentIntoNode, componentInstance, container, shouldReuseMarkup, context);

	    var wrapperID = componentInstance._instance.rootID;
	    instancesByReactRootID[wrapperID] = componentInstance;

	    if (process.env.NODE_ENV !== 'production') {
	      // The instance here is TopLevelWrapper so we report mount for its child.
	      ReactInstrumentation.debugTool.onMountRootComponent(componentInstance._renderedComponent._debugID);
	    }

	    return componentInstance;
	  },

	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactComponent} parentComponent The conceptual parent of this render tree.
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
	    !(parentComponent != null && ReactInstanceMap.has(parentComponent)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'parentComponent must be a valid React Component') : _prodInvariant('38') : void 0;
	    return ReactMount._renderSubtreeIntoContainer(parentComponent, nextElement, container, callback);
	  },

	  _renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
	    ReactUpdateQueue.validateCallback(callback, 'ReactDOM.render');
	    !ReactElement.isValidElement(nextElement) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOM.render(): Invalid component element.%s', typeof nextElement === 'string' ? ' Instead of passing a string like \'div\', pass ' + 'React.createElement(\'div\') or <div />.' : typeof nextElement === 'function' ? ' Instead of passing a class like Foo, pass ' + 'React.createElement(Foo) or <Foo />.' :
	    // Check if it quacks like an element
	    nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : _prodInvariant('39', typeof nextElement === 'string' ? ' Instead of passing a string like \'div\', pass ' + 'React.createElement(\'div\') or <div />.' : typeof nextElement === 'function' ? ' Instead of passing a class like Foo, pass ' + 'React.createElement(Foo) or <Foo />.' : nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : void 0;

	    process.env.NODE_ENV !== 'production' ? warning(!container || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : void 0;

	    var nextWrappedElement = ReactElement(TopLevelWrapper, null, null, null, null, null, nextElement);

	    var nextContext;
	    if (parentComponent) {
	      var parentInst = ReactInstanceMap.get(parentComponent);
	      nextContext = parentInst._processChildContext(parentInst._context);
	    } else {
	      nextContext = emptyObject;
	    }

	    var prevComponent = getTopLevelWrapperInContainer(container);

	    if (prevComponent) {
	      var prevWrappedElement = prevComponent._currentElement;
	      var prevElement = prevWrappedElement.props;
	      if (shouldUpdateReactComponent(prevElement, nextElement)) {
	        var publicInst = prevComponent._renderedComponent.getPublicInstance();
	        var updatedCallback = callback && function () {
	          callback.call(publicInst);
	        };
	        ReactMount._updateRootComponent(prevComponent, nextWrappedElement, nextContext, container, updatedCallback);
	        return publicInst;
	      } else {
	        ReactMount.unmountComponentAtNode(container);
	      }
	    }

	    var reactRootElement = getReactRootElementInContainer(container);
	    var containerHasReactMarkup = reactRootElement && !!internalGetID(reactRootElement);
	    var containerHasNonRootReactChild = hasNonRootReactChild(container);

	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : void 0;

	      if (!containerHasReactMarkup || reactRootElement.nextSibling) {
	        var rootElementSibling = reactRootElement;
	        while (rootElementSibling) {
	          if (internalGetID(rootElementSibling)) {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.') : void 0;
	            break;
	          }
	          rootElementSibling = rootElementSibling.nextSibling;
	        }
	      }
	    }

	    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent && !containerHasNonRootReactChild;
	    var component = ReactMount._renderNewRootComponent(nextWrappedElement, container, shouldReuseMarkup, nextContext)._renderedComponent.getPublicInstance();
	    if (callback) {
	      callback.call(component);
	    }
	    return component;
	  },

	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.render
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  render: function (nextElement, container, callback) {
	    return ReactMount._renderSubtreeIntoContainer(null, nextElement, container, callback);
	  },

	  /**
	   * Unmounts and destroys the React component rendered in the `container`.
	   * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.unmountcomponentatnode
	   *
	   * @param {DOMElement} container DOM element containing a React component.
	   * @return {boolean} True if a component was found in and unmounted from
	   *                   `container`
	   */
	  unmountComponentAtNode: function (container) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case. (Strictly speaking, unmounting won't cause a
	    // render but we still don't expect to be in a render call here.)
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, 'unmountComponentAtNode(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from render ' + 'is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;

	    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : _prodInvariant('40') : void 0;

	    var prevComponent = getTopLevelWrapperInContainer(container);
	    if (!prevComponent) {
	      // Check if the node being unmounted was rendered by React, but isn't a
	      // root node.
	      var containerHasNonRootReactChild = hasNonRootReactChild(container);

	      // Check if the container itself is a React root node.
	      var isContainerReactRoot = container.nodeType === 1 && container.hasAttribute(ROOT_ATTR_NAME);

	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'unmountComponentAtNode(): The node you\'re attempting to unmount ' + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : void 0;
	      }

	      return false;
	    }
	    delete instancesByReactRootID[prevComponent._instance.rootID];
	    ReactUpdates.batchedUpdates(unmountComponentFromNode, prevComponent, container, false);
	    return true;
	  },

	  _mountImageIntoNode: function (markup, container, instance, shouldReuseMarkup, transaction) {
	    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mountComponentIntoNode(...): Target container is not valid.') : _prodInvariant('41') : void 0;

	    if (shouldReuseMarkup) {
	      var rootElement = getReactRootElementInContainer(container);
	      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
	        ReactDOMComponentTree.precacheNode(instance, rootElement);
	        return;
	      } else {
	        var checksum = rootElement.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);

	        var rootMarkup = rootElement.outerHTML;
	        rootElement.setAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME, checksum);

	        var normalizedMarkup = markup;
	        if (process.env.NODE_ENV !== 'production') {
	          // because rootMarkup is retrieved from the DOM, various normalizations
	          // will have occurred which will not be present in `markup`. Here,
	          // insert markup into a <div> or <iframe> depending on the container
	          // type to perform the same normalizations before comparing.
	          var normalizer;
	          if (container.nodeType === ELEMENT_NODE_TYPE) {
	            normalizer = document.createElement('div');
	            normalizer.innerHTML = markup;
	            normalizedMarkup = normalizer.innerHTML;
	          } else {
	            normalizer = document.createElement('iframe');
	            document.body.appendChild(normalizer);
	            normalizer.contentDocument.write(markup);
	            normalizedMarkup = normalizer.contentDocument.documentElement.outerHTML;
	            document.body.removeChild(normalizer);
	          }
	        }

	        var diffIndex = firstDifferenceIndex(normalizedMarkup, rootMarkup);
	        var difference = ' (client) ' + normalizedMarkup.substring(diffIndex - 20, diffIndex + 20) + '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);

	        !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document using server rendering but the checksum was invalid. This usually means you rendered a different component type or props on the client from the one on the server, or your render() methods are impure. React cannot handle this case due to cross-browser quirks by rendering at the document root. You should look for environment dependent code in your components and ensure the props are the same client and server side:\n%s', difference) : _prodInvariant('42', difference) : void 0;

	        if (process.env.NODE_ENV !== 'production') {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'React attempted to reuse markup in a container but the ' + 'checksum was invalid. This generally means that you are ' + 'using server rendering and the markup generated on the ' + 'server was not what the client was expecting. React injected ' + 'new markup to compensate which works but you have lost many ' + 'of the benefits of server rendering. Instead, figure out ' + 'why the markup being generated is different on the client ' + 'or server:\n%s', difference) : void 0;
	        }
	      }
	    }

	    !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document but you didn\'t use server rendering. We can\'t do this without using server rendering due to cross-browser quirks. See ReactDOMServer.renderToString() for server rendering.') : _prodInvariant('43') : void 0;

	    if (transaction.useCreateElement) {
	      while (container.lastChild) {
	        container.removeChild(container.lastChild);
	      }
	      DOMLazyTree.insertTreeBefore(container, markup, null);
	    } else {
	      setInnerHTML(container, markup);
	      ReactDOMComponentTree.precacheNode(instance, container.firstChild);
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      var hostNode = ReactDOMComponentTree.getInstanceFromNode(container.firstChild);
	      if (hostNode._debugID !== 0) {
	        ReactInstrumentation.debugTool.onHostOperation(hostNode._debugID, 'mount', markup.toString());
	      }
	    }
	  }
	};

	module.exports = ReactMount;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMContainerInfo
	 */

	'use strict';

	var validateDOMNesting = __webpack_require__(138);

	var DOC_NODE_TYPE = 9;

	function ReactDOMContainerInfo(topLevelWrapper, node) {
	  var info = {
	    _topLevelWrapper: topLevelWrapper,
	    _idCounter: 1,
	    _ownerDocument: node ? node.nodeType === DOC_NODE_TYPE ? node : node.ownerDocument : null,
	    _node: node,
	    _tag: node ? node.nodeName.toLowerCase() : null,
	    _namespaceURI: node ? node.namespaceURI : null
	  };
	  if (process.env.NODE_ENV !== 'production') {
	    info._ancestorInfo = node ? validateDOMNesting.updatedAncestorInfo(null, info._tag, null) : null;
	  }
	  return info;
	}

	module.exports = ReactDOMContainerInfo;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 170 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMFeatureFlags
	 */

	'use strict';

	var ReactDOMFeatureFlags = {
	  useCreateElement: true
	};

	module.exports = ReactDOMFeatureFlags;

/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMarkupChecksum
	 */

	'use strict';

	var adler32 = __webpack_require__(172);

	var TAG_END = /\/?>/;
	var COMMENT_START = /^<\!\-\-/;

	var ReactMarkupChecksum = {
	  CHECKSUM_ATTR_NAME: 'data-react-checksum',

	  /**
	   * @param {string} markup Markup string
	   * @return {string} Markup string with checksum attribute attached
	   */
	  addChecksumToMarkup: function (markup) {
	    var checksum = adler32(markup);

	    // Add checksum (handle both parent tags, comments and self-closing tags)
	    if (COMMENT_START.test(markup)) {
	      return markup;
	    } else {
	      return markup.replace(TAG_END, ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '"$&');
	    }
	  },

	  /**
	   * @param {string} markup to use
	   * @param {DOMElement} element root React element
	   * @returns {boolean} whether or not the markup is the same
	   */
	  canReuseMarkup: function (markup, element) {
	    var existingChecksum = element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
	    var markupChecksum = adler32(markup);
	    return markupChecksum === existingChecksum;
	  }
	};

	module.exports = ReactMarkupChecksum;

/***/ }),
/* 172 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule adler32
	 * 
	 */

	'use strict';

	var MOD = 65521;

	// adler32 is not cryptographically strong, and is only used to sanity check that
	// markup generated on the server matches the markup generated on the client.
	// This implementation (a modified version of the SheetJS version) has been optimized
	// for our use case, at the expense of conforming to the adler32 specification
	// for non-ascii inputs.
	function adler32(data) {
	  var a = 1;
	  var b = 0;
	  var i = 0;
	  var l = data.length;
	  var m = l & ~0x3;
	  while (i < m) {
	    var n = Math.min(i + 4096, m);
	    for (; i < n; i += 4) {
	      b += (a += data.charCodeAt(i)) + (a += data.charCodeAt(i + 1)) + (a += data.charCodeAt(i + 2)) + (a += data.charCodeAt(i + 3));
	    }
	    a %= MOD;
	    b %= MOD;
	  }
	  for (; i < l; i++) {
	    b += a += data.charCodeAt(i);
	  }
	  a %= MOD;
	  b %= MOD;
	  return a | b << 16;
	}

	module.exports = adler32;

/***/ }),
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule findDOMNode
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(8);

	var ReactCurrentOwner = __webpack_require__(11);
	var ReactDOMComponentTree = __webpack_require__(38);
	var ReactInstanceMap = __webpack_require__(125);

	var getHostComponentFromComposite = __webpack_require__(174);
	var invariant = __webpack_require__(9);
	var warning = __webpack_require__(12);

	/**
	 * Returns the DOM node rendered by this element.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.finddomnode
	 *
	 * @param {ReactComponent|DOMElement} componentOrElement
	 * @return {?DOMElement} The root node of this element.
	 */
	function findDOMNode(componentOrElement) {
	  if (process.env.NODE_ENV !== 'production') {
	    var owner = ReactCurrentOwner.current;
	    if (owner !== null) {
	      process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;
	      owner._warnedAboutRefsInRender = true;
	    }
	  }
	  if (componentOrElement == null) {
	    return null;
	  }
	  if (componentOrElement.nodeType === 1) {
	    return componentOrElement;
	  }

	  var inst = ReactInstanceMap.get(componentOrElement);
	  if (inst) {
	    inst = getHostComponentFromComposite(inst);
	    return inst ? ReactDOMComponentTree.getNodeFromInstance(inst) : null;
	  }

	  if (typeof componentOrElement.render === 'function') {
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findDOMNode was called on an unmounted component.') : _prodInvariant('44') : void 0;
	  } else {
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element appears to be neither ReactComponent nor DOMNode (keys: %s)', Object.keys(componentOrElement)) : _prodInvariant('45', Object.keys(componentOrElement)) : void 0;
	  }
	}

	module.exports = findDOMNode;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 174 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getHostComponentFromComposite
	 */

	'use strict';

	var ReactNodeTypes = __webpack_require__(129);

	function getHostComponentFromComposite(inst) {
	  var type;

	  while ((type = inst._renderedNodeType) === ReactNodeTypes.COMPOSITE) {
	    inst = inst._renderedComponent;
	  }

	  if (type === ReactNodeTypes.HOST) {
	    return inst._renderedComponent;
	  } else if (type === ReactNodeTypes.EMPTY) {
	    return null;
	  }
	}

	module.exports = getHostComponentFromComposite;

/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	* @providesModule renderSubtreeIntoContainer
	*/

	'use strict';

	var ReactMount = __webpack_require__(168);

	module.exports = ReactMount.renderSubtreeIntoContainer;

/***/ }),
/* 176 */
/***/ (function(module, exports, __webpack_require__) {

	var _config = __webpack_require__(177);

	var __DEV__ = _config.__DEV__;

	var zrender = __webpack_require__(178);

	var zrUtil = __webpack_require__(181);

	var colorTool = __webpack_require__(195);

	var env = __webpack_require__(180);

	var timsort = __webpack_require__(200);

	var Eventful = __webpack_require__(185);

	var GlobalModel = __webpack_require__(218);

	var ExtensionAPI = __webpack_require__(272);

	var CoordinateSystemManager = __webpack_require__(273);

	var OptionManager = __webpack_require__(274);

	var backwardCompat = __webpack_require__(275);

	var dataStack = __webpack_require__(277);

	var ComponentModel = __webpack_require__(260);

	var SeriesModel = __webpack_require__(278);

	var ComponentView = __webpack_require__(282);

	var ChartView = __webpack_require__(283);

	var graphic = __webpack_require__(226);

	var modelUtil = __webpack_require__(219);

	var _throttle = __webpack_require__(285);

	var throttle = _throttle.throttle;

	var seriesColor = __webpack_require__(286);

	var aria = __webpack_require__(287);

	var loadingDefault = __webpack_require__(289);

	var Scheduler = __webpack_require__(290);

	var lightTheme = __webpack_require__(291);

	var darkTheme = __webpack_require__(292);

	__webpack_require__(293);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var assert = zrUtil.assert;
	var each = zrUtil.each;
	var isFunction = zrUtil.isFunction;
	var isObject = zrUtil.isObject;
	var parseClassType = ComponentModel.parseClassType;
	var version = '4.1.0';
	var dependencies = {
	  zrender: '4.0.4'
	};
	var TEST_FRAME_REMAIN_TIME = 1;
	var PRIORITY_PROCESSOR_FILTER = 1000;
	var PRIORITY_PROCESSOR_STATISTIC = 5000;
	var PRIORITY_VISUAL_LAYOUT = 1000;
	var PRIORITY_VISUAL_GLOBAL = 2000;
	var PRIORITY_VISUAL_CHART = 3000;
	var PRIORITY_VISUAL_COMPONENT = 4000; // FIXME
	// necessary?

	var PRIORITY_VISUAL_BRUSH = 5000;
	var PRIORITY = {
	  PROCESSOR: {
	    FILTER: PRIORITY_PROCESSOR_FILTER,
	    STATISTIC: PRIORITY_PROCESSOR_STATISTIC
	  },
	  VISUAL: {
	    LAYOUT: PRIORITY_VISUAL_LAYOUT,
	    GLOBAL: PRIORITY_VISUAL_GLOBAL,
	    CHART: PRIORITY_VISUAL_CHART,
	    COMPONENT: PRIORITY_VISUAL_COMPONENT,
	    BRUSH: PRIORITY_VISUAL_BRUSH
	  }
	}; // Main process have three entries: `setOption`, `dispatchAction` and `resize`,
	// where they must not be invoked nestedly, except the only case: invoke
	// dispatchAction with updateMethod "none" in main process.
	// This flag is used to carry out this rule.
	// All events will be triggered out side main process (i.e. when !this[IN_MAIN_PROCESS]).

	var IN_MAIN_PROCESS = '__flagInMainProcess';
	var OPTION_UPDATED = '__optionUpdated';
	var ACTION_REG = /^[a-zA-Z0-9_]+$/;

	function createRegisterEventWithLowercaseName(method) {
	  return function (eventName, handler, context) {
	    // Event name is all lowercase
	    eventName = eventName && eventName.toLowerCase();
	    Eventful.prototype[method].call(this, eventName, handler, context);
	  };
	}
	/**
	 * @module echarts~MessageCenter
	 */


	function MessageCenter() {
	  Eventful.call(this);
	}

	MessageCenter.prototype.on = createRegisterEventWithLowercaseName('on');
	MessageCenter.prototype.off = createRegisterEventWithLowercaseName('off');
	MessageCenter.prototype.one = createRegisterEventWithLowercaseName('one');
	zrUtil.mixin(MessageCenter, Eventful);
	/**
	 * @module echarts~ECharts
	 */

	function ECharts(dom, theme, opts) {
	  opts = opts || {}; // Get theme by name

	  if (typeof theme === 'string') {
	    theme = themeStorage[theme];
	  }
	  /**
	   * @type {string}
	   */


	  this.id;
	  /**
	   * Group id
	   * @type {string}
	   */

	  this.group;
	  /**
	   * @type {HTMLElement}
	   * @private
	   */

	  this._dom = dom;
	  var defaultRenderer = 'canvas';

	  /**
	   * @type {module:zrender/ZRender}
	   * @private
	   */
	  var zr = this._zr = zrender.init(dom, {
	    renderer: opts.renderer || defaultRenderer,
	    devicePixelRatio: opts.devicePixelRatio,
	    width: opts.width,
	    height: opts.height
	  });
	  /**
	   * Expect 60 pfs.
	   * @type {Function}
	   * @private
	   */

	  this._throttledZrFlush = throttle(zrUtil.bind(zr.flush, zr), 17);
	  var theme = zrUtil.clone(theme);
	  theme && backwardCompat(theme, true);
	  /**
	   * @type {Object}
	   * @private
	   */

	  this._theme = theme;
	  /**
	   * @type {Array.<module:echarts/view/Chart>}
	   * @private
	   */

	  this._chartsViews = [];
	  /**
	   * @type {Object.<string, module:echarts/view/Chart>}
	   * @private
	   */

	  this._chartsMap = {};
	  /**
	   * @type {Array.<module:echarts/view/Component>}
	   * @private
	   */

	  this._componentsViews = [];
	  /**
	   * @type {Object.<string, module:echarts/view/Component>}
	   * @private
	   */

	  this._componentsMap = {};
	  /**
	   * @type {module:echarts/CoordinateSystem}
	   * @private
	   */

	  this._coordSysMgr = new CoordinateSystemManager();
	  /**
	   * @type {module:echarts/ExtensionAPI}
	   * @private
	   */

	  var api = this._api = createExtensionAPI(this); // Sort on demand

	  function prioritySortFunc(a, b) {
	    return a.__prio - b.__prio;
	  }

	  timsort(visualFuncs, prioritySortFunc);
	  timsort(dataProcessorFuncs, prioritySortFunc);
	  /**
	   * @type {module:echarts/stream/Scheduler}
	   */

	  this._scheduler = new Scheduler(this, api, dataProcessorFuncs, visualFuncs);
	  Eventful.call(this);
	  /**
	   * @type {module:echarts~MessageCenter}
	   * @private
	   */

	  this._messageCenter = new MessageCenter(); // Init mouse events

	  this._initEvents(); // In case some people write `window.onresize = chart.resize`


	  this.resize = zrUtil.bind(this.resize, this); // Can't dispatch action during rendering procedure

	  this._pendingActions = [];
	  zr.animation.on('frame', this._onframe, this);
	  bindRenderedEvent(zr, this); // ECharts instance can be used as value.

	  zrUtil.setAsPrimitive(this);
	}

	var echartsProto = ECharts.prototype;

	echartsProto._onframe = function () {
	  if (this._disposed) {
	    return;
	  }

	  var scheduler = this._scheduler; // Lazy update

	  if (this[OPTION_UPDATED]) {
	    var silent = this[OPTION_UPDATED].silent;
	    this[IN_MAIN_PROCESS] = true;
	    prepare(this);
	    updateMethods.update.call(this);
	    this[IN_MAIN_PROCESS] = false;
	    this[OPTION_UPDATED] = false;
	    flushPendingActions.call(this, silent);
	    triggerUpdatedEvent.call(this, silent);
	  } // Avoid do both lazy update and progress in one frame.
	  else if (scheduler.unfinished) {
	      // Stream progress.
	      var remainTime = TEST_FRAME_REMAIN_TIME;
	      var ecModel = this._model;
	      var api = this._api;
	      scheduler.unfinished = false;

	      do {
	        var startTime = +new Date();
	        scheduler.performSeriesTasks(ecModel); // Currently dataProcessorFuncs do not check threshold.

	        scheduler.performDataProcessorTasks(ecModel);
	        updateStreamModes(this, ecModel); // Do not update coordinate system here. Because that coord system update in
	        // each frame is not a good user experience. So we follow the rule that
	        // the extent of the coordinate system is determin in the first frame (the
	        // frame is executed immedietely after task reset.
	        // this._coordSysMgr.update(ecModel, api);
	        // console.log('--- ec frame visual ---', remainTime);

	        scheduler.performVisualTasks(ecModel);
	        renderSeries(this, this._model, api, 'remain');
	        remainTime -= +new Date() - startTime;
	      } while (remainTime > 0 && scheduler.unfinished); // Call flush explicitly for trigger finished event.


	      if (!scheduler.unfinished) {
	        this._zr.flush();
	      } // Else, zr flushing be ensue within the same frame,
	      // because zr flushing is after onframe event.

	    }
	};
	/**
	 * @return {HTMLElement}
	 */


	echartsProto.getDom = function () {
	  return this._dom;
	};
	/**
	 * @return {module:zrender~ZRender}
	 */


	echartsProto.getZr = function () {
	  return this._zr;
	};
	/**
	 * Usage:
	 * chart.setOption(option, notMerge, lazyUpdate);
	 * chart.setOption(option, {
	 *     notMerge: ...,
	 *     lazyUpdate: ...,
	 *     silent: ...
	 * });
	 *
	 * @param {Object} option
	 * @param {Object|boolean} [opts] opts or notMerge.
	 * @param {boolean} [opts.notMerge=false]
	 * @param {boolean} [opts.lazyUpdate=false] Useful when setOption frequently.
	 */


	echartsProto.setOption = function (option, notMerge, lazyUpdate) {
	  var silent;

	  if (isObject(notMerge)) {
	    lazyUpdate = notMerge.lazyUpdate;
	    silent = notMerge.silent;
	    notMerge = notMerge.notMerge;
	  }

	  this[IN_MAIN_PROCESS] = true;

	  if (!this._model || notMerge) {
	    var optionManager = new OptionManager(this._api);
	    var theme = this._theme;
	    var ecModel = this._model = new GlobalModel(null, null, theme, optionManager);
	    ecModel.scheduler = this._scheduler;
	    ecModel.init(null, null, theme, optionManager);
	  }

	  this._model.setOption(option, optionPreprocessorFuncs);

	  if (lazyUpdate) {
	    this[OPTION_UPDATED] = {
	      silent: silent
	    };
	    this[IN_MAIN_PROCESS] = false;
	  } else {
	    prepare(this);
	    updateMethods.update.call(this); // Ensure zr refresh sychronously, and then pixel in canvas can be
	    // fetched after `setOption`.

	    this._zr.flush();

	    this[OPTION_UPDATED] = false;
	    this[IN_MAIN_PROCESS] = false;
	    flushPendingActions.call(this, silent);
	    triggerUpdatedEvent.call(this, silent);
	  }
	};
	/**
	 * @DEPRECATED
	 */


	echartsProto.setTheme = function () {
	  console.log('ECharts#setTheme() is DEPRECATED in ECharts 3.0');
	};
	/**
	 * @return {module:echarts/model/Global}
	 */


	echartsProto.getModel = function () {
	  return this._model;
	};
	/**
	 * @return {Object}
	 */


	echartsProto.getOption = function () {
	  return this._model && this._model.getOption();
	};
	/**
	 * @return {number}
	 */


	echartsProto.getWidth = function () {
	  return this._zr.getWidth();
	};
	/**
	 * @return {number}
	 */


	echartsProto.getHeight = function () {
	  return this._zr.getHeight();
	};
	/**
	 * @return {number}
	 */


	echartsProto.getDevicePixelRatio = function () {
	  return this._zr.painter.dpr || window.devicePixelRatio || 1;
	};
	/**
	 * Get canvas which has all thing rendered
	 * @param {Object} opts
	 * @param {string} [opts.backgroundColor]
	 * @return {string}
	 */


	echartsProto.getRenderedCanvas = function (opts) {
	  if (!env.canvasSupported) {
	    return;
	  }

	  opts = opts || {};
	  opts.pixelRatio = opts.pixelRatio || 1;
	  opts.backgroundColor = opts.backgroundColor || this._model.get('backgroundColor');
	  var zr = this._zr; // var list = zr.storage.getDisplayList();
	  // Stop animations
	  // Never works before in init animation, so remove it.
	  // zrUtil.each(list, function (el) {
	  //     el.stopAnimation(true);
	  // });

	  return zr.painter.getRenderedCanvas(opts);
	};
	/**
	 * Get svg data url
	 * @return {string}
	 */


	echartsProto.getSvgDataUrl = function () {
	  if (!env.svgSupported) {
	    return;
	  }

	  var zr = this._zr;
	  var list = zr.storage.getDisplayList(); // Stop animations

	  zrUtil.each(list, function (el) {
	    el.stopAnimation(true);
	  });
	  return zr.painter.pathToDataUrl();
	};
	/**
	 * @return {string}
	 * @param {Object} opts
	 * @param {string} [opts.type='png']
	 * @param {string} [opts.pixelRatio=1]
	 * @param {string} [opts.backgroundColor]
	 * @param {string} [opts.excludeComponents]
	 */


	echartsProto.getDataURL = function (opts) {
	  opts = opts || {};
	  var excludeComponents = opts.excludeComponents;
	  var ecModel = this._model;
	  var excludesComponentViews = [];
	  var self = this;
	  each(excludeComponents, function (componentType) {
	    ecModel.eachComponent({
	      mainType: componentType
	    }, function (component) {
	      var view = self._componentsMap[component.__viewId];

	      if (!view.group.ignore) {
	        excludesComponentViews.push(view);
	        view.group.ignore = true;
	      }
	    });
	  });
	  var url = this._zr.painter.getType() === 'svg' ? this.getSvgDataUrl() : this.getRenderedCanvas(opts).toDataURL('image/' + (opts && opts.type || 'png'));
	  each(excludesComponentViews, function (view) {
	    view.group.ignore = false;
	  });
	  return url;
	};
	/**
	 * @return {string}
	 * @param {Object} opts
	 * @param {string} [opts.type='png']
	 * @param {string} [opts.pixelRatio=1]
	 * @param {string} [opts.backgroundColor]
	 */


	echartsProto.getConnectedDataURL = function (opts) {
	  if (!env.canvasSupported) {
	    return;
	  }

	  var groupId = this.group;
	  var mathMin = Math.min;
	  var mathMax = Math.max;
	  var MAX_NUMBER = Infinity;

	  if (connectedGroups[groupId]) {
	    var left = MAX_NUMBER;
	    var top = MAX_NUMBER;
	    var right = -MAX_NUMBER;
	    var bottom = -MAX_NUMBER;
	    var canvasList = [];
	    var dpr = opts && opts.pixelRatio || 1;
	    zrUtil.each(instances, function (chart, id) {
	      if (chart.group === groupId) {
	        var canvas = chart.getRenderedCanvas(zrUtil.clone(opts));
	        var boundingRect = chart.getDom().getBoundingClientRect();
	        left = mathMin(boundingRect.left, left);
	        top = mathMin(boundingRect.top, top);
	        right = mathMax(boundingRect.right, right);
	        bottom = mathMax(boundingRect.bottom, bottom);
	        canvasList.push({
	          dom: canvas,
	          left: boundingRect.left,
	          top: boundingRect.top
	        });
	      }
	    });
	    left *= dpr;
	    top *= dpr;
	    right *= dpr;
	    bottom *= dpr;
	    var width = right - left;
	    var height = bottom - top;
	    var targetCanvas = zrUtil.createCanvas();
	    targetCanvas.width = width;
	    targetCanvas.height = height;
	    var zr = zrender.init(targetCanvas);
	    each(canvasList, function (item) {
	      var img = new graphic.Image({
	        style: {
	          x: item.left * dpr - left,
	          y: item.top * dpr - top,
	          image: item.dom
	        }
	      });
	      zr.add(img);
	    });
	    zr.refreshImmediately();
	    return targetCanvas.toDataURL('image/' + (opts && opts.type || 'png'));
	  } else {
	    return this.getDataURL(opts);
	  }
	};
	/**
	 * Convert from logical coordinate system to pixel coordinate system.
	 * See CoordinateSystem#convertToPixel.
	 * @param {string|Object} finder
	 *        If string, e.g., 'geo', means {geoIndex: 0}.
	 *        If Object, could contain some of these properties below:
	 *        {
	 *            seriesIndex / seriesId / seriesName,
	 *            geoIndex / geoId, geoName,
	 *            bmapIndex / bmapId / bmapName,
	 *            xAxisIndex / xAxisId / xAxisName,
	 *            yAxisIndex / yAxisId / yAxisName,
	 *            gridIndex / gridId / gridName,
	 *            ... (can be extended)
	 *        }
	 * @param {Array|number} value
	 * @return {Array|number} result
	 */


	echartsProto.convertToPixel = zrUtil.curry(doConvertPixel, 'convertToPixel');
	/**
	 * Convert from pixel coordinate system to logical coordinate system.
	 * See CoordinateSystem#convertFromPixel.
	 * @param {string|Object} finder
	 *        If string, e.g., 'geo', means {geoIndex: 0}.
	 *        If Object, could contain some of these properties below:
	 *        {
	 *            seriesIndex / seriesId / seriesName,
	 *            geoIndex / geoId / geoName,
	 *            bmapIndex / bmapId / bmapName,
	 *            xAxisIndex / xAxisId / xAxisName,
	 *            yAxisIndex / yAxisId / yAxisName
	 *            gridIndex / gridId / gridName,
	 *            ... (can be extended)
	 *        }
	 * @param {Array|number} value
	 * @return {Array|number} result
	 */

	echartsProto.convertFromPixel = zrUtil.curry(doConvertPixel, 'convertFromPixel');

	function doConvertPixel(methodName, finder, value) {
	  var ecModel = this._model;

	  var coordSysList = this._coordSysMgr.getCoordinateSystems();

	  var result;
	  finder = modelUtil.parseFinder(ecModel, finder);

	  for (var i = 0; i < coordSysList.length; i++) {
	    var coordSys = coordSysList[i];

	    if (coordSys[methodName] && (result = coordSys[methodName](ecModel, finder, value)) != null) {
	      return result;
	    }
	  }
	}
	/**
	 * Is the specified coordinate systems or components contain the given pixel point.
	 * @param {string|Object} finder
	 *        If string, e.g., 'geo', means {geoIndex: 0}.
	 *        If Object, could contain some of these properties below:
	 *        {
	 *            seriesIndex / seriesId / seriesName,
	 *            geoIndex / geoId / geoName,
	 *            bmapIndex / bmapId / bmapName,
	 *            xAxisIndex / xAxisId / xAxisName,
	 *            yAxisIndex / yAxisId / yAxisName,
	 *            gridIndex / gridId / gridName,
	 *            ... (can be extended)
	 *        }
	 * @param {Array|number} value
	 * @return {boolean} result
	 */


	echartsProto.containPixel = function (finder, value) {
	  var ecModel = this._model;
	  var result;
	  finder = modelUtil.parseFinder(ecModel, finder);
	  zrUtil.each(finder, function (models, key) {
	    key.indexOf('Models') >= 0 && zrUtil.each(models, function (model) {
	      var coordSys = model.coordinateSystem;

	      if (coordSys && coordSys.containPoint) {
	        result |= !!coordSys.containPoint(value);
	      } else if (key === 'seriesModels') {
	        var view = this._chartsMap[model.__viewId];

	        if (view && view.containPoint) {
	          result |= view.containPoint(value, model);
	        } else {}
	      } else {}
	    }, this);
	  }, this);
	  return !!result;
	};
	/**
	 * Get visual from series or data.
	 * @param {string|Object} finder
	 *        If string, e.g., 'series', means {seriesIndex: 0}.
	 *        If Object, could contain some of these properties below:
	 *        {
	 *            seriesIndex / seriesId / seriesName,
	 *            dataIndex / dataIndexInside
	 *        }
	 *        If dataIndex is not specified, series visual will be fetched,
	 *        but not data item visual.
	 *        If all of seriesIndex, seriesId, seriesName are not specified,
	 *        visual will be fetched from first series.
	 * @param {string} visualType 'color', 'symbol', 'symbolSize'
	 */


	echartsProto.getVisual = function (finder, visualType) {
	  var ecModel = this._model;
	  finder = modelUtil.parseFinder(ecModel, finder, {
	    defaultMainType: 'series'
	  });
	  var seriesModel = finder.seriesModel;
	  var data = seriesModel.getData();
	  var dataIndexInside = finder.hasOwnProperty('dataIndexInside') ? finder.dataIndexInside : finder.hasOwnProperty('dataIndex') ? data.indexOfRawIndex(finder.dataIndex) : null;
	  return dataIndexInside != null ? data.getItemVisual(dataIndexInside, visualType) : data.getVisual(visualType);
	};
	/**
	 * Get view of corresponding component model
	 * @param  {module:echarts/model/Component} componentModel
	 * @return {module:echarts/view/Component}
	 */


	echartsProto.getViewOfComponentModel = function (componentModel) {
	  return this._componentsMap[componentModel.__viewId];
	};
	/**
	 * Get view of corresponding series model
	 * @param  {module:echarts/model/Series} seriesModel
	 * @return {module:echarts/view/Chart}
	 */


	echartsProto.getViewOfSeriesModel = function (seriesModel) {
	  return this._chartsMap[seriesModel.__viewId];
	};

	var updateMethods = {
	  prepareAndUpdate: function (payload) {
	    prepare(this);
	    updateMethods.update.call(this, payload);
	  },

	  /**
	   * @param {Object} payload
	   * @private
	   */
	  update: function (payload) {
	    // console.profile && console.profile('update');
	    var ecModel = this._model;
	    var api = this._api;
	    var zr = this._zr;
	    var coordSysMgr = this._coordSysMgr;
	    var scheduler = this._scheduler; // update before setOption

	    if (!ecModel) {
	      return;
	    }

	    scheduler.restoreData(ecModel, payload);
	    scheduler.performSeriesTasks(ecModel); // TODO
	    // Save total ecModel here for undo/redo (after restoring data and before processing data).
	    // Undo (restoration of total ecModel) can be carried out in 'action' or outside API call.
	    // Create new coordinate system each update
	    // In LineView may save the old coordinate system and use it to get the orignal point

	    coordSysMgr.create(ecModel, api);
	    scheduler.performDataProcessorTasks(ecModel, payload); // Current stream render is not supported in data process. So we can update
	    // stream modes after data processing, where the filtered data is used to
	    // deteming whether use progressive rendering.

	    updateStreamModes(this, ecModel); // We update stream modes before coordinate system updated, then the modes info
	    // can be fetched when coord sys updating (consider the barGrid extent fix). But
	    // the drawback is the full coord info can not be fetched. Fortunately this full
	    // coord is not requied in stream mode updater currently.

	    coordSysMgr.update(ecModel, api);
	    clearColorPalette(ecModel);
	    scheduler.performVisualTasks(ecModel, payload);
	    render(this, ecModel, api, payload); // Set background

	    var backgroundColor = ecModel.get('backgroundColor') || 'transparent'; // In IE8

	    if (!env.canvasSupported) {
	      var colorArr = colorTool.parse(backgroundColor);
	      backgroundColor = colorTool.stringify(colorArr, 'rgb');

	      if (colorArr[3] === 0) {
	        backgroundColor = 'transparent';
	      }
	    } else {
	      zr.setBackgroundColor(backgroundColor);
	    }

	    performPostUpdateFuncs(ecModel, api); // console.profile && console.profileEnd('update');
	  },

	  /**
	   * @param {Object} payload
	   * @private
	   */
	  updateTransform: function (payload) {
	    var ecModel = this._model;
	    var ecIns = this;
	    var api = this._api; // update before setOption

	    if (!ecModel) {
	      return;
	    } // ChartView.markUpdateMethod(payload, 'updateTransform');


	    var componentDirtyList = [];
	    ecModel.eachComponent(function (componentType, componentModel) {
	      var componentView = ecIns.getViewOfComponentModel(componentModel);

	      if (componentView && componentView.__alive) {
	        if (componentView.updateTransform) {
	          var result = componentView.updateTransform(componentModel, ecModel, api, payload);
	          result && result.update && componentDirtyList.push(componentView);
	        } else {
	          componentDirtyList.push(componentView);
	        }
	      }
	    });
	    var seriesDirtyMap = zrUtil.createHashMap();
	    ecModel.eachSeries(function (seriesModel) {
	      var chartView = ecIns._chartsMap[seriesModel.__viewId];

	      if (chartView.updateTransform) {
	        var result = chartView.updateTransform(seriesModel, ecModel, api, payload);
	        result && result.update && seriesDirtyMap.set(seriesModel.uid, 1);
	      } else {
	        seriesDirtyMap.set(seriesModel.uid, 1);
	      }
	    });
	    clearColorPalette(ecModel); // Keep pipe to the exist pipeline because it depends on the render task of the full pipeline.
	    // this._scheduler.performVisualTasks(ecModel, payload, 'layout', true);

	    this._scheduler.performVisualTasks(ecModel, payload, {
	      setDirty: true,
	      dirtyMap: seriesDirtyMap
	    }); // Currently, not call render of components. Geo render cost a lot.
	    // renderComponents(ecIns, ecModel, api, payload, componentDirtyList);


	    renderSeries(ecIns, ecModel, api, payload, seriesDirtyMap);
	    performPostUpdateFuncs(ecModel, this._api);
	  },

	  /**
	   * @param {Object} payload
	   * @private
	   */
	  updateView: function (payload) {
	    var ecModel = this._model; // update before setOption

	    if (!ecModel) {
	      return;
	    }

	    ChartView.markUpdateMethod(payload, 'updateView');
	    clearColorPalette(ecModel); // Keep pipe to the exist pipeline because it depends on the render task of the full pipeline.

	    this._scheduler.performVisualTasks(ecModel, payload, {
	      setDirty: true
	    });

	    render(this, this._model, this._api, payload);
	    performPostUpdateFuncs(ecModel, this._api);
	  },

	  /**
	   * @param {Object} payload
	   * @private
	   */
	  updateVisual: function (payload) {
	    updateMethods.update.call(this, payload); // var ecModel = this._model;
	    // // update before setOption
	    // if (!ecModel) {
	    //     return;
	    // }
	    // ChartView.markUpdateMethod(payload, 'updateVisual');
	    // clearColorPalette(ecModel);
	    // // Keep pipe to the exist pipeline because it depends on the render task of the full pipeline.
	    // this._scheduler.performVisualTasks(ecModel, payload, {visualType: 'visual', setDirty: true});
	    // render(this, this._model, this._api, payload);
	    // performPostUpdateFuncs(ecModel, this._api);
	  },

	  /**
	   * @param {Object} payload
	   * @private
	   */
	  updateLayout: function (payload) {
	    updateMethods.update.call(this, payload); // var ecModel = this._model;
	    // // update before setOption
	    // if (!ecModel) {
	    //     return;
	    // }
	    // ChartView.markUpdateMethod(payload, 'updateLayout');
	    // // Keep pipe to the exist pipeline because it depends on the render task of the full pipeline.
	    // // this._scheduler.performVisualTasks(ecModel, payload, 'layout', true);
	    // this._scheduler.performVisualTasks(ecModel, payload, {setDirty: true});
	    // render(this, this._model, this._api, payload);
	    // performPostUpdateFuncs(ecModel, this._api);
	  }
	};

	function prepare(ecIns) {
	  var ecModel = ecIns._model;
	  var scheduler = ecIns._scheduler;
	  scheduler.restorePipelines(ecModel);
	  scheduler.prepareStageTasks();
	  prepareView(ecIns, 'component', ecModel, scheduler);
	  prepareView(ecIns, 'chart', ecModel, scheduler);
	  scheduler.plan();
	}
	/**
	 * @private
	 */


	function updateDirectly(ecIns, method, payload, mainType, subType) {
	  var ecModel = ecIns._model; // broadcast

	  if (!mainType) {
	    // FIXME
	    // Chart will not be update directly here, except set dirty.
	    // But there is no such scenario now.
	    each(ecIns._componentsViews.concat(ecIns._chartsViews), callView);
	    return;
	  }

	  var query = {};
	  query[mainType + 'Id'] = payload[mainType + 'Id'];
	  query[mainType + 'Index'] = payload[mainType + 'Index'];
	  query[mainType + 'Name'] = payload[mainType + 'Name'];
	  var condition = {
	    mainType: mainType,
	    query: query
	  };
	  subType && (condition.subType = subType); // subType may be '' by parseClassType;

	  var excludeSeriesId = payload.excludeSeriesId;

	  if (excludeSeriesId != null) {
	    excludeSeriesId = zrUtil.createHashMap(modelUtil.normalizeToArray(excludeSeriesId));
	  } // If dispatchAction before setOption, do nothing.


	  ecModel && ecModel.eachComponent(condition, function (model) {
	    if (!excludeSeriesId || excludeSeriesId.get(model.id) == null) {
	      callView(ecIns[mainType === 'series' ? '_chartsMap' : '_componentsMap'][model.__viewId]);
	    }
	  }, ecIns);

	  function callView(view) {
	    view && view.__alive && view[method] && view[method](view.__model, ecModel, ecIns._api, payload);
	  }
	}
	/**
	 * Resize the chart
	 * @param {Object} opts
	 * @param {number} [opts.width] Can be 'auto' (the same as null/undefined)
	 * @param {number} [opts.height] Can be 'auto' (the same as null/undefined)
	 * @param {boolean} [opts.silent=false]
	 */


	echartsProto.resize = function (opts) {
	  this._zr.resize(opts);

	  var ecModel = this._model; // Resize loading effect

	  this._loadingFX && this._loadingFX.resize();

	  if (!ecModel) {
	    return;
	  }

	  var optionChanged = ecModel.resetOption('media');
	  var silent = opts && opts.silent;
	  this[IN_MAIN_PROCESS] = true;
	  optionChanged && prepare(this);
	  updateMethods.update.call(this);
	  this[IN_MAIN_PROCESS] = false;
	  flushPendingActions.call(this, silent);
	  triggerUpdatedEvent.call(this, silent);
	};

	function updateStreamModes(ecIns, ecModel) {
	  var chartsMap = ecIns._chartsMap;
	  var scheduler = ecIns._scheduler;
	  ecModel.eachSeries(function (seriesModel) {
	    scheduler.updateStreamModes(seriesModel, chartsMap[seriesModel.__viewId]);
	  });
	}
	/**
	 * Show loading effect
	 * @param  {string} [name='default']
	 * @param  {Object} [cfg]
	 */


	echartsProto.showLoading = function (name, cfg) {
	  if (isObject(name)) {
	    cfg = name;
	    name = '';
	  }

	  name = name || 'default';
	  this.hideLoading();

	  if (!loadingEffects[name]) {
	    return;
	  }

	  var el = loadingEffects[name](this._api, cfg);
	  var zr = this._zr;
	  this._loadingFX = el;
	  zr.add(el);
	};
	/**
	 * Hide loading effect
	 */


	echartsProto.hideLoading = function () {
	  this._loadingFX && this._zr.remove(this._loadingFX);
	  this._loadingFX = null;
	};
	/**
	 * @param {Object} eventObj
	 * @return {Object}
	 */


	echartsProto.makeActionFromEvent = function (eventObj) {
	  var payload = zrUtil.extend({}, eventObj);
	  payload.type = eventActionMap[eventObj.type];
	  return payload;
	};
	/**
	 * @pubilc
	 * @param {Object} payload
	 * @param {string} [payload.type] Action type
	 * @param {Object|boolean} [opt] If pass boolean, means opt.silent
	 * @param {boolean} [opt.silent=false] Whether trigger events.
	 * @param {boolean} [opt.flush=undefined]
	 *                  true: Flush immediately, and then pixel in canvas can be fetched
	 *                      immediately. Caution: it might affect performance.
	 *                  false: Not not flush.
	 *                  undefined: Auto decide whether perform flush.
	 */


	echartsProto.dispatchAction = function (payload, opt) {
	  if (!isObject(opt)) {
	    opt = {
	      silent: !!opt
	    };
	  }

	  if (!actions[payload.type]) {
	    return;
	  } // Avoid dispatch action before setOption. Especially in `connect`.


	  if (!this._model) {
	    return;
	  } // May dispatchAction in rendering procedure


	  if (this[IN_MAIN_PROCESS]) {
	    this._pendingActions.push(payload);

	    return;
	  }

	  doDispatchAction.call(this, payload, opt.silent);

	  if (opt.flush) {
	    this._zr.flush(true);
	  } else if (opt.flush !== false && env.browser.weChat) {
	    // In WeChat embeded browser, `requestAnimationFrame` and `setInterval`
	    // hang when sliding page (on touch event), which cause that zr does not
	    // refresh util user interaction finished, which is not expected.
	    // But `dispatchAction` may be called too frequently when pan on touch
	    // screen, which impacts performance if do not throttle them.
	    this._throttledZrFlush();
	  }

	  flushPendingActions.call(this, opt.silent);
	  triggerUpdatedEvent.call(this, opt.silent);
	};

	function doDispatchAction(payload, silent) {
	  var payloadType = payload.type;
	  var escapeConnect = payload.escapeConnect;
	  var actionWrap = actions[payloadType];
	  var actionInfo = actionWrap.actionInfo;
	  var cptType = (actionInfo.update || 'update').split(':');
	  var updateMethod = cptType.pop();
	  cptType = cptType[0] != null && parseClassType(cptType[0]);
	  this[IN_MAIN_PROCESS] = true;
	  var payloads = [payload];
	  var batched = false; // Batch action

	  if (payload.batch) {
	    batched = true;
	    payloads = zrUtil.map(payload.batch, function (item) {
	      item = zrUtil.defaults(zrUtil.extend({}, item), payload);
	      item.batch = null;
	      return item;
	    });
	  }

	  var eventObjBatch = [];
	  var eventObj;
	  var isHighDown = payloadType === 'highlight' || payloadType === 'downplay';
	  each(payloads, function (batchItem) {
	    // Action can specify the event by return it.
	    eventObj = actionWrap.action(batchItem, this._model, this._api); // Emit event outside

	    eventObj = eventObj || zrUtil.extend({}, batchItem); // Convert type to eventType

	    eventObj.type = actionInfo.event || eventObj.type;
	    eventObjBatch.push(eventObj); // light update does not perform data process, layout and visual.

	    if (isHighDown) {
	      // method, payload, mainType, subType
	      updateDirectly(this, updateMethod, batchItem, 'series');
	    } else if (cptType) {
	      updateDirectly(this, updateMethod, batchItem, cptType.main, cptType.sub);
	    }
	  }, this);

	  if (updateMethod !== 'none' && !isHighDown && !cptType) {
	    // Still dirty
	    if (this[OPTION_UPDATED]) {
	      // FIXME Pass payload ?
	      prepare(this);
	      updateMethods.update.call(this, payload);
	      this[OPTION_UPDATED] = false;
	    } else {
	      updateMethods[updateMethod].call(this, payload);
	    }
	  } // Follow the rule of action batch


	  if (batched) {
	    eventObj = {
	      type: actionInfo.event || payloadType,
	      escapeConnect: escapeConnect,
	      batch: eventObjBatch
	    };
	  } else {
	    eventObj = eventObjBatch[0];
	  }

	  this[IN_MAIN_PROCESS] = false;
	  !silent && this._messageCenter.trigger(eventObj.type, eventObj);
	}

	function flushPendingActions(silent) {
	  var pendingActions = this._pendingActions;

	  while (pendingActions.length) {
	    var payload = pendingActions.shift();
	    doDispatchAction.call(this, payload, silent);
	  }
	}

	function triggerUpdatedEvent(silent) {
	  !silent && this.trigger('updated');
	}
	/**
	 * Event `rendered` is triggered when zr
	 * rendered. It is useful for realtime
	 * snapshot (reflect animation).
	 *
	 * Event `finished` is triggered when:
	 * (1) zrender rendering finished.
	 * (2) initial animation finished.
	 * (3) progressive rendering finished.
	 * (4) no pending action.
	 * (5) no delayed setOption needs to be processed.
	 */


	function bindRenderedEvent(zr, ecIns) {
	  zr.on('rendered', function () {
	    ecIns.trigger('rendered'); // The `finished` event should not be triggered repeatly,
	    // so it should only be triggered when rendering indeed happend
	    // in zrender. (Consider the case that dipatchAction is keep
	    // triggering when mouse move).

	    if ( // Although zr is dirty if initial animation is not finished
	    // and this checking is called on frame, we also check
	    // animation finished for robustness.
	    zr.animation.isFinished() && !ecIns[OPTION_UPDATED] && !ecIns._scheduler.unfinished && !ecIns._pendingActions.length) {
	      ecIns.trigger('finished');
	    }
	  });
	}
	/**
	 * @param {Object} params
	 * @param {number} params.seriesIndex
	 * @param {Array|TypedArray} params.data
	 */


	echartsProto.appendData = function (params) {
	  var seriesIndex = params.seriesIndex;
	  var ecModel = this.getModel();
	  var seriesModel = ecModel.getSeriesByIndex(seriesIndex);
	  seriesModel.appendData(params); // Note: `appendData` does not support that update extent of coordinate
	  // system, util some scenario require that. In the expected usage of
	  // `appendData`, the initial extent of coordinate system should better
	  // be fixed by axis `min`/`max` setting or initial data, otherwise if
	  // the extent changed while `appendData`, the location of the painted
	  // graphic elements have to be changed, which make the usage of
	  // `appendData` meaningless.

	  this._scheduler.unfinished = true;
	};
	/**
	 * Register event
	 * @method
	 */


	echartsProto.on = createRegisterEventWithLowercaseName('on');
	echartsProto.off = createRegisterEventWithLowercaseName('off');
	echartsProto.one = createRegisterEventWithLowercaseName('one');
	/**
	 * Prepare view instances of charts and components
	 * @param  {module:echarts/model/Global} ecModel
	 * @private
	 */

	function prepareView(ecIns, type, ecModel, scheduler) {
	  var isComponent = type === 'component';
	  var viewList = isComponent ? ecIns._componentsViews : ecIns._chartsViews;
	  var viewMap = isComponent ? ecIns._componentsMap : ecIns._chartsMap;
	  var zr = ecIns._zr;
	  var api = ecIns._api;

	  for (var i = 0; i < viewList.length; i++) {
	    viewList[i].__alive = false;
	  }

	  isComponent ? ecModel.eachComponent(function (componentType, model) {
	    componentType !== 'series' && doPrepare(model);
	  }) : ecModel.eachSeries(doPrepare);

	  function doPrepare(model) {
	    // Consider: id same and type changed.
	    var viewId = '_ec_' + model.id + '_' + model.type;
	    var view = viewMap[viewId];

	    if (!view) {
	      var classType = parseClassType(model.type);
	      var Clazz = isComponent ? ComponentView.getClass(classType.main, classType.sub) : ChartView.getClass(classType.sub);
	      view = new Clazz();
	      view.init(ecModel, api);
	      viewMap[viewId] = view;
	      viewList.push(view);
	      zr.add(view.group);
	    }

	    model.__viewId = view.__id = viewId;
	    view.__alive = true;
	    view.__model = model;
	    view.group.__ecComponentInfo = {
	      mainType: model.mainType,
	      index: model.componentIndex
	    };
	    !isComponent && scheduler.prepareView(view, model, ecModel, api);
	  }

	  for (var i = 0; i < viewList.length;) {
	    var view = viewList[i];

	    if (!view.__alive) {
	      !isComponent && view.renderTask.dispose();
	      zr.remove(view.group);
	      view.dispose(ecModel, api);
	      viewList.splice(i, 1);
	      delete viewMap[view.__id];
	      view.__id = view.group.__ecComponentInfo = null;
	    } else {
	      i++;
	    }
	  }
	} // /**
	//  * Encode visual infomation from data after data processing
	//  *
	//  * @param {module:echarts/model/Global} ecModel
	//  * @param {object} layout
	//  * @param {boolean} [layoutFilter] `true`: only layout,
	//  *                                 `false`: only not layout,
	//  *                                 `null`/`undefined`: all.
	//  * @param {string} taskBaseTag
	//  * @private
	//  */
	// function startVisualEncoding(ecIns, ecModel, api, payload, layoutFilter) {
	//     each(visualFuncs, function (visual, index) {
	//         var isLayout = visual.isLayout;
	//         if (layoutFilter == null
	//             || (layoutFilter === false && !isLayout)
	//             || (layoutFilter === true && isLayout)
	//         ) {
	//             visual.func(ecModel, api, payload);
	//         }
	//     });
	// }


	function clearColorPalette(ecModel) {
	  ecModel.clearColorPalette();
	  ecModel.eachSeries(function (seriesModel) {
	    seriesModel.clearColorPalette();
	  });
	}

	function render(ecIns, ecModel, api, payload) {
	  renderComponents(ecIns, ecModel, api, payload);
	  each(ecIns._chartsViews, function (chart) {
	    chart.__alive = false;
	  });
	  renderSeries(ecIns, ecModel, api, payload); // Remove groups of unrendered charts

	  each(ecIns._chartsViews, function (chart) {
	    if (!chart.__alive) {
	      chart.remove(ecModel, api);
	    }
	  });
	}

	function renderComponents(ecIns, ecModel, api, payload, dirtyList) {
	  each(dirtyList || ecIns._componentsViews, function (componentView) {
	    var componentModel = componentView.__model;
	    componentView.render(componentModel, ecModel, api, payload);
	    updateZ(componentModel, componentView);
	  });
	}
	/**
	 * Render each chart and component
	 * @private
	 */


	function renderSeries(ecIns, ecModel, api, payload, dirtyMap) {
	  // Render all charts
	  var scheduler = ecIns._scheduler;
	  var unfinished;
	  ecModel.eachSeries(function (seriesModel) {
	    var chartView = ecIns._chartsMap[seriesModel.__viewId];
	    chartView.__alive = true;
	    var renderTask = chartView.renderTask;
	    scheduler.updatePayload(renderTask, payload);

	    if (dirtyMap && dirtyMap.get(seriesModel.uid)) {
	      renderTask.dirty();
	    }

	    unfinished |= renderTask.perform(scheduler.getPerformArgs(renderTask));
	    chartView.group.silent = !!seriesModel.get('silent');
	    updateZ(seriesModel, chartView);
	    updateBlend(seriesModel, chartView);
	  });
	  scheduler.unfinished |= unfinished; // If use hover layer

	  updateHoverLayerStatus(ecIns._zr, ecModel); // Add aria

	  aria(ecIns._zr.dom, ecModel);
	}

	function performPostUpdateFuncs(ecModel, api) {
	  each(postUpdateFuncs, function (func) {
	    func(ecModel, api);
	  });
	}

	var MOUSE_EVENT_NAMES = ['click', 'dblclick', 'mouseover', 'mouseout', 'mousemove', 'mousedown', 'mouseup', 'globalout', 'contextmenu'];
	/**
	 * @private
	 */

	echartsProto._initEvents = function () {
	  each(MOUSE_EVENT_NAMES, function (eveName) {
	    this._zr.on(eveName, function (e) {
	      var ecModel = this.getModel();
	      var el = e.target;
	      var params; // no e.target when 'globalout'.

	      if (eveName === 'globalout') {
	        params = {};
	      } else if (el && el.dataIndex != null) {
	        var dataModel = el.dataModel || ecModel.getSeriesByIndex(el.seriesIndex);
	        params = dataModel && dataModel.getDataParams(el.dataIndex, el.dataType) || {};
	      } // If element has custom eventData of components
	      else if (el && el.eventData) {
	          params = zrUtil.extend({}, el.eventData);
	        }

	      if (params) {
	        params.event = e;
	        params.type = eveName;
	        this.trigger(eveName, params);
	      }
	    }, this);
	  }, this);
	  each(eventActionMap, function (actionType, eventType) {
	    this._messageCenter.on(eventType, function (event) {
	      this.trigger(eventType, event);
	    }, this);
	  }, this);
	};
	/**
	 * @return {boolean}
	 */


	echartsProto.isDisposed = function () {
	  return this._disposed;
	};
	/**
	 * Clear
	 */


	echartsProto.clear = function () {
	  this.setOption({
	    series: []
	  }, true);
	};
	/**
	 * Dispose instance
	 */


	echartsProto.dispose = function () {
	  if (this._disposed) {
	    return;
	  }

	  this._disposed = true;
	  modelUtil.setAttribute(this.getDom(), DOM_ATTRIBUTE_KEY, '');
	  var api = this._api;
	  var ecModel = this._model;
	  each(this._componentsViews, function (component) {
	    component.dispose(ecModel, api);
	  });
	  each(this._chartsViews, function (chart) {
	    chart.dispose(ecModel, api);
	  }); // Dispose after all views disposed

	  this._zr.dispose();

	  delete instances[this.id];
	};

	zrUtil.mixin(ECharts, Eventful);

	function updateHoverLayerStatus(zr, ecModel) {
	  var storage = zr.storage;
	  var elCount = 0;
	  storage.traverse(function (el) {
	    if (!el.isGroup) {
	      elCount++;
	    }
	  });

	  if (elCount > ecModel.get('hoverLayerThreshold') && !env.node) {
	    storage.traverse(function (el) {
	      if (!el.isGroup) {
	        // Don't switch back.
	        el.useHoverLayer = true;
	      }
	    });
	  }
	}
	/**
	 * Update chart progressive and blend.
	 * @param {module:echarts/model/Series|module:echarts/model/Component} model
	 * @param {module:echarts/view/Component|module:echarts/view/Chart} view
	 */


	function updateBlend(seriesModel, chartView) {
	  var blendMode = seriesModel.get('blendMode') || null;
	  chartView.group.traverse(function (el) {
	    // FIXME marker and other components
	    if (!el.isGroup) {
	      // Only set if blendMode is changed. In case element is incremental and don't wan't to rerender.
	      if (el.style.blend !== blendMode) {
	        el.setStyle('blend', blendMode);
	      }
	    }

	    if (el.eachPendingDisplayable) {
	      el.eachPendingDisplayable(function (displayable) {
	        displayable.setStyle('blend', blendMode);
	      });
	    }
	  });
	}
	/**
	 * @param {module:echarts/model/Series|module:echarts/model/Component} model
	 * @param {module:echarts/view/Component|module:echarts/view/Chart} view
	 */


	function updateZ(model, view) {
	  var z = model.get('z');
	  var zlevel = model.get('zlevel'); // Set z and zlevel

	  view.group.traverse(function (el) {
	    if (el.type !== 'group') {
	      z != null && (el.z = z);
	      zlevel != null && (el.zlevel = zlevel);
	    }
	  });
	}

	function createExtensionAPI(ecInstance) {
	  var coordSysMgr = ecInstance._coordSysMgr;
	  return zrUtil.extend(new ExtensionAPI(ecInstance), {
	    // Inject methods
	    getCoordinateSystems: zrUtil.bind(coordSysMgr.getCoordinateSystems, coordSysMgr),
	    getComponentByElement: function (el) {
	      while (el) {
	        var modelInfo = el.__ecComponentInfo;

	        if (modelInfo != null) {
	          return ecInstance._model.getComponent(modelInfo.mainType, modelInfo.index);
	        }

	        el = el.parent;
	      }
	    }
	  });
	}
	/**
	 * @type {Object} key: actionType.
	 * @inner
	 */


	var actions = {};
	/**
	 * Map eventType to actionType
	 * @type {Object}
	 */

	var eventActionMap = {};
	/**
	 * Data processor functions of each stage
	 * @type {Array.<Object.<string, Function>>}
	 * @inner
	 */

	var dataProcessorFuncs = [];
	/**
	 * @type {Array.<Function>}
	 * @inner
	 */

	var optionPreprocessorFuncs = [];
	/**
	 * @type {Array.<Function>}
	 * @inner
	 */

	var postUpdateFuncs = [];
	/**
	 * Visual encoding functions of each stage
	 * @type {Array.<Object.<string, Function>>}
	 */

	var visualFuncs = [];
	/**
	 * Theme storage
	 * @type {Object.<key, Object>}
	 */

	var themeStorage = {};
	/**
	 * Loading effects
	 */

	var loadingEffects = {};
	var instances = {};
	var connectedGroups = {};
	var idBase = new Date() - 0;
	var groupIdBase = new Date() - 0;
	var DOM_ATTRIBUTE_KEY = '_echarts_instance_';
	var mapDataStores = {};

	function enableConnect(chart) {
	  var STATUS_PENDING = 0;
	  var STATUS_UPDATING = 1;
	  var STATUS_UPDATED = 2;
	  var STATUS_KEY = '__connectUpdateStatus';

	  function updateConnectedChartsStatus(charts, status) {
	    for (var i = 0; i < charts.length; i++) {
	      var otherChart = charts[i];
	      otherChart[STATUS_KEY] = status;
	    }
	  }

	  each(eventActionMap, function (actionType, eventType) {
	    chart._messageCenter.on(eventType, function (event) {
	      if (connectedGroups[chart.group] && chart[STATUS_KEY] !== STATUS_PENDING) {
	        if (event && event.escapeConnect) {
	          return;
	        }

	        var action = chart.makeActionFromEvent(event);
	        var otherCharts = [];
	        each(instances, function (otherChart) {
	          if (otherChart !== chart && otherChart.group === chart.group) {
	            otherCharts.push(otherChart);
	          }
	        });
	        updateConnectedChartsStatus(otherCharts, STATUS_PENDING);
	        each(otherCharts, function (otherChart) {
	          if (otherChart[STATUS_KEY] !== STATUS_UPDATING) {
	            otherChart.dispatchAction(action);
	          }
	        });
	        updateConnectedChartsStatus(otherCharts, STATUS_UPDATED);
	      }
	    });
	  });
	}
	/**
	 * @param {HTMLElement} dom
	 * @param {Object} [theme]
	 * @param {Object} opts
	 * @param {number} [opts.devicePixelRatio] Use window.devicePixelRatio by default
	 * @param {string} [opts.renderer] Currently only 'canvas' is supported.
	 * @param {number} [opts.width] Use clientWidth of the input `dom` by default.
	 *                              Can be 'auto' (the same as null/undefined)
	 * @param {number} [opts.height] Use clientHeight of the input `dom` by default.
	 *                               Can be 'auto' (the same as null/undefined)
	 */


	function init(dom, theme, opts) {
	  var existInstance = getInstanceByDom(dom);

	  if (existInstance) {
	    return existInstance;
	  }

	  var chart = new ECharts(dom, theme, opts);
	  chart.id = 'ec_' + idBase++;
	  instances[chart.id] = chart;
	  modelUtil.setAttribute(dom, DOM_ATTRIBUTE_KEY, chart.id);
	  enableConnect(chart);
	  return chart;
	}
	/**
	 * @return {string|Array.<module:echarts~ECharts>} groupId
	 */


	function connect(groupId) {
	  // Is array of charts
	  if (zrUtil.isArray(groupId)) {
	    var charts = groupId;
	    groupId = null; // If any chart has group

	    each(charts, function (chart) {
	      if (chart.group != null) {
	        groupId = chart.group;
	      }
	    });
	    groupId = groupId || 'g_' + groupIdBase++;
	    each(charts, function (chart) {
	      chart.group = groupId;
	    });
	  }

	  connectedGroups[groupId] = true;
	  return groupId;
	}
	/**
	 * @DEPRECATED
	 * @return {string} groupId
	 */


	function disConnect(groupId) {
	  connectedGroups[groupId] = false;
	}
	/**
	 * @return {string} groupId
	 */


	var disconnect = disConnect;
	/**
	 * Dispose a chart instance
	 * @param  {module:echarts~ECharts|HTMLDomElement|string} chart
	 */

	function dispose(chart) {
	  if (typeof chart === 'string') {
	    chart = instances[chart];
	  } else if (!(chart instanceof ECharts)) {
	    // Try to treat as dom
	    chart = getInstanceByDom(chart);
	  }

	  if (chart instanceof ECharts && !chart.isDisposed()) {
	    chart.dispose();
	  }
	}
	/**
	 * @param  {HTMLElement} dom
	 * @return {echarts~ECharts}
	 */


	function getInstanceByDom(dom) {
	  return instances[modelUtil.getAttribute(dom, DOM_ATTRIBUTE_KEY)];
	}
	/**
	 * @param {string} key
	 * @return {echarts~ECharts}
	 */


	function getInstanceById(key) {
	  return instances[key];
	}
	/**
	 * Register theme
	 */


	function registerTheme(name, theme) {
	  themeStorage[name] = theme;
	}
	/**
	 * Register option preprocessor
	 * @param {Function} preprocessorFunc
	 */


	function registerPreprocessor(preprocessorFunc) {
	  optionPreprocessorFuncs.push(preprocessorFunc);
	}
	/**
	 * @param {number} [priority=1000]
	 * @param {Object|Function} processor
	 */


	function registerProcessor(priority, processor) {
	  normalizeRegister(dataProcessorFuncs, priority, processor, PRIORITY_PROCESSOR_FILTER);
	}
	/**
	 * Register postUpdater
	 * @param {Function} postUpdateFunc
	 */


	function registerPostUpdate(postUpdateFunc) {
	  postUpdateFuncs.push(postUpdateFunc);
	}
	/**
	 * Usage:
	 * registerAction('someAction', 'someEvent', function () { ... });
	 * registerAction('someAction', function () { ... });
	 * registerAction(
	 *     {type: 'someAction', event: 'someEvent', update: 'updateView'},
	 *     function () { ... }
	 * );
	 *
	 * @param {(string|Object)} actionInfo
	 * @param {string} actionInfo.type
	 * @param {string} [actionInfo.event]
	 * @param {string} [actionInfo.update]
	 * @param {string} [eventName]
	 * @param {Function} action
	 */


	function registerAction(actionInfo, eventName, action) {
	  if (typeof eventName === 'function') {
	    action = eventName;
	    eventName = '';
	  }

	  var actionType = isObject(actionInfo) ? actionInfo.type : [actionInfo, actionInfo = {
	    event: eventName
	  }][0]; // Event name is all lowercase

	  actionInfo.event = (actionInfo.event || actionType).toLowerCase();
	  eventName = actionInfo.event; // Validate action type and event name.

	  assert(ACTION_REG.test(actionType) && ACTION_REG.test(eventName));

	  if (!actions[actionType]) {
	    actions[actionType] = {
	      action: action,
	      actionInfo: actionInfo
	    };
	  }

	  eventActionMap[eventName] = actionType;
	}
	/**
	 * @param {string} type
	 * @param {*} CoordinateSystem
	 */


	function registerCoordinateSystem(type, CoordinateSystem) {
	  CoordinateSystemManager.register(type, CoordinateSystem);
	}
	/**
	 * Get dimensions of specified coordinate system.
	 * @param {string} type
	 * @return {Array.<string|Object>}
	 */


	function getCoordinateSystemDimensions(type) {
	  var coordSysCreator = CoordinateSystemManager.get(type);

	  if (coordSysCreator) {
	    return coordSysCreator.getDimensionsInfo ? coordSysCreator.getDimensionsInfo() : coordSysCreator.dimensions.slice();
	  }
	}
	/**
	 * Layout is a special stage of visual encoding
	 * Most visual encoding like color are common for different chart
	 * But each chart has it's own layout algorithm
	 *
	 * @param {number} [priority=1000]
	 * @param {Function} layoutTask
	 */


	function registerLayout(priority, layoutTask) {
	  normalizeRegister(visualFuncs, priority, layoutTask, PRIORITY_VISUAL_LAYOUT, 'layout');
	}
	/**
	 * @param {number} [priority=3000]
	 * @param {module:echarts/stream/Task} visualTask
	 */


	function registerVisual(priority, visualTask) {
	  normalizeRegister(visualFuncs, priority, visualTask, PRIORITY_VISUAL_CHART, 'visual');
	}
	/**
	 * @param {Object|Function} fn: {seriesType, createOnAllSeries, performRawSeries, reset}
	 */


	function normalizeRegister(targetList, priority, fn, defaultPriority, visualType) {
	  if (isFunction(priority) || isObject(priority)) {
	    fn = priority;
	    priority = defaultPriority;
	  }

	  var stageHandler = Scheduler.wrapStageHandler(fn, visualType);
	  stageHandler.__prio = priority;
	  stageHandler.__raw = fn;
	  targetList.push(stageHandler);
	  return stageHandler;
	}
	/**
	 * @param {string} name
	 */


	function registerLoading(name, loadingFx) {
	  loadingEffects[name] = loadingFx;
	}
	/**
	 * @param {Object} opts
	 * @param {string} [superClass]
	 */


	function extendComponentModel(opts
	/*, superClass*/
	) {
	  // var Clazz = ComponentModel;
	  // if (superClass) {
	  //     var classType = parseClassType(superClass);
	  //     Clazz = ComponentModel.getClass(classType.main, classType.sub, true);
	  // }
	  return ComponentModel.extend(opts);
	}
	/**
	 * @param {Object} opts
	 * @param {string} [superClass]
	 */


	function extendComponentView(opts
	/*, superClass*/
	) {
	  // var Clazz = ComponentView;
	  // if (superClass) {
	  //     var classType = parseClassType(superClass);
	  //     Clazz = ComponentView.getClass(classType.main, classType.sub, true);
	  // }
	  return ComponentView.extend(opts);
	}
	/**
	 * @param {Object} opts
	 * @param {string} [superClass]
	 */


	function extendSeriesModel(opts
	/*, superClass*/
	) {
	  // var Clazz = SeriesModel;
	  // if (superClass) {
	  //     superClass = 'series.' + superClass.replace('series.', '');
	  //     var classType = parseClassType(superClass);
	  //     Clazz = ComponentModel.getClass(classType.main, classType.sub, true);
	  // }
	  return SeriesModel.extend(opts);
	}
	/**
	 * @param {Object} opts
	 * @param {string} [superClass]
	 */


	function extendChartView(opts
	/*, superClass*/
	) {
	  // var Clazz = ChartView;
	  // if (superClass) {
	  //     superClass = superClass.replace('series.', '');
	  //     var classType = parseClassType(superClass);
	  //     Clazz = ChartView.getClass(classType.main, true);
	  // }
	  return ChartView.extend(opts);
	}
	/**
	 * ZRender need a canvas context to do measureText.
	 * But in node environment canvas may be created by node-canvas.
	 * So we need to specify how to create a canvas instead of using document.createElement('canvas')
	 *
	 * Be careful of using it in the browser.
	 *
	 * @param {Function} creator
	 * @example
	 *     var Canvas = require('canvas');
	 *     var echarts = require('echarts');
	 *     echarts.setCanvasCreator(function () {
	 *         // Small size is enough.
	 *         return new Canvas(32, 32);
	 *     });
	 */


	function setCanvasCreator(creator) {
	  zrUtil.$override('createCanvas', creator);
	}
	/**
	 * @param {string} mapName
	 * @param {Object|string} geoJson
	 * @param {Object} [specialAreas]
	 *
	 * @example
	 *     $.get('USA.json', function (geoJson) {
	 *         echarts.registerMap('USA', geoJson);
	 *         // Or
	 *         echarts.registerMap('USA', {
	 *             geoJson: geoJson,
	 *             specialAreas: {}
	 *         })
	 *     });
	 */


	function registerMap(mapName, geoJson, specialAreas) {
	  if (geoJson.geoJson && !geoJson.features) {
	    specialAreas = geoJson.specialAreas;
	    geoJson = geoJson.geoJson;
	  }

	  if (typeof geoJson === 'string') {
	    geoJson = typeof JSON !== 'undefined' && JSON.parse ? JSON.parse(geoJson) : new Function('return (' + geoJson + ');')();
	  }

	  mapDataStores[mapName] = {
	    geoJson: geoJson,
	    specialAreas: specialAreas
	  };
	}
	/**
	 * @param {string} mapName
	 * @return {Object}
	 */


	function getMap(mapName) {
	  return mapDataStores[mapName];
	}

	registerVisual(PRIORITY_VISUAL_GLOBAL, seriesColor);
	registerPreprocessor(backwardCompat);
	registerProcessor(PRIORITY_PROCESSOR_STATISTIC, dataStack);
	registerLoading('default', loadingDefault); // Default actions

	registerAction({
	  type: 'highlight',
	  event: 'highlight',
	  update: 'highlight'
	}, zrUtil.noop);
	registerAction({
	  type: 'downplay',
	  event: 'downplay',
	  update: 'downplay'
	}, zrUtil.noop); // Default theme

	registerTheme('light', lightTheme);
	registerTheme('dark', darkTheme); // For backward compatibility, where the namespace `dataTool` will
	// be mounted on `echarts` is the extension `dataTool` is imported.

	var dataTool = {};
	exports.version = version;
	exports.dependencies = dependencies;
	exports.PRIORITY = PRIORITY;
	exports.init = init;
	exports.connect = connect;
	exports.disConnect = disConnect;
	exports.disconnect = disconnect;
	exports.dispose = dispose;
	exports.getInstanceByDom = getInstanceByDom;
	exports.getInstanceById = getInstanceById;
	exports.registerTheme = registerTheme;
	exports.registerPreprocessor = registerPreprocessor;
	exports.registerProcessor = registerProcessor;
	exports.registerPostUpdate = registerPostUpdate;
	exports.registerAction = registerAction;
	exports.registerCoordinateSystem = registerCoordinateSystem;
	exports.getCoordinateSystemDimensions = getCoordinateSystemDimensions;
	exports.registerLayout = registerLayout;
	exports.registerVisual = registerVisual;
	exports.registerLoading = registerLoading;
	exports.extendComponentModel = extendComponentModel;
	exports.extendComponentView = extendComponentView;
	exports.extendSeriesModel = extendSeriesModel;
	exports.extendChartView = extendChartView;
	exports.setCanvasCreator = setCanvasCreator;
	exports.registerMap = registerMap;
	exports.getMap = getMap;
	exports.dataTool = dataTool;
	var ___ec_export = __webpack_require__(294);
	(function () {
	    for (var key in ___ec_export) {
	        if (___ec_export.hasOwnProperty(key)) {
	            exports[key] = ___ec_export[key];
	        }
	    }
	})();

/***/ }),
/* 177 */
/***/ (function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	// (1) The code `if (__DEV__) ...` can be removed by build tool.
	// (2) If intend to use `__DEV__`, this module should be imported. Use a global
	// variable `__DEV__` may cause that miss the declaration (see #6535), or the
	// declaration is behind of the using position (for example in `Model.extent`,
	// And tools like rollup can not analysis the dependency if not import).
	var dev; // In browser

	if (typeof window !== 'undefined') {
	  dev = window.__DEV__;
	} // In node
	else if (typeof global !== 'undefined') {
	    dev = global.__DEV__;
	  }

	if (typeof dev === 'undefined') {
	  dev = true;
	}

	var __DEV__ = dev;
	exports.__DEV__ = __DEV__;
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

	var guid = __webpack_require__(179);

	var env = __webpack_require__(180);

	var zrUtil = __webpack_require__(181);

	var Handler = __webpack_require__(182);

	var Storage = __webpack_require__(186);

	var Painter = __webpack_require__(201);

	var Animation = __webpack_require__(214);

	var HandlerProxy = __webpack_require__(216);

	/*!
	* ZRender, a high performance 2d drawing library.
	*
	* Copyright (c) 2013, Baidu Inc.
	* All rights reserved.
	*
	* LICENSE
	* https://github.com/ecomfe/zrender/blob/master/LICENSE.txt
	*/
	var useVML = !env.canvasSupported;
	var painterCtors = {
	  canvas: Painter
	};
	var instances = {}; // ZRender实例map索引

	/**
	 * @type {string}
	 */

	var version = '4.0.4';
	/**
	 * Initializing a zrender instance
	 * @param {HTMLElement} dom
	 * @param {Object} opts
	 * @param {string} [opts.renderer='canvas'] 'canvas' or 'svg'
	 * @param {number} [opts.devicePixelRatio]
	 * @param {number|string} [opts.width] Can be 'auto' (the same as null/undefined)
	 * @param {number|string} [opts.height] Can be 'auto' (the same as null/undefined)
	 * @return {module:zrender/ZRender}
	 */

	function init(dom, opts) {
	  var zr = new ZRender(guid(), dom, opts);
	  instances[zr.id] = zr;
	  return zr;
	}
	/**
	 * Dispose zrender instance
	 * @param {module:zrender/ZRender} zr
	 */


	function dispose(zr) {
	  if (zr) {
	    zr.dispose();
	  } else {
	    for (var key in instances) {
	      if (instances.hasOwnProperty(key)) {
	        instances[key].dispose();
	      }
	    }

	    instances = {};
	  }

	  return this;
	}
	/**
	 * Get zrender instance by id
	 * @param {string} id zrender instance id
	 * @return {module:zrender/ZRender}
	 */


	function getInstance(id) {
	  return instances[id];
	}

	function registerPainter(name, Ctor) {
	  painterCtors[name] = Ctor;
	}

	function delInstance(id) {
	  delete instances[id];
	}
	/**
	 * @module zrender/ZRender
	 */

	/**
	 * @constructor
	 * @alias module:zrender/ZRender
	 * @param {string} id
	 * @param {HTMLElement} dom
	 * @param {Object} opts
	 * @param {string} [opts.renderer='canvas'] 'canvas' or 'svg'
	 * @param {number} [opts.devicePixelRatio]
	 * @param {number} [opts.width] Can be 'auto' (the same as null/undefined)
	 * @param {number} [opts.height] Can be 'auto' (the same as null/undefined)
	 */


	var ZRender = function (id, dom, opts) {
	  opts = opts || {};
	  /**
	   * @type {HTMLDomElement}
	   */

	  this.dom = dom;
	  /**
	   * @type {string}
	   */

	  this.id = id;
	  var self = this;
	  var storage = new Storage();
	  var rendererType = opts.renderer; // TODO WebGL

	  if (useVML) {
	    if (!painterCtors.vml) {
	      throw new Error('You need to require \'zrender/vml/vml\' to support IE8');
	    }

	    rendererType = 'vml';
	  } else if (!rendererType || !painterCtors[rendererType]) {
	    rendererType = 'canvas';
	  }

	  var painter = new painterCtors[rendererType](dom, storage, opts, id);
	  this.storage = storage;
	  this.painter = painter;
	  var handerProxy = !env.node && !env.worker ? new HandlerProxy(painter.getViewportRoot()) : null;
	  this.handler = new Handler(storage, painter, handerProxy, painter.root);
	  /**
	   * @type {module:zrender/animation/Animation}
	   */

	  this.animation = new Animation({
	    stage: {
	      update: zrUtil.bind(this.flush, this)
	    }
	  });
	  this.animation.start();
	  /**
	   * @type {boolean}
	   * @private
	   */

	  this._needsRefresh; // 修改 storage.delFromStorage, 每次删除元素之前删除动画
	  // FIXME 有点ugly

	  var oldDelFromStorage = storage.delFromStorage;
	  var oldAddToStorage = storage.addToStorage;

	  storage.delFromStorage = function (el) {
	    oldDelFromStorage.call(storage, el);
	    el && el.removeSelfFromZr(self);
	  };

	  storage.addToStorage = function (el) {
	    oldAddToStorage.call(storage, el);
	    el.addSelfToZr(self);
	  };
	};

	ZRender.prototype = {
	  constructor: ZRender,

	  /**
	   * 获取实例唯一标识
	   * @return {string}
	   */
	  getId: function () {
	    return this.id;
	  },

	  /**
	   * 添加元素
	   * @param  {module:zrender/Element} el
	   */
	  add: function (el) {
	    this.storage.addRoot(el);
	    this._needsRefresh = true;
	  },

	  /**
	   * 删除元素
	   * @param  {module:zrender/Element} el
	   */
	  remove: function (el) {
	    this.storage.delRoot(el);
	    this._needsRefresh = true;
	  },

	  /**
	   * Change configuration of layer
	   * @param {string} zLevel
	   * @param {Object} config
	   * @param {string} [config.clearColor=0] Clear color
	   * @param {string} [config.motionBlur=false] If enable motion blur
	   * @param {number} [config.lastFrameAlpha=0.7] Motion blur factor. Larger value cause longer trailer
	  */
	  configLayer: function (zLevel, config) {
	    if (this.painter.configLayer) {
	      this.painter.configLayer(zLevel, config);
	    }

	    this._needsRefresh = true;
	  },

	  /**
	   * Set background color
	   * @param {string} backgroundColor
	   */
	  setBackgroundColor: function (backgroundColor) {
	    if (this.painter.setBackgroundColor) {
	      this.painter.setBackgroundColor(backgroundColor);
	    }

	    this._needsRefresh = true;
	  },

	  /**
	   * Repaint the canvas immediately
	   */
	  refreshImmediately: function () {
	    // var start = new Date();
	    // Clear needsRefresh ahead to avoid something wrong happens in refresh
	    // Or it will cause zrender refreshes again and again.
	    this._needsRefresh = false;
	    this.painter.refresh();
	    /**
	     * Avoid trigger zr.refresh in Element#beforeUpdate hook
	     */

	    this._needsRefresh = false; // var end = new Date();
	    // var log = document.getElementById('log');
	    // if (log) {
	    //     log.innerHTML = log.innerHTML + '<br>' + (end - start);
	    // }
	  },

	  /**
	   * Mark and repaint the canvas in the next frame of browser
	   */
	  refresh: function () {
	    this._needsRefresh = true;
	  },

	  /**
	   * Perform all refresh
	   */
	  flush: function () {
	    var triggerRendered;

	    if (this._needsRefresh) {
	      triggerRendered = true;
	      this.refreshImmediately();
	    }

	    if (this._needsRefreshHover) {
	      triggerRendered = true;
	      this.refreshHoverImmediately();
	    }

	    triggerRendered && this.trigger('rendered');
	  },

	  /**
	   * Add element to hover layer
	   * @param  {module:zrender/Element} el
	   * @param {Object} style
	   */
	  addHover: function (el, style) {
	    if (this.painter.addHover) {
	      this.painter.addHover(el, style);
	      this.refreshHover();
	    }
	  },

	  /**
	   * Add element from hover layer
	   * @param  {module:zrender/Element} el
	   */
	  removeHover: function (el) {
	    if (this.painter.removeHover) {
	      this.painter.removeHover(el);
	      this.refreshHover();
	    }
	  },

	  /**
	   * Clear all hover elements in hover layer
	   * @param  {module:zrender/Element} el
	   */
	  clearHover: function () {
	    if (this.painter.clearHover) {
	      this.painter.clearHover();
	      this.refreshHover();
	    }
	  },

	  /**
	   * Refresh hover in next frame
	   */
	  refreshHover: function () {
	    this._needsRefreshHover = true;
	  },

	  /**
	   * Refresh hover immediately
	   */
	  refreshHoverImmediately: function () {
	    this._needsRefreshHover = false;
	    this.painter.refreshHover && this.painter.refreshHover();
	  },

	  /**
	   * Resize the canvas.
	   * Should be invoked when container size is changed
	   * @param {Object} [opts]
	   * @param {number|string} [opts.width] Can be 'auto' (the same as null/undefined)
	   * @param {number|string} [opts.height] Can be 'auto' (the same as null/undefined)
	   */
	  resize: function (opts) {
	    opts = opts || {};
	    this.painter.resize(opts.width, opts.height);
	    this.handler.resize();
	  },

	  /**
	   * Stop and clear all animation immediately
	   */
	  clearAnimation: function () {
	    this.animation.clear();
	  },

	  /**
	   * Get container width
	   */
	  getWidth: function () {
	    return this.painter.getWidth();
	  },

	  /**
	   * Get container height
	   */
	  getHeight: function () {
	    return this.painter.getHeight();
	  },

	  /**
	   * Export the canvas as Base64 URL
	   * @param {string} type
	   * @param {string} [backgroundColor='#fff']
	   * @return {string} Base64 URL
	   */
	  // toDataURL: function(type, backgroundColor) {
	  //     return this.painter.getRenderedCanvas({
	  //         backgroundColor: backgroundColor
	  //     }).toDataURL(type);
	  // },

	  /**
	   * Converting a path to image.
	   * It has much better performance of drawing image rather than drawing a vector path.
	   * @param {module:zrender/graphic/Path} e
	   * @param {number} width
	   * @param {number} height
	   */
	  pathToImage: function (e, dpr) {
	    return this.painter.pathToImage(e, dpr);
	  },

	  /**
	   * Set default cursor
	   * @param {string} [cursorStyle='default'] 例如 crosshair
	   */
	  setCursorStyle: function (cursorStyle) {
	    this.handler.setCursorStyle(cursorStyle);
	  },

	  /**
	   * Find hovered element
	   * @param {number} x
	   * @param {number} y
	   * @return {Object} {target, topTarget}
	   */
	  findHover: function (x, y) {
	    return this.handler.findHover(x, y);
	  },

	  /**
	   * Bind event
	   *
	   * @param {string} eventName Event name
	   * @param {Function} eventHandler Handler function
	   * @param {Object} [context] Context object
	   */
	  on: function (eventName, eventHandler, context) {
	    this.handler.on(eventName, eventHandler, context);
	  },

	  /**
	   * Unbind event
	   * @param {string} eventName Event name
	   * @param {Function} [eventHandler] Handler function
	   */
	  off: function (eventName, eventHandler) {
	    this.handler.off(eventName, eventHandler);
	  },

	  /**
	   * Trigger event manually
	   *
	   * @param {string} eventName Event name
	   * @param {event=} event Event object
	   */
	  trigger: function (eventName, event) {
	    this.handler.trigger(eventName, event);
	  },

	  /**
	   * Clear all objects and the canvas.
	   */
	  clear: function () {
	    this.storage.delRoot();
	    this.painter.clear();
	  },

	  /**
	   * Dispose self.
	   */
	  dispose: function () {
	    this.animation.stop();
	    this.clear();
	    this.storage.dispose();
	    this.painter.dispose();
	    this.handler.dispose();
	    this.animation = this.storage = this.painter = this.handler = null;
	    delInstance(this.id);
	  }
	};
	exports.version = version;
	exports.init = init;
	exports.dispose = dispose;
	exports.getInstance = getInstance;
	exports.registerPainter = registerPainter;

/***/ }),
/* 179 */
/***/ (function(module, exports) {

	/**
	 * zrender: 生成唯一id
	 *
	 * @author errorrik (errorrik@gmail.com)
	 */
	var idStart = 0x0907;

	function _default() {
	  return idStart++;
	}

	module.exports = _default;

/***/ }),
/* 180 */
/***/ (function(module, exports) {

	/**
	 * echarts设备环境识别
	 *
	 * @desc echarts基于Canvas，纯Javascript图表库，提供直观，生动，可交互，可个性化定制的数据统计图表。
	 * @author firede[firede@firede.us]
	 * @desc thanks zepto.
	 */
	var env = {};

	if (typeof wx === 'object' && typeof wx.getSystemInfoSync === 'function') {
	  // In Weixin Application
	  env = {
	    browser: {},
	    os: {},
	    node: false,
	    wxa: true,
	    // Weixin Application
	    canvasSupported: true,
	    svgSupported: false,
	    touchEventsSupported: true
	  };
	} else if (typeof document === 'undefined' && typeof self !== 'undefined') {
	  // In worker
	  env = {
	    browser: {},
	    os: {},
	    node: false,
	    worker: true,
	    canvasSupported: true
	  };
	} else if (typeof navigator === 'undefined') {
	  // In node
	  env = {
	    browser: {},
	    os: {},
	    node: true,
	    worker: false,
	    // Assume canvas is supported
	    canvasSupported: true,
	    svgSupported: true
	  };
	} else {
	  env = detect(navigator.userAgent);
	}

	var _default = env; // Zepto.js
	// (c) 2010-2013 Thomas Fuchs
	// Zepto.js may be freely distributed under the MIT license.

	function detect(ua) {
	  var os = {};
	  var browser = {}; // var webkit = ua.match(/Web[kK]it[\/]{0,1}([\d.]+)/);
	  // var android = ua.match(/(Android);?[\s\/]+([\d.]+)?/);
	  // var ipad = ua.match(/(iPad).*OS\s([\d_]+)/);
	  // var ipod = ua.match(/(iPod)(.*OS\s([\d_]+))?/);
	  // var iphone = !ipad && ua.match(/(iPhone\sOS)\s([\d_]+)/);
	  // var webos = ua.match(/(webOS|hpwOS)[\s\/]([\d.]+)/);
	  // var touchpad = webos && ua.match(/TouchPad/);
	  // var kindle = ua.match(/Kindle\/([\d.]+)/);
	  // var silk = ua.match(/Silk\/([\d._]+)/);
	  // var blackberry = ua.match(/(BlackBerry).*Version\/([\d.]+)/);
	  // var bb10 = ua.match(/(BB10).*Version\/([\d.]+)/);
	  // var rimtabletos = ua.match(/(RIM\sTablet\sOS)\s([\d.]+)/);
	  // var playbook = ua.match(/PlayBook/);
	  // var chrome = ua.match(/Chrome\/([\d.]+)/) || ua.match(/CriOS\/([\d.]+)/);

	  var firefox = ua.match(/Firefox\/([\d.]+)/); // var safari = webkit && ua.match(/Mobile\//) && !chrome;
	  // var webview = ua.match(/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/) && !chrome;

	  var ie = ua.match(/MSIE\s([\d.]+)/) // IE 11 Trident/7.0; rv:11.0
	  || ua.match(/Trident\/.+?rv:(([\d.]+))/);
	  var edge = ua.match(/Edge\/([\d.]+)/); // IE 12 and 12+

	  var weChat = /micromessenger/i.test(ua); // Todo: clean this up with a better OS/browser seperation:
	  // - discern (more) between multiple browsers on android
	  // - decide if kindle fire in silk mode is android or not
	  // - Firefox on Android doesn't specify the Android version
	  // - possibly devide in os, device and browser hashes
	  // if (browser.webkit = !!webkit) browser.version = webkit[1];
	  // if (android) os.android = true, os.version = android[2];
	  // if (iphone && !ipod) os.ios = os.iphone = true, os.version = iphone[2].replace(/_/g, '.');
	  // if (ipad) os.ios = os.ipad = true, os.version = ipad[2].replace(/_/g, '.');
	  // if (ipod) os.ios = os.ipod = true, os.version = ipod[3] ? ipod[3].replace(/_/g, '.') : null;
	  // if (webos) os.webos = true, os.version = webos[2];
	  // if (touchpad) os.touchpad = true;
	  // if (blackberry) os.blackberry = true, os.version = blackberry[2];
	  // if (bb10) os.bb10 = true, os.version = bb10[2];
	  // if (rimtabletos) os.rimtabletos = true, os.version = rimtabletos[2];
	  // if (playbook) browser.playbook = true;
	  // if (kindle) os.kindle = true, os.version = kindle[1];
	  // if (silk) browser.silk = true, browser.version = silk[1];
	  // if (!silk && os.android && ua.match(/Kindle Fire/)) browser.silk = true;
	  // if (chrome) browser.chrome = true, browser.version = chrome[1];

	  if (firefox) {
	    browser.firefox = true;
	    browser.version = firefox[1];
	  } // if (safari && (ua.match(/Safari/) || !!os.ios)) browser.safari = true;
	  // if (webview) browser.webview = true;


	  if (ie) {
	    browser.ie = true;
	    browser.version = ie[1];
	  }

	  if (edge) {
	    browser.edge = true;
	    browser.version = edge[1];
	  } // It is difficult to detect WeChat in Win Phone precisely, because ua can
	  // not be set on win phone. So we do not consider Win Phone.


	  if (weChat) {
	    browser.weChat = true;
	  } // os.tablet = !!(ipad || playbook || (android && !ua.match(/Mobile/)) ||
	  //     (firefox && ua.match(/Tablet/)) || (ie && !ua.match(/Phone/) && ua.match(/Touch/)));
	  // os.phone  = !!(!os.tablet && !os.ipod && (android || iphone || webos ||
	  //     (chrome && ua.match(/Android/)) || (chrome && ua.match(/CriOS\/([\d.]+)/)) ||
	  //     (firefox && ua.match(/Mobile/)) || (ie && ua.match(/Touch/))));


	  return {
	    browser: browser,
	    os: os,
	    node: false,
	    // 原生canvas支持，改极端点了
	    // canvasSupported : !(browser.ie && parseFloat(browser.version) < 9)
	    canvasSupported: !!document.createElement('canvas').getContext,
	    svgSupported: typeof SVGRect !== 'undefined',
	    // works on most browsers
	    // IE10/11 does not support touch event, and MS Edge supports them but not by
	    // default, so we dont check navigator.maxTouchPoints for them here.
	    touchEventsSupported: 'ontouchstart' in window && !browser.ie && !browser.edge,
	    // <http://caniuse.com/#search=pointer%20event>.
	    pointerEventsSupported: 'onpointerdown' in window // Firefox supports pointer but not by default, only MS browsers are reliable on pointer
	    // events currently. So we dont use that on other browsers unless tested sufficiently.
	    // Although IE 10 supports pointer event, it use old style and is different from the
	    // standard. So we exclude that. (IE 10 is hardly used on touch device)
	    && (browser.edge || browser.ie && browser.version >= 11) // passiveSupported: detectPassiveSupport()

	  };
	} // See https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md#feature-detection
	// function detectPassiveSupport() {
	//     // Test via a getter in the options object to see if the passive property is accessed
	//     var supportsPassive = false;
	//     try {
	//         var opts = Object.defineProperty({}, 'passive', {
	//             get: function() {
	//                 supportsPassive = true;
	//             }
	//         });
	//         window.addEventListener('testPassive', function() {}, opts);
	//     } catch (e) {
	//     }
	//     return supportsPassive;
	// }


	module.exports = _default;

/***/ }),
/* 181 */
/***/ (function(module, exports) {

	/**
	 * @module zrender/core/util
	 */
	// 用于处理merge时无法遍历Date等对象的问题
	var BUILTIN_OBJECT = {
	  '[object Function]': 1,
	  '[object RegExp]': 1,
	  '[object Date]': 1,
	  '[object Error]': 1,
	  '[object CanvasGradient]': 1,
	  '[object CanvasPattern]': 1,
	  // For node-canvas
	  '[object Image]': 1,
	  '[object Canvas]': 1
	};
	var TYPED_ARRAY = {
	  '[object Int8Array]': 1,
	  '[object Uint8Array]': 1,
	  '[object Uint8ClampedArray]': 1,
	  '[object Int16Array]': 1,
	  '[object Uint16Array]': 1,
	  '[object Int32Array]': 1,
	  '[object Uint32Array]': 1,
	  '[object Float32Array]': 1,
	  '[object Float64Array]': 1
	};
	var objToString = Object.prototype.toString;
	var arrayProto = Array.prototype;
	var nativeForEach = arrayProto.forEach;
	var nativeFilter = arrayProto.filter;
	var nativeSlice = arrayProto.slice;
	var nativeMap = arrayProto.map;
	var nativeReduce = arrayProto.reduce; // Avoid assign to an exported variable, for transforming to cjs.

	var methods = {};

	function $override(name, fn) {
	  // Clear ctx instance for different environment
	  if (name === 'createCanvas') {
	    _ctx = null;
	  }

	  methods[name] = fn;
	}
	/**
	 * Those data types can be cloned:
	 *     Plain object, Array, TypedArray, number, string, null, undefined.
	 * Those data types will be assgined using the orginal data:
	 *     BUILTIN_OBJECT
	 * Instance of user defined class will be cloned to a plain object, without
	 * properties in prototype.
	 * Other data types is not supported (not sure what will happen).
	 *
	 * Caution: do not support clone Date, for performance consideration.
	 * (There might be a large number of date in `series.data`).
	 * So date should not be modified in and out of echarts.
	 *
	 * @param {*} source
	 * @return {*} new
	 */


	function clone(source) {
	  if (source == null || typeof source != 'object') {
	    return source;
	  }

	  var result = source;
	  var typeStr = objToString.call(source);

	  if (typeStr === '[object Array]') {
	    if (!isPrimitive(source)) {
	      result = [];

	      for (var i = 0, len = source.length; i < len; i++) {
	        result[i] = clone(source[i]);
	      }
	    }
	  } else if (TYPED_ARRAY[typeStr]) {
	    if (!isPrimitive(source)) {
	      var Ctor = source.constructor;

	      if (source.constructor.from) {
	        result = Ctor.from(source);
	      } else {
	        result = new Ctor(source.length);

	        for (var i = 0, len = source.length; i < len; i++) {
	          result[i] = clone(source[i]);
	        }
	      }
	    }
	  } else if (!BUILTIN_OBJECT[typeStr] && !isPrimitive(source) && !isDom(source)) {
	    result = {};

	    for (var key in source) {
	      if (source.hasOwnProperty(key)) {
	        result[key] = clone(source[key]);
	      }
	    }
	  }

	  return result;
	}
	/**
	 * @memberOf module:zrender/core/util
	 * @param {*} target
	 * @param {*} source
	 * @param {boolean} [overwrite=false]
	 */


	function merge(target, source, overwrite) {
	  // We should escapse that source is string
	  // and enter for ... in ...
	  if (!isObject(source) || !isObject(target)) {
	    return overwrite ? clone(source) : target;
	  }

	  for (var key in source) {
	    if (source.hasOwnProperty(key)) {
	      var targetProp = target[key];
	      var sourceProp = source[key];

	      if (isObject(sourceProp) && isObject(targetProp) && !isArray(sourceProp) && !isArray(targetProp) && !isDom(sourceProp) && !isDom(targetProp) && !isBuiltInObject(sourceProp) && !isBuiltInObject(targetProp) && !isPrimitive(sourceProp) && !isPrimitive(targetProp)) {
	        // 如果需要递归覆盖，就递归调用merge
	        merge(targetProp, sourceProp, overwrite);
	      } else if (overwrite || !(key in target)) {
	        // 否则只处理overwrite为true，或者在目标对象中没有此属性的情况
	        // NOTE，在 target[key] 不存在的时候也是直接覆盖
	        target[key] = clone(source[key], true);
	      }
	    }
	  }

	  return target;
	}
	/**
	 * @param {Array} targetAndSources The first item is target, and the rests are source.
	 * @param {boolean} [overwrite=false]
	 * @return {*} target
	 */


	function mergeAll(targetAndSources, overwrite) {
	  var result = targetAndSources[0];

	  for (var i = 1, len = targetAndSources.length; i < len; i++) {
	    result = merge(result, targetAndSources[i], overwrite);
	  }

	  return result;
	}
	/**
	 * @param {*} target
	 * @param {*} source
	 * @memberOf module:zrender/core/util
	 */


	function extend(target, source) {
	  for (var key in source) {
	    if (source.hasOwnProperty(key)) {
	      target[key] = source[key];
	    }
	  }

	  return target;
	}
	/**
	 * @param {*} target
	 * @param {*} source
	 * @param {boolean} [overlay=false]
	 * @memberOf module:zrender/core/util
	 */


	function defaults(target, source, overlay) {
	  for (var key in source) {
	    if (source.hasOwnProperty(key) && (overlay ? source[key] != null : target[key] == null)) {
	      target[key] = source[key];
	    }
	  }

	  return target;
	}

	var createCanvas = function () {
	  return methods.createCanvas();
	};

	methods.createCanvas = function () {
	  return document.createElement('canvas');
	}; // FIXME


	var _ctx;

	function getContext() {
	  if (!_ctx) {
	    // Use util.createCanvas instead of createCanvas
	    // because createCanvas may be overwritten in different environment
	    _ctx = createCanvas().getContext('2d');
	  }

	  return _ctx;
	}
	/**
	 * 查询数组中元素的index
	 * @memberOf module:zrender/core/util
	 */


	function indexOf(array, value) {
	  if (array) {
	    if (array.indexOf) {
	      return array.indexOf(value);
	    }

	    for (var i = 0, len = array.length; i < len; i++) {
	      if (array[i] === value) {
	        return i;
	      }
	    }
	  }

	  return -1;
	}
	/**
	 * 构造类继承关系
	 *
	 * @memberOf module:zrender/core/util
	 * @param {Function} clazz 源类
	 * @param {Function} baseClazz 基类
	 */


	function inherits(clazz, baseClazz) {
	  var clazzPrototype = clazz.prototype;

	  function F() {}

	  F.prototype = baseClazz.prototype;
	  clazz.prototype = new F();

	  for (var prop in clazzPrototype) {
	    clazz.prototype[prop] = clazzPrototype[prop];
	  }

	  clazz.prototype.constructor = clazz;
	  clazz.superClass = baseClazz;
	}
	/**
	 * @memberOf module:zrender/core/util
	 * @param {Object|Function} target
	 * @param {Object|Function} sorce
	 * @param {boolean} overlay
	 */


	function mixin(target, source, overlay) {
	  target = 'prototype' in target ? target.prototype : target;
	  source = 'prototype' in source ? source.prototype : source;
	  defaults(target, source, overlay);
	}
	/**
	 * Consider typed array.
	 * @param {Array|TypedArray} data
	 */


	function isArrayLike(data) {
	  if (!data) {
	    return;
	  }

	  if (typeof data == 'string') {
	    return false;
	  }

	  return typeof data.length == 'number';
	}
	/**
	 * 数组或对象遍历
	 * @memberOf module:zrender/core/util
	 * @param {Object|Array} obj
	 * @param {Function} cb
	 * @param {*} [context]
	 */


	function each(obj, cb, context) {
	  if (!(obj && cb)) {
	    return;
	  }

	  if (obj.forEach && obj.forEach === nativeForEach) {
	    obj.forEach(cb, context);
	  } else if (obj.length === +obj.length) {
	    for (var i = 0, len = obj.length; i < len; i++) {
	      cb.call(context, obj[i], i, obj);
	    }
	  } else {
	    for (var key in obj) {
	      if (obj.hasOwnProperty(key)) {
	        cb.call(context, obj[key], key, obj);
	      }
	    }
	  }
	}
	/**
	 * 数组映射
	 * @memberOf module:zrender/core/util
	 * @param {Array} obj
	 * @param {Function} cb
	 * @param {*} [context]
	 * @return {Array}
	 */


	function map(obj, cb, context) {
	  if (!(obj && cb)) {
	    return;
	  }

	  if (obj.map && obj.map === nativeMap) {
	    return obj.map(cb, context);
	  } else {
	    var result = [];

	    for (var i = 0, len = obj.length; i < len; i++) {
	      result.push(cb.call(context, obj[i], i, obj));
	    }

	    return result;
	  }
	}
	/**
	 * @memberOf module:zrender/core/util
	 * @param {Array} obj
	 * @param {Function} cb
	 * @param {Object} [memo]
	 * @param {*} [context]
	 * @return {Array}
	 */


	function reduce(obj, cb, memo, context) {
	  if (!(obj && cb)) {
	    return;
	  }

	  if (obj.reduce && obj.reduce === nativeReduce) {
	    return obj.reduce(cb, memo, context);
	  } else {
	    for (var i = 0, len = obj.length; i < len; i++) {
	      memo = cb.call(context, memo, obj[i], i, obj);
	    }

	    return memo;
	  }
	}
	/**
	 * 数组过滤
	 * @memberOf module:zrender/core/util
	 * @param {Array} obj
	 * @param {Function} cb
	 * @param {*} [context]
	 * @return {Array}
	 */


	function filter(obj, cb, context) {
	  if (!(obj && cb)) {
	    return;
	  }

	  if (obj.filter && obj.filter === nativeFilter) {
	    return obj.filter(cb, context);
	  } else {
	    var result = [];

	    for (var i = 0, len = obj.length; i < len; i++) {
	      if (cb.call(context, obj[i], i, obj)) {
	        result.push(obj[i]);
	      }
	    }

	    return result;
	  }
	}
	/**
	 * 数组项查找
	 * @memberOf module:zrender/core/util
	 * @param {Array} obj
	 * @param {Function} cb
	 * @param {*} [context]
	 * @return {*}
	 */


	function find(obj, cb, context) {
	  if (!(obj && cb)) {
	    return;
	  }

	  for (var i = 0, len = obj.length; i < len; i++) {
	    if (cb.call(context, obj[i], i, obj)) {
	      return obj[i];
	    }
	  }
	}
	/**
	 * @memberOf module:zrender/core/util
	 * @param {Function} func
	 * @param {*} context
	 * @return {Function}
	 */


	function bind(func, context) {
	  var args = nativeSlice.call(arguments, 2);
	  return function () {
	    return func.apply(context, args.concat(nativeSlice.call(arguments)));
	  };
	}
	/**
	 * @memberOf module:zrender/core/util
	 * @param {Function} func
	 * @return {Function}
	 */


	function curry(func) {
	  var args = nativeSlice.call(arguments, 1);
	  return function () {
	    return func.apply(this, args.concat(nativeSlice.call(arguments)));
	  };
	}
	/**
	 * @memberOf module:zrender/core/util
	 * @param {*} value
	 * @return {boolean}
	 */


	function isArray(value) {
	  return objToString.call(value) === '[object Array]';
	}
	/**
	 * @memberOf module:zrender/core/util
	 * @param {*} value
	 * @return {boolean}
	 */


	function isFunction(value) {
	  return typeof value === 'function';
	}
	/**
	 * @memberOf module:zrender/core/util
	 * @param {*} value
	 * @return {boolean}
	 */


	function isString(value) {
	  return objToString.call(value) === '[object String]';
	}
	/**
	 * @memberOf module:zrender/core/util
	 * @param {*} value
	 * @return {boolean}
	 */


	function isObject(value) {
	  // Avoid a V8 JIT bug in Chrome 19-20.
	  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
	  var type = typeof value;
	  return type === 'function' || !!value && type == 'object';
	}
	/**
	 * @memberOf module:zrender/core/util
	 * @param {*} value
	 * @return {boolean}
	 */


	function isBuiltInObject(value) {
	  return !!BUILTIN_OBJECT[objToString.call(value)];
	}
	/**
	 * @memberOf module:zrender/core/util
	 * @param {*} value
	 * @return {boolean}
	 */


	function isTypedArray(value) {
	  return !!TYPED_ARRAY[objToString.call(value)];
	}
	/**
	 * @memberOf module:zrender/core/util
	 * @param {*} value
	 * @return {boolean}
	 */


	function isDom(value) {
	  return typeof value === 'object' && typeof value.nodeType === 'number' && typeof value.ownerDocument === 'object';
	}
	/**
	 * Whether is exactly NaN. Notice isNaN('a') returns true.
	 * @param {*} value
	 * @return {boolean}
	 */


	function eqNaN(value) {
	  return value !== value;
	}
	/**
	 * If value1 is not null, then return value1, otherwise judget rest of values.
	 * Low performance.
	 * @memberOf module:zrender/core/util
	 * @return {*} Final value
	 */


	function retrieve(values) {
	  for (var i = 0, len = arguments.length; i < len; i++) {
	    if (arguments[i] != null) {
	      return arguments[i];
	    }
	  }
	}

	function retrieve2(value0, value1) {
	  return value0 != null ? value0 : value1;
	}

	function retrieve3(value0, value1, value2) {
	  return value0 != null ? value0 : value1 != null ? value1 : value2;
	}
	/**
	 * @memberOf module:zrender/core/util
	 * @param {Array} arr
	 * @param {number} startIndex
	 * @param {number} endIndex
	 * @return {Array}
	 */


	function slice() {
	  return Function.call.apply(nativeSlice, arguments);
	}
	/**
	 * Normalize css liked array configuration
	 * e.g.
	 *  3 => [3, 3, 3, 3]
	 *  [4, 2] => [4, 2, 4, 2]
	 *  [4, 3, 2] => [4, 3, 2, 3]
	 * @param {number|Array.<number>} val
	 * @return {Array.<number>}
	 */


	function normalizeCssArray(val) {
	  if (typeof val === 'number') {
	    return [val, val, val, val];
	  }

	  var len = val.length;

	  if (len === 2) {
	    // vertical | horizontal
	    return [val[0], val[1], val[0], val[1]];
	  } else if (len === 3) {
	    // top | horizontal | bottom
	    return [val[0], val[1], val[2], val[1]];
	  }

	  return val;
	}
	/**
	 * @memberOf module:zrender/core/util
	 * @param {boolean} condition
	 * @param {string} message
	 */


	function assert(condition, message) {
	  if (!condition) {
	    throw new Error(message);
	  }
	}
	/**
	 * @memberOf module:zrender/core/util
	 * @param {string} str string to be trimed
	 * @return {string} trimed string
	 */


	function trim(str) {
	  if (str == null) {
	    return null;
	  } else if (typeof str.trim === 'function') {
	    return str.trim();
	  } else {
	    return str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '');
	  }
	}

	var primitiveKey = '__ec_primitive__';
	/**
	 * Set an object as primitive to be ignored traversing children in clone or merge
	 */

	function setAsPrimitive(obj) {
	  obj[primitiveKey] = true;
	}

	function isPrimitive(obj) {
	  return obj[primitiveKey];
	}
	/**
	 * @constructor
	 * @param {Object} obj Only apply `ownProperty`.
	 */


	function HashMap(obj) {
	  var isArr = isArray(obj);
	  var thisMap = this;
	  obj instanceof HashMap ? obj.each(visit) : obj && each(obj, visit);

	  function visit(value, key) {
	    isArr ? thisMap.set(value, key) : thisMap.set(key, value);
	  }
	} // Add prefix to avoid conflict with Object.prototype.


	HashMap.prototype = {
	  constructor: HashMap,
	  // Do not provide `has` method to avoid defining what is `has`.
	  // (We usually treat `null` and `undefined` as the same, different
	  // from ES6 Map).
	  get: function (key) {
	    return this.hasOwnProperty(key) ? this[key] : null;
	  },
	  set: function (key, value) {
	    // Comparing with invocation chaining, `return value` is more commonly
	    // used in this case: `var someVal = map.set('a', genVal());`
	    return this[key] = value;
	  },
	  // Although util.each can be performed on this hashMap directly, user
	  // should not use the exposed keys, who are prefixed.
	  each: function (cb, context) {
	    context !== void 0 && (cb = bind(cb, context));

	    for (var key in this) {
	      this.hasOwnProperty(key) && cb(this[key], key);
	    }
	  },
	  // Do not use this method if performance sensitive.
	  removeKey: function (key) {
	    delete this[key];
	  }
	};

	function createHashMap(obj) {
	  return new HashMap(obj);
	}

	function concatArray(a, b) {
	  var newArray = new a.constructor(a.length + b.length);

	  for (var i = 0; i < a.length; i++) {
	    newArray[i] = a[i];
	  }

	  var offset = a.length;

	  for (i = 0; i < b.length; i++) {
	    newArray[i + offset] = b[i];
	  }

	  return newArray;
	}

	function noop() {}

	exports.$override = $override;
	exports.clone = clone;
	exports.merge = merge;
	exports.mergeAll = mergeAll;
	exports.extend = extend;
	exports.defaults = defaults;
	exports.createCanvas = createCanvas;
	exports.getContext = getContext;
	exports.indexOf = indexOf;
	exports.inherits = inherits;
	exports.mixin = mixin;
	exports.isArrayLike = isArrayLike;
	exports.each = each;
	exports.map = map;
	exports.reduce = reduce;
	exports.filter = filter;
	exports.find = find;
	exports.bind = bind;
	exports.curry = curry;
	exports.isArray = isArray;
	exports.isFunction = isFunction;
	exports.isString = isString;
	exports.isObject = isObject;
	exports.isBuiltInObject = isBuiltInObject;
	exports.isTypedArray = isTypedArray;
	exports.isDom = isDom;
	exports.eqNaN = eqNaN;
	exports.retrieve = retrieve;
	exports.retrieve2 = retrieve2;
	exports.retrieve3 = retrieve3;
	exports.slice = slice;
	exports.normalizeCssArray = normalizeCssArray;
	exports.assert = assert;
	exports.trim = trim;
	exports.setAsPrimitive = setAsPrimitive;
	exports.isPrimitive = isPrimitive;
	exports.createHashMap = createHashMap;
	exports.concatArray = concatArray;
	exports.noop = noop;

/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

	var util = __webpack_require__(181);

	var vec2 = __webpack_require__(183);

	var Draggable = __webpack_require__(184);

	var Eventful = __webpack_require__(185);

	var SILENT = 'silent';

	function makeEventPacket(eveType, targetInfo, event) {
	  return {
	    type: eveType,
	    event: event,
	    // target can only be an element that is not silent.
	    target: targetInfo.target,
	    // topTarget can be a silent element.
	    topTarget: targetInfo.topTarget,
	    cancelBubble: false,
	    offsetX: event.zrX,
	    offsetY: event.zrY,
	    gestureEvent: event.gestureEvent,
	    pinchX: event.pinchX,
	    pinchY: event.pinchY,
	    pinchScale: event.pinchScale,
	    wheelDelta: event.zrDelta,
	    zrByTouch: event.zrByTouch,
	    which: event.which
	  };
	}

	function EmptyProxy() {}

	EmptyProxy.prototype.dispose = function () {};

	var handlerNames = ['click', 'dblclick', 'mousewheel', 'mouseout', 'mouseup', 'mousedown', 'mousemove', 'contextmenu'];
	/**
	 * @alias module:zrender/Handler
	 * @constructor
	 * @extends module:zrender/mixin/Eventful
	 * @param {module:zrender/Storage} storage Storage instance.
	 * @param {module:zrender/Painter} painter Painter instance.
	 * @param {module:zrender/dom/HandlerProxy} proxy HandlerProxy instance.
	 * @param {HTMLElement} painterRoot painter.root (not painter.getViewportRoot()).
	 */

	var Handler = function (storage, painter, proxy, painterRoot) {
	  Eventful.call(this);
	  this.storage = storage;
	  this.painter = painter;
	  this.painterRoot = painterRoot;
	  proxy = proxy || new EmptyProxy();
	  /**
	   * Proxy of event. can be Dom, WebGLSurface, etc.
	   */

	  this.proxy = null;
	  /**
	   * {target, topTarget, x, y}
	   * @private
	   * @type {Object}
	   */

	  this._hovered = {};
	  /**
	   * @private
	   * @type {Date}
	   */

	  this._lastTouchMoment;
	  /**
	   * @private
	   * @type {number}
	   */

	  this._lastX;
	  /**
	   * @private
	   * @type {number}
	   */

	  this._lastY;
	  Draggable.call(this);
	  this.setHandlerProxy(proxy);
	};

	Handler.prototype = {
	  constructor: Handler,
	  setHandlerProxy: function (proxy) {
	    if (this.proxy) {
	      this.proxy.dispose();
	    }

	    if (proxy) {
	      util.each(handlerNames, function (name) {
	        proxy.on && proxy.on(name, this[name], this);
	      }, this); // Attach handler

	      proxy.handler = this;
	    }

	    this.proxy = proxy;
	  },
	  mousemove: function (event) {
	    var x = event.zrX;
	    var y = event.zrY;
	    var lastHovered = this._hovered;
	    var lastHoveredTarget = lastHovered.target; // If lastHoveredTarget is removed from zr (detected by '__zr') by some API call
	    // (like 'setOption' or 'dispatchAction') in event handlers, we should find
	    // lastHovered again here. Otherwise 'mouseout' can not be triggered normally.
	    // See #6198.

	    if (lastHoveredTarget && !lastHoveredTarget.__zr) {
	      lastHovered = this.findHover(lastHovered.x, lastHovered.y);
	      lastHoveredTarget = lastHovered.target;
	    }

	    var hovered = this._hovered = this.findHover(x, y);
	    var hoveredTarget = hovered.target;
	    var proxy = this.proxy;
	    proxy.setCursor && proxy.setCursor(hoveredTarget ? hoveredTarget.cursor : 'default'); // Mouse out on previous hovered element

	    if (lastHoveredTarget && hoveredTarget !== lastHoveredTarget) {
	      this.dispatchToElement(lastHovered, 'mouseout', event);
	    } // Mouse moving on one element


	    this.dispatchToElement(hovered, 'mousemove', event); // Mouse over on a new element

	    if (hoveredTarget && hoveredTarget !== lastHoveredTarget) {
	      this.dispatchToElement(hovered, 'mouseover', event);
	    }
	  },
	  mouseout: function (event) {
	    this.dispatchToElement(this._hovered, 'mouseout', event); // There might be some doms created by upper layer application
	    // at the same level of painter.getViewportRoot() (e.g., tooltip
	    // dom created by echarts), where 'globalout' event should not
	    // be triggered when mouse enters these doms. (But 'mouseout'
	    // should be triggered at the original hovered element as usual).

	    var element = event.toElement || event.relatedTarget;
	    var innerDom;

	    do {
	      element = element && element.parentNode;
	    } while (element && element.nodeType != 9 && !(innerDom = element === this.painterRoot));

	    !innerDom && this.trigger('globalout', {
	      event: event
	    });
	  },

	  /**
	   * Resize
	   */
	  resize: function (event) {
	    this._hovered = {};
	  },

	  /**
	   * Dispatch event
	   * @param {string} eventName
	   * @param {event=} eventArgs
	   */
	  dispatch: function (eventName, eventArgs) {
	    var handler = this[eventName];
	    handler && handler.call(this, eventArgs);
	  },

	  /**
	   * Dispose
	   */
	  dispose: function () {
	    this.proxy.dispose();
	    this.storage = this.proxy = this.painter = null;
	  },

	  /**
	   * 设置默认的cursor style
	   * @param {string} [cursorStyle='default'] 例如 crosshair
	   */
	  setCursorStyle: function (cursorStyle) {
	    var proxy = this.proxy;
	    proxy.setCursor && proxy.setCursor(cursorStyle);
	  },

	  /**
	   * 事件分发代理
	   *
	   * @private
	   * @param {Object} targetInfo {target, topTarget} 目标图形元素
	   * @param {string} eventName 事件名称
	   * @param {Object} event 事件对象
	   */
	  dispatchToElement: function (targetInfo, eventName, event) {
	    targetInfo = targetInfo || {};
	    var el = targetInfo.target;

	    if (el && el.silent) {
	      return;
	    }

	    var eventHandler = 'on' + eventName;
	    var eventPacket = makeEventPacket(eventName, targetInfo, event);

	    while (el) {
	      el[eventHandler] && (eventPacket.cancelBubble = el[eventHandler].call(el, eventPacket));
	      el.trigger(eventName, eventPacket);
	      el = el.parent;

	      if (eventPacket.cancelBubble) {
	        break;
	      }
	    }

	    if (!eventPacket.cancelBubble) {
	      // 冒泡到顶级 zrender 对象
	      this.trigger(eventName, eventPacket); // 分发事件到用户自定义层
	      // 用户有可能在全局 click 事件中 dispose，所以需要判断下 painter 是否存在

	      this.painter && this.painter.eachOtherLayer(function (layer) {
	        if (typeof layer[eventHandler] == 'function') {
	          layer[eventHandler].call(layer, eventPacket);
	        }

	        if (layer.trigger) {
	          layer.trigger(eventName, eventPacket);
	        }
	      });
	    }
	  },

	  /**
	   * @private
	   * @param {number} x
	   * @param {number} y
	   * @param {module:zrender/graphic/Displayable} exclude
	   * @return {model:zrender/Element}
	   * @method
	   */
	  findHover: function (x, y, exclude) {
	    var list = this.storage.getDisplayList();
	    var out = {
	      x: x,
	      y: y
	    };

	    for (var i = list.length - 1; i >= 0; i--) {
	      var hoverCheckResult;

	      if (list[i] !== exclude // getDisplayList may include ignored item in VML mode
	      && !list[i].ignore && (hoverCheckResult = isHover(list[i], x, y))) {
	        !out.topTarget && (out.topTarget = list[i]);

	        if (hoverCheckResult !== SILENT) {
	          out.target = list[i];
	          break;
	        }
	      }
	    }

	    return out;
	  }
	}; // Common handlers

	util.each(['click', 'mousedown', 'mouseup', 'mousewheel', 'dblclick', 'contextmenu'], function (name) {
	  Handler.prototype[name] = function (event) {
	    // Find hover again to avoid click event is dispatched manually. Or click is triggered without mouseover
	    var hovered = this.findHover(event.zrX, event.zrY);
	    var hoveredTarget = hovered.target;

	    if (name === 'mousedown') {
	      this._downEl = hoveredTarget;
	      this._downPoint = [event.zrX, event.zrY]; // In case click triggered before mouseup

	      this._upEl = hoveredTarget;
	    } else if (name === 'mouseup') {
	      this._upEl = hoveredTarget;
	    } else if (name === 'click') {
	      if (this._downEl !== this._upEl // Original click event is triggered on the whole canvas element,
	      // including the case that `mousedown` - `mousemove` - `mouseup`,
	      // which should be filtered, otherwise it will bring trouble to
	      // pan and zoom.
	      || !this._downPoint // Arbitrary value
	      || vec2.dist(this._downPoint, [event.zrX, event.zrY]) > 4) {
	        return;
	      }

	      this._downPoint = null;
	    }

	    this.dispatchToElement(hovered, name, event);
	  };
	});

	function isHover(displayable, x, y) {
	  if (displayable[displayable.rectHover ? 'rectContain' : 'contain'](x, y)) {
	    var el = displayable;
	    var isSilent;

	    while (el) {
	      // If clipped by ancestor.
	      // FIXME: If clipPath has neither stroke nor fill,
	      // el.clipPath.contain(x, y) will always return false.
	      if (el.clipPath && !el.clipPath.contain(x, y)) {
	        return false;
	      }

	      if (el.silent) {
	        isSilent = true;
	      }

	      el = el.parent;
	    }

	    return isSilent ? SILENT : true;
	  }

	  return false;
	}

	util.mixin(Handler, Eventful);
	util.mixin(Handler, Draggable);
	var _default = Handler;
	module.exports = _default;

/***/ }),
/* 183 */
/***/ (function(module, exports) {

	var ArrayCtor = typeof Float32Array === 'undefined' ? Array : Float32Array;
	/**
	 * 创建一个向量
	 * @param {number} [x=0]
	 * @param {number} [y=0]
	 * @return {Vector2}
	 */

	function create(x, y) {
	  var out = new ArrayCtor(2);

	  if (x == null) {
	    x = 0;
	  }

	  if (y == null) {
	    y = 0;
	  }

	  out[0] = x;
	  out[1] = y;
	  return out;
	}
	/**
	 * 复制向量数据
	 * @param {Vector2} out
	 * @param {Vector2} v
	 * @return {Vector2}
	 */


	function copy(out, v) {
	  out[0] = v[0];
	  out[1] = v[1];
	  return out;
	}
	/**
	 * 克隆一个向量
	 * @param {Vector2} v
	 * @return {Vector2}
	 */


	function clone(v) {
	  var out = new ArrayCtor(2);
	  out[0] = v[0];
	  out[1] = v[1];
	  return out;
	}
	/**
	 * 设置向量的两个项
	 * @param {Vector2} out
	 * @param {number} a
	 * @param {number} b
	 * @return {Vector2} 结果
	 */


	function set(out, a, b) {
	  out[0] = a;
	  out[1] = b;
	  return out;
	}
	/**
	 * 向量相加
	 * @param {Vector2} out
	 * @param {Vector2} v1
	 * @param {Vector2} v2
	 */


	function add(out, v1, v2) {
	  out[0] = v1[0] + v2[0];
	  out[1] = v1[1] + v2[1];
	  return out;
	}
	/**
	 * 向量缩放后相加
	 * @param {Vector2} out
	 * @param {Vector2} v1
	 * @param {Vector2} v2
	 * @param {number} a
	 */


	function scaleAndAdd(out, v1, v2, a) {
	  out[0] = v1[0] + v2[0] * a;
	  out[1] = v1[1] + v2[1] * a;
	  return out;
	}
	/**
	 * 向量相减
	 * @param {Vector2} out
	 * @param {Vector2} v1
	 * @param {Vector2} v2
	 */


	function sub(out, v1, v2) {
	  out[0] = v1[0] - v2[0];
	  out[1] = v1[1] - v2[1];
	  return out;
	}
	/**
	 * 向量长度
	 * @param {Vector2} v
	 * @return {number}
	 */


	function len(v) {
	  return Math.sqrt(lenSquare(v));
	}

	var length = len; // jshint ignore:line

	/**
	 * 向量长度平方
	 * @param {Vector2} v
	 * @return {number}
	 */

	function lenSquare(v) {
	  return v[0] * v[0] + v[1] * v[1];
	}

	var lengthSquare = lenSquare;
	/**
	 * 向量乘法
	 * @param {Vector2} out
	 * @param {Vector2} v1
	 * @param {Vector2} v2
	 */

	function mul(out, v1, v2) {
	  out[0] = v1[0] * v2[0];
	  out[1] = v1[1] * v2[1];
	  return out;
	}
	/**
	 * 向量除法
	 * @param {Vector2} out
	 * @param {Vector2} v1
	 * @param {Vector2} v2
	 */


	function div(out, v1, v2) {
	  out[0] = v1[0] / v2[0];
	  out[1] = v1[1] / v2[1];
	  return out;
	}
	/**
	 * 向量点乘
	 * @param {Vector2} v1
	 * @param {Vector2} v2
	 * @return {number}
	 */


	function dot(v1, v2) {
	  return v1[0] * v2[0] + v1[1] * v2[1];
	}
	/**
	 * 向量缩放
	 * @param {Vector2} out
	 * @param {Vector2} v
	 * @param {number} s
	 */


	function scale(out, v, s) {
	  out[0] = v[0] * s;
	  out[1] = v[1] * s;
	  return out;
	}
	/**
	 * 向量归一化
	 * @param {Vector2} out
	 * @param {Vector2} v
	 */


	function normalize(out, v) {
	  var d = len(v);

	  if (d === 0) {
	    out[0] = 0;
	    out[1] = 0;
	  } else {
	    out[0] = v[0] / d;
	    out[1] = v[1] / d;
	  }

	  return out;
	}
	/**
	 * 计算向量间距离
	 * @param {Vector2} v1
	 * @param {Vector2} v2
	 * @return {number}
	 */


	function distance(v1, v2) {
	  return Math.sqrt((v1[0] - v2[0]) * (v1[0] - v2[0]) + (v1[1] - v2[1]) * (v1[1] - v2[1]));
	}

	var dist = distance;
	/**
	 * 向量距离平方
	 * @param {Vector2} v1
	 * @param {Vector2} v2
	 * @return {number}
	 */

	function distanceSquare(v1, v2) {
	  return (v1[0] - v2[0]) * (v1[0] - v2[0]) + (v1[1] - v2[1]) * (v1[1] - v2[1]);
	}

	var distSquare = distanceSquare;
	/**
	 * 求负向量
	 * @param {Vector2} out
	 * @param {Vector2} v
	 */

	function negate(out, v) {
	  out[0] = -v[0];
	  out[1] = -v[1];
	  return out;
	}
	/**
	 * 插值两个点
	 * @param {Vector2} out
	 * @param {Vector2} v1
	 * @param {Vector2} v2
	 * @param {number} t
	 */


	function lerp(out, v1, v2, t) {
	  out[0] = v1[0] + t * (v2[0] - v1[0]);
	  out[1] = v1[1] + t * (v2[1] - v1[1]);
	  return out;
	}
	/**
	 * 矩阵左乘向量
	 * @param {Vector2} out
	 * @param {Vector2} v
	 * @param {Vector2} m
	 */


	function applyTransform(out, v, m) {
	  var x = v[0];
	  var y = v[1];
	  out[0] = m[0] * x + m[2] * y + m[4];
	  out[1] = m[1] * x + m[3] * y + m[5];
	  return out;
	}
	/**
	 * 求两个向量最小值
	 * @param  {Vector2} out
	 * @param  {Vector2} v1
	 * @param  {Vector2} v2
	 */


	function min(out, v1, v2) {
	  out[0] = Math.min(v1[0], v2[0]);
	  out[1] = Math.min(v1[1], v2[1]);
	  return out;
	}
	/**
	 * 求两个向量最大值
	 * @param  {Vector2} out
	 * @param  {Vector2} v1
	 * @param  {Vector2} v2
	 */


	function max(out, v1, v2) {
	  out[0] = Math.max(v1[0], v2[0]);
	  out[1] = Math.max(v1[1], v2[1]);
	  return out;
	}

	exports.create = create;
	exports.copy = copy;
	exports.clone = clone;
	exports.set = set;
	exports.add = add;
	exports.scaleAndAdd = scaleAndAdd;
	exports.sub = sub;
	exports.len = len;
	exports.length = length;
	exports.lenSquare = lenSquare;
	exports.lengthSquare = lengthSquare;
	exports.mul = mul;
	exports.div = div;
	exports.dot = dot;
	exports.scale = scale;
	exports.normalize = normalize;
	exports.distance = distance;
	exports.dist = dist;
	exports.distanceSquare = distanceSquare;
	exports.distSquare = distSquare;
	exports.negate = negate;
	exports.lerp = lerp;
	exports.applyTransform = applyTransform;
	exports.min = min;
	exports.max = max;

/***/ }),
/* 184 */
/***/ (function(module, exports) {

	// TODO Draggable for group
	// FIXME Draggable on element which has parent rotation or scale
	function Draggable() {
	  this.on('mousedown', this._dragStart, this);
	  this.on('mousemove', this._drag, this);
	  this.on('mouseup', this._dragEnd, this);
	  this.on('globalout', this._dragEnd, this); // this._dropTarget = null;
	  // this._draggingTarget = null;
	  // this._x = 0;
	  // this._y = 0;
	}

	Draggable.prototype = {
	  constructor: Draggable,
	  _dragStart: function (e) {
	    var draggingTarget = e.target;

	    if (draggingTarget && draggingTarget.draggable) {
	      this._draggingTarget = draggingTarget;
	      draggingTarget.dragging = true;
	      this._x = e.offsetX;
	      this._y = e.offsetY;
	      this.dispatchToElement(param(draggingTarget, e), 'dragstart', e.event);
	    }
	  },
	  _drag: function (e) {
	    var draggingTarget = this._draggingTarget;

	    if (draggingTarget) {
	      var x = e.offsetX;
	      var y = e.offsetY;
	      var dx = x - this._x;
	      var dy = y - this._y;
	      this._x = x;
	      this._y = y;
	      draggingTarget.drift(dx, dy, e);
	      this.dispatchToElement(param(draggingTarget, e), 'drag', e.event);
	      var dropTarget = this.findHover(x, y, draggingTarget).target;
	      var lastDropTarget = this._dropTarget;
	      this._dropTarget = dropTarget;

	      if (draggingTarget !== dropTarget) {
	        if (lastDropTarget && dropTarget !== lastDropTarget) {
	          this.dispatchToElement(param(lastDropTarget, e), 'dragleave', e.event);
	        }

	        if (dropTarget && dropTarget !== lastDropTarget) {
	          this.dispatchToElement(param(dropTarget, e), 'dragenter', e.event);
	        }
	      }
	    }
	  },
	  _dragEnd: function (e) {
	    var draggingTarget = this._draggingTarget;

	    if (draggingTarget) {
	      draggingTarget.dragging = false;
	    }

	    this.dispatchToElement(param(draggingTarget, e), 'dragend', e.event);

	    if (this._dropTarget) {
	      this.dispatchToElement(param(this._dropTarget, e), 'drop', e.event);
	    }

	    this._draggingTarget = null;
	    this._dropTarget = null;
	  }
	};

	function param(target, e) {
	  return {
	    target: target,
	    topTarget: e && e.topTarget
	  };
	}

	var _default = Draggable;
	module.exports = _default;

/***/ }),
/* 185 */
/***/ (function(module, exports) {

	/**
	 * 事件扩展
	 * @module zrender/mixin/Eventful
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *         pissang (https://www.github.com/pissang)
	 */
	var arrySlice = Array.prototype.slice;
	/**
	 * 事件分发器
	 * @alias module:zrender/mixin/Eventful
	 * @constructor
	 */

	var Eventful = function () {
	  this._$handlers = {};
	};

	Eventful.prototype = {
	  constructor: Eventful,

	  /**
	   * 单次触发绑定，trigger后销毁
	   *
	   * @param {string} event 事件名
	   * @param {Function} handler 响应函数
	   * @param {Object} context
	   */
	  one: function (event, handler, context) {
	    var _h = this._$handlers;

	    if (!handler || !event) {
	      return this;
	    }

	    if (!_h[event]) {
	      _h[event] = [];
	    }

	    for (var i = 0; i < _h[event].length; i++) {
	      if (_h[event][i].h === handler) {
	        return this;
	      }
	    }

	    _h[event].push({
	      h: handler,
	      one: true,
	      ctx: context || this
	    });

	    return this;
	  },

	  /**
	   * 绑定事件
	   * @param {string} event 事件名
	   * @param {Function} handler 事件处理函数
	   * @param {Object} [context]
	   */
	  on: function (event, handler, context) {
	    var _h = this._$handlers;

	    if (!handler || !event) {
	      return this;
	    }

	    if (!_h[event]) {
	      _h[event] = [];
	    }

	    for (var i = 0; i < _h[event].length; i++) {
	      if (_h[event][i].h === handler) {
	        return this;
	      }
	    }

	    _h[event].push({
	      h: handler,
	      one: false,
	      ctx: context || this
	    });

	    return this;
	  },

	  /**
	   * 是否绑定了事件
	   * @param  {string}  event
	   * @return {boolean}
	   */
	  isSilent: function (event) {
	    var _h = this._$handlers;
	    return _h[event] && _h[event].length;
	  },

	  /**
	   * 解绑事件
	   * @param {string} event 事件名
	   * @param {Function} [handler] 事件处理函数
	   */
	  off: function (event, handler) {
	    var _h = this._$handlers;

	    if (!event) {
	      this._$handlers = {};
	      return this;
	    }

	    if (handler) {
	      if (_h[event]) {
	        var newList = [];

	        for (var i = 0, l = _h[event].length; i < l; i++) {
	          if (_h[event][i]['h'] != handler) {
	            newList.push(_h[event][i]);
	          }
	        }

	        _h[event] = newList;
	      }

	      if (_h[event] && _h[event].length === 0) {
	        delete _h[event];
	      }
	    } else {
	      delete _h[event];
	    }

	    return this;
	  },

	  /**
	   * 事件分发
	   *
	   * @param {string} type 事件类型
	   */
	  trigger: function (type) {
	    if (this._$handlers[type]) {
	      var args = arguments;
	      var argLen = args.length;

	      if (argLen > 3) {
	        args = arrySlice.call(args, 1);
	      }

	      var _h = this._$handlers[type];
	      var len = _h.length;

	      for (var i = 0; i < len;) {
	        // Optimize advise from backbone
	        switch (argLen) {
	          case 1:
	            _h[i]['h'].call(_h[i]['ctx']);

	            break;

	          case 2:
	            _h[i]['h'].call(_h[i]['ctx'], args[1]);

	            break;

	          case 3:
	            _h[i]['h'].call(_h[i]['ctx'], args[1], args[2]);

	            break;

	          default:
	            // have more than 2 given arguments
	            _h[i]['h'].apply(_h[i]['ctx'], args);

	            break;
	        }

	        if (_h[i]['one']) {
	          _h.splice(i, 1);

	          len--;
	        } else {
	          i++;
	        }
	      }
	    }

	    return this;
	  },

	  /**
	   * 带有context的事件分发, 最后一个参数是事件回调的context
	   * @param {string} type 事件类型
	   */
	  triggerWithContext: function (type) {
	    if (this._$handlers[type]) {
	      var args = arguments;
	      var argLen = args.length;

	      if (argLen > 4) {
	        args = arrySlice.call(args, 1, args.length - 1);
	      }

	      var ctx = args[args.length - 1];
	      var _h = this._$handlers[type];
	      var len = _h.length;

	      for (var i = 0; i < len;) {
	        // Optimize advise from backbone
	        switch (argLen) {
	          case 1:
	            _h[i]['h'].call(ctx);

	            break;

	          case 2:
	            _h[i]['h'].call(ctx, args[1]);

	            break;

	          case 3:
	            _h[i]['h'].call(ctx, args[1], args[2]);

	            break;

	          default:
	            // have more than 2 given arguments
	            _h[i]['h'].apply(ctx, args);

	            break;
	        }

	        if (_h[i]['one']) {
	          _h.splice(i, 1);

	          len--;
	        } else {
	          i++;
	        }
	      }
	    }

	    return this;
	  }
	}; // 对象可以通过 onxxxx 绑定事件

	/**
	 * @event module:zrender/mixin/Eventful#onclick
	 * @type {Function}
	 * @default null
	 */

	/**
	 * @event module:zrender/mixin/Eventful#onmouseover
	 * @type {Function}
	 * @default null
	 */

	/**
	 * @event module:zrender/mixin/Eventful#onmouseout
	 * @type {Function}
	 * @default null
	 */

	/**
	 * @event module:zrender/mixin/Eventful#onmousemove
	 * @type {Function}
	 * @default null
	 */

	/**
	 * @event module:zrender/mixin/Eventful#onmousewheel
	 * @type {Function}
	 * @default null
	 */

	/**
	 * @event module:zrender/mixin/Eventful#onmousedown
	 * @type {Function}
	 * @default null
	 */

	/**
	 * @event module:zrender/mixin/Eventful#onmouseup
	 * @type {Function}
	 * @default null
	 */

	/**
	 * @event module:zrender/mixin/Eventful#ondrag
	 * @type {Function}
	 * @default null
	 */

	/**
	 * @event module:zrender/mixin/Eventful#ondragstart
	 * @type {Function}
	 * @default null
	 */

	/**
	 * @event module:zrender/mixin/Eventful#ondragend
	 * @type {Function}
	 * @default null
	 */

	/**
	 * @event module:zrender/mixin/Eventful#ondragenter
	 * @type {Function}
	 * @default null
	 */

	/**
	 * @event module:zrender/mixin/Eventful#ondragleave
	 * @type {Function}
	 * @default null
	 */

	/**
	 * @event module:zrender/mixin/Eventful#ondragover
	 * @type {Function}
	 * @default null
	 */

	/**
	 * @event module:zrender/mixin/Eventful#ondrop
	 * @type {Function}
	 * @default null
	 */

	var _default = Eventful;
	module.exports = _default;

/***/ }),
/* 186 */
/***/ (function(module, exports, __webpack_require__) {

	var util = __webpack_require__(181);

	var env = __webpack_require__(180);

	var Group = __webpack_require__(187);

	var timsort = __webpack_require__(200);

	// Use timsort because in most case elements are partially sorted
	// https://jsfiddle.net/pissang/jr4x7mdm/8/
	function shapeCompareFunc(a, b) {
	  if (a.zlevel === b.zlevel) {
	    if (a.z === b.z) {
	      // if (a.z2 === b.z2) {
	      //     // FIXME Slow has renderidx compare
	      //     // http://stackoverflow.com/questions/20883421/sorting-in-javascript-should-every-compare-function-have-a-return-0-statement
	      //     // https://github.com/v8/v8/blob/47cce544a31ed5577ffe2963f67acb4144ee0232/src/js/array.js#L1012
	      //     return a.__renderidx - b.__renderidx;
	      // }
	      return a.z2 - b.z2;
	    }

	    return a.z - b.z;
	  }

	  return a.zlevel - b.zlevel;
	}
	/**
	 * 内容仓库 (M)
	 * @alias module:zrender/Storage
	 * @constructor
	 */


	var Storage = function () {
	  // jshint ignore:line
	  this._roots = [];
	  this._displayList = [];
	  this._displayListLen = 0;
	};

	Storage.prototype = {
	  constructor: Storage,

	  /**
	   * @param  {Function} cb
	   *
	   */
	  traverse: function (cb, context) {
	    for (var i = 0; i < this._roots.length; i++) {
	      this._roots[i].traverse(cb, context);
	    }
	  },

	  /**
	   * 返回所有图形的绘制队列
	   * @param {boolean} [update=false] 是否在返回前更新该数组
	   * @param {boolean} [includeIgnore=false] 是否包含 ignore 的数组, 在 update 为 true 的时候有效
	   *
	   * 详见{@link module:zrender/graphic/Displayable.prototype.updateDisplayList}
	   * @return {Array.<module:zrender/graphic/Displayable>}
	   */
	  getDisplayList: function (update, includeIgnore) {
	    includeIgnore = includeIgnore || false;

	    if (update) {
	      this.updateDisplayList(includeIgnore);
	    }

	    return this._displayList;
	  },

	  /**
	   * 更新图形的绘制队列。
	   * 每次绘制前都会调用，该方法会先深度优先遍历整个树，更新所有Group和Shape的变换并且把所有可见的Shape保存到数组中，
	   * 最后根据绘制的优先级（zlevel > z > 插入顺序）排序得到绘制队列
	   * @param {boolean} [includeIgnore=false] 是否包含 ignore 的数组
	   */
	  updateDisplayList: function (includeIgnore) {
	    this._displayListLen = 0;
	    var roots = this._roots;
	    var displayList = this._displayList;

	    for (var i = 0, len = roots.length; i < len; i++) {
	      this._updateAndAddDisplayable(roots[i], null, includeIgnore);
	    }

	    displayList.length = this._displayListLen;
	    env.canvasSupported && timsort(displayList, shapeCompareFunc);
	  },
	  _updateAndAddDisplayable: function (el, clipPaths, includeIgnore) {
	    if (el.ignore && !includeIgnore) {
	      return;
	    }

	    el.beforeUpdate();

	    if (el.__dirty) {
	      el.update();
	    }

	    el.afterUpdate();
	    var userSetClipPath = el.clipPath;

	    if (userSetClipPath) {
	      // FIXME 效率影响
	      if (clipPaths) {
	        clipPaths = clipPaths.slice();
	      } else {
	        clipPaths = [];
	      }

	      var currentClipPath = userSetClipPath;
	      var parentClipPath = el; // Recursively add clip path

	      while (currentClipPath) {
	        // clipPath 的变换是基于使用这个 clipPath 的元素
	        currentClipPath.parent = parentClipPath;
	        currentClipPath.updateTransform();
	        clipPaths.push(currentClipPath);
	        parentClipPath = currentClipPath;
	        currentClipPath = currentClipPath.clipPath;
	      }
	    }

	    if (el.isGroup) {
	      var children = el._children;

	      for (var i = 0; i < children.length; i++) {
	        var child = children[i]; // Force to mark as dirty if group is dirty
	        // FIXME __dirtyPath ?

	        if (el.__dirty) {
	          child.__dirty = true;
	        }

	        this._updateAndAddDisplayable(child, clipPaths, includeIgnore);
	      } // Mark group clean here


	      el.__dirty = false;
	    } else {
	      el.__clipPaths = clipPaths;
	      this._displayList[this._displayListLen++] = el;
	    }
	  },

	  /**
	   * 添加图形(Shape)或者组(Group)到根节点
	   * @param {module:zrender/Element} el
	   */
	  addRoot: function (el) {
	    if (el.__storage === this) {
	      return;
	    }

	    if (el instanceof Group) {
	      el.addChildrenToStorage(this);
	    }

	    this.addToStorage(el);

	    this._roots.push(el);
	  },

	  /**
	   * 删除指定的图形(Shape)或者组(Group)
	   * @param {string|Array.<string>} [el] 如果为空清空整个Storage
	   */
	  delRoot: function (el) {
	    if (el == null) {
	      // 不指定el清空
	      for (var i = 0; i < this._roots.length; i++) {
	        var root = this._roots[i];

	        if (root instanceof Group) {
	          root.delChildrenFromStorage(this);
	        }
	      }

	      this._roots = [];
	      this._displayList = [];
	      this._displayListLen = 0;
	      return;
	    }

	    if (el instanceof Array) {
	      for (var i = 0, l = el.length; i < l; i++) {
	        this.delRoot(el[i]);
	      }

	      return;
	    }

	    var idx = util.indexOf(this._roots, el);

	    if (idx >= 0) {
	      this.delFromStorage(el);

	      this._roots.splice(idx, 1);

	      if (el instanceof Group) {
	        el.delChildrenFromStorage(this);
	      }
	    }
	  },
	  addToStorage: function (el) {
	    if (el) {
	      el.__storage = this;
	      el.dirty(false);
	    }

	    return this;
	  },
	  delFromStorage: function (el) {
	    if (el) {
	      el.__storage = null;
	    }

	    return this;
	  },

	  /**
	   * 清空并且释放Storage
	   */
	  dispose: function () {
	    this._renderList = this._roots = null;
	  },
	  displayableSortFunc: shapeCompareFunc
	};
	var _default = Storage;
	module.exports = _default;

/***/ }),
/* 187 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(181);

	var Element = __webpack_require__(188);

	var BoundingRect = __webpack_require__(199);

	/**
	 * Group是一个容器，可以插入子节点，Group的变换也会被应用到子节点上
	 * @module zrender/graphic/Group
	 * @example
	 *     var Group = require('zrender/container/Group');
	 *     var Circle = require('zrender/graphic/shape/Circle');
	 *     var g = new Group();
	 *     g.position[0] = 100;
	 *     g.position[1] = 100;
	 *     g.add(new Circle({
	 *         style: {
	 *             x: 100,
	 *             y: 100,
	 *             r: 20,
	 *         }
	 *     }));
	 *     zr.add(g);
	 */

	/**
	 * @alias module:zrender/graphic/Group
	 * @constructor
	 * @extends module:zrender/mixin/Transformable
	 * @extends module:zrender/mixin/Eventful
	 */
	var Group = function (opts) {
	  opts = opts || {};
	  Element.call(this, opts);

	  for (var key in opts) {
	    if (opts.hasOwnProperty(key)) {
	      this[key] = opts[key];
	    }
	  }

	  this._children = [];
	  this.__storage = null;
	  this.__dirty = true;
	};

	Group.prototype = {
	  constructor: Group,
	  isGroup: true,

	  /**
	   * @type {string}
	   */
	  type: 'group',

	  /**
	   * 所有子孙元素是否响应鼠标事件
	   * @name module:/zrender/container/Group#silent
	   * @type {boolean}
	   * @default false
	   */
	  silent: false,

	  /**
	   * @return {Array.<module:zrender/Element>}
	   */
	  children: function () {
	    return this._children.slice();
	  },

	  /**
	   * 获取指定 index 的儿子节点
	   * @param  {number} idx
	   * @return {module:zrender/Element}
	   */
	  childAt: function (idx) {
	    return this._children[idx];
	  },

	  /**
	   * 获取指定名字的儿子节点
	   * @param  {string} name
	   * @return {module:zrender/Element}
	   */
	  childOfName: function (name) {
	    var children = this._children;

	    for (var i = 0; i < children.length; i++) {
	      if (children[i].name === name) {
	        return children[i];
	      }
	    }
	  },

	  /**
	   * @return {number}
	   */
	  childCount: function () {
	    return this._children.length;
	  },

	  /**
	   * 添加子节点到最后
	   * @param {module:zrender/Element} child
	   */
	  add: function (child) {
	    if (child && child !== this && child.parent !== this) {
	      this._children.push(child);

	      this._doAdd(child);
	    }

	    return this;
	  },

	  /**
	   * 添加子节点在 nextSibling 之前
	   * @param {module:zrender/Element} child
	   * @param {module:zrender/Element} nextSibling
	   */
	  addBefore: function (child, nextSibling) {
	    if (child && child !== this && child.parent !== this && nextSibling && nextSibling.parent === this) {
	      var children = this._children;
	      var idx = children.indexOf(nextSibling);

	      if (idx >= 0) {
	        children.splice(idx, 0, child);

	        this._doAdd(child);
	      }
	    }

	    return this;
	  },
	  _doAdd: function (child) {
	    if (child.parent) {
	      child.parent.remove(child);
	    }

	    child.parent = this;
	    var storage = this.__storage;
	    var zr = this.__zr;

	    if (storage && storage !== child.__storage) {
	      storage.addToStorage(child);

	      if (child instanceof Group) {
	        child.addChildrenToStorage(storage);
	      }
	    }

	    zr && zr.refresh();
	  },

	  /**
	   * 移除子节点
	   * @param {module:zrender/Element} child
	   */
	  remove: function (child) {
	    var zr = this.__zr;
	    var storage = this.__storage;
	    var children = this._children;
	    var idx = zrUtil.indexOf(children, child);

	    if (idx < 0) {
	      return this;
	    }

	    children.splice(idx, 1);
	    child.parent = null;

	    if (storage) {
	      storage.delFromStorage(child);

	      if (child instanceof Group) {
	        child.delChildrenFromStorage(storage);
	      }
	    }

	    zr && zr.refresh();
	    return this;
	  },

	  /**
	   * 移除所有子节点
	   */
	  removeAll: function () {
	    var children = this._children;
	    var storage = this.__storage;
	    var child;
	    var i;

	    for (i = 0; i < children.length; i++) {
	      child = children[i];

	      if (storage) {
	        storage.delFromStorage(child);

	        if (child instanceof Group) {
	          child.delChildrenFromStorage(storage);
	        }
	      }

	      child.parent = null;
	    }

	    children.length = 0;
	    return this;
	  },

	  /**
	   * 遍历所有子节点
	   * @param  {Function} cb
	   * @param  {}   context
	   */
	  eachChild: function (cb, context) {
	    var children = this._children;

	    for (var i = 0; i < children.length; i++) {
	      var child = children[i];
	      cb.call(context, child, i);
	    }

	    return this;
	  },

	  /**
	   * 深度优先遍历所有子孙节点
	   * @param  {Function} cb
	   * @param  {}   context
	   */
	  traverse: function (cb, context) {
	    for (var i = 0; i < this._children.length; i++) {
	      var child = this._children[i];
	      cb.call(context, child);

	      if (child.type === 'group') {
	        child.traverse(cb, context);
	      }
	    }

	    return this;
	  },
	  addChildrenToStorage: function (storage) {
	    for (var i = 0; i < this._children.length; i++) {
	      var child = this._children[i];
	      storage.addToStorage(child);

	      if (child instanceof Group) {
	        child.addChildrenToStorage(storage);
	      }
	    }
	  },
	  delChildrenFromStorage: function (storage) {
	    for (var i = 0; i < this._children.length; i++) {
	      var child = this._children[i];
	      storage.delFromStorage(child);

	      if (child instanceof Group) {
	        child.delChildrenFromStorage(storage);
	      }
	    }
	  },
	  dirty: function () {
	    this.__dirty = true;
	    this.__zr && this.__zr.refresh();
	    return this;
	  },

	  /**
	   * @return {module:zrender/core/BoundingRect}
	   */
	  getBoundingRect: function (includeChildren) {
	    // TODO Caching
	    var rect = null;
	    var tmpRect = new BoundingRect(0, 0, 0, 0);
	    var children = includeChildren || this._children;
	    var tmpMat = [];

	    for (var i = 0; i < children.length; i++) {
	      var child = children[i];

	      if (child.ignore || child.invisible) {
	        continue;
	      }

	      var childRect = child.getBoundingRect();
	      var transform = child.getLocalTransform(tmpMat); // TODO
	      // The boundingRect cacluated by transforming original
	      // rect may be bigger than the actual bundingRect when rotation
	      // is used. (Consider a circle rotated aginst its center, where
	      // the actual boundingRect should be the same as that not be
	      // rotated.) But we can not find better approach to calculate
	      // actual boundingRect yet, considering performance.

	      if (transform) {
	        tmpRect.copy(childRect);
	        tmpRect.applyTransform(transform);
	        rect = rect || tmpRect.clone();
	        rect.union(tmpRect);
	      } else {
	        rect = rect || childRect.clone();
	        rect.union(childRect);
	      }
	    }

	    return rect || tmpRect;
	  }
	};
	zrUtil.inherits(Group, Element);
	var _default = Group;
	module.exports = _default;

/***/ }),
/* 188 */
/***/ (function(module, exports, __webpack_require__) {

	var guid = __webpack_require__(179);

	var Eventful = __webpack_require__(185);

	var Transformable = __webpack_require__(189);

	var Animatable = __webpack_require__(191);

	var zrUtil = __webpack_require__(181);

	/**
	 * @alias module:zrender/Element
	 * @constructor
	 * @extends {module:zrender/mixin/Animatable}
	 * @extends {module:zrender/mixin/Transformable}
	 * @extends {module:zrender/mixin/Eventful}
	 */
	var Element = function (opts) {
	  // jshint ignore:line
	  Transformable.call(this, opts);
	  Eventful.call(this, opts);
	  Animatable.call(this, opts);
	  /**
	   * 画布元素ID
	   * @type {string}
	   */

	  this.id = opts.id || guid();
	};

	Element.prototype = {
	  /**
	   * 元素类型
	   * Element type
	   * @type {string}
	   */
	  type: 'element',

	  /**
	   * 元素名字
	   * Element name
	   * @type {string}
	   */
	  name: '',

	  /**
	   * ZRender 实例对象，会在 element 添加到 zrender 实例中后自动赋值
	   * ZRender instance will be assigned when element is associated with zrender
	   * @name module:/zrender/Element#__zr
	   * @type {module:zrender/ZRender}
	   */
	  __zr: null,

	  /**
	   * 图形是否忽略，为true时忽略图形的绘制以及事件触发
	   * If ignore drawing and events of the element object
	   * @name module:/zrender/Element#ignore
	   * @type {boolean}
	   * @default false
	   */
	  ignore: false,

	  /**
	   * 用于裁剪的路径(shape)，所有 Group 内的路径在绘制时都会被这个路径裁剪
	   * 该路径会继承被裁减对象的变换
	   * @type {module:zrender/graphic/Path}
	   * @see http://www.w3.org/TR/2dcontext/#clipping-region
	   * @readOnly
	   */
	  clipPath: null,

	  /**
	   * 是否是 Group
	   * @type {boolean}
	   */
	  isGroup: false,

	  /**
	   * Drift element
	   * @param  {number} dx dx on the global space
	   * @param  {number} dy dy on the global space
	   */
	  drift: function (dx, dy) {
	    switch (this.draggable) {
	      case 'horizontal':
	        dy = 0;
	        break;

	      case 'vertical':
	        dx = 0;
	        break;
	    }

	    var m = this.transform;

	    if (!m) {
	      m = this.transform = [1, 0, 0, 1, 0, 0];
	    }

	    m[4] += dx;
	    m[5] += dy;
	    this.decomposeTransform();
	    this.dirty(false);
	  },

	  /**
	   * Hook before update
	   */
	  beforeUpdate: function () {},

	  /**
	   * Hook after update
	   */
	  afterUpdate: function () {},

	  /**
	   * Update each frame
	   */
	  update: function () {
	    this.updateTransform();
	  },

	  /**
	   * @param  {Function} cb
	   * @param  {}   context
	   */
	  traverse: function (cb, context) {},

	  /**
	   * @protected
	   */
	  attrKV: function (key, value) {
	    if (key === 'position' || key === 'scale' || key === 'origin') {
	      // Copy the array
	      if (value) {
	        var target = this[key];

	        if (!target) {
	          target = this[key] = [];
	        }

	        target[0] = value[0];
	        target[1] = value[1];
	      }
	    } else {
	      this[key] = value;
	    }
	  },

	  /**
	   * Hide the element
	   */
	  hide: function () {
	    this.ignore = true;
	    this.__zr && this.__zr.refresh();
	  },

	  /**
	   * Show the element
	   */
	  show: function () {
	    this.ignore = false;
	    this.__zr && this.__zr.refresh();
	  },

	  /**
	   * @param {string|Object} key
	   * @param {*} value
	   */
	  attr: function (key, value) {
	    if (typeof key === 'string') {
	      this.attrKV(key, value);
	    } else if (zrUtil.isObject(key)) {
	      for (var name in key) {
	        if (key.hasOwnProperty(name)) {
	          this.attrKV(name, key[name]);
	        }
	      }
	    }

	    this.dirty(false);
	    return this;
	  },

	  /**
	   * @param {module:zrender/graphic/Path} clipPath
	   */
	  setClipPath: function (clipPath) {
	    var zr = this.__zr;

	    if (zr) {
	      clipPath.addSelfToZr(zr);
	    } // Remove previous clip path


	    if (this.clipPath && this.clipPath !== clipPath) {
	      this.removeClipPath();
	    }

	    this.clipPath = clipPath;
	    clipPath.__zr = zr;
	    clipPath.__clipTarget = this;
	    this.dirty(false);
	  },

	  /**
	   */
	  removeClipPath: function () {
	    var clipPath = this.clipPath;

	    if (clipPath) {
	      if (clipPath.__zr) {
	        clipPath.removeSelfFromZr(clipPath.__zr);
	      }

	      clipPath.__zr = null;
	      clipPath.__clipTarget = null;
	      this.clipPath = null;
	      this.dirty(false);
	    }
	  },

	  /**
	   * Add self from zrender instance.
	   * Not recursively because it will be invoked when element added to storage.
	   * @param {module:zrender/ZRender} zr
	   */
	  addSelfToZr: function (zr) {
	    this.__zr = zr; // 添加动画

	    var animators = this.animators;

	    if (animators) {
	      for (var i = 0; i < animators.length; i++) {
	        zr.animation.addAnimator(animators[i]);
	      }
	    }

	    if (this.clipPath) {
	      this.clipPath.addSelfToZr(zr);
	    }
	  },

	  /**
	   * Remove self from zrender instance.
	   * Not recursively because it will be invoked when element added to storage.
	   * @param {module:zrender/ZRender} zr
	   */
	  removeSelfFromZr: function (zr) {
	    this.__zr = null; // 移除动画

	    var animators = this.animators;

	    if (animators) {
	      for (var i = 0; i < animators.length; i++) {
	        zr.animation.removeAnimator(animators[i]);
	      }
	    }

	    if (this.clipPath) {
	      this.clipPath.removeSelfFromZr(zr);
	    }
	  }
	};
	zrUtil.mixin(Element, Animatable);
	zrUtil.mixin(Element, Transformable);
	zrUtil.mixin(Element, Eventful);
	var _default = Element;
	module.exports = _default;

/***/ }),
/* 189 */
/***/ (function(module, exports, __webpack_require__) {

	var matrix = __webpack_require__(190);

	var vector = __webpack_require__(183);

	/**
	 * 提供变换扩展
	 * @module zrender/mixin/Transformable
	 * @author pissang (https://www.github.com/pissang)
	 */
	var mIdentity = matrix.identity;
	var EPSILON = 5e-5;

	function isNotAroundZero(val) {
	  return val > EPSILON || val < -EPSILON;
	}
	/**
	 * @alias module:zrender/mixin/Transformable
	 * @constructor
	 */


	var Transformable = function (opts) {
	  opts = opts || {}; // If there are no given position, rotation, scale

	  if (!opts.position) {
	    /**
	     * 平移
	     * @type {Array.<number>}
	     * @default [0, 0]
	     */
	    this.position = [0, 0];
	  }

	  if (opts.rotation == null) {
	    /**
	     * 旋转
	     * @type {Array.<number>}
	     * @default 0
	     */
	    this.rotation = 0;
	  }

	  if (!opts.scale) {
	    /**
	     * 缩放
	     * @type {Array.<number>}
	     * @default [1, 1]
	     */
	    this.scale = [1, 1];
	  }
	  /**
	   * 旋转和缩放的原点
	   * @type {Array.<number>}
	   * @default null
	   */


	  this.origin = this.origin || null;
	};

	var transformableProto = Transformable.prototype;
	transformableProto.transform = null;
	/**
	 * 判断是否需要有坐标变换
	 * 如果有坐标变换, 则从position, rotation, scale以及父节点的transform计算出自身的transform矩阵
	 */

	transformableProto.needLocalTransform = function () {
	  return isNotAroundZero(this.rotation) || isNotAroundZero(this.position[0]) || isNotAroundZero(this.position[1]) || isNotAroundZero(this.scale[0] - 1) || isNotAroundZero(this.scale[1] - 1);
	};

	transformableProto.updateTransform = function () {
	  var parent = this.parent;
	  var parentHasTransform = parent && parent.transform;
	  var needLocalTransform = this.needLocalTransform();
	  var m = this.transform;

	  if (!(needLocalTransform || parentHasTransform)) {
	    m && mIdentity(m);
	    return;
	  }

	  m = m || matrix.create();

	  if (needLocalTransform) {
	    this.getLocalTransform(m);
	  } else {
	    mIdentity(m);
	  } // 应用父节点变换


	  if (parentHasTransform) {
	    if (needLocalTransform) {
	      matrix.mul(m, parent.transform, m);
	    } else {
	      matrix.copy(m, parent.transform);
	    }
	  } // 保存这个变换矩阵


	  this.transform = m;
	  this.invTransform = this.invTransform || matrix.create();
	  matrix.invert(this.invTransform, m);
	};

	transformableProto.getLocalTransform = function (m) {
	  return Transformable.getLocalTransform(this, m);
	};
	/**
	 * 将自己的transform应用到context上
	 * @param {CanvasRenderingContext2D} ctx
	 */


	transformableProto.setTransform = function (ctx) {
	  var m = this.transform;
	  var dpr = ctx.dpr || 1;

	  if (m) {
	    ctx.setTransform(dpr * m[0], dpr * m[1], dpr * m[2], dpr * m[3], dpr * m[4], dpr * m[5]);
	  } else {
	    ctx.setTransform(dpr, 0, 0, dpr, 0, 0);
	  }
	};

	transformableProto.restoreTransform = function (ctx) {
	  var dpr = ctx.dpr || 1;
	  ctx.setTransform(dpr, 0, 0, dpr, 0, 0);
	};

	var tmpTransform = [];
	/**
	 * 分解`transform`矩阵到`position`, `rotation`, `scale`
	 */

	transformableProto.decomposeTransform = function () {
	  if (!this.transform) {
	    return;
	  }

	  var parent = this.parent;
	  var m = this.transform;

	  if (parent && parent.transform) {
	    // Get local transform and decompose them to position, scale, rotation
	    matrix.mul(tmpTransform, parent.invTransform, m);
	    m = tmpTransform;
	  }

	  var sx = m[0] * m[0] + m[1] * m[1];
	  var sy = m[2] * m[2] + m[3] * m[3];
	  var position = this.position;
	  var scale = this.scale;

	  if (isNotAroundZero(sx - 1)) {
	    sx = Math.sqrt(sx);
	  }

	  if (isNotAroundZero(sy - 1)) {
	    sy = Math.sqrt(sy);
	  }

	  if (m[0] < 0) {
	    sx = -sx;
	  }

	  if (m[3] < 0) {
	    sy = -sy;
	  }

	  position[0] = m[4];
	  position[1] = m[5];
	  scale[0] = sx;
	  scale[1] = sy;
	  this.rotation = Math.atan2(-m[1] / sy, m[0] / sx);
	};
	/**
	 * Get global scale
	 * @return {Array.<number>}
	 */


	transformableProto.getGlobalScale = function () {
	  var m = this.transform;

	  if (!m) {
	    return [1, 1];
	  }

	  var sx = Math.sqrt(m[0] * m[0] + m[1] * m[1]);
	  var sy = Math.sqrt(m[2] * m[2] + m[3] * m[3]);

	  if (m[0] < 0) {
	    sx = -sx;
	  }

	  if (m[3] < 0) {
	    sy = -sy;
	  }

	  return [sx, sy];
	};
	/**
	 * 变换坐标位置到 shape 的局部坐标空间
	 * @method
	 * @param {number} x
	 * @param {number} y
	 * @return {Array.<number>}
	 */


	transformableProto.transformCoordToLocal = function (x, y) {
	  var v2 = [x, y];
	  var invTransform = this.invTransform;

	  if (invTransform) {
	    vector.applyTransform(v2, v2, invTransform);
	  }

	  return v2;
	};
	/**
	 * 变换局部坐标位置到全局坐标空间
	 * @method
	 * @param {number} x
	 * @param {number} y
	 * @return {Array.<number>}
	 */


	transformableProto.transformCoordToGlobal = function (x, y) {
	  var v2 = [x, y];
	  var transform = this.transform;

	  if (transform) {
	    vector.applyTransform(v2, v2, transform);
	  }

	  return v2;
	};
	/**
	 * @static
	 * @param {Object} target
	 * @param {Array.<number>} target.origin
	 * @param {number} target.rotation
	 * @param {Array.<number>} target.position
	 * @param {Array.<number>} [m]
	 */


	Transformable.getLocalTransform = function (target, m) {
	  m = m || [];
	  mIdentity(m);
	  var origin = target.origin;
	  var scale = target.scale || [1, 1];
	  var rotation = target.rotation || 0;
	  var position = target.position || [0, 0];

	  if (origin) {
	    // Translate to origin
	    m[4] -= origin[0];
	    m[5] -= origin[1];
	  }

	  matrix.scale(m, m, scale);

	  if (rotation) {
	    matrix.rotate(m, m, rotation);
	  }

	  if (origin) {
	    // Translate back from origin
	    m[4] += origin[0];
	    m[5] += origin[1];
	  }

	  m[4] += position[0];
	  m[5] += position[1];
	  return m;
	};

	var _default = Transformable;
	module.exports = _default;

/***/ }),
/* 190 */
/***/ (function(module, exports) {

	/**
	 * 3x2矩阵操作类
	 * @exports zrender/tool/matrix
	 */
	var ArrayCtor = typeof Float32Array === 'undefined' ? Array : Float32Array;
	/**
	 * Create a identity matrix.
	 * @return {Float32Array|Array.<number>}
	 */

	function create() {
	  var out = new ArrayCtor(6);
	  identity(out);
	  return out;
	}
	/**
	 * 设置矩阵为单位矩阵
	 * @param {Float32Array|Array.<number>} out
	 */


	function identity(out) {
	  out[0] = 1;
	  out[1] = 0;
	  out[2] = 0;
	  out[3] = 1;
	  out[4] = 0;
	  out[5] = 0;
	  return out;
	}
	/**
	 * 复制矩阵
	 * @param {Float32Array|Array.<number>} out
	 * @param {Float32Array|Array.<number>} m
	 */


	function copy(out, m) {
	  out[0] = m[0];
	  out[1] = m[1];
	  out[2] = m[2];
	  out[3] = m[3];
	  out[4] = m[4];
	  out[5] = m[5];
	  return out;
	}
	/**
	 * 矩阵相乘
	 * @param {Float32Array|Array.<number>} out
	 * @param {Float32Array|Array.<number>} m1
	 * @param {Float32Array|Array.<number>} m2
	 */


	function mul(out, m1, m2) {
	  // Consider matrix.mul(m, m2, m);
	  // where out is the same as m2.
	  // So use temp variable to escape error.
	  var out0 = m1[0] * m2[0] + m1[2] * m2[1];
	  var out1 = m1[1] * m2[0] + m1[3] * m2[1];
	  var out2 = m1[0] * m2[2] + m1[2] * m2[3];
	  var out3 = m1[1] * m2[2] + m1[3] * m2[3];
	  var out4 = m1[0] * m2[4] + m1[2] * m2[5] + m1[4];
	  var out5 = m1[1] * m2[4] + m1[3] * m2[5] + m1[5];
	  out[0] = out0;
	  out[1] = out1;
	  out[2] = out2;
	  out[3] = out3;
	  out[4] = out4;
	  out[5] = out5;
	  return out;
	}
	/**
	 * 平移变换
	 * @param {Float32Array|Array.<number>} out
	 * @param {Float32Array|Array.<number>} a
	 * @param {Float32Array|Array.<number>} v
	 */


	function translate(out, a, v) {
	  out[0] = a[0];
	  out[1] = a[1];
	  out[2] = a[2];
	  out[3] = a[3];
	  out[4] = a[4] + v[0];
	  out[5] = a[5] + v[1];
	  return out;
	}
	/**
	 * 旋转变换
	 * @param {Float32Array|Array.<number>} out
	 * @param {Float32Array|Array.<number>} a
	 * @param {number} rad
	 */


	function rotate(out, a, rad) {
	  var aa = a[0];
	  var ac = a[2];
	  var atx = a[4];
	  var ab = a[1];
	  var ad = a[3];
	  var aty = a[5];
	  var st = Math.sin(rad);
	  var ct = Math.cos(rad);
	  out[0] = aa * ct + ab * st;
	  out[1] = -aa * st + ab * ct;
	  out[2] = ac * ct + ad * st;
	  out[3] = -ac * st + ct * ad;
	  out[4] = ct * atx + st * aty;
	  out[5] = ct * aty - st * atx;
	  return out;
	}
	/**
	 * 缩放变换
	 * @param {Float32Array|Array.<number>} out
	 * @param {Float32Array|Array.<number>} a
	 * @param {Float32Array|Array.<number>} v
	 */


	function scale(out, a, v) {
	  var vx = v[0];
	  var vy = v[1];
	  out[0] = a[0] * vx;
	  out[1] = a[1] * vy;
	  out[2] = a[2] * vx;
	  out[3] = a[3] * vy;
	  out[4] = a[4] * vx;
	  out[5] = a[5] * vy;
	  return out;
	}
	/**
	 * 求逆矩阵
	 * @param {Float32Array|Array.<number>} out
	 * @param {Float32Array|Array.<number>} a
	 */


	function invert(out, a) {
	  var aa = a[0];
	  var ac = a[2];
	  var atx = a[4];
	  var ab = a[1];
	  var ad = a[3];
	  var aty = a[5];
	  var det = aa * ad - ab * ac;

	  if (!det) {
	    return null;
	  }

	  det = 1.0 / det;
	  out[0] = ad * det;
	  out[1] = -ab * det;
	  out[2] = -ac * det;
	  out[3] = aa * det;
	  out[4] = (ac * aty - ad * atx) * det;
	  out[5] = (ab * atx - aa * aty) * det;
	  return out;
	}
	/**
	 * Clone a new matrix.
	 * @param {Float32Array|Array.<number>} a
	 */


	function clone(a) {
	  var b = create();
	  copy(b, a);
	  return b;
	}

	exports.create = create;
	exports.identity = identity;
	exports.copy = copy;
	exports.mul = mul;
	exports.translate = translate;
	exports.rotate = rotate;
	exports.scale = scale;
	exports.invert = invert;
	exports.clone = clone;

/***/ }),
/* 191 */
/***/ (function(module, exports, __webpack_require__) {

	var Animator = __webpack_require__(192);

	var log = __webpack_require__(197);

	var _util = __webpack_require__(181);

	var isString = _util.isString;
	var isFunction = _util.isFunction;
	var isObject = _util.isObject;
	var isArrayLike = _util.isArrayLike;
	var indexOf = _util.indexOf;

	/**
	 * @alias modue:zrender/mixin/Animatable
	 * @constructor
	 */
	var Animatable = function () {
	  /**
	   * @type {Array.<module:zrender/animation/Animator>}
	   * @readOnly
	   */
	  this.animators = [];
	};

	Animatable.prototype = {
	  constructor: Animatable,

	  /**
	   * 动画
	   *
	   * @param {string} path The path to fetch value from object, like 'a.b.c'.
	   * @param {boolean} [loop] Whether to loop animation.
	   * @return {module:zrender/animation/Animator}
	   * @example:
	   *     el.animate('style', false)
	   *         .when(1000, {x: 10} )
	   *         .done(function(){ // Animation done })
	   *         .start()
	   */
	  animate: function (path, loop) {
	    var target;
	    var animatingShape = false;
	    var el = this;
	    var zr = this.__zr;

	    if (path) {
	      var pathSplitted = path.split('.');
	      var prop = el; // If animating shape

	      animatingShape = pathSplitted[0] === 'shape';

	      for (var i = 0, l = pathSplitted.length; i < l; i++) {
	        if (!prop) {
	          continue;
	        }

	        prop = prop[pathSplitted[i]];
	      }

	      if (prop) {
	        target = prop;
	      }
	    } else {
	      target = el;
	    }

	    if (!target) {
	      log('Property "' + path + '" is not existed in element ' + el.id);
	      return;
	    }

	    var animators = el.animators;
	    var animator = new Animator(target, loop);
	    animator.during(function (target) {
	      el.dirty(animatingShape);
	    }).done(function () {
	      // FIXME Animator will not be removed if use `Animator#stop` to stop animation
	      animators.splice(indexOf(animators, animator), 1);
	    });
	    animators.push(animator); // If animate after added to the zrender

	    if (zr) {
	      zr.animation.addAnimator(animator);
	    }

	    return animator;
	  },

	  /**
	   * 停止动画
	   * @param {boolean} forwardToLast If move to last frame before stop
	   */
	  stopAnimation: function (forwardToLast) {
	    var animators = this.animators;
	    var len = animators.length;

	    for (var i = 0; i < len; i++) {
	      animators[i].stop(forwardToLast);
	    }

	    animators.length = 0;
	    return this;
	  },

	  /**
	   * Caution: this method will stop previous animation.
	   * So do not use this method to one element twice before
	   * animation starts, unless you know what you are doing.
	   * @param {Object} target
	   * @param {number} [time=500] Time in ms
	   * @param {string} [easing='linear']
	   * @param {number} [delay=0]
	   * @param {Function} [callback]
	   * @param {Function} [forceAnimate] Prevent stop animation and callback
	   *        immediently when target values are the same as current values.
	   *
	   * @example
	   *  // Animate position
	   *  el.animateTo({
	   *      position: [10, 10]
	   *  }, function () { // done })
	   *
	   *  // Animate shape, style and position in 100ms, delayed 100ms, with cubicOut easing
	   *  el.animateTo({
	   *      shape: {
	   *          width: 500
	   *      },
	   *      style: {
	   *          fill: 'red'
	   *      }
	   *      position: [10, 10]
	   *  }, 100, 100, 'cubicOut', function () { // done })
	   */
	  // TODO Return animation key
	  animateTo: function (target, time, delay, easing, callback, forceAnimate) {
	    // animateTo(target, time, easing, callback);
	    if (isString(delay)) {
	      callback = easing;
	      easing = delay;
	      delay = 0;
	    } // animateTo(target, time, delay, callback);
	    else if (isFunction(easing)) {
	        callback = easing;
	        easing = 'linear';
	        delay = 0;
	      } // animateTo(target, time, callback);
	      else if (isFunction(delay)) {
	          callback = delay;
	          delay = 0;
	        } // animateTo(target, callback)
	        else if (isFunction(time)) {
	            callback = time;
	            time = 500;
	          } // animateTo(target)
	          else if (!time) {
	              time = 500;
	            } // Stop all previous animations


	    this.stopAnimation();

	    this._animateToShallow('', this, target, time, delay); // Animators may be removed immediately after start
	    // if there is nothing to animate


	    var animators = this.animators.slice();
	    var count = animators.length;

	    function done() {
	      count--;

	      if (!count) {
	        callback && callback();
	      }
	    } // No animators. This should be checked before animators[i].start(),
	    // because 'done' may be executed immediately if no need to animate.


	    if (!count) {
	      callback && callback();
	    } // Start after all animators created
	    // Incase any animator is done immediately when all animation properties are not changed


	    for (var i = 0; i < animators.length; i++) {
	      animators[i].done(done).start(easing, forceAnimate);
	    }
	  },

	  /**
	   * @private
	   * @param {string} path=''
	   * @param {Object} source=this
	   * @param {Object} target
	   * @param {number} [time=500]
	   * @param {number} [delay=0]
	   *
	   * @example
	   *  // Animate position
	   *  el._animateToShallow({
	   *      position: [10, 10]
	   *  })
	   *
	   *  // Animate shape, style and position in 100ms, delayed 100ms
	   *  el._animateToShallow({
	   *      shape: {
	   *          width: 500
	   *      },
	   *      style: {
	   *          fill: 'red'
	   *      }
	   *      position: [10, 10]
	   *  }, 100, 100)
	   */
	  _animateToShallow: function (path, source, target, time, delay) {
	    var objShallow = {};
	    var propertyCount = 0;

	    for (var name in target) {
	      if (!target.hasOwnProperty(name)) {
	        continue;
	      }

	      if (source[name] != null) {
	        if (isObject(target[name]) && !isArrayLike(target[name])) {
	          this._animateToShallow(path ? path + '.' + name : name, source[name], target[name], time, delay);
	        } else {
	          objShallow[name] = target[name];
	          propertyCount++;
	        }
	      } else if (target[name] != null) {
	        // Attr directly if not has property
	        // FIXME, if some property not needed for element ?
	        if (!path) {
	          this.attr(name, target[name]);
	        } else {
	          // Shape or style
	          var props = {};
	          props[path] = {};
	          props[path][name] = target[name];
	          this.attr(props);
	        }
	      }
	    }

	    if (propertyCount > 0) {
	      this.animate(path, false).when(time == null ? 500 : time, objShallow).delay(delay || 0);
	    }

	    return this;
	  }
	};
	var _default = Animatable;
	module.exports = _default;

/***/ }),
/* 192 */
/***/ (function(module, exports, __webpack_require__) {

	var Clip = __webpack_require__(193);

	var color = __webpack_require__(195);

	var _util = __webpack_require__(181);

	var isArrayLike = _util.isArrayLike;

	/**
	 * @module echarts/animation/Animator
	 */
	var arraySlice = Array.prototype.slice;

	function defaultGetter(target, key) {
	  return target[key];
	}

	function defaultSetter(target, key, value) {
	  target[key] = value;
	}
	/**
	 * @param  {number} p0
	 * @param  {number} p1
	 * @param  {number} percent
	 * @return {number}
	 */


	function interpolateNumber(p0, p1, percent) {
	  return (p1 - p0) * percent + p0;
	}
	/**
	 * @param  {string} p0
	 * @param  {string} p1
	 * @param  {number} percent
	 * @return {string}
	 */


	function interpolateString(p0, p1, percent) {
	  return percent > 0.5 ? p1 : p0;
	}
	/**
	 * @param  {Array} p0
	 * @param  {Array} p1
	 * @param  {number} percent
	 * @param  {Array} out
	 * @param  {number} arrDim
	 */


	function interpolateArray(p0, p1, percent, out, arrDim) {
	  var len = p0.length;

	  if (arrDim == 1) {
	    for (var i = 0; i < len; i++) {
	      out[i] = interpolateNumber(p0[i], p1[i], percent);
	    }
	  } else {
	    var len2 = len && p0[0].length;

	    for (var i = 0; i < len; i++) {
	      for (var j = 0; j < len2; j++) {
	        out[i][j] = interpolateNumber(p0[i][j], p1[i][j], percent);
	      }
	    }
	  }
	} // arr0 is source array, arr1 is target array.
	// Do some preprocess to avoid error happened when interpolating from arr0 to arr1


	function fillArr(arr0, arr1, arrDim) {
	  var arr0Len = arr0.length;
	  var arr1Len = arr1.length;

	  if (arr0Len !== arr1Len) {
	    // FIXME Not work for TypedArray
	    var isPreviousLarger = arr0Len > arr1Len;

	    if (isPreviousLarger) {
	      // Cut the previous
	      arr0.length = arr1Len;
	    } else {
	      // Fill the previous
	      for (var i = arr0Len; i < arr1Len; i++) {
	        arr0.push(arrDim === 1 ? arr1[i] : arraySlice.call(arr1[i]));
	      }
	    }
	  } // Handling NaN value


	  var len2 = arr0[0] && arr0[0].length;

	  for (var i = 0; i < arr0.length; i++) {
	    if (arrDim === 1) {
	      if (isNaN(arr0[i])) {
	        arr0[i] = arr1[i];
	      }
	    } else {
	      for (var j = 0; j < len2; j++) {
	        if (isNaN(arr0[i][j])) {
	          arr0[i][j] = arr1[i][j];
	        }
	      }
	    }
	  }
	}
	/**
	 * @param  {Array} arr0
	 * @param  {Array} arr1
	 * @param  {number} arrDim
	 * @return {boolean}
	 */


	function isArraySame(arr0, arr1, arrDim) {
	  if (arr0 === arr1) {
	    return true;
	  }

	  var len = arr0.length;

	  if (len !== arr1.length) {
	    return false;
	  }

	  if (arrDim === 1) {
	    for (var i = 0; i < len; i++) {
	      if (arr0[i] !== arr1[i]) {
	        return false;
	      }
	    }
	  } else {
	    var len2 = arr0[0].length;

	    for (var i = 0; i < len; i++) {
	      for (var j = 0; j < len2; j++) {
	        if (arr0[i][j] !== arr1[i][j]) {
	          return false;
	        }
	      }
	    }
	  }

	  return true;
	}
	/**
	 * Catmull Rom interpolate array
	 * @param  {Array} p0
	 * @param  {Array} p1
	 * @param  {Array} p2
	 * @param  {Array} p3
	 * @param  {number} t
	 * @param  {number} t2
	 * @param  {number} t3
	 * @param  {Array} out
	 * @param  {number} arrDim
	 */


	function catmullRomInterpolateArray(p0, p1, p2, p3, t, t2, t3, out, arrDim) {
	  var len = p0.length;

	  if (arrDim == 1) {
	    for (var i = 0; i < len; i++) {
	      out[i] = catmullRomInterpolate(p0[i], p1[i], p2[i], p3[i], t, t2, t3);
	    }
	  } else {
	    var len2 = p0[0].length;

	    for (var i = 0; i < len; i++) {
	      for (var j = 0; j < len2; j++) {
	        out[i][j] = catmullRomInterpolate(p0[i][j], p1[i][j], p2[i][j], p3[i][j], t, t2, t3);
	      }
	    }
	  }
	}
	/**
	 * Catmull Rom interpolate number
	 * @param  {number} p0
	 * @param  {number} p1
	 * @param  {number} p2
	 * @param  {number} p3
	 * @param  {number} t
	 * @param  {number} t2
	 * @param  {number} t3
	 * @return {number}
	 */


	function catmullRomInterpolate(p0, p1, p2, p3, t, t2, t3) {
	  var v0 = (p2 - p0) * 0.5;
	  var v1 = (p3 - p1) * 0.5;
	  return (2 * (p1 - p2) + v0 + v1) * t3 + (-3 * (p1 - p2) - 2 * v0 - v1) * t2 + v0 * t + p1;
	}

	function cloneValue(value) {
	  if (isArrayLike(value)) {
	    var len = value.length;

	    if (isArrayLike(value[0])) {
	      var ret = [];

	      for (var i = 0; i < len; i++) {
	        ret.push(arraySlice.call(value[i]));
	      }

	      return ret;
	    }

	    return arraySlice.call(value);
	  }

	  return value;
	}

	function rgba2String(rgba) {
	  rgba[0] = Math.floor(rgba[0]);
	  rgba[1] = Math.floor(rgba[1]);
	  rgba[2] = Math.floor(rgba[2]);
	  return 'rgba(' + rgba.join(',') + ')';
	}

	function getArrayDim(keyframes) {
	  var lastValue = keyframes[keyframes.length - 1].value;
	  return isArrayLike(lastValue && lastValue[0]) ? 2 : 1;
	}

	function createTrackClip(animator, easing, oneTrackDone, keyframes, propName, forceAnimate) {
	  var getter = animator._getter;
	  var setter = animator._setter;
	  var useSpline = easing === 'spline';
	  var trackLen = keyframes.length;

	  if (!trackLen) {
	    return;
	  } // Guess data type


	  var firstVal = keyframes[0].value;
	  var isValueArray = isArrayLike(firstVal);
	  var isValueColor = false;
	  var isValueString = false; // For vertices morphing

	  var arrDim = isValueArray ? getArrayDim(keyframes) : 0;
	  var trackMaxTime; // Sort keyframe as ascending

	  keyframes.sort(function (a, b) {
	    return a.time - b.time;
	  });
	  trackMaxTime = keyframes[trackLen - 1].time; // Percents of each keyframe

	  var kfPercents = []; // Value of each keyframe

	  var kfValues = [];
	  var prevValue = keyframes[0].value;
	  var isAllValueEqual = true;

	  for (var i = 0; i < trackLen; i++) {
	    kfPercents.push(keyframes[i].time / trackMaxTime); // Assume value is a color when it is a string

	    var value = keyframes[i].value; // Check if value is equal, deep check if value is array

	    if (!(isValueArray && isArraySame(value, prevValue, arrDim) || !isValueArray && value === prevValue)) {
	      isAllValueEqual = false;
	    }

	    prevValue = value; // Try converting a string to a color array

	    if (typeof value == 'string') {
	      var colorArray = color.parse(value);

	      if (colorArray) {
	        value = colorArray;
	        isValueColor = true;
	      } else {
	        isValueString = true;
	      }
	    }

	    kfValues.push(value);
	  }

	  if (!forceAnimate && isAllValueEqual) {
	    return;
	  }

	  var lastValue = kfValues[trackLen - 1]; // Polyfill array and NaN value

	  for (var i = 0; i < trackLen - 1; i++) {
	    if (isValueArray) {
	      fillArr(kfValues[i], lastValue, arrDim);
	    } else {
	      if (isNaN(kfValues[i]) && !isNaN(lastValue) && !isValueString && !isValueColor) {
	        kfValues[i] = lastValue;
	      }
	    }
	  }

	  isValueArray && fillArr(getter(animator._target, propName), lastValue, arrDim); // Cache the key of last frame to speed up when
	  // animation playback is sequency

	  var lastFrame = 0;
	  var lastFramePercent = 0;
	  var start;
	  var w;
	  var p0;
	  var p1;
	  var p2;
	  var p3;

	  if (isValueColor) {
	    var rgba = [0, 0, 0, 0];
	  }

	  var onframe = function (target, percent) {
	    // Find the range keyframes
	    // kf1-----kf2---------current--------kf3
	    // find kf2 and kf3 and do interpolation
	    var frame; // In the easing function like elasticOut, percent may less than 0

	    if (percent < 0) {
	      frame = 0;
	    } else if (percent < lastFramePercent) {
	      // Start from next key
	      // PENDING start from lastFrame ?
	      start = Math.min(lastFrame + 1, trackLen - 1);

	      for (frame = start; frame >= 0; frame--) {
	        if (kfPercents[frame] <= percent) {
	          break;
	        }
	      } // PENDING really need to do this ?


	      frame = Math.min(frame, trackLen - 2);
	    } else {
	      for (frame = lastFrame; frame < trackLen; frame++) {
	        if (kfPercents[frame] > percent) {
	          break;
	        }
	      }

	      frame = Math.min(frame - 1, trackLen - 2);
	    }

	    lastFrame = frame;
	    lastFramePercent = percent;
	    var range = kfPercents[frame + 1] - kfPercents[frame];

	    if (range === 0) {
	      return;
	    } else {
	      w = (percent - kfPercents[frame]) / range;
	    }

	    if (useSpline) {
	      p1 = kfValues[frame];
	      p0 = kfValues[frame === 0 ? frame : frame - 1];
	      p2 = kfValues[frame > trackLen - 2 ? trackLen - 1 : frame + 1];
	      p3 = kfValues[frame > trackLen - 3 ? trackLen - 1 : frame + 2];

	      if (isValueArray) {
	        catmullRomInterpolateArray(p0, p1, p2, p3, w, w * w, w * w * w, getter(target, propName), arrDim);
	      } else {
	        var value;

	        if (isValueColor) {
	          value = catmullRomInterpolateArray(p0, p1, p2, p3, w, w * w, w * w * w, rgba, 1);
	          value = rgba2String(rgba);
	        } else if (isValueString) {
	          // String is step(0.5)
	          return interpolateString(p1, p2, w);
	        } else {
	          value = catmullRomInterpolate(p0, p1, p2, p3, w, w * w, w * w * w);
	        }

	        setter(target, propName, value);
	      }
	    } else {
	      if (isValueArray) {
	        interpolateArray(kfValues[frame], kfValues[frame + 1], w, getter(target, propName), arrDim);
	      } else {
	        var value;

	        if (isValueColor) {
	          interpolateArray(kfValues[frame], kfValues[frame + 1], w, rgba, 1);
	          value = rgba2String(rgba);
	        } else if (isValueString) {
	          // String is step(0.5)
	          return interpolateString(kfValues[frame], kfValues[frame + 1], w);
	        } else {
	          value = interpolateNumber(kfValues[frame], kfValues[frame + 1], w);
	        }

	        setter(target, propName, value);
	      }
	    }
	  };

	  var clip = new Clip({
	    target: animator._target,
	    life: trackMaxTime,
	    loop: animator._loop,
	    delay: animator._delay,
	    onframe: onframe,
	    ondestroy: oneTrackDone
	  });

	  if (easing && easing !== 'spline') {
	    clip.easing = easing;
	  }

	  return clip;
	}
	/**
	 * @alias module:zrender/animation/Animator
	 * @constructor
	 * @param {Object} target
	 * @param {boolean} loop
	 * @param {Function} getter
	 * @param {Function} setter
	 */


	var Animator = function (target, loop, getter, setter) {
	  this._tracks = {};
	  this._target = target;
	  this._loop = loop || false;
	  this._getter = getter || defaultGetter;
	  this._setter = setter || defaultSetter;
	  this._clipCount = 0;
	  this._delay = 0;
	  this._doneList = [];
	  this._onframeList = [];
	  this._clipList = [];
	};

	Animator.prototype = {
	  /**
	   * 设置动画关键帧
	   * @param  {number} time 关键帧时间，单位是ms
	   * @param  {Object} props 关键帧的属性值，key-value表示
	   * @return {module:zrender/animation/Animator}
	   */
	  when: function (time
	  /* ms */
	  , props) {
	    var tracks = this._tracks;

	    for (var propName in props) {
	      if (!props.hasOwnProperty(propName)) {
	        continue;
	      }

	      if (!tracks[propName]) {
	        tracks[propName] = []; // Invalid value

	        var value = this._getter(this._target, propName);

	        if (value == null) {
	          // zrLog('Invalid property ' + propName);
	          continue;
	        } // If time is 0
	        //  Then props is given initialize value
	        // Else
	        //  Initialize value from current prop value


	        if (time !== 0) {
	          tracks[propName].push({
	            time: 0,
	            value: cloneValue(value)
	          });
	        }
	      }

	      tracks[propName].push({
	        time: time,
	        value: props[propName]
	      });
	    }

	    return this;
	  },

	  /**
	   * 添加动画每一帧的回调函数
	   * @param  {Function} callback
	   * @return {module:zrender/animation/Animator}
	   */
	  during: function (callback) {
	    this._onframeList.push(callback);

	    return this;
	  },
	  pause: function () {
	    for (var i = 0; i < this._clipList.length; i++) {
	      this._clipList[i].pause();
	    }

	    this._paused = true;
	  },
	  resume: function () {
	    for (var i = 0; i < this._clipList.length; i++) {
	      this._clipList[i].resume();
	    }

	    this._paused = false;
	  },
	  isPaused: function () {
	    return !!this._paused;
	  },
	  _doneCallback: function () {
	    // Clear all tracks
	    this._tracks = {}; // Clear all clips

	    this._clipList.length = 0;
	    var doneList = this._doneList;
	    var len = doneList.length;

	    for (var i = 0; i < len; i++) {
	      doneList[i].call(this);
	    }
	  },

	  /**
	   * 开始执行动画
	   * @param  {string|Function} [easing]
	   *         动画缓动函数，详见{@link module:zrender/animation/easing}
	   * @param  {boolean} forceAnimate
	   * @return {module:zrender/animation/Animator}
	   */
	  start: function (easing, forceAnimate) {
	    var self = this;
	    var clipCount = 0;

	    var oneTrackDone = function () {
	      clipCount--;

	      if (!clipCount) {
	        self._doneCallback();
	      }
	    };

	    var lastClip;

	    for (var propName in this._tracks) {
	      if (!this._tracks.hasOwnProperty(propName)) {
	        continue;
	      }

	      var clip = createTrackClip(this, easing, oneTrackDone, this._tracks[propName], propName, forceAnimate);

	      if (clip) {
	        this._clipList.push(clip);

	        clipCount++; // If start after added to animation

	        if (this.animation) {
	          this.animation.addClip(clip);
	        }

	        lastClip = clip;
	      }
	    } // Add during callback on the last clip


	    if (lastClip) {
	      var oldOnFrame = lastClip.onframe;

	      lastClip.onframe = function (target, percent) {
	        oldOnFrame(target, percent);

	        for (var i = 0; i < self._onframeList.length; i++) {
	          self._onframeList[i](target, percent);
	        }
	      };
	    } // This optimization will help the case that in the upper application
	    // the view may be refreshed frequently, where animation will be
	    // called repeatly but nothing changed.


	    if (!clipCount) {
	      this._doneCallback();
	    }

	    return this;
	  },

	  /**
	   * 停止动画
	   * @param {boolean} forwardToLast If move to last frame before stop
	   */
	  stop: function (forwardToLast) {
	    var clipList = this._clipList;
	    var animation = this.animation;

	    for (var i = 0; i < clipList.length; i++) {
	      var clip = clipList[i];

	      if (forwardToLast) {
	        // Move to last frame before stop
	        clip.onframe(this._target, 1);
	      }

	      animation && animation.removeClip(clip);
	    }

	    clipList.length = 0;
	  },

	  /**
	   * 设置动画延迟开始的时间
	   * @param  {number} time 单位ms
	   * @return {module:zrender/animation/Animator}
	   */
	  delay: function (time) {
	    this._delay = time;
	    return this;
	  },

	  /**
	   * 添加动画结束的回调
	   * @param  {Function} cb
	   * @return {module:zrender/animation/Animator}
	   */
	  done: function (cb) {
	    if (cb) {
	      this._doneList.push(cb);
	    }

	    return this;
	  },

	  /**
	   * @return {Array.<module:zrender/animation/Clip>}
	   */
	  getClips: function () {
	    return this._clipList;
	  }
	};
	var _default = Animator;
	module.exports = _default;

/***/ }),
/* 193 */
/***/ (function(module, exports, __webpack_require__) {

	var easingFuncs = __webpack_require__(194);

	/**
	 * 动画主控制器
	 * @config target 动画对象，可以是数组，如果是数组的话会批量分发onframe等事件
	 * @config life(1000) 动画时长
	 * @config delay(0) 动画延迟时间
	 * @config loop(true)
	 * @config gap(0) 循环的间隔时间
	 * @config onframe
	 * @config easing(optional)
	 * @config ondestroy(optional)
	 * @config onrestart(optional)
	 *
	 * TODO pause
	 */
	function Clip(options) {
	  this._target = options.target; // 生命周期

	  this._life = options.life || 1000; // 延时

	  this._delay = options.delay || 0; // 开始时间
	  // this._startTime = new Date().getTime() + this._delay;// 单位毫秒

	  this._initialized = false; // 是否循环

	  this.loop = options.loop == null ? false : options.loop;
	  this.gap = options.gap || 0;
	  this.easing = options.easing || 'Linear';
	  this.onframe = options.onframe;
	  this.ondestroy = options.ondestroy;
	  this.onrestart = options.onrestart;
	  this._pausedTime = 0;
	  this._paused = false;
	}

	Clip.prototype = {
	  constructor: Clip,
	  step: function (globalTime, deltaTime) {
	    // Set startTime on first step, or _startTime may has milleseconds different between clips
	    // PENDING
	    if (!this._initialized) {
	      this._startTime = globalTime + this._delay;
	      this._initialized = true;
	    }

	    if (this._paused) {
	      this._pausedTime += deltaTime;
	      return;
	    }

	    var percent = (globalTime - this._startTime - this._pausedTime) / this._life; // 还没开始

	    if (percent < 0) {
	      return;
	    }

	    percent = Math.min(percent, 1);
	    var easing = this.easing;
	    var easingFunc = typeof easing == 'string' ? easingFuncs[easing] : easing;
	    var schedule = typeof easingFunc === 'function' ? easingFunc(percent) : percent;
	    this.fire('frame', schedule); // 结束

	    if (percent == 1) {
	      if (this.loop) {
	        this.restart(globalTime); // 重新开始周期
	        // 抛出而不是直接调用事件直到 stage.update 后再统一调用这些事件

	        return 'restart';
	      } // 动画完成将这个控制器标识为待删除
	      // 在Animation.update中进行批量删除


	      this._needsRemove = true;
	      return 'destroy';
	    }

	    return null;
	  },
	  restart: function (globalTime) {
	    var remainder = (globalTime - this._startTime - this._pausedTime) % this._life;
	    this._startTime = globalTime - remainder + this.gap;
	    this._pausedTime = 0;
	    this._needsRemove = false;
	  },
	  fire: function (eventType, arg) {
	    eventType = 'on' + eventType;

	    if (this[eventType]) {
	      this[eventType](this._target, arg);
	    }
	  },
	  pause: function () {
	    this._paused = true;
	  },
	  resume: function () {
	    this._paused = false;
	  }
	};
	var _default = Clip;
	module.exports = _default;

/***/ }),
/* 194 */
/***/ (function(module, exports) {

	/**
	 * 缓动代码来自 https://github.com/sole/tween.js/blob/master/src/Tween.js
	 * @see http://sole.github.io/tween.js/examples/03_graphs.html
	 * @exports zrender/animation/easing
	 */
	var easing = {
	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  linear: function (k) {
	    return k;
	  },

	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  quadraticIn: function (k) {
	    return k * k;
	  },

	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  quadraticOut: function (k) {
	    return k * (2 - k);
	  },

	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  quadraticInOut: function (k) {
	    if ((k *= 2) < 1) {
	      return 0.5 * k * k;
	    }

	    return -0.5 * (--k * (k - 2) - 1);
	  },
	  // 三次方的缓动（t^3）

	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  cubicIn: function (k) {
	    return k * k * k;
	  },

	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  cubicOut: function (k) {
	    return --k * k * k + 1;
	  },

	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  cubicInOut: function (k) {
	    if ((k *= 2) < 1) {
	      return 0.5 * k * k * k;
	    }

	    return 0.5 * ((k -= 2) * k * k + 2);
	  },
	  // 四次方的缓动（t^4）

	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  quarticIn: function (k) {
	    return k * k * k * k;
	  },

	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  quarticOut: function (k) {
	    return 1 - --k * k * k * k;
	  },

	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  quarticInOut: function (k) {
	    if ((k *= 2) < 1) {
	      return 0.5 * k * k * k * k;
	    }

	    return -0.5 * ((k -= 2) * k * k * k - 2);
	  },
	  // 五次方的缓动（t^5）

	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  quinticIn: function (k) {
	    return k * k * k * k * k;
	  },

	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  quinticOut: function (k) {
	    return --k * k * k * k * k + 1;
	  },

	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  quinticInOut: function (k) {
	    if ((k *= 2) < 1) {
	      return 0.5 * k * k * k * k * k;
	    }

	    return 0.5 * ((k -= 2) * k * k * k * k + 2);
	  },
	  // 正弦曲线的缓动（sin(t)）

	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  sinusoidalIn: function (k) {
	    return 1 - Math.cos(k * Math.PI / 2);
	  },

	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  sinusoidalOut: function (k) {
	    return Math.sin(k * Math.PI / 2);
	  },

	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  sinusoidalInOut: function (k) {
	    return 0.5 * (1 - Math.cos(Math.PI * k));
	  },
	  // 指数曲线的缓动（2^t）

	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  exponentialIn: function (k) {
	    return k === 0 ? 0 : Math.pow(1024, k - 1);
	  },

	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  exponentialOut: function (k) {
	    return k === 1 ? 1 : 1 - Math.pow(2, -10 * k);
	  },

	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  exponentialInOut: function (k) {
	    if (k === 0) {
	      return 0;
	    }

	    if (k === 1) {
	      return 1;
	    }

	    if ((k *= 2) < 1) {
	      return 0.5 * Math.pow(1024, k - 1);
	    }

	    return 0.5 * (-Math.pow(2, -10 * (k - 1)) + 2);
	  },
	  // 圆形曲线的缓动（sqrt(1-t^2)）

	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  circularIn: function (k) {
	    return 1 - Math.sqrt(1 - k * k);
	  },

	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  circularOut: function (k) {
	    return Math.sqrt(1 - --k * k);
	  },

	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  circularInOut: function (k) {
	    if ((k *= 2) < 1) {
	      return -0.5 * (Math.sqrt(1 - k * k) - 1);
	    }

	    return 0.5 * (Math.sqrt(1 - (k -= 2) * k) + 1);
	  },
	  // 创建类似于弹簧在停止前来回振荡的动画

	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  elasticIn: function (k) {
	    var s;
	    var a = 0.1;
	    var p = 0.4;

	    if (k === 0) {
	      return 0;
	    }

	    if (k === 1) {
	      return 1;
	    }

	    if (!a || a < 1) {
	      a = 1;
	      s = p / 4;
	    } else {
	      s = p * Math.asin(1 / a) / (2 * Math.PI);
	    }

	    return -(a * Math.pow(2, 10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p));
	  },

	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  elasticOut: function (k) {
	    var s;
	    var a = 0.1;
	    var p = 0.4;

	    if (k === 0) {
	      return 0;
	    }

	    if (k === 1) {
	      return 1;
	    }

	    if (!a || a < 1) {
	      a = 1;
	      s = p / 4;
	    } else {
	      s = p * Math.asin(1 / a) / (2 * Math.PI);
	    }

	    return a * Math.pow(2, -10 * k) * Math.sin((k - s) * (2 * Math.PI) / p) + 1;
	  },

	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  elasticInOut: function (k) {
	    var s;
	    var a = 0.1;
	    var p = 0.4;

	    if (k === 0) {
	      return 0;
	    }

	    if (k === 1) {
	      return 1;
	    }

	    if (!a || a < 1) {
	      a = 1;
	      s = p / 4;
	    } else {
	      s = p * Math.asin(1 / a) / (2 * Math.PI);
	    }

	    if ((k *= 2) < 1) {
	      return -0.5 * (a * Math.pow(2, 10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p));
	    }

	    return a * Math.pow(2, -10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p) * 0.5 + 1;
	  },
	  // 在某一动画开始沿指示的路径进行动画处理前稍稍收回该动画的移动

	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  backIn: function (k) {
	    var s = 1.70158;
	    return k * k * ((s + 1) * k - s);
	  },

	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  backOut: function (k) {
	    var s = 1.70158;
	    return --k * k * ((s + 1) * k + s) + 1;
	  },

	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  backInOut: function (k) {
	    var s = 1.70158 * 1.525;

	    if ((k *= 2) < 1) {
	      return 0.5 * (k * k * ((s + 1) * k - s));
	    }

	    return 0.5 * ((k -= 2) * k * ((s + 1) * k + s) + 2);
	  },
	  // 创建弹跳效果

	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  bounceIn: function (k) {
	    return 1 - easing.bounceOut(1 - k);
	  },

	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  bounceOut: function (k) {
	    if (k < 1 / 2.75) {
	      return 7.5625 * k * k;
	    } else if (k < 2 / 2.75) {
	      return 7.5625 * (k -= 1.5 / 2.75) * k + 0.75;
	    } else if (k < 2.5 / 2.75) {
	      return 7.5625 * (k -= 2.25 / 2.75) * k + 0.9375;
	    } else {
	      return 7.5625 * (k -= 2.625 / 2.75) * k + 0.984375;
	    }
	  },

	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  bounceInOut: function (k) {
	    if (k < 0.5) {
	      return easing.bounceIn(k * 2) * 0.5;
	    }

	    return easing.bounceOut(k * 2 - 1) * 0.5 + 0.5;
	  }
	};
	var _default = easing;
	module.exports = _default;

/***/ }),
/* 195 */
/***/ (function(module, exports, __webpack_require__) {

	var LRU = __webpack_require__(196);

	var kCSSColorTable = {
	  'transparent': [0, 0, 0, 0],
	  'aliceblue': [240, 248, 255, 1],
	  'antiquewhite': [250, 235, 215, 1],
	  'aqua': [0, 255, 255, 1],
	  'aquamarine': [127, 255, 212, 1],
	  'azure': [240, 255, 255, 1],
	  'beige': [245, 245, 220, 1],
	  'bisque': [255, 228, 196, 1],
	  'black': [0, 0, 0, 1],
	  'blanchedalmond': [255, 235, 205, 1],
	  'blue': [0, 0, 255, 1],
	  'blueviolet': [138, 43, 226, 1],
	  'brown': [165, 42, 42, 1],
	  'burlywood': [222, 184, 135, 1],
	  'cadetblue': [95, 158, 160, 1],
	  'chartreuse': [127, 255, 0, 1],
	  'chocolate': [210, 105, 30, 1],
	  'coral': [255, 127, 80, 1],
	  'cornflowerblue': [100, 149, 237, 1],
	  'cornsilk': [255, 248, 220, 1],
	  'crimson': [220, 20, 60, 1],
	  'cyan': [0, 255, 255, 1],
	  'darkblue': [0, 0, 139, 1],
	  'darkcyan': [0, 139, 139, 1],
	  'darkgoldenrod': [184, 134, 11, 1],
	  'darkgray': [169, 169, 169, 1],
	  'darkgreen': [0, 100, 0, 1],
	  'darkgrey': [169, 169, 169, 1],
	  'darkkhaki': [189, 183, 107, 1],
	  'darkmagenta': [139, 0, 139, 1],
	  'darkolivegreen': [85, 107, 47, 1],
	  'darkorange': [255, 140, 0, 1],
	  'darkorchid': [153, 50, 204, 1],
	  'darkred': [139, 0, 0, 1],
	  'darksalmon': [233, 150, 122, 1],
	  'darkseagreen': [143, 188, 143, 1],
	  'darkslateblue': [72, 61, 139, 1],
	  'darkslategray': [47, 79, 79, 1],
	  'darkslategrey': [47, 79, 79, 1],
	  'darkturquoise': [0, 206, 209, 1],
	  'darkviolet': [148, 0, 211, 1],
	  'deeppink': [255, 20, 147, 1],
	  'deepskyblue': [0, 191, 255, 1],
	  'dimgray': [105, 105, 105, 1],
	  'dimgrey': [105, 105, 105, 1],
	  'dodgerblue': [30, 144, 255, 1],
	  'firebrick': [178, 34, 34, 1],
	  'floralwhite': [255, 250, 240, 1],
	  'forestgreen': [34, 139, 34, 1],
	  'fuchsia': [255, 0, 255, 1],
	  'gainsboro': [220, 220, 220, 1],
	  'ghostwhite': [248, 248, 255, 1],
	  'gold': [255, 215, 0, 1],
	  'goldenrod': [218, 165, 32, 1],
	  'gray': [128, 128, 128, 1],
	  'green': [0, 128, 0, 1],
	  'greenyellow': [173, 255, 47, 1],
	  'grey': [128, 128, 128, 1],
	  'honeydew': [240, 255, 240, 1],
	  'hotpink': [255, 105, 180, 1],
	  'indianred': [205, 92, 92, 1],
	  'indigo': [75, 0, 130, 1],
	  'ivory': [255, 255, 240, 1],
	  'khaki': [240, 230, 140, 1],
	  'lavender': [230, 230, 250, 1],
	  'lavenderblush': [255, 240, 245, 1],
	  'lawngreen': [124, 252, 0, 1],
	  'lemonchiffon': [255, 250, 205, 1],
	  'lightblue': [173, 216, 230, 1],
	  'lightcoral': [240, 128, 128, 1],
	  'lightcyan': [224, 255, 255, 1],
	  'lightgoldenrodyellow': [250, 250, 210, 1],
	  'lightgray': [211, 211, 211, 1],
	  'lightgreen': [144, 238, 144, 1],
	  'lightgrey': [211, 211, 211, 1],
	  'lightpink': [255, 182, 193, 1],
	  'lightsalmon': [255, 160, 122, 1],
	  'lightseagreen': [32, 178, 170, 1],
	  'lightskyblue': [135, 206, 250, 1],
	  'lightslategray': [119, 136, 153, 1],
	  'lightslategrey': [119, 136, 153, 1],
	  'lightsteelblue': [176, 196, 222, 1],
	  'lightyellow': [255, 255, 224, 1],
	  'lime': [0, 255, 0, 1],
	  'limegreen': [50, 205, 50, 1],
	  'linen': [250, 240, 230, 1],
	  'magenta': [255, 0, 255, 1],
	  'maroon': [128, 0, 0, 1],
	  'mediumaquamarine': [102, 205, 170, 1],
	  'mediumblue': [0, 0, 205, 1],
	  'mediumorchid': [186, 85, 211, 1],
	  'mediumpurple': [147, 112, 219, 1],
	  'mediumseagreen': [60, 179, 113, 1],
	  'mediumslateblue': [123, 104, 238, 1],
	  'mediumspringgreen': [0, 250, 154, 1],
	  'mediumturquoise': [72, 209, 204, 1],
	  'mediumvioletred': [199, 21, 133, 1],
	  'midnightblue': [25, 25, 112, 1],
	  'mintcream': [245, 255, 250, 1],
	  'mistyrose': [255, 228, 225, 1],
	  'moccasin': [255, 228, 181, 1],
	  'navajowhite': [255, 222, 173, 1],
	  'navy': [0, 0, 128, 1],
	  'oldlace': [253, 245, 230, 1],
	  'olive': [128, 128, 0, 1],
	  'olivedrab': [107, 142, 35, 1],
	  'orange': [255, 165, 0, 1],
	  'orangered': [255, 69, 0, 1],
	  'orchid': [218, 112, 214, 1],
	  'palegoldenrod': [238, 232, 170, 1],
	  'palegreen': [152, 251, 152, 1],
	  'paleturquoise': [175, 238, 238, 1],
	  'palevioletred': [219, 112, 147, 1],
	  'papayawhip': [255, 239, 213, 1],
	  'peachpuff': [255, 218, 185, 1],
	  'peru': [205, 133, 63, 1],
	  'pink': [255, 192, 203, 1],
	  'plum': [221, 160, 221, 1],
	  'powderblue': [176, 224, 230, 1],
	  'purple': [128, 0, 128, 1],
	  'red': [255, 0, 0, 1],
	  'rosybrown': [188, 143, 143, 1],
	  'royalblue': [65, 105, 225, 1],
	  'saddlebrown': [139, 69, 19, 1],
	  'salmon': [250, 128, 114, 1],
	  'sandybrown': [244, 164, 96, 1],
	  'seagreen': [46, 139, 87, 1],
	  'seashell': [255, 245, 238, 1],
	  'sienna': [160, 82, 45, 1],
	  'silver': [192, 192, 192, 1],
	  'skyblue': [135, 206, 235, 1],
	  'slateblue': [106, 90, 205, 1],
	  'slategray': [112, 128, 144, 1],
	  'slategrey': [112, 128, 144, 1],
	  'snow': [255, 250, 250, 1],
	  'springgreen': [0, 255, 127, 1],
	  'steelblue': [70, 130, 180, 1],
	  'tan': [210, 180, 140, 1],
	  'teal': [0, 128, 128, 1],
	  'thistle': [216, 191, 216, 1],
	  'tomato': [255, 99, 71, 1],
	  'turquoise': [64, 224, 208, 1],
	  'violet': [238, 130, 238, 1],
	  'wheat': [245, 222, 179, 1],
	  'white': [255, 255, 255, 1],
	  'whitesmoke': [245, 245, 245, 1],
	  'yellow': [255, 255, 0, 1],
	  'yellowgreen': [154, 205, 50, 1]
	};

	function clampCssByte(i) {
	  // Clamp to integer 0 .. 255.
	  i = Math.round(i); // Seems to be what Chrome does (vs truncation).

	  return i < 0 ? 0 : i > 255 ? 255 : i;
	}

	function clampCssAngle(i) {
	  // Clamp to integer 0 .. 360.
	  i = Math.round(i); // Seems to be what Chrome does (vs truncation).

	  return i < 0 ? 0 : i > 360 ? 360 : i;
	}

	function clampCssFloat(f) {
	  // Clamp to float 0.0 .. 1.0.
	  return f < 0 ? 0 : f > 1 ? 1 : f;
	}

	function parseCssInt(str) {
	  // int or percentage.
	  if (str.length && str.charAt(str.length - 1) === '%') {
	    return clampCssByte(parseFloat(str) / 100 * 255);
	  }

	  return clampCssByte(parseInt(str, 10));
	}

	function parseCssFloat(str) {
	  // float or percentage.
	  if (str.length && str.charAt(str.length - 1) === '%') {
	    return clampCssFloat(parseFloat(str) / 100);
	  }

	  return clampCssFloat(parseFloat(str));
	}

	function cssHueToRgb(m1, m2, h) {
	  if (h < 0) {
	    h += 1;
	  } else if (h > 1) {
	    h -= 1;
	  }

	  if (h * 6 < 1) {
	    return m1 + (m2 - m1) * h * 6;
	  }

	  if (h * 2 < 1) {
	    return m2;
	  }

	  if (h * 3 < 2) {
	    return m1 + (m2 - m1) * (2 / 3 - h) * 6;
	  }

	  return m1;
	}

	function lerpNumber(a, b, p) {
	  return a + (b - a) * p;
	}

	function setRgba(out, r, g, b, a) {
	  out[0] = r;
	  out[1] = g;
	  out[2] = b;
	  out[3] = a;
	  return out;
	}

	function copyRgba(out, a) {
	  out[0] = a[0];
	  out[1] = a[1];
	  out[2] = a[2];
	  out[3] = a[3];
	  return out;
	}

	var colorCache = new LRU(20);
	var lastRemovedArr = null;

	function putToCache(colorStr, rgbaArr) {
	  // Reuse removed array
	  if (lastRemovedArr) {
	    copyRgba(lastRemovedArr, rgbaArr);
	  }

	  lastRemovedArr = colorCache.put(colorStr, lastRemovedArr || rgbaArr.slice());
	}
	/**
	 * @param {string} colorStr
	 * @param {Array.<number>} out
	 * @return {Array.<number>}
	 * @memberOf module:zrender/util/color
	 */


	function parse(colorStr, rgbaArr) {
	  if (!colorStr) {
	    return;
	  }

	  rgbaArr = rgbaArr || [];
	  var cached = colorCache.get(colorStr);

	  if (cached) {
	    return copyRgba(rgbaArr, cached);
	  } // colorStr may be not string


	  colorStr = colorStr + ''; // Remove all whitespace, not compliant, but should just be more accepting.

	  var str = colorStr.replace(/ /g, '').toLowerCase(); // Color keywords (and transparent) lookup.

	  if (str in kCSSColorTable) {
	    copyRgba(rgbaArr, kCSSColorTable[str]);
	    putToCache(colorStr, rgbaArr);
	    return rgbaArr;
	  } // #abc and #abc123 syntax.


	  if (str.charAt(0) === '#') {
	    if (str.length === 4) {
	      var iv = parseInt(str.substr(1), 16); // TODO(deanm): Stricter parsing.

	      if (!(iv >= 0 && iv <= 0xfff)) {
	        setRgba(rgbaArr, 0, 0, 0, 1);
	        return; // Covers NaN.
	      }

	      setRgba(rgbaArr, (iv & 0xf00) >> 4 | (iv & 0xf00) >> 8, iv & 0xf0 | (iv & 0xf0) >> 4, iv & 0xf | (iv & 0xf) << 4, 1);
	      putToCache(colorStr, rgbaArr);
	      return rgbaArr;
	    } else if (str.length === 7) {
	      var iv = parseInt(str.substr(1), 16); // TODO(deanm): Stricter parsing.

	      if (!(iv >= 0 && iv <= 0xffffff)) {
	        setRgba(rgbaArr, 0, 0, 0, 1);
	        return; // Covers NaN.
	      }

	      setRgba(rgbaArr, (iv & 0xff0000) >> 16, (iv & 0xff00) >> 8, iv & 0xff, 1);
	      putToCache(colorStr, rgbaArr);
	      return rgbaArr;
	    }

	    return;
	  }

	  var op = str.indexOf('('),
	      ep = str.indexOf(')');

	  if (op !== -1 && ep + 1 === str.length) {
	    var fname = str.substr(0, op);
	    var params = str.substr(op + 1, ep - (op + 1)).split(',');
	    var alpha = 1; // To allow case fallthrough.

	    switch (fname) {
	      case 'rgba':
	        if (params.length !== 4) {
	          setRgba(rgbaArr, 0, 0, 0, 1);
	          return;
	        }

	        alpha = parseCssFloat(params.pop());
	      // jshint ignore:line
	      // Fall through.

	      case 'rgb':
	        if (params.length !== 3) {
	          setRgba(rgbaArr, 0, 0, 0, 1);
	          return;
	        }

	        setRgba(rgbaArr, parseCssInt(params[0]), parseCssInt(params[1]), parseCssInt(params[2]), alpha);
	        putToCache(colorStr, rgbaArr);
	        return rgbaArr;

	      case 'hsla':
	        if (params.length !== 4) {
	          setRgba(rgbaArr, 0, 0, 0, 1);
	          return;
	        }

	        params[3] = parseCssFloat(params[3]);
	        hsla2rgba(params, rgbaArr);
	        putToCache(colorStr, rgbaArr);
	        return rgbaArr;

	      case 'hsl':
	        if (params.length !== 3) {
	          setRgba(rgbaArr, 0, 0, 0, 1);
	          return;
	        }

	        hsla2rgba(params, rgbaArr);
	        putToCache(colorStr, rgbaArr);
	        return rgbaArr;

	      default:
	        return;
	    }
	  }

	  setRgba(rgbaArr, 0, 0, 0, 1);
	  return;
	}
	/**
	 * @param {Array.<number>} hsla
	 * @param {Array.<number>} rgba
	 * @return {Array.<number>} rgba
	 */


	function hsla2rgba(hsla, rgba) {
	  var h = (parseFloat(hsla[0]) % 360 + 360) % 360 / 360; // 0 .. 1
	  // NOTE(deanm): According to the CSS spec s/l should only be
	  // percentages, but we don't bother and let float or percentage.

	  var s = parseCssFloat(hsla[1]);
	  var l = parseCssFloat(hsla[2]);
	  var m2 = l <= 0.5 ? l * (s + 1) : l + s - l * s;
	  var m1 = l * 2 - m2;
	  rgba = rgba || [];
	  setRgba(rgba, clampCssByte(cssHueToRgb(m1, m2, h + 1 / 3) * 255), clampCssByte(cssHueToRgb(m1, m2, h) * 255), clampCssByte(cssHueToRgb(m1, m2, h - 1 / 3) * 255), 1);

	  if (hsla.length === 4) {
	    rgba[3] = hsla[3];
	  }

	  return rgba;
	}
	/**
	 * @param {Array.<number>} rgba
	 * @return {Array.<number>} hsla
	 */


	function rgba2hsla(rgba) {
	  if (!rgba) {
	    return;
	  } // RGB from 0 to 255


	  var R = rgba[0] / 255;
	  var G = rgba[1] / 255;
	  var B = rgba[2] / 255;
	  var vMin = Math.min(R, G, B); // Min. value of RGB

	  var vMax = Math.max(R, G, B); // Max. value of RGB

	  var delta = vMax - vMin; // Delta RGB value

	  var L = (vMax + vMin) / 2;
	  var H;
	  var S; // HSL results from 0 to 1

	  if (delta === 0) {
	    H = 0;
	    S = 0;
	  } else {
	    if (L < 0.5) {
	      S = delta / (vMax + vMin);
	    } else {
	      S = delta / (2 - vMax - vMin);
	    }

	    var deltaR = ((vMax - R) / 6 + delta / 2) / delta;
	    var deltaG = ((vMax - G) / 6 + delta / 2) / delta;
	    var deltaB = ((vMax - B) / 6 + delta / 2) / delta;

	    if (R === vMax) {
	      H = deltaB - deltaG;
	    } else if (G === vMax) {
	      H = 1 / 3 + deltaR - deltaB;
	    } else if (B === vMax) {
	      H = 2 / 3 + deltaG - deltaR;
	    }

	    if (H < 0) {
	      H += 1;
	    }

	    if (H > 1) {
	      H -= 1;
	    }
	  }

	  var hsla = [H * 360, S, L];

	  if (rgba[3] != null) {
	    hsla.push(rgba[3]);
	  }

	  return hsla;
	}
	/**
	 * @param {string} color
	 * @param {number} level
	 * @return {string}
	 * @memberOf module:zrender/util/color
	 */


	function lift(color, level) {
	  var colorArr = parse(color);

	  if (colorArr) {
	    for (var i = 0; i < 3; i++) {
	      if (level < 0) {
	        colorArr[i] = colorArr[i] * (1 - level) | 0;
	      } else {
	        colorArr[i] = (255 - colorArr[i]) * level + colorArr[i] | 0;
	      }

	      if (colorArr[i] > 255) {
	        colorArr[i] = 255;
	      } else if (color[i] < 0) {
	        colorArr[i] = 0;
	      }
	    }

	    return stringify(colorArr, colorArr.length === 4 ? 'rgba' : 'rgb');
	  }
	}
	/**
	 * @param {string} color
	 * @return {string}
	 * @memberOf module:zrender/util/color
	 */


	function toHex(color) {
	  var colorArr = parse(color);

	  if (colorArr) {
	    return ((1 << 24) + (colorArr[0] << 16) + (colorArr[1] << 8) + +colorArr[2]).toString(16).slice(1);
	  }
	}
	/**
	 * Map value to color. Faster than lerp methods because color is represented by rgba array.
	 * @param {number} normalizedValue A float between 0 and 1.
	 * @param {Array.<Array.<number>>} colors List of rgba color array
	 * @param {Array.<number>} [out] Mapped gba color array
	 * @return {Array.<number>} will be null/undefined if input illegal.
	 */


	function fastLerp(normalizedValue, colors, out) {
	  if (!(colors && colors.length) || !(normalizedValue >= 0 && normalizedValue <= 1)) {
	    return;
	  }

	  out = out || [];
	  var value = normalizedValue * (colors.length - 1);
	  var leftIndex = Math.floor(value);
	  var rightIndex = Math.ceil(value);
	  var leftColor = colors[leftIndex];
	  var rightColor = colors[rightIndex];
	  var dv = value - leftIndex;
	  out[0] = clampCssByte(lerpNumber(leftColor[0], rightColor[0], dv));
	  out[1] = clampCssByte(lerpNumber(leftColor[1], rightColor[1], dv));
	  out[2] = clampCssByte(lerpNumber(leftColor[2], rightColor[2], dv));
	  out[3] = clampCssFloat(lerpNumber(leftColor[3], rightColor[3], dv));
	  return out;
	}
	/**
	 * @deprecated
	 */


	var fastMapToColor = fastLerp;
	/**
	 * @param {number} normalizedValue A float between 0 and 1.
	 * @param {Array.<string>} colors Color list.
	 * @param {boolean=} fullOutput Default false.
	 * @return {(string|Object)} Result color. If fullOutput,
	 *                           return {color: ..., leftIndex: ..., rightIndex: ..., value: ...},
	 * @memberOf module:zrender/util/color
	 */

	function lerp(normalizedValue, colors, fullOutput) {
	  if (!(colors && colors.length) || !(normalizedValue >= 0 && normalizedValue <= 1)) {
	    return;
	  }

	  var value = normalizedValue * (colors.length - 1);
	  var leftIndex = Math.floor(value);
	  var rightIndex = Math.ceil(value);
	  var leftColor = parse(colors[leftIndex]);
	  var rightColor = parse(colors[rightIndex]);
	  var dv = value - leftIndex;
	  var color = stringify([clampCssByte(lerpNumber(leftColor[0], rightColor[0], dv)), clampCssByte(lerpNumber(leftColor[1], rightColor[1], dv)), clampCssByte(lerpNumber(leftColor[2], rightColor[2], dv)), clampCssFloat(lerpNumber(leftColor[3], rightColor[3], dv))], 'rgba');
	  return fullOutput ? {
	    color: color,
	    leftIndex: leftIndex,
	    rightIndex: rightIndex,
	    value: value
	  } : color;
	}
	/**
	 * @deprecated
	 */


	var mapToColor = lerp;
	/**
	 * @param {string} color
	 * @param {number=} h 0 ~ 360, ignore when null.
	 * @param {number=} s 0 ~ 1, ignore when null.
	 * @param {number=} l 0 ~ 1, ignore when null.
	 * @return {string} Color string in rgba format.
	 * @memberOf module:zrender/util/color
	 */

	function modifyHSL(color, h, s, l) {
	  color = parse(color);

	  if (color) {
	    color = rgba2hsla(color);
	    h != null && (color[0] = clampCssAngle(h));
	    s != null && (color[1] = parseCssFloat(s));
	    l != null && (color[2] = parseCssFloat(l));
	    return stringify(hsla2rgba(color), 'rgba');
	  }
	}
	/**
	 * @param {string} color
	 * @param {number=} alpha 0 ~ 1
	 * @return {string} Color string in rgba format.
	 * @memberOf module:zrender/util/color
	 */


	function modifyAlpha(color, alpha) {
	  color = parse(color);

	  if (color && alpha != null) {
	    color[3] = clampCssFloat(alpha);
	    return stringify(color, 'rgba');
	  }
	}
	/**
	 * @param {Array.<number>} arrColor like [12,33,44,0.4]
	 * @param {string} type 'rgba', 'hsva', ...
	 * @return {string} Result color. (If input illegal, return undefined).
	 */


	function stringify(arrColor, type) {
	  if (!arrColor || !arrColor.length) {
	    return;
	  }

	  var colorStr = arrColor[0] + ',' + arrColor[1] + ',' + arrColor[2];

	  if (type === 'rgba' || type === 'hsva' || type === 'hsla') {
	    colorStr += ',' + arrColor[3];
	  }

	  return type + '(' + colorStr + ')';
	}

	exports.parse = parse;
	exports.lift = lift;
	exports.toHex = toHex;
	exports.fastLerp = fastLerp;
	exports.fastMapToColor = fastMapToColor;
	exports.lerp = lerp;
	exports.mapToColor = mapToColor;
	exports.modifyHSL = modifyHSL;
	exports.modifyAlpha = modifyAlpha;
	exports.stringify = stringify;

/***/ }),
/* 196 */
/***/ (function(module, exports) {

	// Simple LRU cache use doubly linked list
	// @module zrender/core/LRU

	/**
	 * Simple double linked list. Compared with array, it has O(1) remove operation.
	 * @constructor
	 */
	var LinkedList = function () {
	  /**
	   * @type {module:zrender/core/LRU~Entry}
	   */
	  this.head = null;
	  /**
	   * @type {module:zrender/core/LRU~Entry}
	   */

	  this.tail = null;
	  this._len = 0;
	};

	var linkedListProto = LinkedList.prototype;
	/**
	 * Insert a new value at the tail
	 * @param  {} val
	 * @return {module:zrender/core/LRU~Entry}
	 */

	linkedListProto.insert = function (val) {
	  var entry = new Entry(val);
	  this.insertEntry(entry);
	  return entry;
	};
	/**
	 * Insert an entry at the tail
	 * @param  {module:zrender/core/LRU~Entry} entry
	 */


	linkedListProto.insertEntry = function (entry) {
	  if (!this.head) {
	    this.head = this.tail = entry;
	  } else {
	    this.tail.next = entry;
	    entry.prev = this.tail;
	    entry.next = null;
	    this.tail = entry;
	  }

	  this._len++;
	};
	/**
	 * Remove entry.
	 * @param  {module:zrender/core/LRU~Entry} entry
	 */


	linkedListProto.remove = function (entry) {
	  var prev = entry.prev;
	  var next = entry.next;

	  if (prev) {
	    prev.next = next;
	  } else {
	    // Is head
	    this.head = next;
	  }

	  if (next) {
	    next.prev = prev;
	  } else {
	    // Is tail
	    this.tail = prev;
	  }

	  entry.next = entry.prev = null;
	  this._len--;
	};
	/**
	 * @return {number}
	 */


	linkedListProto.len = function () {
	  return this._len;
	};
	/**
	 * Clear list
	 */


	linkedListProto.clear = function () {
	  this.head = this.tail = null;
	  this._len = 0;
	};
	/**
	 * @constructor
	 * @param {} val
	 */


	var Entry = function (val) {
	  /**
	   * @type {}
	   */
	  this.value = val;
	  /**
	   * @type {module:zrender/core/LRU~Entry}
	   */

	  this.next;
	  /**
	   * @type {module:zrender/core/LRU~Entry}
	   */

	  this.prev;
	};
	/**
	 * LRU Cache
	 * @constructor
	 * @alias module:zrender/core/LRU
	 */


	var LRU = function (maxSize) {
	  this._list = new LinkedList();
	  this._map = {};
	  this._maxSize = maxSize || 10;
	  this._lastRemovedEntry = null;
	};

	var LRUProto = LRU.prototype;
	/**
	 * @param  {string} key
	 * @param  {} value
	 * @return {} Removed value
	 */

	LRUProto.put = function (key, value) {
	  var list = this._list;
	  var map = this._map;
	  var removed = null;

	  if (map[key] == null) {
	    var len = list.len(); // Reuse last removed entry

	    var entry = this._lastRemovedEntry;

	    if (len >= this._maxSize && len > 0) {
	      // Remove the least recently used
	      var leastUsedEntry = list.head;
	      list.remove(leastUsedEntry);
	      delete map[leastUsedEntry.key];
	      removed = leastUsedEntry.value;
	      this._lastRemovedEntry = leastUsedEntry;
	    }

	    if (entry) {
	      entry.value = value;
	    } else {
	      entry = new Entry(value);
	    }

	    entry.key = key;
	    list.insertEntry(entry);
	    map[key] = entry;
	  }

	  return removed;
	};
	/**
	 * @param  {string} key
	 * @return {}
	 */


	LRUProto.get = function (key) {
	  var entry = this._map[key];
	  var list = this._list;

	  if (entry != null) {
	    // Put the latest used entry in the tail
	    if (entry !== list.tail) {
	      list.remove(entry);
	      list.insertEntry(entry);
	    }

	    return entry.value;
	  }
	};
	/**
	 * Clear the cache
	 */


	LRUProto.clear = function () {
	  this._list.clear();

	  this._map = {};
	};

	var _default = LRU;
	module.exports = _default;

/***/ }),
/* 197 */
/***/ (function(module, exports, __webpack_require__) {

	var _config = __webpack_require__(198);

	var debugMode = _config.debugMode;

	var log = function () {};

	if (debugMode === 1) {
	  log = function () {
	    for (var k in arguments) {
	      throw new Error(arguments[k]);
	    }
	  };
	} else if (debugMode > 1) {
	  log = function () {
	    for (var k in arguments) {
	      console.log(arguments[k]);
	    }
	  };
	}

	var _default = log;
	module.exports = _default;

/***/ }),
/* 198 */
/***/ (function(module, exports) {

	var dpr = 1; // If in browser environment

	if (typeof window !== 'undefined') {
	  dpr = Math.max(window.devicePixelRatio || 1, 1);
	}
	/**
	 * config默认配置项
	 * @exports zrender/config
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 */

	/**
	 * debug日志选项：catchBrushException为true下有效
	 * 0 : 不生成debug数据，发布用
	 * 1 : 异常抛出，调试用
	 * 2 : 控制台输出，调试用
	 */


	var debugMode = 0; // retina 屏幕优化

	var devicePixelRatio = dpr;
	exports.debugMode = debugMode;
	exports.devicePixelRatio = devicePixelRatio;

/***/ }),
/* 199 */
/***/ (function(module, exports, __webpack_require__) {

	var vec2 = __webpack_require__(183);

	var matrix = __webpack_require__(190);

	/**
	 * @module echarts/core/BoundingRect
	 */
	var v2ApplyTransform = vec2.applyTransform;
	var mathMin = Math.min;
	var mathMax = Math.max;
	/**
	 * @alias module:echarts/core/BoundingRect
	 */

	function BoundingRect(x, y, width, height) {
	  if (width < 0) {
	    x = x + width;
	    width = -width;
	  }

	  if (height < 0) {
	    y = y + height;
	    height = -height;
	  }
	  /**
	   * @type {number}
	   */


	  this.x = x;
	  /**
	   * @type {number}
	   */

	  this.y = y;
	  /**
	   * @type {number}
	   */

	  this.width = width;
	  /**
	   * @type {number}
	   */

	  this.height = height;
	}

	BoundingRect.prototype = {
	  constructor: BoundingRect,

	  /**
	   * @param {module:echarts/core/BoundingRect} other
	   */
	  union: function (other) {
	    var x = mathMin(other.x, this.x);
	    var y = mathMin(other.y, this.y);
	    this.width = mathMax(other.x + other.width, this.x + this.width) - x;
	    this.height = mathMax(other.y + other.height, this.y + this.height) - y;
	    this.x = x;
	    this.y = y;
	  },

	  /**
	   * @param {Array.<number>} m
	   * @methods
	   */
	  applyTransform: function () {
	    var lt = [];
	    var rb = [];
	    var lb = [];
	    var rt = [];
	    return function (m) {
	      // In case usage like this
	      // el.getBoundingRect().applyTransform(el.transform)
	      // And element has no transform
	      if (!m) {
	        return;
	      }

	      lt[0] = lb[0] = this.x;
	      lt[1] = rt[1] = this.y;
	      rb[0] = rt[0] = this.x + this.width;
	      rb[1] = lb[1] = this.y + this.height;
	      v2ApplyTransform(lt, lt, m);
	      v2ApplyTransform(rb, rb, m);
	      v2ApplyTransform(lb, lb, m);
	      v2ApplyTransform(rt, rt, m);
	      this.x = mathMin(lt[0], rb[0], lb[0], rt[0]);
	      this.y = mathMin(lt[1], rb[1], lb[1], rt[1]);
	      var maxX = mathMax(lt[0], rb[0], lb[0], rt[0]);
	      var maxY = mathMax(lt[1], rb[1], lb[1], rt[1]);
	      this.width = maxX - this.x;
	      this.height = maxY - this.y;
	    };
	  }(),

	  /**
	   * Calculate matrix of transforming from self to target rect
	   * @param  {module:zrender/core/BoundingRect} b
	   * @return {Array.<number>}
	   */
	  calculateTransform: function (b) {
	    var a = this;
	    var sx = b.width / a.width;
	    var sy = b.height / a.height;
	    var m = matrix.create(); // 矩阵右乘

	    matrix.translate(m, m, [-a.x, -a.y]);
	    matrix.scale(m, m, [sx, sy]);
	    matrix.translate(m, m, [b.x, b.y]);
	    return m;
	  },

	  /**
	   * @param {(module:echarts/core/BoundingRect|Object)} b
	   * @return {boolean}
	   */
	  intersect: function (b) {
	    if (!b) {
	      return false;
	    }

	    if (!(b instanceof BoundingRect)) {
	      // Normalize negative width/height.
	      b = BoundingRect.create(b);
	    }

	    var a = this;
	    var ax0 = a.x;
	    var ax1 = a.x + a.width;
	    var ay0 = a.y;
	    var ay1 = a.y + a.height;
	    var bx0 = b.x;
	    var bx1 = b.x + b.width;
	    var by0 = b.y;
	    var by1 = b.y + b.height;
	    return !(ax1 < bx0 || bx1 < ax0 || ay1 < by0 || by1 < ay0);
	  },
	  contain: function (x, y) {
	    var rect = this;
	    return x >= rect.x && x <= rect.x + rect.width && y >= rect.y && y <= rect.y + rect.height;
	  },

	  /**
	   * @return {module:echarts/core/BoundingRect}
	   */
	  clone: function () {
	    return new BoundingRect(this.x, this.y, this.width, this.height);
	  },

	  /**
	   * Copy from another rect
	   */
	  copy: function (other) {
	    this.x = other.x;
	    this.y = other.y;
	    this.width = other.width;
	    this.height = other.height;
	  },
	  plain: function () {
	    return {
	      x: this.x,
	      y: this.y,
	      width: this.width,
	      height: this.height
	    };
	  }
	};
	/**
	 * @param {Object|module:zrender/core/BoundingRect} rect
	 * @param {number} rect.x
	 * @param {number} rect.y
	 * @param {number} rect.width
	 * @param {number} rect.height
	 * @return {module:zrender/core/BoundingRect}
	 */

	BoundingRect.create = function (rect) {
	  return new BoundingRect(rect.x, rect.y, rect.width, rect.height);
	};

	var _default = BoundingRect;
	module.exports = _default;

/***/ }),
/* 200 */
/***/ (function(module, exports) {

	// https://github.com/mziccard/node-timsort
	var DEFAULT_MIN_MERGE = 32;
	var DEFAULT_MIN_GALLOPING = 7;
	var DEFAULT_TMP_STORAGE_LENGTH = 256;

	function minRunLength(n) {
	  var r = 0;

	  while (n >= DEFAULT_MIN_MERGE) {
	    r |= n & 1;
	    n >>= 1;
	  }

	  return n + r;
	}

	function makeAscendingRun(array, lo, hi, compare) {
	  var runHi = lo + 1;

	  if (runHi === hi) {
	    return 1;
	  }

	  if (compare(array[runHi++], array[lo]) < 0) {
	    while (runHi < hi && compare(array[runHi], array[runHi - 1]) < 0) {
	      runHi++;
	    }

	    reverseRun(array, lo, runHi);
	  } else {
	    while (runHi < hi && compare(array[runHi], array[runHi - 1]) >= 0) {
	      runHi++;
	    }
	  }

	  return runHi - lo;
	}

	function reverseRun(array, lo, hi) {
	  hi--;

	  while (lo < hi) {
	    var t = array[lo];
	    array[lo++] = array[hi];
	    array[hi--] = t;
	  }
	}

	function binaryInsertionSort(array, lo, hi, start, compare) {
	  if (start === lo) {
	    start++;
	  }

	  for (; start < hi; start++) {
	    var pivot = array[start];
	    var left = lo;
	    var right = start;
	    var mid;

	    while (left < right) {
	      mid = left + right >>> 1;

	      if (compare(pivot, array[mid]) < 0) {
	        right = mid;
	      } else {
	        left = mid + 1;
	      }
	    }

	    var n = start - left;

	    switch (n) {
	      case 3:
	        array[left + 3] = array[left + 2];

	      case 2:
	        array[left + 2] = array[left + 1];

	      case 1:
	        array[left + 1] = array[left];
	        break;

	      default:
	        while (n > 0) {
	          array[left + n] = array[left + n - 1];
	          n--;
	        }

	    }

	    array[left] = pivot;
	  }
	}

	function gallopLeft(value, array, start, length, hint, compare) {
	  var lastOffset = 0;
	  var maxOffset = 0;
	  var offset = 1;

	  if (compare(value, array[start + hint]) > 0) {
	    maxOffset = length - hint;

	    while (offset < maxOffset && compare(value, array[start + hint + offset]) > 0) {
	      lastOffset = offset;
	      offset = (offset << 1) + 1;

	      if (offset <= 0) {
	        offset = maxOffset;
	      }
	    }

	    if (offset > maxOffset) {
	      offset = maxOffset;
	    }

	    lastOffset += hint;
	    offset += hint;
	  } else {
	    maxOffset = hint + 1;

	    while (offset < maxOffset && compare(value, array[start + hint - offset]) <= 0) {
	      lastOffset = offset;
	      offset = (offset << 1) + 1;

	      if (offset <= 0) {
	        offset = maxOffset;
	      }
	    }

	    if (offset > maxOffset) {
	      offset = maxOffset;
	    }

	    var tmp = lastOffset;
	    lastOffset = hint - offset;
	    offset = hint - tmp;
	  }

	  lastOffset++;

	  while (lastOffset < offset) {
	    var m = lastOffset + (offset - lastOffset >>> 1);

	    if (compare(value, array[start + m]) > 0) {
	      lastOffset = m + 1;
	    } else {
	      offset = m;
	    }
	  }

	  return offset;
	}

	function gallopRight(value, array, start, length, hint, compare) {
	  var lastOffset = 0;
	  var maxOffset = 0;
	  var offset = 1;

	  if (compare(value, array[start + hint]) < 0) {
	    maxOffset = hint + 1;

	    while (offset < maxOffset && compare(value, array[start + hint - offset]) < 0) {
	      lastOffset = offset;
	      offset = (offset << 1) + 1;

	      if (offset <= 0) {
	        offset = maxOffset;
	      }
	    }

	    if (offset > maxOffset) {
	      offset = maxOffset;
	    }

	    var tmp = lastOffset;
	    lastOffset = hint - offset;
	    offset = hint - tmp;
	  } else {
	    maxOffset = length - hint;

	    while (offset < maxOffset && compare(value, array[start + hint + offset]) >= 0) {
	      lastOffset = offset;
	      offset = (offset << 1) + 1;

	      if (offset <= 0) {
	        offset = maxOffset;
	      }
	    }

	    if (offset > maxOffset) {
	      offset = maxOffset;
	    }

	    lastOffset += hint;
	    offset += hint;
	  }

	  lastOffset++;

	  while (lastOffset < offset) {
	    var m = lastOffset + (offset - lastOffset >>> 1);

	    if (compare(value, array[start + m]) < 0) {
	      offset = m;
	    } else {
	      lastOffset = m + 1;
	    }
	  }

	  return offset;
	}

	function TimSort(array, compare) {
	  var minGallop = DEFAULT_MIN_GALLOPING;
	  var length = 0;
	  var tmpStorageLength = DEFAULT_TMP_STORAGE_LENGTH;
	  var stackLength = 0;
	  var runStart;
	  var runLength;
	  var stackSize = 0;
	  length = array.length;

	  if (length < 2 * DEFAULT_TMP_STORAGE_LENGTH) {
	    tmpStorageLength = length >>> 1;
	  }

	  var tmp = [];
	  stackLength = length < 120 ? 5 : length < 1542 ? 10 : length < 119151 ? 19 : 40;
	  runStart = [];
	  runLength = [];

	  function pushRun(_runStart, _runLength) {
	    runStart[stackSize] = _runStart;
	    runLength[stackSize] = _runLength;
	    stackSize += 1;
	  }

	  function mergeRuns() {
	    while (stackSize > 1) {
	      var n = stackSize - 2;

	      if (n >= 1 && runLength[n - 1] <= runLength[n] + runLength[n + 1] || n >= 2 && runLength[n - 2] <= runLength[n] + runLength[n - 1]) {
	        if (runLength[n - 1] < runLength[n + 1]) {
	          n--;
	        }
	      } else if (runLength[n] > runLength[n + 1]) {
	        break;
	      }

	      mergeAt(n);
	    }
	  }

	  function forceMergeRuns() {
	    while (stackSize > 1) {
	      var n = stackSize - 2;

	      if (n > 0 && runLength[n - 1] < runLength[n + 1]) {
	        n--;
	      }

	      mergeAt(n);
	    }
	  }

	  function mergeAt(i) {
	    var start1 = runStart[i];
	    var length1 = runLength[i];
	    var start2 = runStart[i + 1];
	    var length2 = runLength[i + 1];
	    runLength[i] = length1 + length2;

	    if (i === stackSize - 3) {
	      runStart[i + 1] = runStart[i + 2];
	      runLength[i + 1] = runLength[i + 2];
	    }

	    stackSize--;
	    var k = gallopRight(array[start2], array, start1, length1, 0, compare);
	    start1 += k;
	    length1 -= k;

	    if (length1 === 0) {
	      return;
	    }

	    length2 = gallopLeft(array[start1 + length1 - 1], array, start2, length2, length2 - 1, compare);

	    if (length2 === 0) {
	      return;
	    }

	    if (length1 <= length2) {
	      mergeLow(start1, length1, start2, length2);
	    } else {
	      mergeHigh(start1, length1, start2, length2);
	    }
	  }

	  function mergeLow(start1, length1, start2, length2) {
	    var i = 0;

	    for (i = 0; i < length1; i++) {
	      tmp[i] = array[start1 + i];
	    }

	    var cursor1 = 0;
	    var cursor2 = start2;
	    var dest = start1;
	    array[dest++] = array[cursor2++];

	    if (--length2 === 0) {
	      for (i = 0; i < length1; i++) {
	        array[dest + i] = tmp[cursor1 + i];
	      }

	      return;
	    }

	    if (length1 === 1) {
	      for (i = 0; i < length2; i++) {
	        array[dest + i] = array[cursor2 + i];
	      }

	      array[dest + length2] = tmp[cursor1];
	      return;
	    }

	    var _minGallop = minGallop;
	    var count1, count2, exit;

	    while (1) {
	      count1 = 0;
	      count2 = 0;
	      exit = false;

	      do {
	        if (compare(array[cursor2], tmp[cursor1]) < 0) {
	          array[dest++] = array[cursor2++];
	          count2++;
	          count1 = 0;

	          if (--length2 === 0) {
	            exit = true;
	            break;
	          }
	        } else {
	          array[dest++] = tmp[cursor1++];
	          count1++;
	          count2 = 0;

	          if (--length1 === 1) {
	            exit = true;
	            break;
	          }
	        }
	      } while ((count1 | count2) < _minGallop);

	      if (exit) {
	        break;
	      }

	      do {
	        count1 = gallopRight(array[cursor2], tmp, cursor1, length1, 0, compare);

	        if (count1 !== 0) {
	          for (i = 0; i < count1; i++) {
	            array[dest + i] = tmp[cursor1 + i];
	          }

	          dest += count1;
	          cursor1 += count1;
	          length1 -= count1;

	          if (length1 <= 1) {
	            exit = true;
	            break;
	          }
	        }

	        array[dest++] = array[cursor2++];

	        if (--length2 === 0) {
	          exit = true;
	          break;
	        }

	        count2 = gallopLeft(tmp[cursor1], array, cursor2, length2, 0, compare);

	        if (count2 !== 0) {
	          for (i = 0; i < count2; i++) {
	            array[dest + i] = array[cursor2 + i];
	          }

	          dest += count2;
	          cursor2 += count2;
	          length2 -= count2;

	          if (length2 === 0) {
	            exit = true;
	            break;
	          }
	        }

	        array[dest++] = tmp[cursor1++];

	        if (--length1 === 1) {
	          exit = true;
	          break;
	        }

	        _minGallop--;
	      } while (count1 >= DEFAULT_MIN_GALLOPING || count2 >= DEFAULT_MIN_GALLOPING);

	      if (exit) {
	        break;
	      }

	      if (_minGallop < 0) {
	        _minGallop = 0;
	      }

	      _minGallop += 2;
	    }

	    minGallop = _minGallop;
	    minGallop < 1 && (minGallop = 1);

	    if (length1 === 1) {
	      for (i = 0; i < length2; i++) {
	        array[dest + i] = array[cursor2 + i];
	      }

	      array[dest + length2] = tmp[cursor1];
	    } else if (length1 === 0) {
	      throw new Error(); // throw new Error('mergeLow preconditions were not respected');
	    } else {
	      for (i = 0; i < length1; i++) {
	        array[dest + i] = tmp[cursor1 + i];
	      }
	    }
	  }

	  function mergeHigh(start1, length1, start2, length2) {
	    var i = 0;

	    for (i = 0; i < length2; i++) {
	      tmp[i] = array[start2 + i];
	    }

	    var cursor1 = start1 + length1 - 1;
	    var cursor2 = length2 - 1;
	    var dest = start2 + length2 - 1;
	    var customCursor = 0;
	    var customDest = 0;
	    array[dest--] = array[cursor1--];

	    if (--length1 === 0) {
	      customCursor = dest - (length2 - 1);

	      for (i = 0; i < length2; i++) {
	        array[customCursor + i] = tmp[i];
	      }

	      return;
	    }

	    if (length2 === 1) {
	      dest -= length1;
	      cursor1 -= length1;
	      customDest = dest + 1;
	      customCursor = cursor1 + 1;

	      for (i = length1 - 1; i >= 0; i--) {
	        array[customDest + i] = array[customCursor + i];
	      }

	      array[dest] = tmp[cursor2];
	      return;
	    }

	    var _minGallop = minGallop;

	    while (true) {
	      var count1 = 0;
	      var count2 = 0;
	      var exit = false;

	      do {
	        if (compare(tmp[cursor2], array[cursor1]) < 0) {
	          array[dest--] = array[cursor1--];
	          count1++;
	          count2 = 0;

	          if (--length1 === 0) {
	            exit = true;
	            break;
	          }
	        } else {
	          array[dest--] = tmp[cursor2--];
	          count2++;
	          count1 = 0;

	          if (--length2 === 1) {
	            exit = true;
	            break;
	          }
	        }
	      } while ((count1 | count2) < _minGallop);

	      if (exit) {
	        break;
	      }

	      do {
	        count1 = length1 - gallopRight(tmp[cursor2], array, start1, length1, length1 - 1, compare);

	        if (count1 !== 0) {
	          dest -= count1;
	          cursor1 -= count1;
	          length1 -= count1;
	          customDest = dest + 1;
	          customCursor = cursor1 + 1;

	          for (i = count1 - 1; i >= 0; i--) {
	            array[customDest + i] = array[customCursor + i];
	          }

	          if (length1 === 0) {
	            exit = true;
	            break;
	          }
	        }

	        array[dest--] = tmp[cursor2--];

	        if (--length2 === 1) {
	          exit = true;
	          break;
	        }

	        count2 = length2 - gallopLeft(array[cursor1], tmp, 0, length2, length2 - 1, compare);

	        if (count2 !== 0) {
	          dest -= count2;
	          cursor2 -= count2;
	          length2 -= count2;
	          customDest = dest + 1;
	          customCursor = cursor2 + 1;

	          for (i = 0; i < count2; i++) {
	            array[customDest + i] = tmp[customCursor + i];
	          }

	          if (length2 <= 1) {
	            exit = true;
	            break;
	          }
	        }

	        array[dest--] = array[cursor1--];

	        if (--length1 === 0) {
	          exit = true;
	          break;
	        }

	        _minGallop--;
	      } while (count1 >= DEFAULT_MIN_GALLOPING || count2 >= DEFAULT_MIN_GALLOPING);

	      if (exit) {
	        break;
	      }

	      if (_minGallop < 0) {
	        _minGallop = 0;
	      }

	      _minGallop += 2;
	    }

	    minGallop = _minGallop;

	    if (minGallop < 1) {
	      minGallop = 1;
	    }

	    if (length2 === 1) {
	      dest -= length1;
	      cursor1 -= length1;
	      customDest = dest + 1;
	      customCursor = cursor1 + 1;

	      for (i = length1 - 1; i >= 0; i--) {
	        array[customDest + i] = array[customCursor + i];
	      }

	      array[dest] = tmp[cursor2];
	    } else if (length2 === 0) {
	      throw new Error(); // throw new Error('mergeHigh preconditions were not respected');
	    } else {
	      customCursor = dest - (length2 - 1);

	      for (i = 0; i < length2; i++) {
	        array[customCursor + i] = tmp[i];
	      }
	    }
	  }

	  this.mergeRuns = mergeRuns;
	  this.forceMergeRuns = forceMergeRuns;
	  this.pushRun = pushRun;
	}

	function sort(array, compare, lo, hi) {
	  if (!lo) {
	    lo = 0;
	  }

	  if (!hi) {
	    hi = array.length;
	  }

	  var remaining = hi - lo;

	  if (remaining < 2) {
	    return;
	  }

	  var runLength = 0;

	  if (remaining < DEFAULT_MIN_MERGE) {
	    runLength = makeAscendingRun(array, lo, hi, compare);
	    binaryInsertionSort(array, lo, hi, lo + runLength, compare);
	    return;
	  }

	  var ts = new TimSort(array, compare);
	  var minRun = minRunLength(remaining);

	  do {
	    runLength = makeAscendingRun(array, lo, hi, compare);

	    if (runLength < minRun) {
	      var force = remaining;

	      if (force > minRun) {
	        force = minRun;
	      }

	      binaryInsertionSort(array, lo, lo + force, lo + runLength, compare);
	      runLength = force;
	    }

	    ts.pushRun(lo, runLength);
	    ts.mergeRuns();
	    remaining -= runLength;
	    lo += runLength;
	  } while (remaining !== 0);

	  ts.forceMergeRuns();
	}

	module.exports = sort;

/***/ }),
/* 201 */
/***/ (function(module, exports, __webpack_require__) {

	var _config = __webpack_require__(198);

	var devicePixelRatio = _config.devicePixelRatio;

	var util = __webpack_require__(181);

	var log = __webpack_require__(197);

	var BoundingRect = __webpack_require__(199);

	var timsort = __webpack_require__(200);

	var Layer = __webpack_require__(202);

	var requestAnimationFrame = __webpack_require__(206);

	var Image = __webpack_require__(207);

	var env = __webpack_require__(180);

	var HOVER_LAYER_ZLEVEL = 1e5;
	var CANVAS_ZLEVEL = 314159;
	var EL_AFTER_INCREMENTAL_INC = 0.01;
	var INCREMENTAL_INC = 0.001;

	function parseInt10(val) {
	  return parseInt(val, 10);
	}

	function isLayerValid(layer) {
	  if (!layer) {
	    return false;
	  }

	  if (layer.__builtin__) {
	    return true;
	  }

	  if (typeof layer.resize !== 'function' || typeof layer.refresh !== 'function') {
	    return false;
	  }

	  return true;
	}

	var tmpRect = new BoundingRect(0, 0, 0, 0);
	var viewRect = new BoundingRect(0, 0, 0, 0);

	function isDisplayableCulled(el, width, height) {
	  tmpRect.copy(el.getBoundingRect());

	  if (el.transform) {
	    tmpRect.applyTransform(el.transform);
	  }

	  viewRect.width = width;
	  viewRect.height = height;
	  return !tmpRect.intersect(viewRect);
	}

	function isClipPathChanged(clipPaths, prevClipPaths) {
	  if (clipPaths == prevClipPaths) {
	    // Can both be null or undefined
	    return false;
	  }

	  if (!clipPaths || !prevClipPaths || clipPaths.length !== prevClipPaths.length) {
	    return true;
	  }

	  for (var i = 0; i < clipPaths.length; i++) {
	    if (clipPaths[i] !== prevClipPaths[i]) {
	      return true;
	    }
	  }
	}

	function doClip(clipPaths, ctx) {
	  for (var i = 0; i < clipPaths.length; i++) {
	    var clipPath = clipPaths[i];
	    clipPath.setTransform(ctx);
	    ctx.beginPath();
	    clipPath.buildPath(ctx, clipPath.shape);
	    ctx.clip(); // Transform back

	    clipPath.restoreTransform(ctx);
	  }
	}

	function createRoot(width, height) {
	  var domRoot = document.createElement('div'); // domRoot.onselectstart = returnFalse; // 避免页面选中的尴尬

	  domRoot.style.cssText = ['position:relative', 'overflow:hidden', 'width:' + width + 'px', 'height:' + height + 'px', 'padding:0', 'margin:0', 'border-width:0'].join(';') + ';';
	  return domRoot;
	}
	/**
	 * @alias module:zrender/Painter
	 * @constructor
	 * @param {HTMLElement} root 绘图容器
	 * @param {module:zrender/Storage} storage
	 * @param {Object} opts
	 */


	var Painter = function (root, storage, opts) {
	  this.type = 'canvas'; // In node environment using node-canvas

	  var singleCanvas = !root.nodeName // In node ?
	  || root.nodeName.toUpperCase() === 'CANVAS';
	  this._opts = opts = util.extend({}, opts || {});
	  /**
	   * @type {number}
	   */

	  this.dpr = opts.devicePixelRatio || devicePixelRatio;
	  /**
	   * @type {boolean}
	   * @private
	   */

	  this._singleCanvas = singleCanvas;
	  /**
	   * 绘图容器
	   * @type {HTMLElement}
	   */

	  this.root = root;
	  var rootStyle = root.style;

	  if (rootStyle) {
	    rootStyle['-webkit-tap-highlight-color'] = 'transparent';
	    rootStyle['-webkit-user-select'] = rootStyle['user-select'] = rootStyle['-webkit-touch-callout'] = 'none';
	    root.innerHTML = '';
	  }
	  /**
	   * @type {module:zrender/Storage}
	   */


	  this.storage = storage;
	  /**
	   * @type {Array.<number>}
	   * @private
	   */

	  var zlevelList = this._zlevelList = [];
	  /**
	   * @type {Object.<string, module:zrender/Layer>}
	   * @private
	   */

	  var layers = this._layers = {};
	  /**
	   * @type {Object.<string, Object>}
	   * @private
	   */

	  this._layerConfig = {};
	  /**
	   * zrender will do compositing when root is a canvas and have multiple zlevels.
	   */

	  this._needsManuallyCompositing = false;

	  if (!singleCanvas) {
	    this._width = this._getSize(0);
	    this._height = this._getSize(1);
	    var domRoot = this._domRoot = createRoot(this._width, this._height);
	    root.appendChild(domRoot);
	  } else {
	    var width = root.width;
	    var height = root.height;

	    if (opts.width != null) {
	      width = opts.width;
	    }

	    if (opts.height != null) {
	      height = opts.height;
	    }

	    this.dpr = opts.devicePixelRatio || 1; // Use canvas width and height directly

	    root.width = width * this.dpr;
	    root.height = height * this.dpr;
	    this._width = width;
	    this._height = height; // Create layer if only one given canvas
	    // Device can be specified to create a high dpi image.

	    var mainLayer = new Layer(root, this, this.dpr);
	    mainLayer.__builtin__ = true;
	    mainLayer.initContext(); // FIXME Use canvas width and height
	    // mainLayer.resize(width, height);

	    layers[CANVAS_ZLEVEL] = mainLayer;
	    mainLayer.zlevel = CANVAS_ZLEVEL; // Not use common zlevel.

	    zlevelList.push(CANVAS_ZLEVEL);
	    this._domRoot = root;
	  }
	  /**
	   * @type {module:zrender/Layer}
	   * @private
	   */


	  this._hoverlayer = null;
	  this._hoverElements = [];
	};

	Painter.prototype = {
	  constructor: Painter,
	  getType: function () {
	    return 'canvas';
	  },

	  /**
	   * If painter use a single canvas
	   * @return {boolean}
	   */
	  isSingleCanvas: function () {
	    return this._singleCanvas;
	  },

	  /**
	   * @return {HTMLDivElement}
	   */
	  getViewportRoot: function () {
	    return this._domRoot;
	  },
	  getViewportRootOffset: function () {
	    var viewportRoot = this.getViewportRoot();

	    if (viewportRoot) {
	      return {
	        offsetLeft: viewportRoot.offsetLeft || 0,
	        offsetTop: viewportRoot.offsetTop || 0
	      };
	    }
	  },

	  /**
	   * 刷新
	   * @param {boolean} [paintAll=false] 强制绘制所有displayable
	   */
	  refresh: function (paintAll) {
	    var list = this.storage.getDisplayList(true);
	    var zlevelList = this._zlevelList;
	    this._redrawId = Math.random();

	    this._paintList(list, paintAll, this._redrawId); // Paint custum layers


	    for (var i = 0; i < zlevelList.length; i++) {
	      var z = zlevelList[i];
	      var layer = this._layers[z];

	      if (!layer.__builtin__ && layer.refresh) {
	        var clearColor = i === 0 ? this._backgroundColor : null;
	        layer.refresh(clearColor);
	      }
	    }

	    this.refreshHover();
	    return this;
	  },
	  addHover: function (el, hoverStyle) {
	    if (el.__hoverMir) {
	      return;
	    }

	    var elMirror = new el.constructor({
	      style: el.style,
	      shape: el.shape
	    });
	    elMirror.__from = el;
	    el.__hoverMir = elMirror;
	    elMirror.setStyle(hoverStyle);

	    this._hoverElements.push(elMirror);
	  },
	  removeHover: function (el) {
	    var elMirror = el.__hoverMir;
	    var hoverElements = this._hoverElements;
	    var idx = util.indexOf(hoverElements, elMirror);

	    if (idx >= 0) {
	      hoverElements.splice(idx, 1);
	    }

	    el.__hoverMir = null;
	  },
	  clearHover: function (el) {
	    var hoverElements = this._hoverElements;

	    for (var i = 0; i < hoverElements.length; i++) {
	      var from = hoverElements[i].__from;

	      if (from) {
	        from.__hoverMir = null;
	      }
	    }

	    hoverElements.length = 0;
	  },
	  refreshHover: function () {
	    var hoverElements = this._hoverElements;
	    var len = hoverElements.length;
	    var hoverLayer = this._hoverlayer;
	    hoverLayer && hoverLayer.clear();

	    if (!len) {
	      return;
	    }

	    timsort(hoverElements, this.storage.displayableSortFunc); // Use a extream large zlevel
	    // FIXME?

	    if (!hoverLayer) {
	      hoverLayer = this._hoverlayer = this.getLayer(HOVER_LAYER_ZLEVEL);
	    }

	    var scope = {};
	    hoverLayer.ctx.save();

	    for (var i = 0; i < len;) {
	      var el = hoverElements[i];
	      var originalEl = el.__from; // Original el is removed
	      // PENDING

	      if (!(originalEl && originalEl.__zr)) {
	        hoverElements.splice(i, 1);
	        originalEl.__hoverMir = null;
	        len--;
	        continue;
	      }

	      i++; // Use transform
	      // FIXME style and shape ?

	      if (!originalEl.invisible) {
	        el.transform = originalEl.transform;
	        el.invTransform = originalEl.invTransform;
	        el.__clipPaths = originalEl.__clipPaths; // el.

	        this._doPaintEl(el, hoverLayer, true, scope);
	      }
	    }

	    hoverLayer.ctx.restore();
	  },
	  getHoverLayer: function () {
	    return this.getLayer(HOVER_LAYER_ZLEVEL);
	  },
	  _paintList: function (list, paintAll, redrawId) {
	    if (this._redrawId !== redrawId) {
	      return;
	    }

	    paintAll = paintAll || false;

	    this._updateLayerStatus(list);

	    var finished = this._doPaintList(list, paintAll);

	    if (this._needsManuallyCompositing) {
	      this._compositeManually();
	    }

	    if (!finished) {
	      var self = this;
	      requestAnimationFrame(function () {
	        self._paintList(list, paintAll, redrawId);
	      });
	    }
	  },
	  _compositeManually: function () {
	    var ctx = this.getLayer(CANVAS_ZLEVEL).ctx;
	    var width = this._domRoot.width;
	    var height = this._domRoot.height;
	    ctx.clearRect(0, 0, width, height); // PENDING, If only builtin layer?

	    this.eachBuiltinLayer(function (layer) {
	      if (layer.virtual) {
	        ctx.drawImage(layer.dom, 0, 0, width, height);
	      }
	    });
	  },
	  _doPaintList: function (list, paintAll) {
	    var layerList = [];

	    for (var zi = 0; zi < this._zlevelList.length; zi++) {
	      var zlevel = this._zlevelList[zi];
	      var layer = this._layers[zlevel];

	      if (layer.__builtin__ && layer !== this._hoverlayer && (layer.__dirty || paintAll)) {
	        layerList.push(layer);
	      }
	    }

	    var finished = true;

	    for (var k = 0; k < layerList.length; k++) {
	      var layer = layerList[k];
	      var ctx = layer.ctx;
	      var scope = {};
	      ctx.save();
	      var start = paintAll ? layer.__startIndex : layer.__drawIndex;
	      var useTimer = !paintAll && layer.incremental && Date.now;
	      var startTime = useTimer && Date.now();
	      var clearColor = layer.zlevel === this._zlevelList[0] ? this._backgroundColor : null; // All elements in this layer are cleared.

	      if (layer.__startIndex === layer.__endIndex) {
	        layer.clear(false, clearColor);
	      } else if (start === layer.__startIndex) {
	        var firstEl = list[start];

	        if (!firstEl.incremental || !firstEl.notClear || paintAll) {
	          layer.clear(false, clearColor);
	        }
	      }

	      if (start === -1) {
	        console.error('For some unknown reason. drawIndex is -1');
	        start = layer.__startIndex;
	      }

	      for (var i = start; i < layer.__endIndex; i++) {
	        var el = list[i];

	        this._doPaintEl(el, layer, paintAll, scope);

	        el.__dirty = false;

	        if (useTimer) {
	          // Date.now can be executed in 13,025,305 ops/second.
	          var dTime = Date.now() - startTime; // Give 15 millisecond to draw.
	          // The rest elements will be drawn in the next frame.

	          if (dTime > 15) {
	            break;
	          }
	        }
	      }

	      layer.__drawIndex = i;

	      if (layer.__drawIndex < layer.__endIndex) {
	        finished = false;
	      }

	      if (scope.prevElClipPaths) {
	        // Needs restore the state. If last drawn element is in the clipping area.
	        ctx.restore();
	      }

	      ctx.restore();
	    }

	    if (env.wxa) {
	      // Flush for weixin application
	      util.each(this._layers, function (layer) {
	        if (layer && layer.ctx && layer.ctx.draw) {
	          layer.ctx.draw();
	        }
	      });
	    }

	    return finished;
	  },
	  _doPaintEl: function (el, currentLayer, forcePaint, scope) {
	    var ctx = currentLayer.ctx;
	    var m = el.transform;

	    if ((currentLayer.__dirty || forcePaint) && // Ignore invisible element
	    !el.invisible // Ignore transparent element
	    && el.style.opacity !== 0 // Ignore scale 0 element, in some environment like node-canvas
	    // Draw a scale 0 element can cause all following draw wrong
	    // And setTransform with scale 0 will cause set back transform failed.
	    && !(m && !m[0] && !m[3]) // Ignore culled element
	    && !(el.culling && isDisplayableCulled(el, this._width, this._height))) {
	      var clipPaths = el.__clipPaths; // Optimize when clipping on group with several elements

	      if (!scope.prevElClipPaths || isClipPathChanged(clipPaths, scope.prevElClipPaths)) {
	        // If has previous clipping state, restore from it
	        if (scope.prevElClipPaths) {
	          currentLayer.ctx.restore();
	          scope.prevElClipPaths = null; // Reset prevEl since context has been restored

	          scope.prevEl = null;
	        } // New clipping state


	        if (clipPaths) {
	          ctx.save();
	          doClip(clipPaths, ctx);
	          scope.prevElClipPaths = clipPaths;
	        }
	      }

	      el.beforeBrush && el.beforeBrush(ctx);
	      el.brush(ctx, scope.prevEl || null);
	      scope.prevEl = el;
	      el.afterBrush && el.afterBrush(ctx);
	    }
	  },

	  /**
	   * 获取 zlevel 所在层，如果不存在则会创建一个新的层
	   * @param {number} zlevel
	   * @param {boolean} virtual Virtual layer will not be inserted into dom.
	   * @return {module:zrender/Layer}
	   */
	  getLayer: function (zlevel, virtual) {
	    if (this._singleCanvas && !this._needsManuallyCompositing) {
	      zlevel = CANVAS_ZLEVEL;
	    }

	    var layer = this._layers[zlevel];

	    if (!layer) {
	      // Create a new layer
	      layer = new Layer('zr_' + zlevel, this, this.dpr);
	      layer.zlevel = zlevel;
	      layer.__builtin__ = true;

	      if (this._layerConfig[zlevel]) {
	        util.merge(layer, this._layerConfig[zlevel], true);
	      }

	      if (virtual) {
	        layer.virtual = virtual;
	      }

	      this.insertLayer(zlevel, layer); // Context is created after dom inserted to document
	      // Or excanvas will get 0px clientWidth and clientHeight

	      layer.initContext();
	    }

	    return layer;
	  },
	  insertLayer: function (zlevel, layer) {
	    var layersMap = this._layers;
	    var zlevelList = this._zlevelList;
	    var len = zlevelList.length;
	    var prevLayer = null;
	    var i = -1;
	    var domRoot = this._domRoot;

	    if (layersMap[zlevel]) {
	      log('ZLevel ' + zlevel + ' has been used already');
	      return;
	    } // Check if is a valid layer


	    if (!isLayerValid(layer)) {
	      log('Layer of zlevel ' + zlevel + ' is not valid');
	      return;
	    }

	    if (len > 0 && zlevel > zlevelList[0]) {
	      for (i = 0; i < len - 1; i++) {
	        if (zlevelList[i] < zlevel && zlevelList[i + 1] > zlevel) {
	          break;
	        }
	      }

	      prevLayer = layersMap[zlevelList[i]];
	    }

	    zlevelList.splice(i + 1, 0, zlevel);
	    layersMap[zlevel] = layer; // Vitual layer will not directly show on the screen.
	    // (It can be a WebGL layer and assigned to a ZImage element)
	    // But it still under management of zrender.

	    if (!layer.virtual) {
	      if (prevLayer) {
	        var prevDom = prevLayer.dom;

	        if (prevDom.nextSibling) {
	          domRoot.insertBefore(layer.dom, prevDom.nextSibling);
	        } else {
	          domRoot.appendChild(layer.dom);
	        }
	      } else {
	        if (domRoot.firstChild) {
	          domRoot.insertBefore(layer.dom, domRoot.firstChild);
	        } else {
	          domRoot.appendChild(layer.dom);
	        }
	      }
	    }
	  },
	  // Iterate each layer
	  eachLayer: function (cb, context) {
	    var zlevelList = this._zlevelList;
	    var z;
	    var i;

	    for (i = 0; i < zlevelList.length; i++) {
	      z = zlevelList[i];
	      cb.call(context, this._layers[z], z);
	    }
	  },
	  // Iterate each buildin layer
	  eachBuiltinLayer: function (cb, context) {
	    var zlevelList = this._zlevelList;
	    var layer;
	    var z;
	    var i;

	    for (i = 0; i < zlevelList.length; i++) {
	      z = zlevelList[i];
	      layer = this._layers[z];

	      if (layer.__builtin__) {
	        cb.call(context, layer, z);
	      }
	    }
	  },
	  // Iterate each other layer except buildin layer
	  eachOtherLayer: function (cb, context) {
	    var zlevelList = this._zlevelList;
	    var layer;
	    var z;
	    var i;

	    for (i = 0; i < zlevelList.length; i++) {
	      z = zlevelList[i];
	      layer = this._layers[z];

	      if (!layer.__builtin__) {
	        cb.call(context, layer, z);
	      }
	    }
	  },

	  /**
	   * 获取所有已创建的层
	   * @param {Array.<module:zrender/Layer>} [prevLayer]
	   */
	  getLayers: function () {
	    return this._layers;
	  },
	  _updateLayerStatus: function (list) {
	    this.eachBuiltinLayer(function (layer, z) {
	      layer.__dirty = layer.__used = false;
	    });

	    function updatePrevLayer(idx) {
	      if (prevLayer) {
	        if (prevLayer.__endIndex !== idx) {
	          prevLayer.__dirty = true;
	        }

	        prevLayer.__endIndex = idx;
	      }
	    }

	    if (this._singleCanvas) {
	      for (var i = 1; i < list.length; i++) {
	        var el = list[i];

	        if (el.zlevel !== list[i - 1].zlevel || el.incremental) {
	          this._needsManuallyCompositing = true;
	          break;
	        }
	      }
	    }

	    var prevLayer = null;
	    var incrementalLayerCount = 0;

	    for (var i = 0; i < list.length; i++) {
	      var el = list[i];
	      var zlevel = el.zlevel;
	      var layer; // PENDING If change one incremental element style ?
	      // TODO Where there are non-incremental elements between incremental elements.

	      if (el.incremental) {
	        layer = this.getLayer(zlevel + INCREMENTAL_INC, this._needsManuallyCompositing);
	        layer.incremental = true;
	        incrementalLayerCount = 1;
	      } else {
	        layer = this.getLayer(zlevel + (incrementalLayerCount > 0 ? EL_AFTER_INCREMENTAL_INC : 0), this._needsManuallyCompositing);
	      }

	      if (!layer.__builtin__) {
	        log('ZLevel ' + zlevel + ' has been used by unkown layer ' + layer.id);
	      }

	      if (layer !== prevLayer) {
	        layer.__used = true;

	        if (layer.__startIndex !== i) {
	          layer.__dirty = true;
	        }

	        layer.__startIndex = i;

	        if (!layer.incremental) {
	          layer.__drawIndex = i;
	        } else {
	          // Mark layer draw index needs to update.
	          layer.__drawIndex = -1;
	        }

	        updatePrevLayer(i);
	        prevLayer = layer;
	      }

	      if (el.__dirty) {
	        layer.__dirty = true;

	        if (layer.incremental && layer.__drawIndex < 0) {
	          // Start draw from the first dirty element.
	          layer.__drawIndex = i;
	        }
	      }
	    }

	    updatePrevLayer(i);
	    this.eachBuiltinLayer(function (layer, z) {
	      // Used in last frame but not in this frame. Needs clear
	      if (!layer.__used && layer.getElementCount() > 0) {
	        layer.__dirty = true;
	        layer.__startIndex = layer.__endIndex = layer.__drawIndex = 0;
	      } // For incremental layer. In case start index changed and no elements are dirty.


	      if (layer.__dirty && layer.__drawIndex < 0) {
	        layer.__drawIndex = layer.__startIndex;
	      }
	    });
	  },

	  /**
	   * 清除hover层外所有内容
	   */
	  clear: function () {
	    this.eachBuiltinLayer(this._clearLayer);
	    return this;
	  },
	  _clearLayer: function (layer) {
	    layer.clear();
	  },
	  setBackgroundColor: function (backgroundColor) {
	    this._backgroundColor = backgroundColor;
	  },

	  /**
	   * 修改指定zlevel的绘制参数
	   *
	   * @param {string} zlevel
	   * @param {Object} config 配置对象
	   * @param {string} [config.clearColor=0] 每次清空画布的颜色
	   * @param {string} [config.motionBlur=false] 是否开启动态模糊
	   * @param {number} [config.lastFrameAlpha=0.7]
	   *                 在开启动态模糊的时候使用，与上一帧混合的alpha值，值越大尾迹越明显
	   */
	  configLayer: function (zlevel, config) {
	    if (config) {
	      var layerConfig = this._layerConfig;

	      if (!layerConfig[zlevel]) {
	        layerConfig[zlevel] = config;
	      } else {
	        util.merge(layerConfig[zlevel], config, true);
	      }

	      for (var i = 0; i < this._zlevelList.length; i++) {
	        var _zlevel = this._zlevelList[i];

	        if (_zlevel === zlevel || _zlevel === zlevel + EL_AFTER_INCREMENTAL_INC) {
	          var layer = this._layers[_zlevel];
	          util.merge(layer, layerConfig[zlevel], true);
	        }
	      }
	    }
	  },

	  /**
	   * 删除指定层
	   * @param {number} zlevel 层所在的zlevel
	   */
	  delLayer: function (zlevel) {
	    var layers = this._layers;
	    var zlevelList = this._zlevelList;
	    var layer = layers[zlevel];

	    if (!layer) {
	      return;
	    }

	    layer.dom.parentNode.removeChild(layer.dom);
	    delete layers[zlevel];
	    zlevelList.splice(util.indexOf(zlevelList, zlevel), 1);
	  },

	  /**
	   * 区域大小变化后重绘
	   */
	  resize: function (width, height) {
	    if (!this._domRoot.style) {
	      // Maybe in node or worker
	      if (width == null || height == null) {
	        return;
	      }

	      this._width = width;
	      this._height = height;
	      this.getLayer(CANVAS_ZLEVEL).resize(width, height);
	    } else {
	      var domRoot = this._domRoot; // FIXME Why ?

	      domRoot.style.display = 'none'; // Save input w/h

	      var opts = this._opts;
	      width != null && (opts.width = width);
	      height != null && (opts.height = height);
	      width = this._getSize(0);
	      height = this._getSize(1);
	      domRoot.style.display = ''; // 优化没有实际改变的resize

	      if (this._width != width || height != this._height) {
	        domRoot.style.width = width + 'px';
	        domRoot.style.height = height + 'px';

	        for (var id in this._layers) {
	          if (this._layers.hasOwnProperty(id)) {
	            this._layers[id].resize(width, height);
	          }
	        }

	        util.each(this._progressiveLayers, function (layer) {
	          layer.resize(width, height);
	        });
	        this.refresh(true);
	      }

	      this._width = width;
	      this._height = height;
	    }

	    return this;
	  },

	  /**
	   * 清除单独的一个层
	   * @param {number} zlevel
	   */
	  clearLayer: function (zlevel) {
	    var layer = this._layers[zlevel];

	    if (layer) {
	      layer.clear();
	    }
	  },

	  /**
	   * 释放
	   */
	  dispose: function () {
	    this.root.innerHTML = '';
	    this.root = this.storage = this._domRoot = this._layers = null;
	  },

	  /**
	   * Get canvas which has all thing rendered
	   * @param {Object} opts
	   * @param {string} [opts.backgroundColor]
	   * @param {number} [opts.pixelRatio]
	   */
	  getRenderedCanvas: function (opts) {
	    opts = opts || {};

	    if (this._singleCanvas && !this._compositeManually) {
	      return this._layers[CANVAS_ZLEVEL].dom;
	    }

	    var imageLayer = new Layer('image', this, opts.pixelRatio || this.dpr);
	    imageLayer.initContext();
	    imageLayer.clear(false, opts.backgroundColor || this._backgroundColor);

	    if (opts.pixelRatio <= this.dpr) {
	      this.refresh();
	      var width = imageLayer.dom.width;
	      var height = imageLayer.dom.height;
	      var ctx = imageLayer.ctx;
	      this.eachLayer(function (layer) {
	        if (layer.__builtin__) {
	          ctx.drawImage(layer.dom, 0, 0, width, height);
	        } else if (layer.renderToCanvas) {
	          imageLayer.ctx.save();
	          layer.renderToCanvas(imageLayer.ctx);
	          imageLayer.ctx.restore();
	        }
	      });
	    } else {
	      // PENDING, echarts-gl and incremental rendering.
	      var scope = {};
	      var displayList = this.storage.getDisplayList(true);

	      for (var i = 0; i < displayList.length; i++) {
	        var el = displayList[i];

	        this._doPaintEl(el, imageLayer, true, scope);
	      }
	    }

	    return imageLayer.dom;
	  },

	  /**
	   * 获取绘图区域宽度
	   */
	  getWidth: function () {
	    return this._width;
	  },

	  /**
	   * 获取绘图区域高度
	   */
	  getHeight: function () {
	    return this._height;
	  },
	  _getSize: function (whIdx) {
	    var opts = this._opts;
	    var wh = ['width', 'height'][whIdx];
	    var cwh = ['clientWidth', 'clientHeight'][whIdx];
	    var plt = ['paddingLeft', 'paddingTop'][whIdx];
	    var prb = ['paddingRight', 'paddingBottom'][whIdx];

	    if (opts[wh] != null && opts[wh] !== 'auto') {
	      return parseFloat(opts[wh]);
	    }

	    var root = this.root; // IE8 does not support getComputedStyle, but it use VML.

	    var stl = document.defaultView.getComputedStyle(root);
	    return (root[cwh] || parseInt10(stl[wh]) || parseInt10(root.style[wh])) - (parseInt10(stl[plt]) || 0) - (parseInt10(stl[prb]) || 0) | 0;
	  },
	  pathToImage: function (path, dpr) {
	    dpr = dpr || this.dpr;
	    var canvas = document.createElement('canvas');
	    var ctx = canvas.getContext('2d');
	    var rect = path.getBoundingRect();
	    var style = path.style;
	    var shadowBlurSize = style.shadowBlur * dpr;
	    var shadowOffsetX = style.shadowOffsetX * dpr;
	    var shadowOffsetY = style.shadowOffsetY * dpr;
	    var lineWidth = style.hasStroke() ? style.lineWidth : 0;
	    var leftMargin = Math.max(lineWidth / 2, -shadowOffsetX + shadowBlurSize);
	    var rightMargin = Math.max(lineWidth / 2, shadowOffsetX + shadowBlurSize);
	    var topMargin = Math.max(lineWidth / 2, -shadowOffsetY + shadowBlurSize);
	    var bottomMargin = Math.max(lineWidth / 2, shadowOffsetY + shadowBlurSize);
	    var width = rect.width + leftMargin + rightMargin;
	    var height = rect.height + topMargin + bottomMargin;
	    canvas.width = width * dpr;
	    canvas.height = height * dpr;
	    ctx.scale(dpr, dpr);
	    ctx.clearRect(0, 0, width, height);
	    ctx.dpr = dpr;
	    var pathTransform = {
	      position: path.position,
	      rotation: path.rotation,
	      scale: path.scale
	    };
	    path.position = [leftMargin - rect.x, topMargin - rect.y];
	    path.rotation = 0;
	    path.scale = [1, 1];
	    path.updateTransform();

	    if (path) {
	      path.brush(ctx);
	    }

	    var ImageShape = Image;
	    var imgShape = new ImageShape({
	      style: {
	        x: 0,
	        y: 0,
	        image: canvas
	      }
	    });

	    if (pathTransform.position != null) {
	      imgShape.position = path.position = pathTransform.position;
	    }

	    if (pathTransform.rotation != null) {
	      imgShape.rotation = path.rotation = pathTransform.rotation;
	    }

	    if (pathTransform.scale != null) {
	      imgShape.scale = path.scale = pathTransform.scale;
	    }

	    return imgShape;
	  }
	};
	var _default = Painter;
	module.exports = _default;

/***/ }),
/* 202 */
/***/ (function(module, exports, __webpack_require__) {

	var util = __webpack_require__(181);

	var _config = __webpack_require__(198);

	var devicePixelRatio = _config.devicePixelRatio;

	var Style = __webpack_require__(203);

	var Pattern = __webpack_require__(205);

	/**
	 * @module zrender/Layer
	 * @author pissang(https://www.github.com/pissang)
	 */
	function returnFalse() {
	  return false;
	}
	/**
	 * 创建dom
	 *
	 * @inner
	 * @param {string} id dom id 待用
	 * @param {Painter} painter painter instance
	 * @param {number} number
	 */


	function createDom(id, painter, dpr) {
	  var newDom = util.createCanvas();
	  var width = painter.getWidth();
	  var height = painter.getHeight();
	  var newDomStyle = newDom.style;

	  if (newDomStyle) {
	    // In node or some other non-browser environment
	    newDomStyle.position = 'absolute';
	    newDomStyle.left = 0;
	    newDomStyle.top = 0;
	    newDomStyle.width = width + 'px';
	    newDomStyle.height = height + 'px';
	    newDom.setAttribute('data-zr-dom-id', id);
	  }

	  newDom.width = width * dpr;
	  newDom.height = height * dpr;
	  return newDom;
	}
	/**
	 * @alias module:zrender/Layer
	 * @constructor
	 * @extends module:zrender/mixin/Transformable
	 * @param {string} id
	 * @param {module:zrender/Painter} painter
	 * @param {number} [dpr]
	 */


	var Layer = function (id, painter, dpr) {
	  var dom;
	  dpr = dpr || devicePixelRatio;

	  if (typeof id === 'string') {
	    dom = createDom(id, painter, dpr);
	  } // Not using isDom because in node it will return false
	  else if (util.isObject(id)) {
	      dom = id;
	      id = dom.id;
	    }

	  this.id = id;
	  this.dom = dom;
	  var domStyle = dom.style;

	  if (domStyle) {
	    // Not in node
	    dom.onselectstart = returnFalse; // 避免页面选中的尴尬

	    domStyle['-webkit-user-select'] = 'none';
	    domStyle['user-select'] = 'none';
	    domStyle['-webkit-touch-callout'] = 'none';
	    domStyle['-webkit-tap-highlight-color'] = 'rgba(0,0,0,0)';
	    domStyle['padding'] = 0;
	    domStyle['margin'] = 0;
	    domStyle['border-width'] = 0;
	  }

	  this.domBack = null;
	  this.ctxBack = null;
	  this.painter = painter;
	  this.config = null; // Configs

	  /**
	   * 每次清空画布的颜色
	   * @type {string}
	   * @default 0
	   */

	  this.clearColor = 0;
	  /**
	   * 是否开启动态模糊
	   * @type {boolean}
	   * @default false
	   */

	  this.motionBlur = false;
	  /**
	   * 在开启动态模糊的时候使用，与上一帧混合的alpha值，值越大尾迹越明显
	   * @type {number}
	   * @default 0.7
	   */

	  this.lastFrameAlpha = 0.7;
	  /**
	   * Layer dpr
	   * @type {number}
	   */

	  this.dpr = dpr;
	};

	Layer.prototype = {
	  constructor: Layer,
	  __dirty: true,
	  __used: false,
	  __drawIndex: 0,
	  __startIndex: 0,
	  __endIndex: 0,
	  incremental: false,
	  getElementCount: function () {
	    return this.__endIndex - this.__startIndex;
	  },
	  initContext: function () {
	    this.ctx = this.dom.getContext('2d');
	    this.ctx.dpr = this.dpr;
	  },
	  createBackBuffer: function () {
	    var dpr = this.dpr;
	    this.domBack = createDom('back-' + this.id, this.painter, dpr);
	    this.ctxBack = this.domBack.getContext('2d');

	    if (dpr != 1) {
	      this.ctxBack.scale(dpr, dpr);
	    }
	  },

	  /**
	   * @param  {number} width
	   * @param  {number} height
	   */
	  resize: function (width, height) {
	    var dpr = this.dpr;
	    var dom = this.dom;
	    var domStyle = dom.style;
	    var domBack = this.domBack;

	    if (domStyle) {
	      domStyle.width = width + 'px';
	      domStyle.height = height + 'px';
	    }

	    dom.width = width * dpr;
	    dom.height = height * dpr;

	    if (domBack) {
	      domBack.width = width * dpr;
	      domBack.height = height * dpr;

	      if (dpr != 1) {
	        this.ctxBack.scale(dpr, dpr);
	      }
	    }
	  },

	  /**
	   * 清空该层画布
	   * @param {boolean} [clearAll]=false Clear all with out motion blur
	   * @param {Color} [clearColor]
	   */
	  clear: function (clearAll, clearColor) {
	    var dom = this.dom;
	    var ctx = this.ctx;
	    var width = dom.width;
	    var height = dom.height;
	    var clearColor = clearColor || this.clearColor;
	    var haveMotionBLur = this.motionBlur && !clearAll;
	    var lastFrameAlpha = this.lastFrameAlpha;
	    var dpr = this.dpr;

	    if (haveMotionBLur) {
	      if (!this.domBack) {
	        this.createBackBuffer();
	      }

	      this.ctxBack.globalCompositeOperation = 'copy';
	      this.ctxBack.drawImage(dom, 0, 0, width / dpr, height / dpr);
	    }

	    ctx.clearRect(0, 0, width, height);

	    if (clearColor && clearColor !== 'transparent') {
	      var clearColorGradientOrPattern; // Gradient

	      if (clearColor.colorStops) {
	        // Cache canvas gradient
	        clearColorGradientOrPattern = clearColor.__canvasGradient || Style.getGradient(ctx, clearColor, {
	          x: 0,
	          y: 0,
	          width: width,
	          height: height
	        });
	        clearColor.__canvasGradient = clearColorGradientOrPattern;
	      } // Pattern
	      else if (clearColor.image) {
	          clearColorGradientOrPattern = Pattern.prototype.getCanvasPattern.call(clearColor, ctx);
	        }

	      ctx.save();
	      ctx.fillStyle = clearColorGradientOrPattern || clearColor;
	      ctx.fillRect(0, 0, width, height);
	      ctx.restore();
	    }

	    if (haveMotionBLur) {
	      var domBack = this.domBack;
	      ctx.save();
	      ctx.globalAlpha = lastFrameAlpha;
	      ctx.drawImage(domBack, 0, 0, width, height);
	      ctx.restore();
	    }
	  }
	};
	var _default = Layer;
	module.exports = _default;

/***/ }),
/* 203 */
/***/ (function(module, exports, __webpack_require__) {

	var fixShadow = __webpack_require__(204);

	var STYLE_COMMON_PROPS = [['shadowBlur', 0], ['shadowOffsetX', 0], ['shadowOffsetY', 0], ['shadowColor', '#000'], ['lineCap', 'butt'], ['lineJoin', 'miter'], ['miterLimit', 10]]; // var SHADOW_PROPS = STYLE_COMMON_PROPS.slice(0, 4);
	// var LINE_PROPS = STYLE_COMMON_PROPS.slice(4);

	var Style = function (opts, host) {
	  this.extendFrom(opts, false);
	  this.host = host;
	};

	function createLinearGradient(ctx, obj, rect) {
	  var x = obj.x == null ? 0 : obj.x;
	  var x2 = obj.x2 == null ? 1 : obj.x2;
	  var y = obj.y == null ? 0 : obj.y;
	  var y2 = obj.y2 == null ? 0 : obj.y2;

	  if (!obj.global) {
	    x = x * rect.width + rect.x;
	    x2 = x2 * rect.width + rect.x;
	    y = y * rect.height + rect.y;
	    y2 = y2 * rect.height + rect.y;
	  } // Fix NaN when rect is Infinity


	  x = isNaN(x) ? 0 : x;
	  x2 = isNaN(x2) ? 1 : x2;
	  y = isNaN(y) ? 0 : y;
	  y2 = isNaN(y2) ? 0 : y2;
	  var canvasGradient = ctx.createLinearGradient(x, y, x2, y2);
	  return canvasGradient;
	}

	function createRadialGradient(ctx, obj, rect) {
	  var width = rect.width;
	  var height = rect.height;
	  var min = Math.min(width, height);
	  var x = obj.x == null ? 0.5 : obj.x;
	  var y = obj.y == null ? 0.5 : obj.y;
	  var r = obj.r == null ? 0.5 : obj.r;

	  if (!obj.global) {
	    x = x * width + rect.x;
	    y = y * height + rect.y;
	    r = r * min;
	  }

	  var canvasGradient = ctx.createRadialGradient(x, y, 0, x, y, r);
	  return canvasGradient;
	}

	Style.prototype = {
	  constructor: Style,

	  /**
	   * @type {module:zrender/graphic/Displayable}
	   */
	  host: null,

	  /**
	   * @type {string}
	   */
	  fill: '#000',

	  /**
	   * @type {string}
	   */
	  stroke: null,

	  /**
	   * @type {number}
	   */
	  opacity: 1,

	  /**
	   * @type {Array.<number>}
	   */
	  lineDash: null,

	  /**
	   * @type {number}
	   */
	  lineDashOffset: 0,

	  /**
	   * @type {number}
	   */
	  shadowBlur: 0,

	  /**
	   * @type {number}
	   */
	  shadowOffsetX: 0,

	  /**
	   * @type {number}
	   */
	  shadowOffsetY: 0,

	  /**
	   * @type {number}
	   */
	  lineWidth: 1,

	  /**
	   * If stroke ignore scale
	   * @type {Boolean}
	   */
	  strokeNoScale: false,
	  // Bounding rect text configuration
	  // Not affected by element transform

	  /**
	   * @type {string}
	   */
	  text: null,

	  /**
	   * If `fontSize` or `fontFamily` exists, `font` will be reset by
	   * `fontSize`, `fontStyle`, `fontWeight`, `fontFamily`.
	   * So do not visit it directly in upper application (like echarts),
	   * but use `contain/text#makeFont` instead.
	   * @type {string}
	   */
	  font: null,

	  /**
	   * The same as font. Use font please.
	   * @deprecated
	   * @type {string}
	   */
	  textFont: null,

	  /**
	   * It helps merging respectively, rather than parsing an entire font string.
	   * @type {string}
	   */
	  fontStyle: null,

	  /**
	   * It helps merging respectively, rather than parsing an entire font string.
	   * @type {string}
	   */
	  fontWeight: null,

	  /**
	   * It helps merging respectively, rather than parsing an entire font string.
	   * Should be 12 but not '12px'.
	   * @type {number}
	   */
	  fontSize: null,

	  /**
	   * It helps merging respectively, rather than parsing an entire font string.
	   * @type {string}
	   */
	  fontFamily: null,

	  /**
	   * Reserved for special functinality, like 'hr'.
	   * @type {string}
	   */
	  textTag: null,

	  /**
	   * @type {string}
	   */
	  textFill: '#000',

	  /**
	   * @type {string}
	   */
	  textStroke: null,

	  /**
	   * @type {number}
	   */
	  textWidth: null,

	  /**
	   * Only for textBackground.
	   * @type {number}
	   */
	  textHeight: null,

	  /**
	   * textStroke may be set as some color as a default
	   * value in upper applicaion, where the default value
	   * of textStrokeWidth should be 0 to make sure that
	   * user can choose to do not use text stroke.
	   * @type {number}
	   */
	  textStrokeWidth: 0,

	  /**
	   * @type {number}
	   */
	  textLineHeight: null,

	  /**
	   * 'inside', 'left', 'right', 'top', 'bottom'
	   * [x, y]
	   * Based on x, y of rect.
	   * @type {string|Array.<number>}
	   * @default 'inside'
	   */
	  textPosition: 'inside',

	  /**
	   * If not specified, use the boundingRect of a `displayable`.
	   * @type {Object}
	   */
	  textRect: null,

	  /**
	   * [x, y]
	   * @type {Array.<number>}
	   */
	  textOffset: null,

	  /**
	   * @type {string}
	   */
	  textAlign: null,

	  /**
	   * @type {string}
	   */
	  textVerticalAlign: null,

	  /**
	   * @type {number}
	   */
	  textDistance: 5,

	  /**
	   * @type {string}
	   */
	  textShadowColor: 'transparent',

	  /**
	   * @type {number}
	   */
	  textShadowBlur: 0,

	  /**
	   * @type {number}
	   */
	  textShadowOffsetX: 0,

	  /**
	   * @type {number}
	   */
	  textShadowOffsetY: 0,

	  /**
	   * @type {string}
	   */
	  textBoxShadowColor: 'transparent',

	  /**
	   * @type {number}
	   */
	  textBoxShadowBlur: 0,

	  /**
	   * @type {number}
	   */
	  textBoxShadowOffsetX: 0,

	  /**
	   * @type {number}
	   */
	  textBoxShadowOffsetY: 0,

	  /**
	   * Whether transform text.
	   * Only useful in Path and Image element
	   * @type {boolean}
	   */
	  transformText: false,

	  /**
	   * Text rotate around position of Path or Image
	   * Only useful in Path and Image element and transformText is false.
	   */
	  textRotation: 0,

	  /**
	   * Text origin of text rotation, like [10, 40].
	   * Based on x, y of rect.
	   * Useful in label rotation of circular symbol.
	   * By default, this origin is textPosition.
	   * Can be 'center'.
	   * @type {string|Array.<number>}
	   */
	  textOrigin: null,

	  /**
	   * @type {string}
	   */
	  textBackgroundColor: null,

	  /**
	   * @type {string}
	   */
	  textBorderColor: null,

	  /**
	   * @type {number}
	   */
	  textBorderWidth: 0,

	  /**
	   * @type {number}
	   */
	  textBorderRadius: 0,

	  /**
	   * Can be `2` or `[2, 4]` or `[2, 3, 4, 5]`
	   * @type {number|Array.<number>}
	   */
	  textPadding: null,

	  /**
	   * Text styles for rich text.
	   * @type {Object}
	   */
	  rich: null,

	  /**
	   * {outerWidth, outerHeight, ellipsis, placeholder}
	   * @type {Object}
	   */
	  truncate: null,

	  /**
	   * https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation
	   * @type {string}
	   */
	  blend: null,

	  /**
	   * @param {CanvasRenderingContext2D} ctx
	   */
	  bind: function (ctx, el, prevEl) {
	    var style = this;
	    var prevStyle = prevEl && prevEl.style;
	    var firstDraw = !prevStyle;

	    for (var i = 0; i < STYLE_COMMON_PROPS.length; i++) {
	      var prop = STYLE_COMMON_PROPS[i];
	      var styleName = prop[0];

	      if (firstDraw || style[styleName] !== prevStyle[styleName]) {
	        // FIXME Invalid property value will cause style leak from previous element.
	        ctx[styleName] = fixShadow(ctx, styleName, style[styleName] || prop[1]);
	      }
	    }

	    if (firstDraw || style.fill !== prevStyle.fill) {
	      ctx.fillStyle = style.fill;
	    }

	    if (firstDraw || style.stroke !== prevStyle.stroke) {
	      ctx.strokeStyle = style.stroke;
	    }

	    if (firstDraw || style.opacity !== prevStyle.opacity) {
	      ctx.globalAlpha = style.opacity == null ? 1 : style.opacity;
	    }

	    if (firstDraw || style.blend !== prevStyle.blend) {
	      ctx.globalCompositeOperation = style.blend || 'source-over';
	    }

	    if (this.hasStroke()) {
	      var lineWidth = style.lineWidth;
	      ctx.lineWidth = lineWidth / (this.strokeNoScale && el && el.getLineScale ? el.getLineScale() : 1);
	    }
	  },
	  hasFill: function () {
	    var fill = this.fill;
	    return fill != null && fill !== 'none';
	  },
	  hasStroke: function () {
	    var stroke = this.stroke;
	    return stroke != null && stroke !== 'none' && this.lineWidth > 0;
	  },

	  /**
	   * Extend from other style
	   * @param {zrender/graphic/Style} otherStyle
	   * @param {boolean} overwrite true: overwrirte any way.
	   *                            false: overwrite only when !target.hasOwnProperty
	   *                            others: overwrite when property is not null/undefined.
	   */
	  extendFrom: function (otherStyle, overwrite) {
	    if (otherStyle) {
	      for (var name in otherStyle) {
	        if (otherStyle.hasOwnProperty(name) && (overwrite === true || (overwrite === false ? !this.hasOwnProperty(name) : otherStyle[name] != null))) {
	          this[name] = otherStyle[name];
	        }
	      }
	    }
	  },

	  /**
	   * Batch setting style with a given object
	   * @param {Object|string} obj
	   * @param {*} [obj]
	   */
	  set: function (obj, value) {
	    if (typeof obj === 'string') {
	      this[obj] = value;
	    } else {
	      this.extendFrom(obj, true);
	    }
	  },

	  /**
	   * Clone
	   * @return {zrender/graphic/Style} [description]
	   */
	  clone: function () {
	    var newStyle = new this.constructor();
	    newStyle.extendFrom(this, true);
	    return newStyle;
	  },
	  getGradient: function (ctx, obj, rect) {
	    var method = obj.type === 'radial' ? createRadialGradient : createLinearGradient;
	    var canvasGradient = method(ctx, obj, rect);
	    var colorStops = obj.colorStops;

	    for (var i = 0; i < colorStops.length; i++) {
	      canvasGradient.addColorStop(colorStops[i].offset, colorStops[i].color);
	    }

	    return canvasGradient;
	  }
	};
	var styleProto = Style.prototype;

	for (var i = 0; i < STYLE_COMMON_PROPS.length; i++) {
	  var prop = STYLE_COMMON_PROPS[i];

	  if (!(prop[0] in styleProto)) {
	    styleProto[prop[0]] = prop[1];
	  }
	} // Provide for others


	Style.getGradient = styleProto.getGradient;
	var _default = Style;
	module.exports = _default;

/***/ }),
/* 204 */
/***/ (function(module, exports) {

	var SHADOW_PROPS = {
	  'shadowBlur': 1,
	  'shadowOffsetX': 1,
	  'shadowOffsetY': 1,
	  'textShadowBlur': 1,
	  'textShadowOffsetX': 1,
	  'textShadowOffsetY': 1,
	  'textBoxShadowBlur': 1,
	  'textBoxShadowOffsetX': 1,
	  'textBoxShadowOffsetY': 1
	};

	function _default(ctx, propName, value) {
	  if (SHADOW_PROPS.hasOwnProperty(propName)) {
	    return value *= ctx.dpr;
	  }

	  return value;
	}

	module.exports = _default;

/***/ }),
/* 205 */
/***/ (function(module, exports) {

	var Pattern = function (image, repeat) {
	  // Should do nothing more in this constructor. Because gradient can be
	  // declard by `color: {image: ...}`, where this constructor will not be called.
	  this.image = image;
	  this.repeat = repeat; // Can be cloned

	  this.type = 'pattern';
	};

	Pattern.prototype.getCanvasPattern = function (ctx) {
	  return ctx.createPattern(this.image, this.repeat || 'repeat');
	};

	var _default = Pattern;
	module.exports = _default;

/***/ }),
/* 206 */
/***/ (function(module, exports) {

	var _default = typeof window !== 'undefined' && (window.requestAnimationFrame && window.requestAnimationFrame.bind(window) || // https://github.com/ecomfe/zrender/issues/189#issuecomment-224919809
	window.msRequestAnimationFrame && window.msRequestAnimationFrame.bind(window) || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame) || function (func) {
	  setTimeout(func, 16);
	};

	module.exports = _default;

/***/ }),
/* 207 */
/***/ (function(module, exports, __webpack_require__) {

	var Displayable = __webpack_require__(208);

	var BoundingRect = __webpack_require__(199);

	var zrUtil = __webpack_require__(181);

	var imageHelper = __webpack_require__(212);

	/**
	 * @alias zrender/graphic/Image
	 * @extends module:zrender/graphic/Displayable
	 * @constructor
	 * @param {Object} opts
	 */
	function ZImage(opts) {
	  Displayable.call(this, opts);
	}

	ZImage.prototype = {
	  constructor: ZImage,
	  type: 'image',
	  brush: function (ctx, prevEl) {
	    var style = this.style;
	    var src = style.image; // Must bind each time

	    style.bind(ctx, this, prevEl);
	    var image = this._image = imageHelper.createOrUpdateImage(src, this._image, this, this.onload);

	    if (!image || !imageHelper.isImageReady(image)) {
	      return;
	    } // 图片已经加载完成
	    // if (image.nodeName.toUpperCase() == 'IMG') {
	    //     if (!image.complete) {
	    //         return;
	    //     }
	    // }
	    // Else is canvas


	    var x = style.x || 0;
	    var y = style.y || 0;
	    var width = style.width;
	    var height = style.height;
	    var aspect = image.width / image.height;

	    if (width == null && height != null) {
	      // Keep image/height ratio
	      width = height * aspect;
	    } else if (height == null && width != null) {
	      height = width / aspect;
	    } else if (width == null && height == null) {
	      width = image.width;
	      height = image.height;
	    } // 设置transform


	    this.setTransform(ctx);

	    if (style.sWidth && style.sHeight) {
	      var sx = style.sx || 0;
	      var sy = style.sy || 0;
	      ctx.drawImage(image, sx, sy, style.sWidth, style.sHeight, x, y, width, height);
	    } else if (style.sx && style.sy) {
	      var sx = style.sx;
	      var sy = style.sy;
	      var sWidth = width - sx;
	      var sHeight = height - sy;
	      ctx.drawImage(image, sx, sy, sWidth, sHeight, x, y, width, height);
	    } else {
	      ctx.drawImage(image, x, y, width, height);
	    } // Draw rect text


	    if (style.text != null) {
	      // Only restore transform when needs draw text.
	      this.restoreTransform(ctx);
	      this.drawRectText(ctx, this.getBoundingRect());
	    }
	  },
	  getBoundingRect: function () {
	    var style = this.style;

	    if (!this._rect) {
	      this._rect = new BoundingRect(style.x || 0, style.y || 0, style.width || 0, style.height || 0);
	    }

	    return this._rect;
	  }
	};
	zrUtil.inherits(ZImage, Displayable);
	var _default = ZImage;
	module.exports = _default;

/***/ }),
/* 208 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(181);

	var Style = __webpack_require__(203);

	var Element = __webpack_require__(188);

	var RectText = __webpack_require__(209);

	/**
	 * 可绘制的图形基类
	 * Base class of all displayable graphic objects
	 * @module zrender/graphic/Displayable
	 */

	/**
	 * @alias module:zrender/graphic/Displayable
	 * @extends module:zrender/Element
	 * @extends module:zrender/graphic/mixin/RectText
	 */
	function Displayable(opts) {
	  opts = opts || {};
	  Element.call(this, opts); // Extend properties

	  for (var name in opts) {
	    if (opts.hasOwnProperty(name) && name !== 'style') {
	      this[name] = opts[name];
	    }
	  }
	  /**
	   * @type {module:zrender/graphic/Style}
	   */


	  this.style = new Style(opts.style, this);
	  this._rect = null; // Shapes for cascade clipping.

	  this.__clipPaths = []; // FIXME Stateful must be mixined after style is setted
	  // Stateful.call(this, opts);
	}

	Displayable.prototype = {
	  constructor: Displayable,
	  type: 'displayable',

	  /**
	   * Displayable 是否为脏，Painter 中会根据该标记判断是否需要是否需要重新绘制
	   * Dirty flag. From which painter will determine if this displayable object needs brush
	   * @name module:zrender/graphic/Displayable#__dirty
	   * @type {boolean}
	   */
	  __dirty: true,

	  /**
	   * 图形是否可见，为true时不绘制图形，但是仍能触发鼠标事件
	   * If ignore drawing of the displayable object. Mouse event will still be triggered
	   * @name module:/zrender/graphic/Displayable#invisible
	   * @type {boolean}
	   * @default false
	   */
	  invisible: false,

	  /**
	   * @name module:/zrender/graphic/Displayable#z
	   * @type {number}
	   * @default 0
	   */
	  z: 0,

	  /**
	   * @name module:/zrender/graphic/Displayable#z
	   * @type {number}
	   * @default 0
	   */
	  z2: 0,

	  /**
	   * z层level，决定绘画在哪层canvas中
	   * @name module:/zrender/graphic/Displayable#zlevel
	   * @type {number}
	   * @default 0
	   */
	  zlevel: 0,

	  /**
	   * 是否可拖拽
	   * @name module:/zrender/graphic/Displayable#draggable
	   * @type {boolean}
	   * @default false
	   */
	  draggable: false,

	  /**
	   * 是否正在拖拽
	   * @name module:/zrender/graphic/Displayable#draggable
	   * @type {boolean}
	   * @default false
	   */
	  dragging: false,

	  /**
	   * 是否相应鼠标事件
	   * @name module:/zrender/graphic/Displayable#silent
	   * @type {boolean}
	   * @default false
	   */
	  silent: false,

	  /**
	   * If enable culling
	   * @type {boolean}
	   * @default false
	   */
	  culling: false,

	  /**
	   * Mouse cursor when hovered
	   * @name module:/zrender/graphic/Displayable#cursor
	   * @type {string}
	   */
	  cursor: 'pointer',

	  /**
	   * If hover area is bounding rect
	   * @name module:/zrender/graphic/Displayable#rectHover
	   * @type {string}
	   */
	  rectHover: false,

	  /**
	   * Render the element progressively when the value >= 0,
	   * usefull for large data.
	   * @type {boolean}
	   */
	  progressive: false,

	  /**
	   * @type {boolean}
	   */
	  incremental: false,
	  // inplace is used with incremental
	  inplace: false,
	  beforeBrush: function (ctx) {},
	  afterBrush: function (ctx) {},

	  /**
	   * 图形绘制方法
	   * @param {CanvasRenderingContext2D} ctx
	   */
	  // Interface
	  brush: function (ctx, prevEl) {},

	  /**
	   * 获取最小包围盒
	   * @return {module:zrender/core/BoundingRect}
	   */
	  // Interface
	  getBoundingRect: function () {},

	  /**
	   * 判断坐标 x, y 是否在图形上
	   * If displayable element contain coord x, y
	   * @param  {number} x
	   * @param  {number} y
	   * @return {boolean}
	   */
	  contain: function (x, y) {
	    return this.rectContain(x, y);
	  },

	  /**
	   * @param  {Function} cb
	   * @param  {}   context
	   */
	  traverse: function (cb, context) {
	    cb.call(context, this);
	  },

	  /**
	   * 判断坐标 x, y 是否在图形的包围盒上
	   * If bounding rect of element contain coord x, y
	   * @param  {number} x
	   * @param  {number} y
	   * @return {boolean}
	   */
	  rectContain: function (x, y) {
	    var coord = this.transformCoordToLocal(x, y);
	    var rect = this.getBoundingRect();
	    return rect.contain(coord[0], coord[1]);
	  },

	  /**
	   * 标记图形元素为脏，并且在下一帧重绘
	   * Mark displayable element dirty and refresh next frame
	   */
	  dirty: function () {
	    this.__dirty = true;
	    this._rect = null;
	    this.__zr && this.__zr.refresh();
	  },

	  /**
	   * 图形是否会触发事件
	   * If displayable object binded any event
	   * @return {boolean}
	   */
	  // TODO, 通过 bind 绑定的事件
	  // isSilent: function () {
	  //     return !(
	  //         this.hoverable || this.draggable
	  //         || this.onmousemove || this.onmouseover || this.onmouseout
	  //         || this.onmousedown || this.onmouseup || this.onclick
	  //         || this.ondragenter || this.ondragover || this.ondragleave
	  //         || this.ondrop
	  //     );
	  // },

	  /**
	   * Alias for animate('style')
	   * @param {boolean} loop
	   */
	  animateStyle: function (loop) {
	    return this.animate('style', loop);
	  },
	  attrKV: function (key, value) {
	    if (key !== 'style') {
	      Element.prototype.attrKV.call(this, key, value);
	    } else {
	      this.style.set(value);
	    }
	  },

	  /**
	   * @param {Object|string} key
	   * @param {*} value
	   */
	  setStyle: function (key, value) {
	    this.style.set(key, value);
	    this.dirty(false);
	    return this;
	  },

	  /**
	   * Use given style object
	   * @param  {Object} obj
	   */
	  useStyle: function (obj) {
	    this.style = new Style(obj, this);
	    this.dirty(false);
	    return this;
	  }
	};
	zrUtil.inherits(Displayable, Element);
	zrUtil.mixin(Displayable, RectText); // zrUtil.mixin(Displayable, Stateful);

	var _default = Displayable;
	module.exports = _default;

/***/ }),
/* 209 */
/***/ (function(module, exports, __webpack_require__) {

	var textHelper = __webpack_require__(210);

	var BoundingRect = __webpack_require__(199);

	/**
	 * Mixin for drawing text in a element bounding rect
	 * @module zrender/mixin/RectText
	 */
	var tmpRect = new BoundingRect();

	var RectText = function () {};

	RectText.prototype = {
	  constructor: RectText,

	  /**
	   * Draw text in a rect with specified position.
	   * @param  {CanvasRenderingContext2D} ctx
	   * @param  {Object} rect Displayable rect
	   */
	  drawRectText: function (ctx, rect) {
	    var style = this.style;
	    rect = style.textRect || rect; // Optimize, avoid normalize every time.

	    this.__dirty && textHelper.normalizeTextStyle(style, true);
	    var text = style.text; // Convert to string

	    text != null && (text += '');

	    if (!textHelper.needDrawText(text, style)) {
	      return;
	    } // FIXME


	    ctx.save(); // Transform rect to view space

	    var transform = this.transform;

	    if (!style.transformText) {
	      if (transform) {
	        tmpRect.copy(rect);
	        tmpRect.applyTransform(transform);
	        rect = tmpRect;
	      }
	    } else {
	      this.setTransform(ctx);
	    } // transformText and textRotation can not be used at the same time.


	    textHelper.renderText(this, ctx, text, style, rect);
	    ctx.restore();
	  }
	};
	var _default = RectText;
	module.exports = _default;

/***/ }),
/* 210 */
/***/ (function(module, exports, __webpack_require__) {

	var _util = __webpack_require__(181);

	var retrieve2 = _util.retrieve2;
	var retrieve3 = _util.retrieve3;
	var each = _util.each;
	var normalizeCssArray = _util.normalizeCssArray;
	var isString = _util.isString;
	var isObject = _util.isObject;

	var textContain = __webpack_require__(211);

	var roundRectHelper = __webpack_require__(213);

	var imageHelper = __webpack_require__(212);

	var fixShadow = __webpack_require__(204);

	// TODO: Have not support 'start', 'end' yet.
	var VALID_TEXT_ALIGN = {
	  left: 1,
	  right: 1,
	  center: 1
	};
	var VALID_TEXT_VERTICAL_ALIGN = {
	  top: 1,
	  bottom: 1,
	  middle: 1
	};
	/**
	 * @param {module:zrender/graphic/Style} style
	 * @return {module:zrender/graphic/Style} The input style.
	 */

	function normalizeTextStyle(style) {
	  normalizeStyle(style);
	  each(style.rich, normalizeStyle);
	  return style;
	}

	function normalizeStyle(style) {
	  if (style) {
	    style.font = textContain.makeFont(style);
	    var textAlign = style.textAlign;
	    textAlign === 'middle' && (textAlign = 'center');
	    style.textAlign = textAlign == null || VALID_TEXT_ALIGN[textAlign] ? textAlign : 'left'; // Compatible with textBaseline.

	    var textVerticalAlign = style.textVerticalAlign || style.textBaseline;
	    textVerticalAlign === 'center' && (textVerticalAlign = 'middle');
	    style.textVerticalAlign = textVerticalAlign == null || VALID_TEXT_VERTICAL_ALIGN[textVerticalAlign] ? textVerticalAlign : 'top';
	    var textPadding = style.textPadding;

	    if (textPadding) {
	      style.textPadding = normalizeCssArray(style.textPadding);
	    }
	  }
	}
	/**
	 * @param {CanvasRenderingContext2D} ctx
	 * @param {string} text
	 * @param {module:zrender/graphic/Style} style
	 * @param {Object|boolean} [rect] {x, y, width, height}
	 *                  If set false, rect text is not used.
	 */


	function renderText(hostEl, ctx, text, style, rect) {
	  style.rich ? renderRichText(hostEl, ctx, text, style, rect) : renderPlainText(hostEl, ctx, text, style, rect);
	}

	function renderPlainText(hostEl, ctx, text, style, rect) {
	  var font = setCtx(ctx, 'font', style.font || textContain.DEFAULT_FONT);
	  var textPadding = style.textPadding;
	  var contentBlock = hostEl.__textCotentBlock;

	  if (!contentBlock || hostEl.__dirty) {
	    contentBlock = hostEl.__textCotentBlock = textContain.parsePlainText(text, font, textPadding, style.truncate);
	  }

	  var outerHeight = contentBlock.outerHeight;
	  var textLines = contentBlock.lines;
	  var lineHeight = contentBlock.lineHeight;
	  var boxPos = getBoxPosition(outerHeight, style, rect);
	  var baseX = boxPos.baseX;
	  var baseY = boxPos.baseY;
	  var textAlign = boxPos.textAlign;
	  var textVerticalAlign = boxPos.textVerticalAlign; // Origin of textRotation should be the base point of text drawing.

	  applyTextRotation(ctx, style, rect, baseX, baseY);
	  var boxY = textContain.adjustTextY(baseY, outerHeight, textVerticalAlign);
	  var textX = baseX;
	  var textY = boxY;
	  var needDrawBg = needDrawBackground(style);

	  if (needDrawBg || textPadding) {
	    // Consider performance, do not call getTextWidth util necessary.
	    var textWidth = textContain.getWidth(text, font);
	    var outerWidth = textWidth;
	    textPadding && (outerWidth += textPadding[1] + textPadding[3]);
	    var boxX = textContain.adjustTextX(baseX, outerWidth, textAlign);
	    needDrawBg && drawBackground(hostEl, ctx, style, boxX, boxY, outerWidth, outerHeight);

	    if (textPadding) {
	      textX = getTextXForPadding(baseX, textAlign, textPadding);
	      textY += textPadding[0];
	    }
	  }

	  setCtx(ctx, 'textAlign', textAlign || 'left'); // Force baseline to be "middle". Otherwise, if using "top", the
	  // text will offset downward a little bit in font "Microsoft YaHei".

	  setCtx(ctx, 'textBaseline', 'middle'); // Always set shadowBlur and shadowOffset to avoid leak from displayable.

	  setCtx(ctx, 'shadowBlur', style.textShadowBlur || 0);
	  setCtx(ctx, 'shadowColor', style.textShadowColor || 'transparent');
	  setCtx(ctx, 'shadowOffsetX', style.textShadowOffsetX || 0);
	  setCtx(ctx, 'shadowOffsetY', style.textShadowOffsetY || 0); // `textBaseline` is set as 'middle'.

	  textY += lineHeight / 2;
	  var textStrokeWidth = style.textStrokeWidth;
	  var textStroke = getStroke(style.textStroke, textStrokeWidth);
	  var textFill = getFill(style.textFill);

	  if (textStroke) {
	    setCtx(ctx, 'lineWidth', textStrokeWidth);
	    setCtx(ctx, 'strokeStyle', textStroke);
	  }

	  if (textFill) {
	    setCtx(ctx, 'fillStyle', textFill);
	  }

	  for (var i = 0; i < textLines.length; i++) {
	    // Fill after stroke so the outline will not cover the main part.
	    textStroke && ctx.strokeText(textLines[i], textX, textY);
	    textFill && ctx.fillText(textLines[i], textX, textY);
	    textY += lineHeight;
	  }
	}

	function renderRichText(hostEl, ctx, text, style, rect) {
	  var contentBlock = hostEl.__textCotentBlock;

	  if (!contentBlock || hostEl.__dirty) {
	    contentBlock = hostEl.__textCotentBlock = textContain.parseRichText(text, style);
	  }

	  drawRichText(hostEl, ctx, contentBlock, style, rect);
	}

	function drawRichText(hostEl, ctx, contentBlock, style, rect) {
	  var contentWidth = contentBlock.width;
	  var outerWidth = contentBlock.outerWidth;
	  var outerHeight = contentBlock.outerHeight;
	  var textPadding = style.textPadding;
	  var boxPos = getBoxPosition(outerHeight, style, rect);
	  var baseX = boxPos.baseX;
	  var baseY = boxPos.baseY;
	  var textAlign = boxPos.textAlign;
	  var textVerticalAlign = boxPos.textVerticalAlign; // Origin of textRotation should be the base point of text drawing.

	  applyTextRotation(ctx, style, rect, baseX, baseY);
	  var boxX = textContain.adjustTextX(baseX, outerWidth, textAlign);
	  var boxY = textContain.adjustTextY(baseY, outerHeight, textVerticalAlign);
	  var xLeft = boxX;
	  var lineTop = boxY;

	  if (textPadding) {
	    xLeft += textPadding[3];
	    lineTop += textPadding[0];
	  }

	  var xRight = xLeft + contentWidth;
	  needDrawBackground(style) && drawBackground(hostEl, ctx, style, boxX, boxY, outerWidth, outerHeight);

	  for (var i = 0; i < contentBlock.lines.length; i++) {
	    var line = contentBlock.lines[i];
	    var tokens = line.tokens;
	    var tokenCount = tokens.length;
	    var lineHeight = line.lineHeight;
	    var usedWidth = line.width;
	    var leftIndex = 0;
	    var lineXLeft = xLeft;
	    var lineXRight = xRight;
	    var rightIndex = tokenCount - 1;
	    var token;

	    while (leftIndex < tokenCount && (token = tokens[leftIndex], !token.textAlign || token.textAlign === 'left')) {
	      placeToken(hostEl, ctx, token, style, lineHeight, lineTop, lineXLeft, 'left');
	      usedWidth -= token.width;
	      lineXLeft += token.width;
	      leftIndex++;
	    }

	    while (rightIndex >= 0 && (token = tokens[rightIndex], token.textAlign === 'right')) {
	      placeToken(hostEl, ctx, token, style, lineHeight, lineTop, lineXRight, 'right');
	      usedWidth -= token.width;
	      lineXRight -= token.width;
	      rightIndex--;
	    } // The other tokens are placed as textAlign 'center' if there is enough space.


	    lineXLeft += (contentWidth - (lineXLeft - xLeft) - (xRight - lineXRight) - usedWidth) / 2;

	    while (leftIndex <= rightIndex) {
	      token = tokens[leftIndex]; // Consider width specified by user, use 'center' rather than 'left'.

	      placeToken(hostEl, ctx, token, style, lineHeight, lineTop, lineXLeft + token.width / 2, 'center');
	      lineXLeft += token.width;
	      leftIndex++;
	    }

	    lineTop += lineHeight;
	  }
	}

	function applyTextRotation(ctx, style, rect, x, y) {
	  // textRotation only apply in RectText.
	  if (rect && style.textRotation) {
	    var origin = style.textOrigin;

	    if (origin === 'center') {
	      x = rect.width / 2 + rect.x;
	      y = rect.height / 2 + rect.y;
	    } else if (origin) {
	      x = origin[0] + rect.x;
	      y = origin[1] + rect.y;
	    }

	    ctx.translate(x, y); // Positive: anticlockwise

	    ctx.rotate(-style.textRotation);
	    ctx.translate(-x, -y);
	  }
	}

	function placeToken(hostEl, ctx, token, style, lineHeight, lineTop, x, textAlign) {
	  var tokenStyle = style.rich[token.styleName] || {}; // 'ctx.textBaseline' is always set as 'middle', for sake of
	  // the bias of "Microsoft YaHei".

	  var textVerticalAlign = token.textVerticalAlign;
	  var y = lineTop + lineHeight / 2;

	  if (textVerticalAlign === 'top') {
	    y = lineTop + token.height / 2;
	  } else if (textVerticalAlign === 'bottom') {
	    y = lineTop + lineHeight - token.height / 2;
	  }

	  !token.isLineHolder && needDrawBackground(tokenStyle) && drawBackground(hostEl, ctx, tokenStyle, textAlign === 'right' ? x - token.width : textAlign === 'center' ? x - token.width / 2 : x, y - token.height / 2, token.width, token.height);
	  var textPadding = token.textPadding;

	  if (textPadding) {
	    x = getTextXForPadding(x, textAlign, textPadding);
	    y -= token.height / 2 - textPadding[2] - token.textHeight / 2;
	  }

	  setCtx(ctx, 'shadowBlur', retrieve3(tokenStyle.textShadowBlur, style.textShadowBlur, 0));
	  setCtx(ctx, 'shadowColor', tokenStyle.textShadowColor || style.textShadowColor || 'transparent');
	  setCtx(ctx, 'shadowOffsetX', retrieve3(tokenStyle.textShadowOffsetX, style.textShadowOffsetX, 0));
	  setCtx(ctx, 'shadowOffsetY', retrieve3(tokenStyle.textShadowOffsetY, style.textShadowOffsetY, 0));
	  setCtx(ctx, 'textAlign', textAlign); // Force baseline to be "middle". Otherwise, if using "top", the
	  // text will offset downward a little bit in font "Microsoft YaHei".

	  setCtx(ctx, 'textBaseline', 'middle');
	  setCtx(ctx, 'font', token.font || textContain.DEFAULT_FONT);
	  var textStroke = getStroke(tokenStyle.textStroke || style.textStroke, textStrokeWidth);
	  var textFill = getFill(tokenStyle.textFill || style.textFill);
	  var textStrokeWidth = retrieve2(tokenStyle.textStrokeWidth, style.textStrokeWidth); // Fill after stroke so the outline will not cover the main part.

	  if (textStroke) {
	    setCtx(ctx, 'lineWidth', textStrokeWidth);
	    setCtx(ctx, 'strokeStyle', textStroke);
	    ctx.strokeText(token.text, x, y);
	  }

	  if (textFill) {
	    setCtx(ctx, 'fillStyle', textFill);
	    ctx.fillText(token.text, x, y);
	  }
	}

	function needDrawBackground(style) {
	  return style.textBackgroundColor || style.textBorderWidth && style.textBorderColor;
	} // style: {textBackgroundColor, textBorderWidth, textBorderColor, textBorderRadius}
	// shape: {x, y, width, height}


	function drawBackground(hostEl, ctx, style, x, y, width, height) {
	  var textBackgroundColor = style.textBackgroundColor;
	  var textBorderWidth = style.textBorderWidth;
	  var textBorderColor = style.textBorderColor;
	  var isPlainBg = isString(textBackgroundColor);
	  setCtx(ctx, 'shadowBlur', style.textBoxShadowBlur || 0);
	  setCtx(ctx, 'shadowColor', style.textBoxShadowColor || 'transparent');
	  setCtx(ctx, 'shadowOffsetX', style.textBoxShadowOffsetX || 0);
	  setCtx(ctx, 'shadowOffsetY', style.textBoxShadowOffsetY || 0);

	  if (isPlainBg || textBorderWidth && textBorderColor) {
	    ctx.beginPath();
	    var textBorderRadius = style.textBorderRadius;

	    if (!textBorderRadius) {
	      ctx.rect(x, y, width, height);
	    } else {
	      roundRectHelper.buildPath(ctx, {
	        x: x,
	        y: y,
	        width: width,
	        height: height,
	        r: textBorderRadius
	      });
	    }

	    ctx.closePath();
	  }

	  if (isPlainBg) {
	    setCtx(ctx, 'fillStyle', textBackgroundColor);
	    ctx.fill();
	  } else if (isObject(textBackgroundColor)) {
	    var image = textBackgroundColor.image;
	    image = imageHelper.createOrUpdateImage(image, null, hostEl, onBgImageLoaded, textBackgroundColor);

	    if (image && imageHelper.isImageReady(image)) {
	      ctx.drawImage(image, x, y, width, height);
	    }
	  }

	  if (textBorderWidth && textBorderColor) {
	    setCtx(ctx, 'lineWidth', textBorderWidth);
	    setCtx(ctx, 'strokeStyle', textBorderColor);
	    ctx.stroke();
	  }
	}

	function onBgImageLoaded(image, textBackgroundColor) {
	  // Replace image, so that `contain/text.js#parseRichText`
	  // will get correct result in next tick.
	  textBackgroundColor.image = image;
	}

	function getBoxPosition(blockHeiht, style, rect) {
	  var baseX = style.x || 0;
	  var baseY = style.y || 0;
	  var textAlign = style.textAlign;
	  var textVerticalAlign = style.textVerticalAlign; // Text position represented by coord

	  if (rect) {
	    var textPosition = style.textPosition;

	    if (textPosition instanceof Array) {
	      // Percent
	      baseX = rect.x + parsePercent(textPosition[0], rect.width);
	      baseY = rect.y + parsePercent(textPosition[1], rect.height);
	    } else {
	      var res = textContain.adjustTextPositionOnRect(textPosition, rect, style.textDistance);
	      baseX = res.x;
	      baseY = res.y; // Default align and baseline when has textPosition

	      textAlign = textAlign || res.textAlign;
	      textVerticalAlign = textVerticalAlign || res.textVerticalAlign;
	    } // textOffset is only support in RectText, otherwise
	    // we have to adjust boundingRect for textOffset.


	    var textOffset = style.textOffset;

	    if (textOffset) {
	      baseX += textOffset[0];
	      baseY += textOffset[1];
	    }
	  }

	  return {
	    baseX: baseX,
	    baseY: baseY,
	    textAlign: textAlign,
	    textVerticalAlign: textVerticalAlign
	  };
	}

	function setCtx(ctx, prop, value) {
	  ctx[prop] = fixShadow(ctx, prop, value);
	  return ctx[prop];
	}
	/**
	 * @param {string} [stroke] If specified, do not check style.textStroke.
	 * @param {string} [lineWidth] If specified, do not check style.textStroke.
	 * @param {number} style
	 */


	function getStroke(stroke, lineWidth) {
	  return stroke == null || lineWidth <= 0 || stroke === 'transparent' || stroke === 'none' ? null // TODO pattern and gradient?
	  : stroke.image || stroke.colorStops ? '#000' : stroke;
	}

	function getFill(fill) {
	  return fill == null || fill === 'none' ? null // TODO pattern and gradient?
	  : fill.image || fill.colorStops ? '#000' : fill;
	}

	function parsePercent(value, maxValue) {
	  if (typeof value === 'string') {
	    if (value.lastIndexOf('%') >= 0) {
	      return parseFloat(value) / 100 * maxValue;
	    }

	    return parseFloat(value);
	  }

	  return value;
	}

	function getTextXForPadding(x, textAlign, textPadding) {
	  return textAlign === 'right' ? x - textPadding[1] : textAlign === 'center' ? x + textPadding[3] / 2 - textPadding[1] / 2 : x + textPadding[3];
	}
	/**
	 * @param {string} text
	 * @param {module:zrender/Style} style
	 * @return {boolean}
	 */


	function needDrawText(text, style) {
	  return text != null && (text || style.textBackgroundColor || style.textBorderWidth && style.textBorderColor || style.textPadding);
	}

	exports.normalizeTextStyle = normalizeTextStyle;
	exports.renderText = renderText;
	exports.getStroke = getStroke;
	exports.getFill = getFill;
	exports.needDrawText = needDrawText;

/***/ }),
/* 211 */
/***/ (function(module, exports, __webpack_require__) {

	var BoundingRect = __webpack_require__(199);

	var imageHelper = __webpack_require__(212);

	var _util = __webpack_require__(181);

	var getContext = _util.getContext;
	var extend = _util.extend;
	var retrieve2 = _util.retrieve2;
	var retrieve3 = _util.retrieve3;
	var trim = _util.trim;
	var textWidthCache = {};
	var textWidthCacheCounter = 0;
	var TEXT_CACHE_MAX = 5000;
	var STYLE_REG = /\{([a-zA-Z0-9_]+)\|([^}]*)\}/g;
	var DEFAULT_FONT = '12px sans-serif'; // Avoid assign to an exported variable, for transforming to cjs.

	var methods = {};

	function $override(name, fn) {
	  methods[name] = fn;
	}
	/**
	 * @public
	 * @param {string} text
	 * @param {string} font
	 * @return {number} width
	 */


	function getWidth(text, font) {
	  font = font || DEFAULT_FONT;
	  var key = text + ':' + font;

	  if (textWidthCache[key]) {
	    return textWidthCache[key];
	  }

	  var textLines = (text + '').split('\n');
	  var width = 0;

	  for (var i = 0, l = textLines.length; i < l; i++) {
	    // textContain.measureText may be overrided in SVG or VML
	    width = Math.max(measureText(textLines[i], font).width, width);
	  }

	  if (textWidthCacheCounter > TEXT_CACHE_MAX) {
	    textWidthCacheCounter = 0;
	    textWidthCache = {};
	  }

	  textWidthCacheCounter++;
	  textWidthCache[key] = width;
	  return width;
	}
	/**
	 * @public
	 * @param {string} text
	 * @param {string} font
	 * @param {string} [textAlign='left']
	 * @param {string} [textVerticalAlign='top']
	 * @param {Array.<number>} [textPadding]
	 * @param {Object} [rich]
	 * @param {Object} [truncate]
	 * @return {Object} {x, y, width, height, lineHeight}
	 */


	function getBoundingRect(text, font, textAlign, textVerticalAlign, textPadding, rich, truncate) {
	  return rich ? getRichTextRect(text, font, textAlign, textVerticalAlign, textPadding, rich, truncate) : getPlainTextRect(text, font, textAlign, textVerticalAlign, textPadding, truncate);
	}

	function getPlainTextRect(text, font, textAlign, textVerticalAlign, textPadding, truncate) {
	  var contentBlock = parsePlainText(text, font, textPadding, truncate);
	  var outerWidth = getWidth(text, font);

	  if (textPadding) {
	    outerWidth += textPadding[1] + textPadding[3];
	  }

	  var outerHeight = contentBlock.outerHeight;
	  var x = adjustTextX(0, outerWidth, textAlign);
	  var y = adjustTextY(0, outerHeight, textVerticalAlign);
	  var rect = new BoundingRect(x, y, outerWidth, outerHeight);
	  rect.lineHeight = contentBlock.lineHeight;
	  return rect;
	}

	function getRichTextRect(text, font, textAlign, textVerticalAlign, textPadding, rich, truncate) {
	  var contentBlock = parseRichText(text, {
	    rich: rich,
	    truncate: truncate,
	    font: font,
	    textAlign: textAlign,
	    textPadding: textPadding
	  });
	  var outerWidth = contentBlock.outerWidth;
	  var outerHeight = contentBlock.outerHeight;
	  var x = adjustTextX(0, outerWidth, textAlign);
	  var y = adjustTextY(0, outerHeight, textVerticalAlign);
	  return new BoundingRect(x, y, outerWidth, outerHeight);
	}
	/**
	 * @public
	 * @param {number} x
	 * @param {number} width
	 * @param {string} [textAlign='left']
	 * @return {number} Adjusted x.
	 */


	function adjustTextX(x, width, textAlign) {
	  // FIXME Right to left language
	  if (textAlign === 'right') {
	    x -= width;
	  } else if (textAlign === 'center') {
	    x -= width / 2;
	  }

	  return x;
	}
	/**
	 * @public
	 * @param {number} y
	 * @param {number} height
	 * @param {string} [textVerticalAlign='top']
	 * @return {number} Adjusted y.
	 */


	function adjustTextY(y, height, textVerticalAlign) {
	  if (textVerticalAlign === 'middle') {
	    y -= height / 2;
	  } else if (textVerticalAlign === 'bottom') {
	    y -= height;
	  }

	  return y;
	}
	/**
	 * @public
	 * @param {stirng} textPosition
	 * @param {Object} rect {x, y, width, height}
	 * @param {number} distance
	 * @return {Object} {x, y, textAlign, textVerticalAlign}
	 */


	function adjustTextPositionOnRect(textPosition, rect, distance) {
	  var x = rect.x;
	  var y = rect.y;
	  var height = rect.height;
	  var width = rect.width;
	  var halfHeight = height / 2;
	  var textAlign = 'left';
	  var textVerticalAlign = 'top';

	  switch (textPosition) {
	    case 'left':
	      x -= distance;
	      y += halfHeight;
	      textAlign = 'right';
	      textVerticalAlign = 'middle';
	      break;

	    case 'right':
	      x += distance + width;
	      y += halfHeight;
	      textVerticalAlign = 'middle';
	      break;

	    case 'top':
	      x += width / 2;
	      y -= distance;
	      textAlign = 'center';
	      textVerticalAlign = 'bottom';
	      break;

	    case 'bottom':
	      x += width / 2;
	      y += height + distance;
	      textAlign = 'center';
	      break;

	    case 'inside':
	      x += width / 2;
	      y += halfHeight;
	      textAlign = 'center';
	      textVerticalAlign = 'middle';
	      break;

	    case 'insideLeft':
	      x += distance;
	      y += halfHeight;
	      textVerticalAlign = 'middle';
	      break;

	    case 'insideRight':
	      x += width - distance;
	      y += halfHeight;
	      textAlign = 'right';
	      textVerticalAlign = 'middle';
	      break;

	    case 'insideTop':
	      x += width / 2;
	      y += distance;
	      textAlign = 'center';
	      break;

	    case 'insideBottom':
	      x += width / 2;
	      y += height - distance;
	      textAlign = 'center';
	      textVerticalAlign = 'bottom';
	      break;

	    case 'insideTopLeft':
	      x += distance;
	      y += distance;
	      break;

	    case 'insideTopRight':
	      x += width - distance;
	      y += distance;
	      textAlign = 'right';
	      break;

	    case 'insideBottomLeft':
	      x += distance;
	      y += height - distance;
	      textVerticalAlign = 'bottom';
	      break;

	    case 'insideBottomRight':
	      x += width - distance;
	      y += height - distance;
	      textAlign = 'right';
	      textVerticalAlign = 'bottom';
	      break;
	  }

	  return {
	    x: x,
	    y: y,
	    textAlign: textAlign,
	    textVerticalAlign: textVerticalAlign
	  };
	}
	/**
	 * Show ellipsis if overflow.
	 *
	 * @public
	 * @param  {string} text
	 * @param  {string} containerWidth
	 * @param  {string} font
	 * @param  {number} [ellipsis='...']
	 * @param  {Object} [options]
	 * @param  {number} [options.maxIterations=3]
	 * @param  {number} [options.minChar=0] If truncate result are less
	 *                  then minChar, ellipsis will not show, which is
	 *                  better for user hint in some cases.
	 * @param  {number} [options.placeholder=''] When all truncated, use the placeholder.
	 * @return {string}
	 */


	function truncateText(text, containerWidth, font, ellipsis, options) {
	  if (!containerWidth) {
	    return '';
	  }

	  var textLines = (text + '').split('\n');
	  options = prepareTruncateOptions(containerWidth, font, ellipsis, options); // FIXME
	  // It is not appropriate that every line has '...' when truncate multiple lines.

	  for (var i = 0, len = textLines.length; i < len; i++) {
	    textLines[i] = truncateSingleLine(textLines[i], options);
	  }

	  return textLines.join('\n');
	}

	function prepareTruncateOptions(containerWidth, font, ellipsis, options) {
	  options = extend({}, options);
	  options.font = font;
	  var ellipsis = retrieve2(ellipsis, '...');
	  options.maxIterations = retrieve2(options.maxIterations, 2);
	  var minChar = options.minChar = retrieve2(options.minChar, 0); // FIXME
	  // Other languages?

	  options.cnCharWidth = getWidth('国', font); // FIXME
	  // Consider proportional font?

	  var ascCharWidth = options.ascCharWidth = getWidth('a', font);
	  options.placeholder = retrieve2(options.placeholder, ''); // Example 1: minChar: 3, text: 'asdfzxcv', truncate result: 'asdf', but not: 'a...'.
	  // Example 2: minChar: 3, text: '维度', truncate result: '维', but not: '...'.

	  var contentWidth = containerWidth = Math.max(0, containerWidth - 1); // Reserve some gap.

	  for (var i = 0; i < minChar && contentWidth >= ascCharWidth; i++) {
	    contentWidth -= ascCharWidth;
	  }

	  var ellipsisWidth = getWidth(ellipsis);

	  if (ellipsisWidth > contentWidth) {
	    ellipsis = '';
	    ellipsisWidth = 0;
	  }

	  contentWidth = containerWidth - ellipsisWidth;
	  options.ellipsis = ellipsis;
	  options.ellipsisWidth = ellipsisWidth;
	  options.contentWidth = contentWidth;
	  options.containerWidth = containerWidth;
	  return options;
	}

	function truncateSingleLine(textLine, options) {
	  var containerWidth = options.containerWidth;
	  var font = options.font;
	  var contentWidth = options.contentWidth;

	  if (!containerWidth) {
	    return '';
	  }

	  var lineWidth = getWidth(textLine, font);

	  if (lineWidth <= containerWidth) {
	    return textLine;
	  }

	  for (var j = 0;; j++) {
	    if (lineWidth <= contentWidth || j >= options.maxIterations) {
	      textLine += options.ellipsis;
	      break;
	    }

	    var subLength = j === 0 ? estimateLength(textLine, contentWidth, options.ascCharWidth, options.cnCharWidth) : lineWidth > 0 ? Math.floor(textLine.length * contentWidth / lineWidth) : 0;
	    textLine = textLine.substr(0, subLength);
	    lineWidth = getWidth(textLine, font);
	  }

	  if (textLine === '') {
	    textLine = options.placeholder;
	  }

	  return textLine;
	}

	function estimateLength(text, contentWidth, ascCharWidth, cnCharWidth) {
	  var width = 0;
	  var i = 0;

	  for (var len = text.length; i < len && width < contentWidth; i++) {
	    var charCode = text.charCodeAt(i);
	    width += 0 <= charCode && charCode <= 127 ? ascCharWidth : cnCharWidth;
	  }

	  return i;
	}
	/**
	 * @public
	 * @param {string} font
	 * @return {number} line height
	 */


	function getLineHeight(font) {
	  // FIXME A rough approach.
	  return getWidth('国', font);
	}
	/**
	 * @public
	 * @param {string} text
	 * @param {string} font
	 * @return {Object} width
	 */


	function measureText(text, font) {
	  return methods.measureText(text, font);
	} // Avoid assign to an exported variable, for transforming to cjs.


	methods.measureText = function (text, font) {
	  var ctx = getContext();
	  ctx.font = font || DEFAULT_FONT;
	  return ctx.measureText(text);
	};
	/**
	 * @public
	 * @param {string} text
	 * @param {string} font
	 * @param {Object} [truncate]
	 * @return {Object} block: {lineHeight, lines, height, outerHeight}
	 *  Notice: for performance, do not calculate outerWidth util needed.
	 */


	function parsePlainText(text, font, padding, truncate) {
	  text != null && (text += '');
	  var lineHeight = getLineHeight(font);
	  var lines = text ? text.split('\n') : [];
	  var height = lines.length * lineHeight;
	  var outerHeight = height;

	  if (padding) {
	    outerHeight += padding[0] + padding[2];
	  }

	  if (text && truncate) {
	    var truncOuterHeight = truncate.outerHeight;
	    var truncOuterWidth = truncate.outerWidth;

	    if (truncOuterHeight != null && outerHeight > truncOuterHeight) {
	      text = '';
	      lines = [];
	    } else if (truncOuterWidth != null) {
	      var options = prepareTruncateOptions(truncOuterWidth - (padding ? padding[1] + padding[3] : 0), font, truncate.ellipsis, {
	        minChar: truncate.minChar,
	        placeholder: truncate.placeholder
	      }); // FIXME
	      // It is not appropriate that every line has '...' when truncate multiple lines.

	      for (var i = 0, len = lines.length; i < len; i++) {
	        lines[i] = truncateSingleLine(lines[i], options);
	      }
	    }
	  }

	  return {
	    lines: lines,
	    height: height,
	    outerHeight: outerHeight,
	    lineHeight: lineHeight
	  };
	}
	/**
	 * For example: 'some text {a|some text}other text{b|some text}xxx{c|}xxx'
	 * Also consider 'bbbb{a|xxx\nzzz}xxxx\naaaa'.
	 *
	 * @public
	 * @param {string} text
	 * @param {Object} style
	 * @return {Object} block
	 * {
	 *      width,
	 *      height,
	 *      lines: [{
	 *          lineHeight,
	 *          width,
	 *          tokens: [[{
	 *              styleName,
	 *              text,
	 *              width,      // include textPadding
	 *              height,     // include textPadding
	 *              textWidth, // pure text width
	 *              textHeight, // pure text height
	 *              lineHeihgt,
	 *              font,
	 *              textAlign,
	 *              textVerticalAlign
	 *          }], [...], ...]
	 *      }, ...]
	 * }
	 * If styleName is undefined, it is plain text.
	 */


	function parseRichText(text, style) {
	  var contentBlock = {
	    lines: [],
	    width: 0,
	    height: 0
	  };
	  text != null && (text += '');

	  if (!text) {
	    return contentBlock;
	  }

	  var lastIndex = STYLE_REG.lastIndex = 0;
	  var result;

	  while ((result = STYLE_REG.exec(text)) != null) {
	    var matchedIndex = result.index;

	    if (matchedIndex > lastIndex) {
	      pushTokens(contentBlock, text.substring(lastIndex, matchedIndex));
	    }

	    pushTokens(contentBlock, result[2], result[1]);
	    lastIndex = STYLE_REG.lastIndex;
	  }

	  if (lastIndex < text.length) {
	    pushTokens(contentBlock, text.substring(lastIndex, text.length));
	  }

	  var lines = contentBlock.lines;
	  var contentHeight = 0;
	  var contentWidth = 0; // For `textWidth: 100%`

	  var pendingList = [];
	  var stlPadding = style.textPadding;
	  var truncate = style.truncate;
	  var truncateWidth = truncate && truncate.outerWidth;
	  var truncateHeight = truncate && truncate.outerHeight;

	  if (stlPadding) {
	    truncateWidth != null && (truncateWidth -= stlPadding[1] + stlPadding[3]);
	    truncateHeight != null && (truncateHeight -= stlPadding[0] + stlPadding[2]);
	  } // Calculate layout info of tokens.


	  for (var i = 0; i < lines.length; i++) {
	    var line = lines[i];
	    var lineHeight = 0;
	    var lineWidth = 0;

	    for (var j = 0; j < line.tokens.length; j++) {
	      var token = line.tokens[j];
	      var tokenStyle = token.styleName && style.rich[token.styleName] || {}; // textPadding should not inherit from style.

	      var textPadding = token.textPadding = tokenStyle.textPadding; // textFont has been asigned to font by `normalizeStyle`.

	      var font = token.font = tokenStyle.font || style.font; // textHeight can be used when textVerticalAlign is specified in token.

	      var tokenHeight = token.textHeight = retrieve2( // textHeight should not be inherited, consider it can be specified
	      // as box height of the block.
	      tokenStyle.textHeight, getLineHeight(font));
	      textPadding && (tokenHeight += textPadding[0] + textPadding[2]);
	      token.height = tokenHeight;
	      token.lineHeight = retrieve3(tokenStyle.textLineHeight, style.textLineHeight, tokenHeight);
	      token.textAlign = tokenStyle && tokenStyle.textAlign || style.textAlign;
	      token.textVerticalAlign = tokenStyle && tokenStyle.textVerticalAlign || 'middle';

	      if (truncateHeight != null && contentHeight + token.lineHeight > truncateHeight) {
	        return {
	          lines: [],
	          width: 0,
	          height: 0
	        };
	      }

	      token.textWidth = getWidth(token.text, font);
	      var tokenWidth = tokenStyle.textWidth;
	      var tokenWidthNotSpecified = tokenWidth == null || tokenWidth === 'auto'; // Percent width, can be `100%`, can be used in drawing separate
	      // line when box width is needed to be auto.

	      if (typeof tokenWidth === 'string' && tokenWidth.charAt(tokenWidth.length - 1) === '%') {
	        token.percentWidth = tokenWidth;
	        pendingList.push(token);
	        tokenWidth = 0; // Do not truncate in this case, because there is no user case
	        // and it is too complicated.
	      } else {
	        if (tokenWidthNotSpecified) {
	          tokenWidth = token.textWidth; // FIXME: If image is not loaded and textWidth is not specified, calling
	          // `getBoundingRect()` will not get correct result.

	          var textBackgroundColor = tokenStyle.textBackgroundColor;
	          var bgImg = textBackgroundColor && textBackgroundColor.image; // Use cases:
	          // (1) If image is not loaded, it will be loaded at render phase and call
	          // `dirty()` and `textBackgroundColor.image` will be replaced with the loaded
	          // image, and then the right size will be calculated here at the next tick.
	          // See `graphic/helper/text.js`.
	          // (2) If image loaded, and `textBackgroundColor.image` is image src string,
	          // use `imageHelper.findExistImage` to find cached image.
	          // `imageHelper.findExistImage` will always be called here before
	          // `imageHelper.createOrUpdateImage` in `graphic/helper/text.js#renderRichText`
	          // which ensures that image will not be rendered before correct size calcualted.

	          if (bgImg) {
	            bgImg = imageHelper.findExistImage(bgImg);

	            if (imageHelper.isImageReady(bgImg)) {
	              tokenWidth = Math.max(tokenWidth, bgImg.width * tokenHeight / bgImg.height);
	            }
	          }
	        }

	        var paddingW = textPadding ? textPadding[1] + textPadding[3] : 0;
	        tokenWidth += paddingW;
	        var remianTruncWidth = truncateWidth != null ? truncateWidth - lineWidth : null;

	        if (remianTruncWidth != null && remianTruncWidth < tokenWidth) {
	          if (!tokenWidthNotSpecified || remianTruncWidth < paddingW) {
	            token.text = '';
	            token.textWidth = tokenWidth = 0;
	          } else {
	            token.text = truncateText(token.text, remianTruncWidth - paddingW, font, truncate.ellipsis, {
	              minChar: truncate.minChar
	            });
	            token.textWidth = getWidth(token.text, font);
	            tokenWidth = token.textWidth + paddingW;
	          }
	        }
	      }

	      lineWidth += token.width = tokenWidth;
	      tokenStyle && (lineHeight = Math.max(lineHeight, token.lineHeight));
	    }

	    line.width = lineWidth;
	    line.lineHeight = lineHeight;
	    contentHeight += lineHeight;
	    contentWidth = Math.max(contentWidth, lineWidth);
	  }

	  contentBlock.outerWidth = contentBlock.width = retrieve2(style.textWidth, contentWidth);
	  contentBlock.outerHeight = contentBlock.height = retrieve2(style.textHeight, contentHeight);

	  if (stlPadding) {
	    contentBlock.outerWidth += stlPadding[1] + stlPadding[3];
	    contentBlock.outerHeight += stlPadding[0] + stlPadding[2];
	  }

	  for (var i = 0; i < pendingList.length; i++) {
	    var token = pendingList[i];
	    var percentWidth = token.percentWidth; // Should not base on outerWidth, because token can not be placed out of padding.

	    token.width = parseInt(percentWidth, 10) / 100 * contentWidth;
	  }

	  return contentBlock;
	}

	function pushTokens(block, str, styleName) {
	  var isEmptyStr = str === '';
	  var strs = str.split('\n');
	  var lines = block.lines;

	  for (var i = 0; i < strs.length; i++) {
	    var text = strs[i];
	    var token = {
	      styleName: styleName,
	      text: text,
	      isLineHolder: !text && !isEmptyStr
	    }; // The first token should be appended to the last line.

	    if (!i) {
	      var tokens = (lines[lines.length - 1] || (lines[0] = {
	        tokens: []
	      })).tokens; // Consider cases:
	      // (1) ''.split('\n') => ['', '\n', ''], the '' at the first item
	      // (which is a placeholder) should be replaced by new token.
	      // (2) A image backage, where token likes {a|}.
	      // (3) A redundant '' will affect textAlign in line.
	      // (4) tokens with the same tplName should not be merged, because
	      // they should be displayed in different box (with border and padding).

	      var tokensLen = tokens.length;
	      tokensLen === 1 && tokens[0].isLineHolder ? tokens[0] = token : // Consider text is '', only insert when it is the "lineHolder" or
	      // "emptyStr". Otherwise a redundant '' will affect textAlign in line.
	      (text || !tokensLen || isEmptyStr) && tokens.push(token);
	    } // Other tokens always start a new line.
	    else {
	        // If there is '', insert it as a placeholder.
	        lines.push({
	          tokens: [token]
	        });
	      }
	  }
	}

	function makeFont(style) {
	  // FIXME in node-canvas fontWeight is before fontStyle
	  // Use `fontSize` `fontFamily` to check whether font properties are defined.
	  var font = (style.fontSize || style.fontFamily) && [style.fontStyle, style.fontWeight, (style.fontSize || 12) + 'px', // If font properties are defined, `fontFamily` should not be ignored.
	  style.fontFamily || 'sans-serif'].join(' ');
	  return font && trim(font) || style.textFont || style.font;
	}

	exports.DEFAULT_FONT = DEFAULT_FONT;
	exports.$override = $override;
	exports.getWidth = getWidth;
	exports.getBoundingRect = getBoundingRect;
	exports.adjustTextX = adjustTextX;
	exports.adjustTextY = adjustTextY;
	exports.adjustTextPositionOnRect = adjustTextPositionOnRect;
	exports.truncateText = truncateText;
	exports.getLineHeight = getLineHeight;
	exports.measureText = measureText;
	exports.parsePlainText = parsePlainText;
	exports.parseRichText = parseRichText;
	exports.makeFont = makeFont;

/***/ }),
/* 212 */
/***/ (function(module, exports, __webpack_require__) {

	var LRU = __webpack_require__(196);

	var globalImageCache = new LRU(50);
	/**
	 * @param {string|HTMLImageElement|HTMLCanvasElement|Canvas} newImageOrSrc
	 * @return {HTMLImageElement|HTMLCanvasElement|Canvas} image
	 */

	function findExistImage(newImageOrSrc) {
	  if (typeof newImageOrSrc === 'string') {
	    var cachedImgObj = globalImageCache.get(newImageOrSrc);
	    return cachedImgObj && cachedImgObj.image;
	  } else {
	    return newImageOrSrc;
	  }
	}
	/**
	 * Caution: User should cache loaded images, but not just count on LRU.
	 * Consider if required images more than LRU size, will dead loop occur?
	 *
	 * @param {string|HTMLImageElement|HTMLCanvasElement|Canvas} newImageOrSrc
	 * @param {HTMLImageElement|HTMLCanvasElement|Canvas} image Existent image.
	 * @param {module:zrender/Element} [hostEl] For calling `dirty`.
	 * @param {Function} [cb] params: (image, cbPayload)
	 * @param {Object} [cbPayload] Payload on cb calling.
	 * @return {HTMLImageElement|HTMLCanvasElement|Canvas} image
	 */


	function createOrUpdateImage(newImageOrSrc, image, hostEl, cb, cbPayload) {
	  if (!newImageOrSrc) {
	    return image;
	  } else if (typeof newImageOrSrc === 'string') {
	    // Image should not be loaded repeatly.
	    if (image && image.__zrImageSrc === newImageOrSrc || !hostEl) {
	      return image;
	    } // Only when there is no existent image or existent image src
	    // is different, this method is responsible for load.


	    var cachedImgObj = globalImageCache.get(newImageOrSrc);
	    var pendingWrap = {
	      hostEl: hostEl,
	      cb: cb,
	      cbPayload: cbPayload
	    };

	    if (cachedImgObj) {
	      image = cachedImgObj.image;
	      !isImageReady(image) && cachedImgObj.pending.push(pendingWrap);
	    } else {
	      !image && (image = new Image());
	      image.onload = imageOnLoad;
	      globalImageCache.put(newImageOrSrc, image.__cachedImgObj = {
	        image: image,
	        pending: [pendingWrap]
	      });
	      image.src = image.__zrImageSrc = newImageOrSrc;
	    }

	    return image;
	  } // newImageOrSrc is an HTMLImageElement or HTMLCanvasElement or Canvas
	  else {
	      return newImageOrSrc;
	    }
	}

	function imageOnLoad() {
	  var cachedImgObj = this.__cachedImgObj;
	  this.onload = this.__cachedImgObj = null;

	  for (var i = 0; i < cachedImgObj.pending.length; i++) {
	    var pendingWrap = cachedImgObj.pending[i];
	    var cb = pendingWrap.cb;
	    cb && cb(this, pendingWrap.cbPayload);
	    pendingWrap.hostEl.dirty();
	  }

	  cachedImgObj.pending.length = 0;
	}

	function isImageReady(image) {
	  return image && image.width && image.height;
	}

	exports.findExistImage = findExistImage;
	exports.createOrUpdateImage = createOrUpdateImage;
	exports.isImageReady = isImageReady;

/***/ }),
/* 213 */
/***/ (function(module, exports) {

	function buildPath(ctx, shape) {
	  var x = shape.x;
	  var y = shape.y;
	  var width = shape.width;
	  var height = shape.height;
	  var r = shape.r;
	  var r1;
	  var r2;
	  var r3;
	  var r4; // Convert width and height to positive for better borderRadius

	  if (width < 0) {
	    x = x + width;
	    width = -width;
	  }

	  if (height < 0) {
	    y = y + height;
	    height = -height;
	  }

	  if (typeof r === 'number') {
	    r1 = r2 = r3 = r4 = r;
	  } else if (r instanceof Array) {
	    if (r.length === 1) {
	      r1 = r2 = r3 = r4 = r[0];
	    } else if (r.length === 2) {
	      r1 = r3 = r[0];
	      r2 = r4 = r[1];
	    } else if (r.length === 3) {
	      r1 = r[0];
	      r2 = r4 = r[1];
	      r3 = r[2];
	    } else {
	      r1 = r[0];
	      r2 = r[1];
	      r3 = r[2];
	      r4 = r[3];
	    }
	  } else {
	    r1 = r2 = r3 = r4 = 0;
	  }

	  var total;

	  if (r1 + r2 > width) {
	    total = r1 + r2;
	    r1 *= width / total;
	    r2 *= width / total;
	  }

	  if (r3 + r4 > width) {
	    total = r3 + r4;
	    r3 *= width / total;
	    r4 *= width / total;
	  }

	  if (r2 + r3 > height) {
	    total = r2 + r3;
	    r2 *= height / total;
	    r3 *= height / total;
	  }

	  if (r1 + r4 > height) {
	    total = r1 + r4;
	    r1 *= height / total;
	    r4 *= height / total;
	  }

	  ctx.moveTo(x + r1, y);
	  ctx.lineTo(x + width - r2, y);
	  r2 !== 0 && ctx.arc(x + width - r2, y + r2, r2, -Math.PI / 2, 0);
	  ctx.lineTo(x + width, y + height - r3);
	  r3 !== 0 && ctx.arc(x + width - r3, y + height - r3, r3, 0, Math.PI / 2);
	  ctx.lineTo(x + r4, y + height);
	  r4 !== 0 && ctx.arc(x + r4, y + height - r4, r4, Math.PI / 2, Math.PI);
	  ctx.lineTo(x, y + r1);
	  r1 !== 0 && ctx.arc(x + r1, y + r1, r1, Math.PI, Math.PI * 1.5);
	}

	exports.buildPath = buildPath;

/***/ }),
/* 214 */
/***/ (function(module, exports, __webpack_require__) {

	var util = __webpack_require__(181);

	var _event = __webpack_require__(215);

	var Dispatcher = _event.Dispatcher;

	var requestAnimationFrame = __webpack_require__(206);

	var Animator = __webpack_require__(192);

	/**
	 * 动画主类, 调度和管理所有动画控制器
	 *
	 * @module zrender/animation/Animation
	 * @author pissang(https://github.com/pissang)
	 */
	// TODO Additive animation
	// http://iosoteric.com/additive-animations-animatewithduration-in-ios-8/
	// https://developer.apple.com/videos/wwdc2014/#236

	/**
	 * @typedef {Object} IZRenderStage
	 * @property {Function} update
	 */

	/**
	 * @alias module:zrender/animation/Animation
	 * @constructor
	 * @param {Object} [options]
	 * @param {Function} [options.onframe]
	 * @param {IZRenderStage} [options.stage]
	 * @example
	 *     var animation = new Animation();
	 *     var obj = {
	 *         x: 100,
	 *         y: 100
	 *     };
	 *     animation.animate(node.position)
	 *         .when(1000, {
	 *             x: 500,
	 *             y: 500
	 *         })
	 *         .when(2000, {
	 *             x: 100,
	 *             y: 100
	 *         })
	 *         .start('spline');
	 */
	var Animation = function (options) {
	  options = options || {};
	  this.stage = options.stage || {};

	  this.onframe = options.onframe || function () {}; // private properties


	  this._clips = [];
	  this._running = false;
	  this._time;
	  this._pausedTime;
	  this._pauseStart;
	  this._paused = false;
	  Dispatcher.call(this);
	};

	Animation.prototype = {
	  constructor: Animation,

	  /**
	   * 添加 clip
	   * @param {module:zrender/animation/Clip} clip
	   */
	  addClip: function (clip) {
	    this._clips.push(clip);
	  },

	  /**
	   * 添加 animator
	   * @param {module:zrender/animation/Animator} animator
	   */
	  addAnimator: function (animator) {
	    animator.animation = this;
	    var clips = animator.getClips();

	    for (var i = 0; i < clips.length; i++) {
	      this.addClip(clips[i]);
	    }
	  },

	  /**
	   * 删除动画片段
	   * @param {module:zrender/animation/Clip} clip
	   */
	  removeClip: function (clip) {
	    var idx = util.indexOf(this._clips, clip);

	    if (idx >= 0) {
	      this._clips.splice(idx, 1);
	    }
	  },

	  /**
	   * 删除动画片段
	   * @param {module:zrender/animation/Animator} animator
	   */
	  removeAnimator: function (animator) {
	    var clips = animator.getClips();

	    for (var i = 0; i < clips.length; i++) {
	      this.removeClip(clips[i]);
	    }

	    animator.animation = null;
	  },
	  _update: function () {
	    var time = new Date().getTime() - this._pausedTime;

	    var delta = time - this._time;
	    var clips = this._clips;
	    var len = clips.length;
	    var deferredEvents = [];
	    var deferredClips = [];

	    for (var i = 0; i < len; i++) {
	      var clip = clips[i];
	      var e = clip.step(time, delta); // Throw out the events need to be called after
	      // stage.update, like destroy

	      if (e) {
	        deferredEvents.push(e);
	        deferredClips.push(clip);
	      }
	    } // Remove the finished clip


	    for (var i = 0; i < len;) {
	      if (clips[i]._needsRemove) {
	        clips[i] = clips[len - 1];
	        clips.pop();
	        len--;
	      } else {
	        i++;
	      }
	    }

	    len = deferredEvents.length;

	    for (var i = 0; i < len; i++) {
	      deferredClips[i].fire(deferredEvents[i]);
	    }

	    this._time = time;
	    this.onframe(delta); // 'frame' should be triggered before stage, because upper application
	    // depends on the sequence (e.g., echarts-stream and finish
	    // event judge)

	    this.trigger('frame', delta);

	    if (this.stage.update) {
	      this.stage.update();
	    }
	  },
	  _startLoop: function () {
	    var self = this;
	    this._running = true;

	    function step() {
	      if (self._running) {
	        requestAnimationFrame(step);
	        !self._paused && self._update();
	      }
	    }

	    requestAnimationFrame(step);
	  },

	  /**
	   * Start animation.
	   */
	  start: function () {
	    this._time = new Date().getTime();
	    this._pausedTime = 0;

	    this._startLoop();
	  },

	  /**
	   * Stop animation.
	   */
	  stop: function () {
	    this._running = false;
	  },

	  /**
	   * Pause animation.
	   */
	  pause: function () {
	    if (!this._paused) {
	      this._pauseStart = new Date().getTime();
	      this._paused = true;
	    }
	  },

	  /**
	   * Resume animation.
	   */
	  resume: function () {
	    if (this._paused) {
	      this._pausedTime += new Date().getTime() - this._pauseStart;
	      this._paused = false;
	    }
	  },

	  /**
	   * Clear animation.
	   */
	  clear: function () {
	    this._clips = [];
	  },

	  /**
	   * Whether animation finished.
	   */
	  isFinished: function () {
	    return !this._clips.length;
	  },

	  /**
	   * Creat animator for a target, whose props can be animated.
	   *
	   * @param  {Object} target
	   * @param  {Object} options
	   * @param  {boolean} [options.loop=false] Whether loop animation.
	   * @param  {Function} [options.getter=null] Get value from target.
	   * @param  {Function} [options.setter=null] Set value to target.
	   * @return {module:zrender/animation/Animation~Animator}
	   */
	  // TODO Gap
	  animate: function (target, options) {
	    options = options || {};
	    var animator = new Animator(target, options.loop, options.getter, options.setter);
	    this.addAnimator(animator);
	    return animator;
	  }
	};
	util.mixin(Animation, Dispatcher);
	var _default = Animation;
	module.exports = _default;

/***/ }),
/* 215 */
/***/ (function(module, exports, __webpack_require__) {

	var Eventful = __webpack_require__(185);

	exports.Dispatcher = Eventful;

	var env = __webpack_require__(180);

	/**
	 * 事件辅助类
	 * @module zrender/core/event
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 */
	var isDomLevel2 = typeof window !== 'undefined' && !!window.addEventListener;
	var MOUSE_EVENT_REG = /^(?:mouse|pointer|contextmenu|drag|drop)|click/;

	function getBoundingClientRect(el) {
	  // BlackBerry 5, iOS 3 (original iPhone) don't have getBoundingRect
	  return el.getBoundingClientRect ? el.getBoundingClientRect() : {
	    left: 0,
	    top: 0
	  };
	} // `calculate` is optional, default false


	function clientToLocal(el, e, out, calculate) {
	  out = out || {}; // According to the W3C Working Draft, offsetX and offsetY should be relative
	  // to the padding edge of the target element. The only browser using this convention
	  // is IE. Webkit uses the border edge, Opera uses the content edge, and FireFox does
	  // not support the properties.
	  // (see http://www.jacklmoore.com/notes/mouse-position/)
	  // In zr painter.dom, padding edge equals to border edge.
	  // FIXME
	  // When mousemove event triggered on ec tooltip, target is not zr painter.dom, and
	  // offsetX/Y is relative to e.target, where the calculation of zrX/Y via offsetX/Y
	  // is too complex. So css-transfrom dont support in this case temporarily.

	  if (calculate || !env.canvasSupported) {
	    defaultGetZrXY(el, e, out);
	  } // Caution: In FireFox, layerX/layerY Mouse position relative to the closest positioned
	  // ancestor element, so we should make sure el is positioned (e.g., not position:static).
	  // BTW1, Webkit don't return the same results as FF in non-simple cases (like add
	  // zoom-factor, overflow / opacity layers, transforms ...)
	  // BTW2, (ev.offsetY || ev.pageY - $(ev.target).offset().top) is not correct in preserve-3d.
	  // <https://bugs.jquery.com/ticket/8523#comment:14>
	  // BTW3, In ff, offsetX/offsetY is always 0.
	  else if (env.browser.firefox && e.layerX != null && e.layerX !== e.offsetX) {
	      out.zrX = e.layerX;
	      out.zrY = e.layerY;
	    } // For IE6+, chrome, safari, opera. (When will ff support offsetX?)
	    else if (e.offsetX != null) {
	        out.zrX = e.offsetX;
	        out.zrY = e.offsetY;
	      } // For some other device, e.g., IOS safari.
	      else {
	          defaultGetZrXY(el, e, out);
	        }

	  return out;
	}

	function defaultGetZrXY(el, e, out) {
	  // This well-known method below does not support css transform.
	  var box = getBoundingClientRect(el);
	  out.zrX = e.clientX - box.left;
	  out.zrY = e.clientY - box.top;
	}
	/**
	 * 如果存在第三方嵌入的一些dom触发的事件，或touch事件，需要转换一下事件坐标.
	 * `calculate` is optional, default false.
	 */


	function normalizeEvent(el, e, calculate) {
	  e = e || window.event;

	  if (e.zrX != null) {
	    return e;
	  }

	  var eventType = e.type;
	  var isTouch = eventType && eventType.indexOf('touch') >= 0;

	  if (!isTouch) {
	    clientToLocal(el, e, e, calculate);
	    e.zrDelta = e.wheelDelta ? e.wheelDelta / 120 : -(e.detail || 0) / 3;
	  } else {
	    var touch = eventType != 'touchend' ? e.targetTouches[0] : e.changedTouches[0];
	    touch && clientToLocal(el, touch, e, calculate);
	  } // Add which for click: 1 === left; 2 === middle; 3 === right; otherwise: 0;
	  // See jQuery: https://github.com/jquery/jquery/blob/master/src/event.js
	  // If e.which has been defined, if may be readonly,
	  // see: https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/which


	  var button = e.button;

	  if (e.which == null && button !== undefined && MOUSE_EVENT_REG.test(e.type)) {
	    e.which = button & 1 ? 1 : button & 2 ? 3 : button & 4 ? 2 : 0;
	  }

	  return e;
	}
	/**
	 * @param {HTMLElement} el
	 * @param {string} name
	 * @param {Function} handler
	 */


	function addEventListener(el, name, handler) {
	  if (isDomLevel2) {
	    // Reproduct the console warning:
	    // [Violation] Added non-passive event listener to a scroll-blocking <some> event.
	    // Consider marking event handler as 'passive' to make the page more responsive.
	    // Just set console log level: verbose in chrome dev tool.
	    // then the warning log will be printed when addEventListener called.
	    // See https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md
	    // We have not yet found a neat way to using passive. Because in zrender the dom event
	    // listener delegate all of the upper events of element. Some of those events need
	    // to prevent default. For example, the feature `preventDefaultMouseMove` of echarts.
	    // Before passive can be adopted, these issues should be considered:
	    // (1) Whether and how a zrender user specifies an event listener passive. And by default,
	    // passive or not.
	    // (2) How to tread that some zrender event listener is passive, and some is not. If
	    // we use other way but not preventDefault of mousewheel and touchmove, browser
	    // compatibility should be handled.
	    // var opts = (env.passiveSupported && name === 'mousewheel')
	    //     ? {passive: true}
	    //     // By default, the third param of el.addEventListener is `capture: false`.
	    //     : void 0;
	    // el.addEventListener(name, handler /* , opts */);
	    el.addEventListener(name, handler);
	  } else {
	    el.attachEvent('on' + name, handler);
	  }
	}

	function removeEventListener(el, name, handler) {
	  if (isDomLevel2) {
	    el.removeEventListener(name, handler);
	  } else {
	    el.detachEvent('on' + name, handler);
	  }
	}
	/**
	 * preventDefault and stopPropagation.
	 * Notice: do not do that in zrender. Upper application
	 * do that if necessary.
	 *
	 * @memberOf module:zrender/core/event
	 * @method
	 * @param {Event} e : event对象
	 */


	var stop = isDomLevel2 ? function (e) {
	  e.preventDefault();
	  e.stopPropagation();
	  e.cancelBubble = true;
	} : function (e) {
	  e.returnValue = false;
	  e.cancelBubble = true;
	};

	function notLeftMouse(e) {
	  // If e.which is undefined, considered as left mouse event.
	  return e.which > 1;
	} // 做向上兼容


	exports.clientToLocal = clientToLocal;
	exports.normalizeEvent = normalizeEvent;
	exports.addEventListener = addEventListener;
	exports.removeEventListener = removeEventListener;
	exports.stop = stop;
	exports.notLeftMouse = notLeftMouse;

/***/ }),
/* 216 */
/***/ (function(module, exports, __webpack_require__) {

	var _event = __webpack_require__(215);

	var addEventListener = _event.addEventListener;
	var removeEventListener = _event.removeEventListener;
	var normalizeEvent = _event.normalizeEvent;

	var zrUtil = __webpack_require__(181);

	var Eventful = __webpack_require__(185);

	var env = __webpack_require__(180);

	var GestureMgr = __webpack_require__(217);

	var TOUCH_CLICK_DELAY = 300;
	var mouseHandlerNames = ['click', 'dblclick', 'mousewheel', 'mouseout', 'mouseup', 'mousedown', 'mousemove', 'contextmenu'];
	var touchHandlerNames = ['touchstart', 'touchend', 'touchmove'];
	var pointerEventNames = {
	  pointerdown: 1,
	  pointerup: 1,
	  pointermove: 1,
	  pointerout: 1
	};
	var pointerHandlerNames = zrUtil.map(mouseHandlerNames, function (name) {
	  var nm = name.replace('mouse', 'pointer');
	  return pointerEventNames[nm] ? nm : name;
	});

	function eventNameFix(name) {
	  return name === 'mousewheel' && env.browser.firefox ? 'DOMMouseScroll' : name;
	}

	function processGesture(proxy, event, stage) {
	  var gestureMgr = proxy._gestureMgr;
	  stage === 'start' && gestureMgr.clear();
	  var gestureInfo = gestureMgr.recognize(event, proxy.handler.findHover(event.zrX, event.zrY, null).target, proxy.dom);
	  stage === 'end' && gestureMgr.clear(); // Do not do any preventDefault here. Upper application do that if necessary.

	  if (gestureInfo) {
	    var type = gestureInfo.type;
	    event.gestureEvent = type;
	    proxy.handler.dispatchToElement({
	      target: gestureInfo.target
	    }, type, gestureInfo.event);
	  }
	} // function onMSGestureChange(proxy, event) {
	//     if (event.translationX || event.translationY) {
	//         // mousemove is carried by MSGesture to reduce the sensitivity.
	//         proxy.handler.dispatchToElement(event.target, 'mousemove', event);
	//     }
	//     if (event.scale !== 1) {
	//         event.pinchX = event.offsetX;
	//         event.pinchY = event.offsetY;
	//         event.pinchScale = event.scale;
	//         proxy.handler.dispatchToElement(event.target, 'pinch', event);
	//     }
	// }

	/**
	 * Prevent mouse event from being dispatched after Touch Events action
	 * @see <https://github.com/deltakosh/handjs/blob/master/src/hand.base.js>
	 * 1. Mobile browsers dispatch mouse events 300ms after touchend.
	 * 2. Chrome for Android dispatch mousedown for long-touch about 650ms
	 * Result: Blocking Mouse Events for 700ms.
	 */


	function setTouchTimer(instance) {
	  instance._touching = true;
	  clearTimeout(instance._touchTimer);
	  instance._touchTimer = setTimeout(function () {
	    instance._touching = false;
	  }, 700);
	}

	var domHandlers = {
	  /**
	   * Mouse move handler
	   * @inner
	   * @param {Event} event
	   */
	  mousemove: function (event) {
	    event = normalizeEvent(this.dom, event);
	    this.trigger('mousemove', event);
	  },

	  /**
	   * Mouse out handler
	   * @inner
	   * @param {Event} event
	   */
	  mouseout: function (event) {
	    event = normalizeEvent(this.dom, event);
	    var element = event.toElement || event.relatedTarget;

	    if (element != this.dom) {
	      while (element && element.nodeType != 9) {
	        // 忽略包含在root中的dom引起的mouseOut
	        if (element === this.dom) {
	          return;
	        }

	        element = element.parentNode;
	      }
	    }

	    this.trigger('mouseout', event);
	  },

	  /**
	   * Touch开始响应函数
	   * @inner
	   * @param {Event} event
	   */
	  touchstart: function (event) {
	    // Default mouse behaviour should not be disabled here.
	    // For example, page may needs to be slided.
	    event = normalizeEvent(this.dom, event); // Mark touch, which is useful in distinguish touch and
	    // mouse event in upper applicatoin.

	    event.zrByTouch = true;
	    this._lastTouchMoment = new Date();
	    processGesture(this, event, 'start'); // In touch device, trigger `mousemove`(`mouseover`) should
	    // be triggered, and must before `mousedown` triggered.

	    domHandlers.mousemove.call(this, event);
	    domHandlers.mousedown.call(this, event);
	    setTouchTimer(this);
	  },

	  /**
	   * Touch移动响应函数
	   * @inner
	   * @param {Event} event
	   */
	  touchmove: function (event) {
	    event = normalizeEvent(this.dom, event); // Mark touch, which is useful in distinguish touch and
	    // mouse event in upper applicatoin.

	    event.zrByTouch = true;
	    processGesture(this, event, 'change'); // Mouse move should always be triggered no matter whether
	    // there is gestrue event, because mouse move and pinch may
	    // be used at the same time.

	    domHandlers.mousemove.call(this, event);
	    setTouchTimer(this);
	  },

	  /**
	   * Touch结束响应函数
	   * @inner
	   * @param {Event} event
	   */
	  touchend: function (event) {
	    event = normalizeEvent(this.dom, event); // Mark touch, which is useful in distinguish touch and
	    // mouse event in upper applicatoin.

	    event.zrByTouch = true;
	    processGesture(this, event, 'end');
	    domHandlers.mouseup.call(this, event); // Do not trigger `mouseout` here, in spite of `mousemove`(`mouseover`) is
	    // triggered in `touchstart`. This seems to be illogical, but by this mechanism,
	    // we can conveniently implement "hover style" in both PC and touch device just
	    // by listening to `mouseover` to add "hover style" and listening to `mouseout`
	    // to remove "hover style" on an element, without any additional code for
	    // compatibility. (`mouseout` will not be triggered in `touchend`, so "hover
	    // style" will remain for user view)
	    // click event should always be triggered no matter whether
	    // there is gestrue event. System click can not be prevented.

	    if (+new Date() - this._lastTouchMoment < TOUCH_CLICK_DELAY) {
	      domHandlers.click.call(this, event);
	    }

	    setTouchTimer(this);
	  },
	  pointerdown: function (event) {
	    domHandlers.mousedown.call(this, event); // if (useMSGuesture(this, event)) {
	    //     this._msGesture.addPointer(event.pointerId);
	    // }
	  },
	  pointermove: function (event) {
	    // FIXME
	    // pointermove is so sensitive that it always triggered when
	    // tap(click) on touch screen, which affect some judgement in
	    // upper application. So, we dont support mousemove on MS touch
	    // device yet.
	    if (!isPointerFromTouch(event)) {
	      domHandlers.mousemove.call(this, event);
	    }
	  },
	  pointerup: function (event) {
	    domHandlers.mouseup.call(this, event);
	  },
	  pointerout: function (event) {
	    // pointerout will be triggered when tap on touch screen
	    // (IE11+/Edge on MS Surface) after click event triggered,
	    // which is inconsistent with the mousout behavior we defined
	    // in touchend. So we unify them.
	    // (check domHandlers.touchend for detailed explanation)
	    if (!isPointerFromTouch(event)) {
	      domHandlers.mouseout.call(this, event);
	    }
	  }
	};

	function isPointerFromTouch(event) {
	  var pointerType = event.pointerType;
	  return pointerType === 'pen' || pointerType === 'touch';
	} // function useMSGuesture(handlerProxy, event) {
	//     return isPointerFromTouch(event) && !!handlerProxy._msGesture;
	// }
	// Common handlers


	zrUtil.each(['click', 'mousedown', 'mouseup', 'mousewheel', 'dblclick', 'contextmenu'], function (name) {
	  domHandlers[name] = function (event) {
	    event = normalizeEvent(this.dom, event);
	    this.trigger(name, event);
	  };
	});
	/**
	 * 为控制类实例初始化dom 事件处理函数
	 *
	 * @inner
	 * @param {module:zrender/Handler} instance 控制类实例
	 */

	function initDomHandler(instance) {
	  zrUtil.each(touchHandlerNames, function (name) {
	    instance._handlers[name] = zrUtil.bind(domHandlers[name], instance);
	  });
	  zrUtil.each(pointerHandlerNames, function (name) {
	    instance._handlers[name] = zrUtil.bind(domHandlers[name], instance);
	  });
	  zrUtil.each(mouseHandlerNames, function (name) {
	    instance._handlers[name] = makeMouseHandler(domHandlers[name], instance);
	  });

	  function makeMouseHandler(fn, instance) {
	    return function () {
	      if (instance._touching) {
	        return;
	      }

	      return fn.apply(instance, arguments);
	    };
	  }
	}

	function HandlerDomProxy(dom) {
	  Eventful.call(this);
	  this.dom = dom;
	  /**
	   * @private
	   * @type {boolean}
	   */

	  this._touching = false;
	  /**
	   * @private
	   * @type {number}
	   */

	  this._touchTimer;
	  /**
	   * @private
	   * @type {module:zrender/core/GestureMgr}
	   */

	  this._gestureMgr = new GestureMgr();
	  this._handlers = {};
	  initDomHandler(this);

	  if (env.pointerEventsSupported) {
	    // Only IE11+/Edge
	    // 1. On devices that both enable touch and mouse (e.g., MS Surface and lenovo X240),
	    // IE11+/Edge do not trigger touch event, but trigger pointer event and mouse event
	    // at the same time.
	    // 2. On MS Surface, it probablely only trigger mousedown but no mouseup when tap on
	    // screen, which do not occurs in pointer event.
	    // So we use pointer event to both detect touch gesture and mouse behavior.
	    mountHandlers(pointerHandlerNames, this); // FIXME
	    // Note: MS Gesture require CSS touch-action set. But touch-action is not reliable,
	    // which does not prevent defuault behavior occasionally (which may cause view port
	    // zoomed in but use can not zoom it back). And event.preventDefault() does not work.
	    // So we have to not to use MSGesture and not to support touchmove and pinch on MS
	    // touch screen. And we only support click behavior on MS touch screen now.
	    // MS Gesture Event is only supported on IE11+/Edge and on Windows 8+.
	    // We dont support touch on IE on win7.
	    // See <https://msdn.microsoft.com/en-us/library/dn433243(v=vs.85).aspx>
	    // if (typeof MSGesture === 'function') {
	    //     (this._msGesture = new MSGesture()).target = dom; // jshint ignore:line
	    //     dom.addEventListener('MSGestureChange', onMSGestureChange);
	    // }
	  } else {
	    if (env.touchEventsSupported) {
	      mountHandlers(touchHandlerNames, this); // Handler of 'mouseout' event is needed in touch mode, which will be mounted below.
	      // addEventListener(root, 'mouseout', this._mouseoutHandler);
	    } // 1. Considering some devices that both enable touch and mouse event (like on MS Surface
	    // and lenovo X240, @see #2350), we make mouse event be always listened, otherwise
	    // mouse event can not be handle in those devices.
	    // 2. On MS Surface, Chrome will trigger both touch event and mouse event. How to prevent
	    // mouseevent after touch event triggered, see `setTouchTimer`.


	    mountHandlers(mouseHandlerNames, this);
	  }

	  function mountHandlers(handlerNames, instance) {
	    zrUtil.each(handlerNames, function (name) {
	      addEventListener(dom, eventNameFix(name), instance._handlers[name]);
	    }, instance);
	  }
	}

	var handlerDomProxyProto = HandlerDomProxy.prototype;

	handlerDomProxyProto.dispose = function () {
	  var handlerNames = mouseHandlerNames.concat(touchHandlerNames);

	  for (var i = 0; i < handlerNames.length; i++) {
	    var name = handlerNames[i];
	    removeEventListener(this.dom, eventNameFix(name), this._handlers[name]);
	  }
	};

	handlerDomProxyProto.setCursor = function (cursorStyle) {
	  this.dom.style && (this.dom.style.cursor = cursorStyle || 'default');
	};

	zrUtil.mixin(HandlerDomProxy, Eventful);
	var _default = HandlerDomProxy;
	module.exports = _default;

/***/ }),
/* 217 */
/***/ (function(module, exports, __webpack_require__) {

	var eventUtil = __webpack_require__(215);

	/**
	 * Only implements needed gestures for mobile.
	 */
	var GestureMgr = function () {
	  /**
	   * @private
	   * @type {Array.<Object>}
	   */
	  this._track = [];
	};

	GestureMgr.prototype = {
	  constructor: GestureMgr,
	  recognize: function (event, target, root) {
	    this._doTrack(event, target, root);

	    return this._recognize(event);
	  },
	  clear: function () {
	    this._track.length = 0;
	    return this;
	  },
	  _doTrack: function (event, target, root) {
	    var touches = event.touches;

	    if (!touches) {
	      return;
	    }

	    var trackItem = {
	      points: [],
	      touches: [],
	      target: target,
	      event: event
	    };

	    for (var i = 0, len = touches.length; i < len; i++) {
	      var touch = touches[i];
	      var pos = eventUtil.clientToLocal(root, touch, {});
	      trackItem.points.push([pos.zrX, pos.zrY]);
	      trackItem.touches.push(touch);
	    }

	    this._track.push(trackItem);
	  },
	  _recognize: function (event) {
	    for (var eventName in recognizers) {
	      if (recognizers.hasOwnProperty(eventName)) {
	        var gestureInfo = recognizers[eventName](this._track, event);

	        if (gestureInfo) {
	          return gestureInfo;
	        }
	      }
	    }
	  }
	};

	function dist(pointPair) {
	  var dx = pointPair[1][0] - pointPair[0][0];
	  var dy = pointPair[1][1] - pointPair[0][1];
	  return Math.sqrt(dx * dx + dy * dy);
	}

	function center(pointPair) {
	  return [(pointPair[0][0] + pointPair[1][0]) / 2, (pointPair[0][1] + pointPair[1][1]) / 2];
	}

	var recognizers = {
	  pinch: function (track, event) {
	    var trackLen = track.length;

	    if (!trackLen) {
	      return;
	    }

	    var pinchEnd = (track[trackLen - 1] || {}).points;
	    var pinchPre = (track[trackLen - 2] || {}).points || pinchEnd;

	    if (pinchPre && pinchPre.length > 1 && pinchEnd && pinchEnd.length > 1) {
	      var pinchScale = dist(pinchEnd) / dist(pinchPre);
	      !isFinite(pinchScale) && (pinchScale = 1);
	      event.pinchScale = pinchScale;
	      var pinchCenter = center(pinchEnd);
	      event.pinchX = pinchCenter[0];
	      event.pinchY = pinchCenter[1];
	      return {
	        type: 'pinch',
	        target: track[0].target,
	        event: event
	      };
	    }
	  } // Only pinch currently.

	};
	var _default = GestureMgr;
	module.exports = _default;

/***/ }),
/* 218 */
/***/ (function(module, exports, __webpack_require__) {

	var _config = __webpack_require__(177);

	var __DEV__ = _config.__DEV__;

	var _util = __webpack_require__(181);

	var each = _util.each;
	var filter = _util.filter;
	var map = _util.map;
	var isArray = _util.isArray;
	var indexOf = _util.indexOf;
	var isObject = _util.isObject;
	var isString = _util.isString;
	var createHashMap = _util.createHashMap;
	var assert = _util.assert;
	var clone = _util.clone;
	var merge = _util.merge;
	var extend = _util.extend;
	var mixin = _util.mixin;

	var modelUtil = __webpack_require__(219);

	var Model = __webpack_require__(220);

	var ComponentModel = __webpack_require__(260);

	var globalDefault = __webpack_require__(266);

	var colorPaletteMixin = __webpack_require__(267);

	var _sourceHelper = __webpack_require__(268);

	var resetSourceDefaulter = _sourceHelper.resetSourceDefaulter;

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/

	/**
	 * ECharts global model
	 *
	 * @module {echarts/model/Global}
	 */

	/**
	 * Caution: If the mechanism should be changed some day, these cases
	 * should be considered:
	 *
	 * (1) In `merge option` mode, if using the same option to call `setOption`
	 * many times, the result should be the same (try our best to ensure that).
	 * (2) In `merge option` mode, if a component has no id/name specified, it
	 * will be merged by index, and the result sequence of the components is
	 * consistent to the original sequence.
	 * (3) `reset` feature (in toolbox). Find detailed info in comments about
	 * `mergeOption` in module:echarts/model/OptionManager.
	 */
	var OPTION_INNER_KEY = '\0_ec_inner';
	/**
	 * @alias module:echarts/model/Global
	 *
	 * @param {Object} option
	 * @param {module:echarts/model/Model} parentModel
	 * @param {Object} theme
	 */

	var GlobalModel = Model.extend({
	  init: function (option, parentModel, theme, optionManager) {
	    theme = theme || {};
	    this.option = null; // Mark as not initialized.

	    /**
	     * @type {module:echarts/model/Model}
	     * @private
	     */

	    this._theme = new Model(theme);
	    /**
	     * @type {module:echarts/model/OptionManager}
	     */

	    this._optionManager = optionManager;
	  },
	  setOption: function (option, optionPreprocessorFuncs) {
	    assert(!(OPTION_INNER_KEY in option), 'please use chart.getOption()');

	    this._optionManager.setOption(option, optionPreprocessorFuncs);

	    this.resetOption(null);
	  },

	  /**
	   * @param {string} type null/undefined: reset all.
	   *                      'recreate': force recreate all.
	   *                      'timeline': only reset timeline option
	   *                      'media': only reset media query option
	   * @return {boolean} Whether option changed.
	   */
	  resetOption: function (type) {
	    var optionChanged = false;
	    var optionManager = this._optionManager;

	    if (!type || type === 'recreate') {
	      var baseOption = optionManager.mountOption(type === 'recreate');

	      if (!this.option || type === 'recreate') {
	        initBase.call(this, baseOption);
	      } else {
	        this.restoreData();
	        this.mergeOption(baseOption);
	      }

	      optionChanged = true;
	    }

	    if (type === 'timeline' || type === 'media') {
	      this.restoreData();
	    }

	    if (!type || type === 'recreate' || type === 'timeline') {
	      var timelineOption = optionManager.getTimelineOption(this);
	      timelineOption && (this.mergeOption(timelineOption), optionChanged = true);
	    }

	    if (!type || type === 'recreate' || type === 'media') {
	      var mediaOptions = optionManager.getMediaOption(this, this._api);

	      if (mediaOptions.length) {
	        each(mediaOptions, function (mediaOption) {
	          this.mergeOption(mediaOption, optionChanged = true);
	        }, this);
	      }
	    }

	    return optionChanged;
	  },

	  /**
	   * @protected
	   */
	  mergeOption: function (newOption) {
	    var option = this.option;
	    var componentsMap = this._componentsMap;
	    var newCptTypes = [];
	    resetSourceDefaulter(this); // If no component class, merge directly.
	    // For example: color, animaiton options, etc.

	    each(newOption, function (componentOption, mainType) {
	      if (componentOption == null) {
	        return;
	      }

	      if (!ComponentModel.hasClass(mainType)) {
	        // globalSettingTask.dirty();
	        option[mainType] = option[mainType] == null ? clone(componentOption) : merge(option[mainType], componentOption, true);
	      } else if (mainType) {
	        newCptTypes.push(mainType);
	      }
	    });
	    ComponentModel.topologicalTravel(newCptTypes, ComponentModel.getAllClassMainTypes(), visitComponent, this);

	    function visitComponent(mainType, dependencies) {
	      var newCptOptionList = modelUtil.normalizeToArray(newOption[mainType]);
	      var mapResult = modelUtil.mappingToExists(componentsMap.get(mainType), newCptOptionList);
	      modelUtil.makeIdAndName(mapResult); // Set mainType and complete subType.

	      each(mapResult, function (item, index) {
	        var opt = item.option;

	        if (isObject(opt)) {
	          item.keyInfo.mainType = mainType;
	          item.keyInfo.subType = determineSubType(mainType, opt, item.exist);
	        }
	      });
	      var dependentModels = getComponentsByTypes(componentsMap, dependencies);
	      option[mainType] = [];
	      componentsMap.set(mainType, []);
	      each(mapResult, function (resultItem, index) {
	        var componentModel = resultItem.exist;
	        var newCptOption = resultItem.option;
	        assert(isObject(newCptOption) || componentModel, 'Empty component definition'); // Consider where is no new option and should be merged using {},
	        // see removeEdgeAndAdd in topologicalTravel and
	        // ComponentModel.getAllClassMainTypes.

	        if (!newCptOption) {
	          componentModel.mergeOption({}, this);
	          componentModel.optionUpdated({}, false);
	        } else {
	          var ComponentModelClass = ComponentModel.getClass(mainType, resultItem.keyInfo.subType, true);

	          if (componentModel && componentModel instanceof ComponentModelClass) {
	            componentModel.name = resultItem.keyInfo.name; // componentModel.settingTask && componentModel.settingTask.dirty();

	            componentModel.mergeOption(newCptOption, this);
	            componentModel.optionUpdated(newCptOption, false);
	          } else {
	            // PENDING Global as parent ?
	            var extraOpt = extend({
	              dependentModels: dependentModels,
	              componentIndex: index
	            }, resultItem.keyInfo);
	            componentModel = new ComponentModelClass(newCptOption, this, this, extraOpt);
	            extend(componentModel, extraOpt);
	            componentModel.init(newCptOption, this, this, extraOpt); // Call optionUpdated after init.
	            // newCptOption has been used as componentModel.option
	            // and may be merged with theme and default, so pass null
	            // to avoid confusion.

	            componentModel.optionUpdated(null, true);
	          }
	        }

	        componentsMap.get(mainType)[index] = componentModel;
	        option[mainType][index] = componentModel.option;
	      }, this); // Backup series for filtering.

	      if (mainType === 'series') {
	        createSeriesIndices(this, componentsMap.get('series'));
	      }
	    }

	    this._seriesIndicesMap = createHashMap(this._seriesIndices = this._seriesIndices || []);
	  },

	  /**
	   * Get option for output (cloned option and inner info removed)
	   * @public
	   * @return {Object}
	   */
	  getOption: function () {
	    var option = clone(this.option);
	    each(option, function (opts, mainType) {
	      if (ComponentModel.hasClass(mainType)) {
	        var opts = modelUtil.normalizeToArray(opts);

	        for (var i = opts.length - 1; i >= 0; i--) {
	          // Remove options with inner id.
	          if (modelUtil.isIdInner(opts[i])) {
	            opts.splice(i, 1);
	          }
	        }

	        option[mainType] = opts;
	      }
	    });
	    delete option[OPTION_INNER_KEY];
	    return option;
	  },

	  /**
	   * @return {module:echarts/model/Model}
	   */
	  getTheme: function () {
	    return this._theme;
	  },

	  /**
	   * @param {string} mainType
	   * @param {number} [idx=0]
	   * @return {module:echarts/model/Component}
	   */
	  getComponent: function (mainType, idx) {
	    var list = this._componentsMap.get(mainType);

	    if (list) {
	      return list[idx || 0];
	    }
	  },

	  /**
	   * If none of index and id and name used, return all components with mainType.
	   * @param {Object} condition
	   * @param {string} condition.mainType
	   * @param {string} [condition.subType] If ignore, only query by mainType
	   * @param {number|Array.<number>} [condition.index] Either input index or id or name.
	   * @param {string|Array.<string>} [condition.id] Either input index or id or name.
	   * @param {string|Array.<string>} [condition.name] Either input index or id or name.
	   * @return {Array.<module:echarts/model/Component>}
	   */
	  queryComponents: function (condition) {
	    var mainType = condition.mainType;

	    if (!mainType) {
	      return [];
	    }

	    var index = condition.index;
	    var id = condition.id;
	    var name = condition.name;

	    var cpts = this._componentsMap.get(mainType);

	    if (!cpts || !cpts.length) {
	      return [];
	    }

	    var result;

	    if (index != null) {
	      if (!isArray(index)) {
	        index = [index];
	      }

	      result = filter(map(index, function (idx) {
	        return cpts[idx];
	      }), function (val) {
	        return !!val;
	      });
	    } else if (id != null) {
	      var isIdArray = isArray(id);
	      result = filter(cpts, function (cpt) {
	        return isIdArray && indexOf(id, cpt.id) >= 0 || !isIdArray && cpt.id === id;
	      });
	    } else if (name != null) {
	      var isNameArray = isArray(name);
	      result = filter(cpts, function (cpt) {
	        return isNameArray && indexOf(name, cpt.name) >= 0 || !isNameArray && cpt.name === name;
	      });
	    } else {
	      // Return all components with mainType
	      result = cpts.slice();
	    }

	    return filterBySubType(result, condition);
	  },

	  /**
	   * The interface is different from queryComponents,
	   * which is convenient for inner usage.
	   *
	   * @usage
	   * var result = findComponents(
	   *     {mainType: 'dataZoom', query: {dataZoomId: 'abc'}}
	   * );
	   * var result = findComponents(
	   *     {mainType: 'series', subType: 'pie', query: {seriesName: 'uio'}}
	   * );
	   * var result = findComponents(
	   *     {mainType: 'series'},
	   *     function (model, index) {...}
	   * );
	   * // result like [component0, componnet1, ...]
	   *
	   * @param {Object} condition
	   * @param {string} condition.mainType Mandatory.
	   * @param {string} [condition.subType] Optional.
	   * @param {Object} [condition.query] like {xxxIndex, xxxId, xxxName},
	   *        where xxx is mainType.
	   *        If query attribute is null/undefined or has no index/id/name,
	   *        do not filtering by query conditions, which is convenient for
	   *        no-payload situations or when target of action is global.
	   * @param {Function} [condition.filter] parameter: component, return boolean.
	   * @return {Array.<module:echarts/model/Component>}
	   */
	  findComponents: function (condition) {
	    var query = condition.query;
	    var mainType = condition.mainType;
	    var queryCond = getQueryCond(query);
	    var result = queryCond ? this.queryComponents(queryCond) : this._componentsMap.get(mainType);
	    return doFilter(filterBySubType(result, condition));

	    function getQueryCond(q) {
	      var indexAttr = mainType + 'Index';
	      var idAttr = mainType + 'Id';
	      var nameAttr = mainType + 'Name';
	      return q && (q[indexAttr] != null || q[idAttr] != null || q[nameAttr] != null) ? {
	        mainType: mainType,
	        // subType will be filtered finally.
	        index: q[indexAttr],
	        id: q[idAttr],
	        name: q[nameAttr]
	      } : null;
	    }

	    function doFilter(res) {
	      return condition.filter ? filter(res, condition.filter) : res;
	    }
	  },

	  /**
	   * @usage
	   * eachComponent('legend', function (legendModel, index) {
	   *     ...
	   * });
	   * eachComponent(function (componentType, model, index) {
	   *     // componentType does not include subType
	   *     // (componentType is 'xxx' but not 'xxx.aa')
	   * });
	   * eachComponent(
	   *     {mainType: 'dataZoom', query: {dataZoomId: 'abc'}},
	   *     function (model, index) {...}
	   * );
	   * eachComponent(
	   *     {mainType: 'series', subType: 'pie', query: {seriesName: 'uio'}},
	   *     function (model, index) {...}
	   * );
	   *
	   * @param {string|Object=} mainType When mainType is object, the definition
	   *                                  is the same as the method 'findComponents'.
	   * @param {Function} cb
	   * @param {*} context
	   */
	  eachComponent: function (mainType, cb, context) {
	    var componentsMap = this._componentsMap;

	    if (typeof mainType === 'function') {
	      context = cb;
	      cb = mainType;
	      componentsMap.each(function (components, componentType) {
	        each(components, function (component, index) {
	          cb.call(context, componentType, component, index);
	        });
	      });
	    } else if (isString(mainType)) {
	      each(componentsMap.get(mainType), cb, context);
	    } else if (isObject(mainType)) {
	      var queryResult = this.findComponents(mainType);
	      each(queryResult, cb, context);
	    }
	  },

	  /**
	   * @param {string} name
	   * @return {Array.<module:echarts/model/Series>}
	   */
	  getSeriesByName: function (name) {
	    var series = this._componentsMap.get('series');

	    return filter(series, function (oneSeries) {
	      return oneSeries.name === name;
	    });
	  },

	  /**
	   * @param {number} seriesIndex
	   * @return {module:echarts/model/Series}
	   */
	  getSeriesByIndex: function (seriesIndex) {
	    return this._componentsMap.get('series')[seriesIndex];
	  },

	  /**
	   * Get series list before filtered by type.
	   * FIXME: rename to getRawSeriesByType?
	   *
	   * @param {string} subType
	   * @return {Array.<module:echarts/model/Series>}
	   */
	  getSeriesByType: function (subType) {
	    var series = this._componentsMap.get('series');

	    return filter(series, function (oneSeries) {
	      return oneSeries.subType === subType;
	    });
	  },

	  /**
	   * @return {Array.<module:echarts/model/Series>}
	   */
	  getSeries: function () {
	    return this._componentsMap.get('series').slice();
	  },

	  /**
	   * @return {number}
	   */
	  getSeriesCount: function () {
	    return this._componentsMap.get('series').length;
	  },

	  /**
	   * After filtering, series may be different
	   * frome raw series.
	   *
	   * @param {Function} cb
	   * @param {*} context
	   */
	  eachSeries: function (cb, context) {
	    assertSeriesInitialized(this);
	    each(this._seriesIndices, function (rawSeriesIndex) {
	      var series = this._componentsMap.get('series')[rawSeriesIndex];

	      cb.call(context, series, rawSeriesIndex);
	    }, this);
	  },

	  /**
	   * Iterate raw series before filtered.
	   *
	   * @param {Function} cb
	   * @param {*} context
	   */
	  eachRawSeries: function (cb, context) {
	    each(this._componentsMap.get('series'), cb, context);
	  },

	  /**
	   * After filtering, series may be different.
	   * frome raw series.
	   *
	   * @parma {string} subType
	   * @param {Function} cb
	   * @param {*} context
	   */
	  eachSeriesByType: function (subType, cb, context) {
	    assertSeriesInitialized(this);
	    each(this._seriesIndices, function (rawSeriesIndex) {
	      var series = this._componentsMap.get('series')[rawSeriesIndex];

	      if (series.subType === subType) {
	        cb.call(context, series, rawSeriesIndex);
	      }
	    }, this);
	  },

	  /**
	   * Iterate raw series before filtered of given type.
	   *
	   * @parma {string} subType
	   * @param {Function} cb
	   * @param {*} context
	   */
	  eachRawSeriesByType: function (subType, cb, context) {
	    return each(this.getSeriesByType(subType), cb, context);
	  },

	  /**
	   * @param {module:echarts/model/Series} seriesModel
	   */
	  isSeriesFiltered: function (seriesModel) {
	    assertSeriesInitialized(this);
	    return this._seriesIndicesMap.get(seriesModel.componentIndex) == null;
	  },

	  /**
	   * @return {Array.<number>}
	   */
	  getCurrentSeriesIndices: function () {
	    return (this._seriesIndices || []).slice();
	  },

	  /**
	   * @param {Function} cb
	   * @param {*} context
	   */
	  filterSeries: function (cb, context) {
	    assertSeriesInitialized(this);
	    var filteredSeries = filter(this._componentsMap.get('series'), cb, context);
	    createSeriesIndices(this, filteredSeries);
	  },
	  restoreData: function (payload) {
	    var componentsMap = this._componentsMap;
	    createSeriesIndices(this, componentsMap.get('series'));
	    var componentTypes = [];
	    componentsMap.each(function (components, componentType) {
	      componentTypes.push(componentType);
	    });
	    ComponentModel.topologicalTravel(componentTypes, ComponentModel.getAllClassMainTypes(), function (componentType, dependencies) {
	      each(componentsMap.get(componentType), function (component) {
	        (componentType !== 'series' || !isNotTargetSeries(component, payload)) && component.restoreData();
	      });
	    });
	  }
	});

	function isNotTargetSeries(seriesModel, payload) {
	  if (payload) {
	    var index = payload.seiresIndex;
	    var id = payload.seriesId;
	    var name = payload.seriesName;
	    return index != null && seriesModel.componentIndex !== index || id != null && seriesModel.id !== id || name != null && seriesModel.name !== name;
	  }
	}
	/**
	 * @inner
	 */


	function mergeTheme(option, theme) {
	  // PENDING
	  // NOT use `colorLayer` in theme if option has `color`
	  var notMergeColorLayer = option.color && !option.colorLayer;
	  each(theme, function (themeItem, name) {
	    if (name === 'colorLayer' && notMergeColorLayer) {
	      return;
	    } // 如果有 component model 则把具体的 merge 逻辑交给该 model 处理


	    if (!ComponentModel.hasClass(name)) {
	      if (typeof themeItem === 'object') {
	        option[name] = !option[name] ? clone(themeItem) : merge(option[name], themeItem, false);
	      } else {
	        if (option[name] == null) {
	          option[name] = themeItem;
	        }
	      }
	    }
	  });
	}

	function initBase(baseOption) {
	  baseOption = baseOption; // Using OPTION_INNER_KEY to mark that this option can not be used outside,
	  // i.e. `chart.setOption(chart.getModel().option);` is forbiden.

	  this.option = {};
	  this.option[OPTION_INNER_KEY] = 1;
	  /**
	   * Init with series: [], in case of calling findSeries method
	   * before series initialized.
	   * @type {Object.<string, Array.<module:echarts/model/Model>>}
	   * @private
	   */

	  this._componentsMap = createHashMap({
	    series: []
	  });
	  /**
	   * Mapping between filtered series list and raw series list.
	   * key: filtered series indices, value: raw series indices.
	   * @type {Array.<nubmer>}
	   * @private
	   */

	  this._seriesIndices;
	  this._seriesIndicesMap;
	  mergeTheme(baseOption, this._theme.option); // TODO Needs clone when merging to the unexisted property

	  merge(baseOption, globalDefault, false);
	  this.mergeOption(baseOption);
	}
	/**
	 * @inner
	 * @param {Array.<string>|string} types model types
	 * @return {Object} key: {string} type, value: {Array.<Object>} models
	 */


	function getComponentsByTypes(componentsMap, types) {
	  if (!isArray(types)) {
	    types = types ? [types] : [];
	  }

	  var ret = {};
	  each(types, function (type) {
	    ret[type] = (componentsMap.get(type) || []).slice();
	  });
	  return ret;
	}
	/**
	 * @inner
	 */


	function determineSubType(mainType, newCptOption, existComponent) {
	  var subType = newCptOption.type ? newCptOption.type : existComponent ? existComponent.subType // Use determineSubType only when there is no existComponent.
	  : ComponentModel.determineSubType(mainType, newCptOption); // tooltip, markline, markpoint may always has no subType

	  return subType;
	}
	/**
	 * @inner
	 */


	function createSeriesIndices(ecModel, seriesModels) {
	  ecModel._seriesIndicesMap = createHashMap(ecModel._seriesIndices = map(seriesModels, function (series) {
	    return series.componentIndex;
	  }) || []);
	}
	/**
	 * @inner
	 */


	function filterBySubType(components, condition) {
	  // Using hasOwnProperty for restrict. Consider
	  // subType is undefined in user payload.
	  return condition.hasOwnProperty('subType') ? filter(components, function (cpt) {
	    return cpt.subType === condition.subType;
	  }) : components;
	}
	/**
	 * @inner
	 */


	function assertSeriesInitialized(ecModel) {}

	mixin(GlobalModel, colorPaletteMixin);
	var _default = GlobalModel;
	module.exports = _default;

/***/ }),
/* 219 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(181);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var each = zrUtil.each;
	var isObject = zrUtil.isObject;
	var isArray = zrUtil.isArray;
	/**
	 * Make the name displayable. But we should
	 * make sure it is not duplicated with user
	 * specified name, so use '\0';
	 */

	var DUMMY_COMPONENT_NAME_PREFIX = 'series\0';
	/**
	 * If value is not array, then translate it to array.
	 * @param  {*} value
	 * @return {Array} [value] or value
	 */

	function normalizeToArray(value) {
	  return value instanceof Array ? value : value == null ? [] : [value];
	}
	/**
	 * Sync default option between normal and emphasis like `position` and `show`
	 * In case some one will write code like
	 *     label: {
	 *          show: false,
	 *          position: 'outside',
	 *          fontSize: 18
	 *     },
	 *     emphasis: {
	 *          label: { show: true }
	 *     }
	 * @param {Object} opt
	 * @param {string} key
	 * @param {Array.<string>} subOpts
	 */


	function defaultEmphasis(opt, key, subOpts) {
	  // Caution: performance sensitive.
	  if (opt) {
	    opt[key] = opt[key] || {};
	    opt.emphasis = opt.emphasis || {};
	    opt.emphasis[key] = opt.emphasis[key] || {}; // Default emphasis option from normal

	    for (var i = 0, len = subOpts.length; i < len; i++) {
	      var subOptName = subOpts[i];

	      if (!opt.emphasis[key].hasOwnProperty(subOptName) && opt[key].hasOwnProperty(subOptName)) {
	        opt.emphasis[key][subOptName] = opt[key][subOptName];
	      }
	    }
	  }
	}

	var TEXT_STYLE_OPTIONS = ['fontStyle', 'fontWeight', 'fontSize', 'fontFamily', 'rich', 'tag', 'color', 'textBorderColor', 'textBorderWidth', 'width', 'height', 'lineHeight', 'align', 'verticalAlign', 'baseline', 'shadowColor', 'shadowBlur', 'shadowOffsetX', 'shadowOffsetY', 'textShadowColor', 'textShadowBlur', 'textShadowOffsetX', 'textShadowOffsetY', 'backgroundColor', 'borderColor', 'borderWidth', 'borderRadius', 'padding']; // modelUtil.LABEL_OPTIONS = modelUtil.TEXT_STYLE_OPTIONS.concat([
	//     'position', 'offset', 'rotate', 'origin', 'show', 'distance', 'formatter',
	//     'fontStyle', 'fontWeight', 'fontSize', 'fontFamily',
	//     // FIXME: deprecated, check and remove it.
	//     'textStyle'
	// ]);

	/**
	 * The method do not ensure performance.
	 * data could be [12, 2323, {value: 223}, [1221, 23], {value: [2, 23]}]
	 * This helper method retieves value from data.
	 * @param {string|number|Date|Array|Object} dataItem
	 * @return {number|string|Date|Array.<number|string|Date>}
	 */

	function getDataItemValue(dataItem) {
	  return isObject(dataItem) && !isArray(dataItem) && !(dataItem instanceof Date) ? dataItem.value : dataItem;
	}
	/**
	 * data could be [12, 2323, {value: 223}, [1221, 23], {value: [2, 23]}]
	 * This helper method determine if dataItem has extra option besides value
	 * @param {string|number|Date|Array|Object} dataItem
	 */


	function isDataItemOption(dataItem) {
	  return isObject(dataItem) && !(dataItem instanceof Array); // // markLine data can be array
	  // && !(dataItem[0] && isObject(dataItem[0]) && !(dataItem[0] instanceof Array));
	}
	/**
	 * Mapping to exists for merge.
	 *
	 * @public
	 * @param {Array.<Object>|Array.<module:echarts/model/Component>} exists
	 * @param {Object|Array.<Object>} newCptOptions
	 * @return {Array.<Object>} Result, like [{exist: ..., option: ...}, {}],
	 *                          index of which is the same as exists.
	 */


	function mappingToExists(exists, newCptOptions) {
	  // Mapping by the order by original option (but not order of
	  // new option) in merge mode. Because we should ensure
	  // some specified index (like xAxisIndex) is consistent with
	  // original option, which is easy to understand, espatially in
	  // media query. And in most case, merge option is used to
	  // update partial option but not be expected to change order.
	  newCptOptions = (newCptOptions || []).slice();
	  var result = zrUtil.map(exists || [], function (obj, index) {
	    return {
	      exist: obj
	    };
	  }); // Mapping by id or name if specified.

	  each(newCptOptions, function (cptOption, index) {
	    if (!isObject(cptOption)) {
	      return;
	    } // id has highest priority.


	    for (var i = 0; i < result.length; i++) {
	      if (!result[i].option // Consider name: two map to one.
	      && cptOption.id != null && result[i].exist.id === cptOption.id + '') {
	        result[i].option = cptOption;
	        newCptOptions[index] = null;
	        return;
	      }
	    }

	    for (var i = 0; i < result.length; i++) {
	      var exist = result[i].exist;

	      if (!result[i].option // Consider name: two map to one.
	      // Can not match when both ids exist but different.
	      && (exist.id == null || cptOption.id == null) && cptOption.name != null && !isIdInner(cptOption) && !isIdInner(exist) && exist.name === cptOption.name + '') {
	        result[i].option = cptOption;
	        newCptOptions[index] = null;
	        return;
	      }
	    }
	  }); // Otherwise mapping by index.

	  each(newCptOptions, function (cptOption, index) {
	    if (!isObject(cptOption)) {
	      return;
	    }

	    var i = 0;

	    for (; i < result.length; i++) {
	      var exist = result[i].exist;

	      if (!result[i].option // Existing model that already has id should be able to
	      // mapped to (because after mapping performed model may
	      // be assigned with a id, whish should not affect next
	      // mapping), except those has inner id.
	      && !isIdInner(exist) // Caution:
	      // Do not overwrite id. But name can be overwritten,
	      // because axis use name as 'show label text'.
	      // 'exist' always has id and name and we dont
	      // need to check it.
	      && cptOption.id == null) {
	        result[i].option = cptOption;
	        break;
	      }
	    }

	    if (i >= result.length) {
	      result.push({
	        option: cptOption
	      });
	    }
	  });
	  return result;
	}
	/**
	 * Make id and name for mapping result (result of mappingToExists)
	 * into `keyInfo` field.
	 *
	 * @public
	 * @param {Array.<Object>} Result, like [{exist: ..., option: ...}, {}],
	 *                          which order is the same as exists.
	 * @return {Array.<Object>} The input.
	 */


	function makeIdAndName(mapResult) {
	  // We use this id to hash component models and view instances
	  // in echarts. id can be specified by user, or auto generated.
	  // The id generation rule ensures new view instance are able
	  // to mapped to old instance when setOption are called in
	  // no-merge mode. So we generate model id by name and plus
	  // type in view id.
	  // name can be duplicated among components, which is convenient
	  // to specify multi components (like series) by one name.
	  // Ensure that each id is distinct.
	  var idMap = zrUtil.createHashMap();
	  each(mapResult, function (item, index) {
	    var existCpt = item.exist;
	    existCpt && idMap.set(existCpt.id, item);
	  });
	  each(mapResult, function (item, index) {
	    var opt = item.option;
	    zrUtil.assert(!opt || opt.id == null || !idMap.get(opt.id) || idMap.get(opt.id) === item, 'id duplicates: ' + (opt && opt.id));
	    opt && opt.id != null && idMap.set(opt.id, item);
	    !item.keyInfo && (item.keyInfo = {});
	  }); // Make name and id.

	  each(mapResult, function (item, index) {
	    var existCpt = item.exist;
	    var opt = item.option;
	    var keyInfo = item.keyInfo;

	    if (!isObject(opt)) {
	      return;
	    } // name can be overwitten. Consider case: axis.name = '20km'.
	    // But id generated by name will not be changed, which affect
	    // only in that case: setOption with 'not merge mode' and view
	    // instance will be recreated, which can be accepted.


	    keyInfo.name = opt.name != null ? opt.name + '' : existCpt ? existCpt.name // Avoid diffferent series has the same name,
	    // because name may be used like in color pallet.
	    : DUMMY_COMPONENT_NAME_PREFIX + index;

	    if (existCpt) {
	      keyInfo.id = existCpt.id;
	    } else if (opt.id != null) {
	      keyInfo.id = opt.id + '';
	    } else {
	      // Consider this situatoin:
	      //  optionA: [{name: 'a'}, {name: 'a'}, {..}]
	      //  optionB [{..}, {name: 'a'}, {name: 'a'}]
	      // Series with the same name between optionA and optionB
	      // should be mapped.
	      var idNum = 0;

	      do {
	        keyInfo.id = '\0' + keyInfo.name + '\0' + idNum++;
	      } while (idMap.get(keyInfo.id));
	    }

	    idMap.set(keyInfo.id, item);
	  });
	}

	function isNameSpecified(componentModel) {
	  var name = componentModel.name; // Is specified when `indexOf` get -1 or > 0.

	  return !!(name && name.indexOf(DUMMY_COMPONENT_NAME_PREFIX));
	}
	/**
	 * @public
	 * @param {Object} cptOption
	 * @return {boolean}
	 */


	function isIdInner(cptOption) {
	  return isObject(cptOption) && cptOption.id && (cptOption.id + '').indexOf('\0_ec_\0') === 0;
	}
	/**
	 * A helper for removing duplicate items between batchA and batchB,
	 * and in themselves, and categorize by series.
	 *
	 * @param {Array.<Object>} batchA Like: [{seriesId: 2, dataIndex: [32, 4, 5]}, ...]
	 * @param {Array.<Object>} batchB Like: [{seriesId: 2, dataIndex: [32, 4, 5]}, ...]
	 * @return {Array.<Array.<Object>, Array.<Object>>} result: [resultBatchA, resultBatchB]
	 */


	function compressBatches(batchA, batchB) {
	  var mapA = {};
	  var mapB = {};
	  makeMap(batchA || [], mapA);
	  makeMap(batchB || [], mapB, mapA);
	  return [mapToArray(mapA), mapToArray(mapB)];

	  function makeMap(sourceBatch, map, otherMap) {
	    for (var i = 0, len = sourceBatch.length; i < len; i++) {
	      var seriesId = sourceBatch[i].seriesId;
	      var dataIndices = normalizeToArray(sourceBatch[i].dataIndex);
	      var otherDataIndices = otherMap && otherMap[seriesId];

	      for (var j = 0, lenj = dataIndices.length; j < lenj; j++) {
	        var dataIndex = dataIndices[j];

	        if (otherDataIndices && otherDataIndices[dataIndex]) {
	          otherDataIndices[dataIndex] = null;
	        } else {
	          (map[seriesId] || (map[seriesId] = {}))[dataIndex] = 1;
	        }
	      }
	    }
	  }

	  function mapToArray(map, isData) {
	    var result = [];

	    for (var i in map) {
	      if (map.hasOwnProperty(i) && map[i] != null) {
	        if (isData) {
	          result.push(+i);
	        } else {
	          var dataIndices = mapToArray(map[i], true);
	          dataIndices.length && result.push({
	            seriesId: i,
	            dataIndex: dataIndices
	          });
	        }
	      }
	    }

	    return result;
	  }
	}
	/**
	 * @param {module:echarts/data/List} data
	 * @param {Object} payload Contains dataIndex (means rawIndex) / dataIndexInside / name
	 *                         each of which can be Array or primary type.
	 * @return {number|Array.<number>} dataIndex If not found, return undefined/null.
	 */


	function queryDataIndex(data, payload) {
	  if (payload.dataIndexInside != null) {
	    return payload.dataIndexInside;
	  } else if (payload.dataIndex != null) {
	    return zrUtil.isArray(payload.dataIndex) ? zrUtil.map(payload.dataIndex, function (value) {
	      return data.indexOfRawIndex(value);
	    }) : data.indexOfRawIndex(payload.dataIndex);
	  } else if (payload.name != null) {
	    return zrUtil.isArray(payload.name) ? zrUtil.map(payload.name, function (value) {
	      return data.indexOfName(value);
	    }) : data.indexOfName(payload.name);
	  }
	}
	/**
	 * Enable property storage to any host object.
	 * Notice: Serialization is not supported.
	 *
	 * For example:
	 * var inner = zrUitl.makeInner();
	 *
	 * function some1(hostObj) {
	 *      inner(hostObj).someProperty = 1212;
	 *      ...
	 * }
	 * function some2() {
	 *      var fields = inner(this);
	 *      fields.someProperty1 = 1212;
	 *      fields.someProperty2 = 'xx';
	 *      ...
	 * }
	 *
	 * @return {Function}
	 */


	function makeInner() {
	  // Consider different scope by es module import.
	  var key = '__\0ec_inner_' + innerUniqueIndex++ + '_' + Math.random().toFixed(5);
	  return function (hostObj) {
	    return hostObj[key] || (hostObj[key] = {});
	  };
	}

	var innerUniqueIndex = 0;
	/**
	 * @param {module:echarts/model/Global} ecModel
	 * @param {string|Object} finder
	 *        If string, e.g., 'geo', means {geoIndex: 0}.
	 *        If Object, could contain some of these properties below:
	 *        {
	 *            seriesIndex, seriesId, seriesName,
	 *            geoIndex, geoId, geoName,
	 *            bmapIndex, bmapId, bmapName,
	 *            xAxisIndex, xAxisId, xAxisName,
	 *            yAxisIndex, yAxisId, yAxisName,
	 *            gridIndex, gridId, gridName,
	 *            ... (can be extended)
	 *        }
	 *        Each properties can be number|string|Array.<number>|Array.<string>
	 *        For example, a finder could be
	 *        {
	 *            seriesIndex: 3,
	 *            geoId: ['aa', 'cc'],
	 *            gridName: ['xx', 'rr']
	 *        }
	 *        xxxIndex can be set as 'all' (means all xxx) or 'none' (means not specify)
	 *        If nothing or null/undefined specified, return nothing.
	 * @param {Object} [opt]
	 * @param {string} [opt.defaultMainType]
	 * @param {Array.<string>} [opt.includeMainTypes]
	 * @return {Object} result like:
	 *        {
	 *            seriesModels: [seriesModel1, seriesModel2],
	 *            seriesModel: seriesModel1, // The first model
	 *            geoModels: [geoModel1, geoModel2],
	 *            geoModel: geoModel1, // The first model
	 *            ...
	 *        }
	 */

	function parseFinder(ecModel, finder, opt) {
	  if (zrUtil.isString(finder)) {
	    var obj = {};
	    obj[finder + 'Index'] = 0;
	    finder = obj;
	  }

	  var defaultMainType = opt && opt.defaultMainType;

	  if (defaultMainType && !has(finder, defaultMainType + 'Index') && !has(finder, defaultMainType + 'Id') && !has(finder, defaultMainType + 'Name')) {
	    finder[defaultMainType + 'Index'] = 0;
	  }

	  var result = {};
	  each(finder, function (value, key) {
	    var value = finder[key]; // Exclude 'dataIndex' and other illgal keys.

	    if (key === 'dataIndex' || key === 'dataIndexInside') {
	      result[key] = value;
	      return;
	    }

	    var parsedKey = key.match(/^(\w+)(Index|Id|Name)$/) || [];
	    var mainType = parsedKey[1];
	    var queryType = (parsedKey[2] || '').toLowerCase();

	    if (!mainType || !queryType || value == null || queryType === 'index' && value === 'none' || opt && opt.includeMainTypes && zrUtil.indexOf(opt.includeMainTypes, mainType) < 0) {
	      return;
	    }

	    var queryParam = {
	      mainType: mainType
	    };

	    if (queryType !== 'index' || value !== 'all') {
	      queryParam[queryType] = value;
	    }

	    var models = ecModel.queryComponents(queryParam);
	    result[mainType + 'Models'] = models;
	    result[mainType + 'Model'] = models[0];
	  });
	  return result;
	}

	function has(obj, prop) {
	  return obj && obj.hasOwnProperty(prop);
	}

	function setAttribute(dom, key, value) {
	  dom.setAttribute ? dom.setAttribute(key, value) : dom[key] = value;
	}

	function getAttribute(dom, key) {
	  return dom.getAttribute ? dom.getAttribute(key) : dom[key];
	}

	exports.normalizeToArray = normalizeToArray;
	exports.defaultEmphasis = defaultEmphasis;
	exports.TEXT_STYLE_OPTIONS = TEXT_STYLE_OPTIONS;
	exports.getDataItemValue = getDataItemValue;
	exports.isDataItemOption = isDataItemOption;
	exports.mappingToExists = mappingToExists;
	exports.makeIdAndName = makeIdAndName;
	exports.isNameSpecified = isNameSpecified;
	exports.isIdInner = isIdInner;
	exports.compressBatches = compressBatches;
	exports.queryDataIndex = queryDataIndex;
	exports.makeInner = makeInner;
	exports.parseFinder = parseFinder;
	exports.setAttribute = setAttribute;
	exports.getAttribute = getAttribute;

/***/ }),
/* 220 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(181);

	var env = __webpack_require__(180);

	var _model = __webpack_require__(219);

	var makeInner = _model.makeInner;

	var _clazz = __webpack_require__(221);

	var enableClassExtend = _clazz.enableClassExtend;
	var enableClassCheck = _clazz.enableClassCheck;

	var lineStyleMixin = __webpack_require__(222);

	var areaStyleMixin = __webpack_require__(224);

	var textStyleMixin = __webpack_require__(225);

	var itemStyleMixin = __webpack_require__(259);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/

	/**
	 * @module echarts/model/Model
	 */
	var mixin = zrUtil.mixin;
	var inner = makeInner();
	/**
	 * @alias module:echarts/model/Model
	 * @constructor
	 * @param {Object} option
	 * @param {module:echarts/model/Model} [parentModel]
	 * @param {module:echarts/model/Global} [ecModel]
	 */

	function Model(option, parentModel, ecModel) {
	  /**
	   * @type {module:echarts/model/Model}
	   * @readOnly
	   */
	  this.parentModel = parentModel;
	  /**
	   * @type {module:echarts/model/Global}
	   * @readOnly
	   */

	  this.ecModel = ecModel;
	  /**
	   * @type {Object}
	   * @protected
	   */

	  this.option = option; // Simple optimization
	  // if (this.init) {
	  //     if (arguments.length <= 4) {
	  //         this.init(option, parentModel, ecModel, extraOpt);
	  //     }
	  //     else {
	  //         this.init.apply(this, arguments);
	  //     }
	  // }
	}

	Model.prototype = {
	  constructor: Model,

	  /**
	   * Model 的初始化函数
	   * @param {Object} option
	   */
	  init: null,

	  /**
	   * 从新的 Option merge
	   */
	  mergeOption: function (option) {
	    zrUtil.merge(this.option, option, true);
	  },

	  /**
	   * @param {string|Array.<string>} path
	   * @param {boolean} [ignoreParent=false]
	   * @return {*}
	   */
	  get: function (path, ignoreParent) {
	    if (path == null) {
	      return this.option;
	    }

	    return doGet(this.option, this.parsePath(path), !ignoreParent && getParent(this, path));
	  },

	  /**
	   * @param {string} key
	   * @param {boolean} [ignoreParent=false]
	   * @return {*}
	   */
	  getShallow: function (key, ignoreParent) {
	    var option = this.option;
	    var val = option == null ? option : option[key];
	    var parentModel = !ignoreParent && getParent(this, key);

	    if (val == null && parentModel) {
	      val = parentModel.getShallow(key);
	    }

	    return val;
	  },

	  /**
	   * @param {string|Array.<string>} [path]
	   * @param {module:echarts/model/Model} [parentModel]
	   * @return {module:echarts/model/Model}
	   */
	  getModel: function (path, parentModel) {
	    var obj = path == null ? this.option : doGet(this.option, path = this.parsePath(path));
	    var thisParentModel;
	    parentModel = parentModel || (thisParentModel = getParent(this, path)) && thisParentModel.getModel(path);
	    return new Model(obj, parentModel, this.ecModel);
	  },

	  /**
	   * If model has option
	   */
	  isEmpty: function () {
	    return this.option == null;
	  },
	  restoreData: function () {},
	  // Pending
	  clone: function () {
	    var Ctor = this.constructor;
	    return new Ctor(zrUtil.clone(this.option));
	  },
	  setReadOnly: function (properties) {// clazzUtil.setReadOnly(this, properties);
	  },
	  // If path is null/undefined, return null/undefined.
	  parsePath: function (path) {
	    if (typeof path === 'string') {
	      path = path.split('.');
	    }

	    return path;
	  },

	  /**
	   * @param {Function} getParentMethod
	   *        param {Array.<string>|string} path
	   *        return {module:echarts/model/Model}
	   */
	  customizeGetParent: function (getParentMethod) {
	    inner(this).getParent = getParentMethod;
	  },
	  isAnimationEnabled: function () {
	    if (!env.node) {
	      if (this.option.animation != null) {
	        return !!this.option.animation;
	      } else if (this.parentModel) {
	        return this.parentModel.isAnimationEnabled();
	      }
	    }
	  }
	};

	function doGet(obj, pathArr, parentModel) {
	  for (var i = 0; i < pathArr.length; i++) {
	    // Ignore empty
	    if (!pathArr[i]) {
	      continue;
	    } // obj could be number/string/... (like 0)


	    obj = obj && typeof obj === 'object' ? obj[pathArr[i]] : null;

	    if (obj == null) {
	      break;
	    }
	  }

	  if (obj == null && parentModel) {
	    obj = parentModel.get(pathArr);
	  }

	  return obj;
	} // `path` can be null/undefined


	function getParent(model, path) {
	  var getParentMethod = inner(model).getParent;
	  return getParentMethod ? getParentMethod.call(model, path) : model.parentModel;
	} // Enable Model.extend.


	enableClassExtend(Model);
	enableClassCheck(Model);
	mixin(Model, lineStyleMixin);
	mixin(Model, areaStyleMixin);
	mixin(Model, textStyleMixin);
	mixin(Model, itemStyleMixin);
	var _default = Model;
	module.exports = _default;

/***/ }),
/* 221 */
/***/ (function(module, exports, __webpack_require__) {

	var _config = __webpack_require__(177);

	var __DEV__ = _config.__DEV__;

	var zrUtil = __webpack_require__(181);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var TYPE_DELIMITER = '.';
	var IS_CONTAINER = '___EC__COMPONENT__CONTAINER___';
	/**
	 * Notice, parseClassType('') should returns {main: '', sub: ''}
	 * @public
	 */

	function parseClassType(componentType) {
	  var ret = {
	    main: '',
	    sub: ''
	  };

	  if (componentType) {
	    componentType = componentType.split(TYPE_DELIMITER);
	    ret.main = componentType[0] || '';
	    ret.sub = componentType[1] || '';
	  }

	  return ret;
	}
	/**
	 * @public
	 */


	function checkClassType(componentType) {
	  zrUtil.assert(/^[a-zA-Z0-9_]+([.][a-zA-Z0-9_]+)?$/.test(componentType), 'componentType "' + componentType + '" illegal');
	}
	/**
	 * @public
	 */


	function enableClassExtend(RootClass, mandatoryMethods) {
	  RootClass.$constructor = RootClass;

	  RootClass.extend = function (proto) {
	    var superClass = this;

	    var ExtendedClass = function () {
	      if (!proto.$constructor) {
	        superClass.apply(this, arguments);
	      } else {
	        proto.$constructor.apply(this, arguments);
	      }
	    };

	    zrUtil.extend(ExtendedClass.prototype, proto);
	    ExtendedClass.extend = this.extend;
	    ExtendedClass.superCall = superCall;
	    ExtendedClass.superApply = superApply;
	    zrUtil.inherits(ExtendedClass, this);
	    ExtendedClass.superClass = superClass;
	    return ExtendedClass;
	  };
	}

	var classBase = 0;
	/**
	 * Can not use instanceof, consider different scope by
	 * cross domain or es module import in ec extensions.
	 * Mount a method "isInstance()" to Clz.
	 */

	function enableClassCheck(Clz) {
	  var classAttr = ['__\0is_clz', classBase++, Math.random().toFixed(3)].join('_');
	  Clz.prototype[classAttr] = true;

	  Clz.isInstance = function (obj) {
	    return !!(obj && obj[classAttr]);
	  };
	} // superCall should have class info, which can not be fetch from 'this'.
	// Consider this case:
	// class A has method f,
	// class B inherits class A, overrides method f, f call superApply('f'),
	// class C inherits class B, do not overrides method f,
	// then when method of class C is called, dead loop occured.


	function superCall(context, methodName) {
	  var args = zrUtil.slice(arguments, 2);
	  return this.superClass.prototype[methodName].apply(context, args);
	}

	function superApply(context, methodName, args) {
	  return this.superClass.prototype[methodName].apply(context, args);
	}
	/**
	 * @param {Object} entity
	 * @param {Object} options
	 * @param {boolean} [options.registerWhenExtend]
	 * @public
	 */


	function enableClassManagement(entity, options) {
	  options = options || {};
	  /**
	   * Component model classes
	   * key: componentType,
	   * value:
	   *     componentClass, when componentType is 'xxx'
	   *     or Object.<subKey, componentClass>, when componentType is 'xxx.yy'
	   * @type {Object}
	   */

	  var storage = {};

	  entity.registerClass = function (Clazz, componentType) {
	    if (componentType) {
	      checkClassType(componentType);
	      componentType = parseClassType(componentType);

	      if (!componentType.sub) {
	        storage[componentType.main] = Clazz;
	      } else if (componentType.sub !== IS_CONTAINER) {
	        var container = makeContainer(componentType);
	        container[componentType.sub] = Clazz;
	      }
	    }

	    return Clazz;
	  };

	  entity.getClass = function (componentMainType, subType, throwWhenNotFound) {
	    var Clazz = storage[componentMainType];

	    if (Clazz && Clazz[IS_CONTAINER]) {
	      Clazz = subType ? Clazz[subType] : null;
	    }

	    if (throwWhenNotFound && !Clazz) {
	      throw new Error(!subType ? componentMainType + '.' + 'type should be specified.' : 'Component ' + componentMainType + '.' + (subType || '') + ' not exists. Load it first.');
	    }

	    return Clazz;
	  };

	  entity.getClassesByMainType = function (componentType) {
	    componentType = parseClassType(componentType);
	    var result = [];
	    var obj = storage[componentType.main];

	    if (obj && obj[IS_CONTAINER]) {
	      zrUtil.each(obj, function (o, type) {
	        type !== IS_CONTAINER && result.push(o);
	      });
	    } else {
	      result.push(obj);
	    }

	    return result;
	  };

	  entity.hasClass = function (componentType) {
	    // Just consider componentType.main.
	    componentType = parseClassType(componentType);
	    return !!storage[componentType.main];
	  };
	  /**
	   * @return {Array.<string>} Like ['aa', 'bb'], but can not be ['aa.xx']
	   */


	  entity.getAllClassMainTypes = function () {
	    var types = [];
	    zrUtil.each(storage, function (obj, type) {
	      types.push(type);
	    });
	    return types;
	  };
	  /**
	   * If a main type is container and has sub types
	   * @param  {string}  mainType
	   * @return {boolean}
	   */


	  entity.hasSubTypes = function (componentType) {
	    componentType = parseClassType(componentType);
	    var obj = storage[componentType.main];
	    return obj && obj[IS_CONTAINER];
	  };

	  entity.parseClassType = parseClassType;

	  function makeContainer(componentType) {
	    var container = storage[componentType.main];

	    if (!container || !container[IS_CONTAINER]) {
	      container = storage[componentType.main] = {};
	      container[IS_CONTAINER] = true;
	    }

	    return container;
	  }

	  if (options.registerWhenExtend) {
	    var originalExtend = entity.extend;

	    if (originalExtend) {
	      entity.extend = function (proto) {
	        var ExtendedClass = originalExtend.call(this, proto);
	        return entity.registerClass(ExtendedClass, proto.type);
	      };
	    }
	  }

	  return entity;
	}
	/**
	 * @param {string|Array.<string>} properties
	 */


	function setReadOnly(obj, properties) {// FIXME It seems broken in IE8 simulation of IE11
	  // if (!zrUtil.isArray(properties)) {
	  //     properties = properties != null ? [properties] : [];
	  // }
	  // zrUtil.each(properties, function (prop) {
	  //     var value = obj[prop];
	  //     Object.defineProperty
	  //         && Object.defineProperty(obj, prop, {
	  //             value: value, writable: false
	  //         });
	  //     zrUtil.isArray(obj[prop])
	  //         && Object.freeze
	  //         && Object.freeze(obj[prop]);
	  // });
	}

	exports.parseClassType = parseClassType;
	exports.enableClassExtend = enableClassExtend;
	exports.enableClassCheck = enableClassCheck;
	exports.enableClassManagement = enableClassManagement;
	exports.setReadOnly = setReadOnly;

/***/ }),
/* 222 */
/***/ (function(module, exports, __webpack_require__) {

	var makeStyleMapper = __webpack_require__(223);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var getLineStyle = makeStyleMapper([['lineWidth', 'width'], ['stroke', 'color'], ['opacity'], ['shadowBlur'], ['shadowOffsetX'], ['shadowOffsetY'], ['shadowColor']]);
	var _default = {
	  getLineStyle: function (excludes) {
	    var style = getLineStyle(this, excludes);
	    var lineDash = this.getLineDash(style.lineWidth);
	    lineDash && (style.lineDash = lineDash);
	    return style;
	  },
	  getLineDash: function (lineWidth) {
	    if (lineWidth == null) {
	      lineWidth = 1;
	    }

	    var lineType = this.get('type');
	    var dotSize = Math.max(lineWidth, 2);
	    var dashSize = lineWidth * 4;
	    return lineType === 'solid' || lineType == null ? null : lineType === 'dashed' ? [dashSize, dashSize] : [dotSize, dotSize];
	  }
	};
	module.exports = _default;

/***/ }),
/* 223 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(181);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	// TODO Parse shadow style
	// TODO Only shallow path support
	function _default(properties) {
	  // Normalize
	  for (var i = 0; i < properties.length; i++) {
	    if (!properties[i][1]) {
	      properties[i][1] = properties[i][0];
	    }
	  }

	  return function (model, excludes, includes) {
	    var style = {};

	    for (var i = 0; i < properties.length; i++) {
	      var propName = properties[i][1];

	      if (excludes && zrUtil.indexOf(excludes, propName) >= 0 || includes && zrUtil.indexOf(includes, propName) < 0) {
	        continue;
	      }

	      var val = model.getShallow(propName);

	      if (val != null) {
	        style[properties[i][0]] = val;
	      }
	    }

	    return style;
	  };
	}

	module.exports = _default;

/***/ }),
/* 224 */
/***/ (function(module, exports, __webpack_require__) {

	var makeStyleMapper = __webpack_require__(223);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var getAreaStyle = makeStyleMapper([['fill', 'color'], ['shadowBlur'], ['shadowOffsetX'], ['shadowOffsetY'], ['opacity'], ['shadowColor']]);
	var _default = {
	  getAreaStyle: function (excludes, includes) {
	    return getAreaStyle(this, excludes, includes);
	  }
	};
	module.exports = _default;

/***/ }),
/* 225 */
/***/ (function(module, exports, __webpack_require__) {

	var textContain = __webpack_require__(211);

	var graphicUtil = __webpack_require__(226);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var PATH_COLOR = ['textStyle', 'color'];
	var _default = {
	  /**
	   * Get color property or get color from option.textStyle.color
	   * @param {boolean} [isEmphasis]
	   * @return {string}
	   */
	  getTextColor: function (isEmphasis) {
	    var ecModel = this.ecModel;
	    return this.getShallow('color') || (!isEmphasis && ecModel ? ecModel.get(PATH_COLOR) : null);
	  },

	  /**
	   * Create font string from fontStyle, fontWeight, fontSize, fontFamily
	   * @return {string}
	   */
	  getFont: function () {
	    return graphicUtil.getFont({
	      fontStyle: this.getShallow('fontStyle'),
	      fontWeight: this.getShallow('fontWeight'),
	      fontSize: this.getShallow('fontSize'),
	      fontFamily: this.getShallow('fontFamily')
	    }, this.ecModel);
	  },
	  getTextRect: function (text) {
	    return textContain.getBoundingRect(text, this.getFont(), this.getShallow('align'), this.getShallow('verticalAlign') || this.getShallow('baseline'), this.getShallow('padding'), this.getShallow('rich'), this.getShallow('truncateText'));
	  }
	};
	module.exports = _default;

/***/ }),
/* 226 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(181);

	var pathTool = __webpack_require__(227);

	var colorTool = __webpack_require__(195);

	var matrix = __webpack_require__(190);

	var vector = __webpack_require__(183);

	var Path = __webpack_require__(228);

	var Transformable = __webpack_require__(189);

	var ZImage = __webpack_require__(207);

	exports.Image = ZImage;

	var Group = __webpack_require__(187);

	exports.Group = Group;

	var Text = __webpack_require__(240);

	exports.Text = Text;

	var Circle = __webpack_require__(241);

	exports.Circle = Circle;

	var Sector = __webpack_require__(242);

	exports.Sector = Sector;

	var Ring = __webpack_require__(244);

	exports.Ring = Ring;

	var Polygon = __webpack_require__(245);

	exports.Polygon = Polygon;

	var Polyline = __webpack_require__(249);

	exports.Polyline = Polyline;

	var Rect = __webpack_require__(250);

	exports.Rect = Rect;

	var Line = __webpack_require__(251);

	exports.Line = Line;

	var BezierCurve = __webpack_require__(252);

	exports.BezierCurve = BezierCurve;

	var Arc = __webpack_require__(253);

	exports.Arc = Arc;

	var CompoundPath = __webpack_require__(254);

	exports.CompoundPath = CompoundPath;

	var LinearGradient = __webpack_require__(255);

	exports.LinearGradient = LinearGradient;

	var RadialGradient = __webpack_require__(257);

	exports.RadialGradient = RadialGradient;

	var BoundingRect = __webpack_require__(199);

	exports.BoundingRect = BoundingRect;

	var IncrementalDisplayable = __webpack_require__(258);

	exports.IncrementalDisplayable = IncrementalDisplayable;

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var round = Math.round;
	var mathMax = Math.max;
	var mathMin = Math.min;
	var EMPTY_OBJ = {};
	/**
	 * Extend shape with parameters
	 */

	function extendShape(opts) {
	  return Path.extend(opts);
	}
	/**
	 * Extend path
	 */


	function extendPath(pathData, opts) {
	  return pathTool.extendFromString(pathData, opts);
	}
	/**
	 * Create a path element from path data string
	 * @param {string} pathData
	 * @param {Object} opts
	 * @param {module:zrender/core/BoundingRect} rect
	 * @param {string} [layout=cover] 'center' or 'cover'
	 */


	function makePath(pathData, opts, rect, layout) {
	  var path = pathTool.createFromString(pathData, opts);
	  var boundingRect = path.getBoundingRect();

	  if (rect) {
	    if (layout === 'center') {
	      rect = centerGraphic(rect, boundingRect);
	    }

	    resizePath(path, rect);
	  }

	  return path;
	}
	/**
	 * Create a image element from image url
	 * @param {string} imageUrl image url
	 * @param {Object} opts options
	 * @param {module:zrender/core/BoundingRect} rect constrain rect
	 * @param {string} [layout=cover] 'center' or 'cover'
	 */


	function makeImage(imageUrl, rect, layout) {
	  var path = new ZImage({
	    style: {
	      image: imageUrl,
	      x: rect.x,
	      y: rect.y,
	      width: rect.width,
	      height: rect.height
	    },
	    onload: function (img) {
	      if (layout === 'center') {
	        var boundingRect = {
	          width: img.width,
	          height: img.height
	        };
	        path.setStyle(centerGraphic(rect, boundingRect));
	      }
	    }
	  });
	  return path;
	}
	/**
	 * Get position of centered element in bounding box.
	 *
	 * @param  {Object} rect         element local bounding box
	 * @param  {Object} boundingRect constraint bounding box
	 * @return {Object} element position containing x, y, width, and height
	 */


	function centerGraphic(rect, boundingRect) {
	  // Set rect to center, keep width / height ratio.
	  var aspect = boundingRect.width / boundingRect.height;
	  var width = rect.height * aspect;
	  var height;

	  if (width <= rect.width) {
	    height = rect.height;
	  } else {
	    width = rect.width;
	    height = width / aspect;
	  }

	  var cx = rect.x + rect.width / 2;
	  var cy = rect.y + rect.height / 2;
	  return {
	    x: cx - width / 2,
	    y: cy - height / 2,
	    width: width,
	    height: height
	  };
	}

	var mergePath = pathTool.mergePath;
	/**
	 * Resize a path to fit the rect
	 * @param {module:zrender/graphic/Path} path
	 * @param {Object} rect
	 */

	function resizePath(path, rect) {
	  if (!path.applyTransform) {
	    return;
	  }

	  var pathRect = path.getBoundingRect();
	  var m = pathRect.calculateTransform(rect);
	  path.applyTransform(m);
	}
	/**
	 * Sub pixel optimize line for canvas
	 *
	 * @param {Object} param
	 * @param {Object} [param.shape]
	 * @param {number} [param.shape.x1]
	 * @param {number} [param.shape.y1]
	 * @param {number} [param.shape.x2]
	 * @param {number} [param.shape.y2]
	 * @param {Object} [param.style]
	 * @param {number} [param.style.lineWidth]
	 * @return {Object} Modified param
	 */


	function subPixelOptimizeLine(param) {
	  var shape = param.shape;
	  var lineWidth = param.style.lineWidth;

	  if (round(shape.x1 * 2) === round(shape.x2 * 2)) {
	    shape.x1 = shape.x2 = subPixelOptimize(shape.x1, lineWidth, true);
	  }

	  if (round(shape.y1 * 2) === round(shape.y2 * 2)) {
	    shape.y1 = shape.y2 = subPixelOptimize(shape.y1, lineWidth, true);
	  }

	  return param;
	}
	/**
	 * Sub pixel optimize rect for canvas
	 *
	 * @param {Object} param
	 * @param {Object} [param.shape]
	 * @param {number} [param.shape.x]
	 * @param {number} [param.shape.y]
	 * @param {number} [param.shape.width]
	 * @param {number} [param.shape.height]
	 * @param {Object} [param.style]
	 * @param {number} [param.style.lineWidth]
	 * @return {Object} Modified param
	 */


	function subPixelOptimizeRect(param) {
	  var shape = param.shape;
	  var lineWidth = param.style.lineWidth;
	  var originX = shape.x;
	  var originY = shape.y;
	  var originWidth = shape.width;
	  var originHeight = shape.height;
	  shape.x = subPixelOptimize(shape.x, lineWidth, true);
	  shape.y = subPixelOptimize(shape.y, lineWidth, true);
	  shape.width = Math.max(subPixelOptimize(originX + originWidth, lineWidth, false) - shape.x, originWidth === 0 ? 0 : 1);
	  shape.height = Math.max(subPixelOptimize(originY + originHeight, lineWidth, false) - shape.y, originHeight === 0 ? 0 : 1);
	  return param;
	}
	/**
	 * Sub pixel optimize for canvas
	 *
	 * @param {number} position Coordinate, such as x, y
	 * @param {number} lineWidth Should be nonnegative integer.
	 * @param {boolean=} positiveOrNegative Default false (negative).
	 * @return {number} Optimized position.
	 */


	function subPixelOptimize(position, lineWidth, positiveOrNegative) {
	  // Assure that (position + lineWidth / 2) is near integer edge,
	  // otherwise line will be fuzzy in canvas.
	  var doubledPosition = round(position * 2);
	  return (doubledPosition + round(lineWidth)) % 2 === 0 ? doubledPosition / 2 : (doubledPosition + (positiveOrNegative ? 1 : -1)) / 2;
	}

	function hasFillOrStroke(fillOrStroke) {
	  return fillOrStroke != null && fillOrStroke != 'none';
	}

	function liftColor(color) {
	  return typeof color === 'string' ? colorTool.lift(color, -0.1) : color;
	}
	/**
	 * @private
	 */


	function cacheElementStl(el) {
	  if (el.__hoverStlDirty) {
	    var stroke = el.style.stroke;
	    var fill = el.style.fill; // Create hoverStyle on mouseover

	    var hoverStyle = el.__hoverStl;
	    hoverStyle.fill = hoverStyle.fill || (hasFillOrStroke(fill) ? liftColor(fill) : null);
	    hoverStyle.stroke = hoverStyle.stroke || (hasFillOrStroke(stroke) ? liftColor(stroke) : null);
	    var normalStyle = {};

	    for (var name in hoverStyle) {
	      // See comment in `doSingleEnterHover`.
	      if (hoverStyle[name] != null) {
	        normalStyle[name] = el.style[name];
	      }
	    }

	    el.__normalStl = normalStyle;
	    el.__hoverStlDirty = false;
	  }
	}
	/**
	 * @private
	 */


	function doSingleEnterHover(el) {
	  if (el.__isHover) {
	    return;
	  }

	  cacheElementStl(el);

	  if (el.useHoverLayer) {
	    el.__zr && el.__zr.addHover(el, el.__hoverStl);
	  } else {
	    var style = el.style;
	    var insideRollbackOpt = style.insideRollbackOpt; // Consider case: only `position: 'top'` is set on emphasis, then text
	    // color should be returned to `autoColor`, rather than remain '#fff'.
	    // So we should rollback then apply again after style merging.

	    insideRollbackOpt && rollbackInsideStyle(style); // styles can be:
	    // {
	    //    label: {
	    //        show: false,
	    //        position: 'outside',
	    //        fontSize: 18
	    //    },
	    //    emphasis: {
	    //        label: {
	    //            show: true
	    //        }
	    //    }
	    // },
	    // where properties of `emphasis` may not appear in `normal`. We previously use
	    // module:echarts/util/model#defaultEmphasis to merge `normal` to `emphasis`.
	    // But consider rich text and setOption in merge mode, it is impossible to cover
	    // all properties in merge. So we use merge mode when setting style here, where
	    // only properties that is not `null/undefined` can be set. The disadventage:
	    // null/undefined can not be used to remove style any more in `emphasis`.

	    style.extendFrom(el.__hoverStl); // Do not save `insideRollback`.

	    if (insideRollbackOpt) {
	      applyInsideStyle(style, style.insideOriginalTextPosition, insideRollbackOpt); // textFill may be rollbacked to null.

	      if (style.textFill == null) {
	        style.textFill = insideRollbackOpt.autoColor;
	      }
	    }

	    el.dirty(false);
	    el.z2 += 1;
	  }

	  el.__isHover = true;
	}
	/**
	 * @inner
	 */


	function doSingleLeaveHover(el) {
	  if (!el.__isHover) {
	    return;
	  }

	  var normalStl = el.__normalStl;

	  if (el.useHoverLayer) {
	    el.__zr && el.__zr.removeHover(el);
	  } else {
	    // Consider null/undefined value, should use
	    // `setStyle` but not `extendFrom(stl, true)`.
	    normalStl && el.setStyle(normalStl);
	    el.z2 -= 1;
	  }

	  el.__isHover = false;
	}
	/**
	 * @inner
	 */


	function doEnterHover(el) {
	  el.type === 'group' ? el.traverse(function (child) {
	    if (child.type !== 'group') {
	      doSingleEnterHover(child);
	    }
	  }) : doSingleEnterHover(el);
	}

	function doLeaveHover(el) {
	  el.type === 'group' ? el.traverse(function (child) {
	    if (child.type !== 'group') {
	      doSingleLeaveHover(child);
	    }
	  }) : doSingleLeaveHover(el);
	}
	/**
	 * @inner
	 */


	function setElementHoverStl(el, hoverStl) {
	  // If element has sepcified hoverStyle, then use it instead of given hoverStyle
	  // Often used when item group has a label element and it's hoverStyle is different
	  el.__hoverStl = el.hoverStyle || hoverStl || {};
	  el.__hoverStlDirty = true;

	  if (el.__isHover) {
	    cacheElementStl(el);
	  }
	}
	/**
	 * @inner
	 */


	function onElementMouseOver(e) {
	  if (this.__hoverSilentOnTouch && e.zrByTouch) {
	    return;
	  } // Only if element is not in emphasis status


	  !this.__isEmphasis && doEnterHover(this);
	}
	/**
	 * @inner
	 */


	function onElementMouseOut(e) {
	  if (this.__hoverSilentOnTouch && e.zrByTouch) {
	    return;
	  } // Only if element is not in emphasis status


	  !this.__isEmphasis && doLeaveHover(this);
	}
	/**
	 * @inner
	 */


	function enterEmphasis() {
	  this.__isEmphasis = true;
	  doEnterHover(this);
	}
	/**
	 * @inner
	 */


	function leaveEmphasis() {
	  this.__isEmphasis = false;
	  doLeaveHover(this);
	}
	/**
	 * Set hover style of element.
	 * This method can be called repeatly without side-effects.
	 * @param {module:zrender/Element} el
	 * @param {Object} [hoverStyle]
	 * @param {Object} [opt]
	 * @param {boolean} [opt.hoverSilentOnTouch=false]
	 *        In touch device, mouseover event will be trigger on touchstart event
	 *        (see module:zrender/dom/HandlerProxy). By this mechanism, we can
	 *        conviniently use hoverStyle when tap on touch screen without additional
	 *        code for compatibility.
	 *        But if the chart/component has select feature, which usually also use
	 *        hoverStyle, there might be conflict between 'select-highlight' and
	 *        'hover-highlight' especially when roam is enabled (see geo for example).
	 *        In this case, hoverSilentOnTouch should be used to disable hover-highlight
	 *        on touch device.
	 */


	function setHoverStyle(el, hoverStyle, opt) {
	  el.__hoverSilentOnTouch = opt && opt.hoverSilentOnTouch;
	  el.type === 'group' ? el.traverse(function (child) {
	    if (child.type !== 'group') {
	      setElementHoverStl(child, hoverStyle);
	    }
	  }) : setElementHoverStl(el, hoverStyle); // Duplicated function will be auto-ignored, see Eventful.js.

	  el.on('mouseover', onElementMouseOver).on('mouseout', onElementMouseOut); // Emphasis, normal can be triggered manually

	  el.on('emphasis', enterEmphasis).on('normal', leaveEmphasis);
	}
	/**
	 * @param {Object|module:zrender/graphic/Style} normalStyle
	 * @param {Object} emphasisStyle
	 * @param {module:echarts/model/Model} normalModel
	 * @param {module:echarts/model/Model} emphasisModel
	 * @param {Object} opt Check `opt` of `setTextStyleCommon` to find other props.
	 * @param {string|Function} [opt.defaultText]
	 * @param {module:echarts/model/Model} [opt.labelFetcher] Fetch text by
	 *      `opt.labelFetcher.getFormattedLabel(opt.labelDataIndex, 'normal'/'emphasis', null, opt.labelDimIndex)`
	 * @param {module:echarts/model/Model} [opt.labelDataIndex] Fetch text by
	 *      `opt.textFetcher.getFormattedLabel(opt.labelDataIndex, 'normal'/'emphasis', null, opt.labelDimIndex)`
	 * @param {module:echarts/model/Model} [opt.labelDimIndex] Fetch text by
	 *      `opt.textFetcher.getFormattedLabel(opt.labelDataIndex, 'normal'/'emphasis', null, opt.labelDimIndex)`
	 * @param {Object} [normalSpecified]
	 * @param {Object} [emphasisSpecified]
	 */


	function setLabelStyle(normalStyle, emphasisStyle, normalModel, emphasisModel, opt, normalSpecified, emphasisSpecified) {
	  opt = opt || EMPTY_OBJ;
	  var labelFetcher = opt.labelFetcher;
	  var labelDataIndex = opt.labelDataIndex;
	  var labelDimIndex = opt.labelDimIndex; // This scenario, `label.normal.show = true; label.emphasis.show = false`,
	  // is not supported util someone requests.

	  var showNormal = normalModel.getShallow('show');
	  var showEmphasis = emphasisModel.getShallow('show'); // Consider performance, only fetch label when necessary.
	  // If `normal.show` is `false` and `emphasis.show` is `true` and `emphasis.formatter` is not set,
	  // label should be displayed, where text is fetched by `normal.formatter` or `opt.defaultText`.

	  var baseText;

	  if (showNormal || showEmphasis) {
	    if (labelFetcher) {
	      baseText = labelFetcher.getFormattedLabel(labelDataIndex, 'normal', null, labelDimIndex);
	    }

	    if (baseText == null) {
	      baseText = zrUtil.isFunction(opt.defaultText) ? opt.defaultText(labelDataIndex, opt) : opt.defaultText;
	    }
	  }

	  var normalStyleText = showNormal ? baseText : null;
	  var emphasisStyleText = showEmphasis ? zrUtil.retrieve2(labelFetcher ? labelFetcher.getFormattedLabel(labelDataIndex, 'emphasis', null, labelDimIndex) : null, baseText) : null; // Optimize: If style.text is null, text will not be drawn.

	  if (normalStyleText != null || emphasisStyleText != null) {
	    // Always set `textStyle` even if `normalStyle.text` is null, because default
	    // values have to be set on `normalStyle`.
	    // If we set default values on `emphasisStyle`, consider case:
	    // Firstly, `setOption(... label: {normal: {text: null}, emphasis: {show: true}} ...);`
	    // Secondly, `setOption(... label: {noraml: {show: true, text: 'abc', color: 'red'} ...);`
	    // Then the 'red' will not work on emphasis.
	    setTextStyle(normalStyle, normalModel, normalSpecified, opt);
	    setTextStyle(emphasisStyle, emphasisModel, emphasisSpecified, opt, true);
	  }

	  normalStyle.text = normalStyleText;
	  emphasisStyle.text = emphasisStyleText;
	}
	/**
	 * Set basic textStyle properties.
	 * @param {Object|module:zrender/graphic/Style} textStyle
	 * @param {module:echarts/model/Model} model
	 * @param {Object} [specifiedTextStyle] Can be overrided by settings in model.
	 * @param {Object} [opt] See `opt` of `setTextStyleCommon`.
	 * @param {boolean} [isEmphasis]
	 */


	function setTextStyle(textStyle, textStyleModel, specifiedTextStyle, opt, isEmphasis) {
	  setTextStyleCommon(textStyle, textStyleModel, opt, isEmphasis);
	  specifiedTextStyle && zrUtil.extend(textStyle, specifiedTextStyle);
	  textStyle.host && textStyle.host.dirty && textStyle.host.dirty(false);
	  return textStyle;
	}
	/**
	 * Set text option in the style.
	 * @deprecated
	 * @param {Object} textStyle
	 * @param {module:echarts/model/Model} labelModel
	 * @param {string|boolean} defaultColor Default text color.
	 *        If set as false, it will be processed as a emphasis style.
	 */


	function setText(textStyle, labelModel, defaultColor) {
	  var opt = {
	    isRectText: true
	  };
	  var isEmphasis;

	  if (defaultColor === false) {
	    isEmphasis = true;
	  } else {
	    // Support setting color as 'auto' to get visual color.
	    opt.autoColor = defaultColor;
	  }

	  setTextStyleCommon(textStyle, labelModel, opt, isEmphasis);
	  textStyle.host && textStyle.host.dirty && textStyle.host.dirty(false);
	}
	/**
	 * {
	 *      disableBox: boolean, Whether diable drawing box of block (outer most).
	 *      isRectText: boolean,
	 *      autoColor: string, specify a color when color is 'auto',
	 *              for textFill, textStroke, textBackgroundColor, and textBorderColor.
	 *              If autoColor specified, it is used as default textFill.
	 *      useInsideStyle:
	 *              `true`: Use inside style (textFill, textStroke, textStrokeWidth)
	 *                  if `textFill` is not specified.
	 *              `false`: Do not use inside style.
	 *              `null/undefined`: use inside style if `isRectText` is true and
	 *                  `textFill` is not specified and textPosition contains `'inside'`.
	 *      forceRich: boolean
	 * }
	 */


	function setTextStyleCommon(textStyle, textStyleModel, opt, isEmphasis) {
	  // Consider there will be abnormal when merge hover style to normal style if given default value.
	  opt = opt || EMPTY_OBJ;

	  if (opt.isRectText) {
	    var textPosition = textStyleModel.getShallow('position') || (isEmphasis ? null : 'inside'); // 'outside' is not a valid zr textPostion value, but used
	    // in bar series, and magric type should be considered.

	    textPosition === 'outside' && (textPosition = 'top');
	    textStyle.textPosition = textPosition;
	    textStyle.textOffset = textStyleModel.getShallow('offset');
	    var labelRotate = textStyleModel.getShallow('rotate');
	    labelRotate != null && (labelRotate *= Math.PI / 180);
	    textStyle.textRotation = labelRotate;
	    textStyle.textDistance = zrUtil.retrieve2(textStyleModel.getShallow('distance'), isEmphasis ? null : 5);
	  }

	  var ecModel = textStyleModel.ecModel;
	  var globalTextStyle = ecModel && ecModel.option.textStyle; // Consider case:
	  // {
	  //     data: [{
	  //         value: 12,
	  //         label: {
	  //             rich: {
	  //                 // no 'a' here but using parent 'a'.
	  //             }
	  //         }
	  //     }],
	  //     rich: {
	  //         a: { ... }
	  //     }
	  // }

	  var richItemNames = getRichItemNames(textStyleModel);
	  var richResult;

	  if (richItemNames) {
	    richResult = {};

	    for (var name in richItemNames) {
	      if (richItemNames.hasOwnProperty(name)) {
	        // Cascade is supported in rich.
	        var richTextStyle = textStyleModel.getModel(['rich', name]); // In rich, never `disableBox`.

	        setTokenTextStyle(richResult[name] = {}, richTextStyle, globalTextStyle, opt, isEmphasis);
	      }
	    }
	  }

	  textStyle.rich = richResult;
	  setTokenTextStyle(textStyle, textStyleModel, globalTextStyle, opt, isEmphasis, true);

	  if (opt.forceRich && !opt.textStyle) {
	    opt.textStyle = {};
	  }

	  return textStyle;
	} // Consider case:
	// {
	//     data: [{
	//         value: 12,
	//         label: {
	//             rich: {
	//                 // no 'a' here but using parent 'a'.
	//             }
	//         }
	//     }],
	//     rich: {
	//         a: { ... }
	//     }
	// }


	function getRichItemNames(textStyleModel) {
	  // Use object to remove duplicated names.
	  var richItemNameMap;

	  while (textStyleModel && textStyleModel !== textStyleModel.ecModel) {
	    var rich = (textStyleModel.option || EMPTY_OBJ).rich;

	    if (rich) {
	      richItemNameMap = richItemNameMap || {};

	      for (var name in rich) {
	        if (rich.hasOwnProperty(name)) {
	          richItemNameMap[name] = 1;
	        }
	      }
	    }

	    textStyleModel = textStyleModel.parentModel;
	  }

	  return richItemNameMap;
	}

	function setTokenTextStyle(textStyle, textStyleModel, globalTextStyle, opt, isEmphasis, isBlock) {
	  // In merge mode, default value should not be given.
	  globalTextStyle = !isEmphasis && globalTextStyle || EMPTY_OBJ;
	  textStyle.textFill = getAutoColor(textStyleModel.getShallow('color'), opt) || globalTextStyle.color;
	  textStyle.textStroke = getAutoColor(textStyleModel.getShallow('textBorderColor'), opt) || globalTextStyle.textBorderColor;
	  textStyle.textStrokeWidth = zrUtil.retrieve2(textStyleModel.getShallow('textBorderWidth'), globalTextStyle.textBorderWidth);

	  if (!isEmphasis) {
	    if (isBlock) {
	      // Always set `insideRollback`, for clearing previous.
	      var originalTextPosition = textStyle.textPosition;
	      textStyle.insideRollback = applyInsideStyle(textStyle, originalTextPosition, opt); // Save original textPosition, because style.textPosition will be repalced by
	      // real location (like [10, 30]) in zrender.

	      textStyle.insideOriginalTextPosition = originalTextPosition;
	      textStyle.insideRollbackOpt = opt;
	    } // Set default finally.


	    if (textStyle.textFill == null) {
	      textStyle.textFill = opt.autoColor;
	    }
	  } // Do not use `getFont` here, because merge should be supported, where
	  // part of these properties may be changed in emphasis style, and the
	  // others should remain their original value got from normal style.


	  textStyle.fontStyle = textStyleModel.getShallow('fontStyle') || globalTextStyle.fontStyle;
	  textStyle.fontWeight = textStyleModel.getShallow('fontWeight') || globalTextStyle.fontWeight;
	  textStyle.fontSize = textStyleModel.getShallow('fontSize') || globalTextStyle.fontSize;
	  textStyle.fontFamily = textStyleModel.getShallow('fontFamily') || globalTextStyle.fontFamily;
	  textStyle.textAlign = textStyleModel.getShallow('align');
	  textStyle.textVerticalAlign = textStyleModel.getShallow('verticalAlign') || textStyleModel.getShallow('baseline');
	  textStyle.textLineHeight = textStyleModel.getShallow('lineHeight');
	  textStyle.textWidth = textStyleModel.getShallow('width');
	  textStyle.textHeight = textStyleModel.getShallow('height');
	  textStyle.textTag = textStyleModel.getShallow('tag');

	  if (!isBlock || !opt.disableBox) {
	    textStyle.textBackgroundColor = getAutoColor(textStyleModel.getShallow('backgroundColor'), opt);
	    textStyle.textPadding = textStyleModel.getShallow('padding');
	    textStyle.textBorderColor = getAutoColor(textStyleModel.getShallow('borderColor'), opt);
	    textStyle.textBorderWidth = textStyleModel.getShallow('borderWidth');
	    textStyle.textBorderRadius = textStyleModel.getShallow('borderRadius');
	    textStyle.textBoxShadowColor = textStyleModel.getShallow('shadowColor');
	    textStyle.textBoxShadowBlur = textStyleModel.getShallow('shadowBlur');
	    textStyle.textBoxShadowOffsetX = textStyleModel.getShallow('shadowOffsetX');
	    textStyle.textBoxShadowOffsetY = textStyleModel.getShallow('shadowOffsetY');
	  }

	  textStyle.textShadowColor = textStyleModel.getShallow('textShadowColor') || globalTextStyle.textShadowColor;
	  textStyle.textShadowBlur = textStyleModel.getShallow('textShadowBlur') || globalTextStyle.textShadowBlur;
	  textStyle.textShadowOffsetX = textStyleModel.getShallow('textShadowOffsetX') || globalTextStyle.textShadowOffsetX;
	  textStyle.textShadowOffsetY = textStyleModel.getShallow('textShadowOffsetY') || globalTextStyle.textShadowOffsetY;
	}

	function getAutoColor(color, opt) {
	  return color !== 'auto' ? color : opt && opt.autoColor ? opt.autoColor : null;
	}

	function applyInsideStyle(textStyle, textPosition, opt) {
	  var useInsideStyle = opt.useInsideStyle;
	  var insideRollback;

	  if (textStyle.textFill == null && useInsideStyle !== false && (useInsideStyle === true || opt.isRectText && textPosition // textPosition can be [10, 30]
	  && typeof textPosition === 'string' && textPosition.indexOf('inside') >= 0)) {
	    insideRollback = {
	      textFill: null,
	      textStroke: textStyle.textStroke,
	      textStrokeWidth: textStyle.textStrokeWidth
	    };
	    textStyle.textFill = '#fff'; // Consider text with #fff overflow its container.

	    if (textStyle.textStroke == null) {
	      textStyle.textStroke = opt.autoColor;
	      textStyle.textStrokeWidth == null && (textStyle.textStrokeWidth = 2);
	    }
	  }

	  return insideRollback;
	}

	function rollbackInsideStyle(style) {
	  var insideRollback = style.insideRollback;

	  if (insideRollback) {
	    style.textFill = insideRollback.textFill;
	    style.textStroke = insideRollback.textStroke;
	    style.textStrokeWidth = insideRollback.textStrokeWidth;
	  }
	}

	function getFont(opt, ecModel) {
	  // ecModel or default text style model.
	  var gTextStyleModel = ecModel || ecModel.getModel('textStyle');
	  return zrUtil.trim([// FIXME in node-canvas fontWeight is before fontStyle
	  opt.fontStyle || gTextStyleModel && gTextStyleModel.getShallow('fontStyle') || '', opt.fontWeight || gTextStyleModel && gTextStyleModel.getShallow('fontWeight') || '', (opt.fontSize || gTextStyleModel && gTextStyleModel.getShallow('fontSize') || 12) + 'px', opt.fontFamily || gTextStyleModel && gTextStyleModel.getShallow('fontFamily') || 'sans-serif'].join(' '));
	}

	function animateOrSetProps(isUpdate, el, props, animatableModel, dataIndex, cb) {
	  if (typeof dataIndex === 'function') {
	    cb = dataIndex;
	    dataIndex = null;
	  } // Do not check 'animation' property directly here. Consider this case:
	  // animation model is an `itemModel`, whose does not have `isAnimationEnabled`
	  // but its parent model (`seriesModel`) does.


	  var animationEnabled = animatableModel && animatableModel.isAnimationEnabled();

	  if (animationEnabled) {
	    var postfix = isUpdate ? 'Update' : '';
	    var duration = animatableModel.getShallow('animationDuration' + postfix);
	    var animationEasing = animatableModel.getShallow('animationEasing' + postfix);
	    var animationDelay = animatableModel.getShallow('animationDelay' + postfix);

	    if (typeof animationDelay === 'function') {
	      animationDelay = animationDelay(dataIndex, animatableModel.getAnimationDelayParams ? animatableModel.getAnimationDelayParams(el, dataIndex) : null);
	    }

	    if (typeof duration === 'function') {
	      duration = duration(dataIndex);
	    }

	    duration > 0 ? el.animateTo(props, duration, animationDelay || 0, animationEasing, cb, !!cb) : (el.stopAnimation(), el.attr(props), cb && cb());
	  } else {
	    el.stopAnimation();
	    el.attr(props);
	    cb && cb();
	  }
	}
	/**
	 * Update graphic element properties with or without animation according to the
	 * configuration in series.
	 *
	 * Caution: this method will stop previous animation.
	 * So if do not use this method to one element twice before
	 * animation starts, unless you know what you are doing.
	 *
	 * @param {module:zrender/Element} el
	 * @param {Object} props
	 * @param {module:echarts/model/Model} [animatableModel]
	 * @param {number} [dataIndex]
	 * @param {Function} [cb]
	 * @example
	 *     graphic.updateProps(el, {
	 *         position: [100, 100]
	 *     }, seriesModel, dataIndex, function () { console.log('Animation done!'); });
	 *     // Or
	 *     graphic.updateProps(el, {
	 *         position: [100, 100]
	 *     }, seriesModel, function () { console.log('Animation done!'); });
	 */


	function updateProps(el, props, animatableModel, dataIndex, cb) {
	  animateOrSetProps(true, el, props, animatableModel, dataIndex, cb);
	}
	/**
	 * Init graphic element properties with or without animation according to the
	 * configuration in series.
	 *
	 * Caution: this method will stop previous animation.
	 * So if do not use this method to one element twice before
	 * animation starts, unless you know what you are doing.
	 *
	 * @param {module:zrender/Element} el
	 * @param {Object} props
	 * @param {module:echarts/model/Model} [animatableModel]
	 * @param {number} [dataIndex]
	 * @param {Function} cb
	 */


	function initProps(el, props, animatableModel, dataIndex, cb) {
	  animateOrSetProps(false, el, props, animatableModel, dataIndex, cb);
	}
	/**
	 * Get transform matrix of target (param target),
	 * in coordinate of its ancestor (param ancestor)
	 *
	 * @param {module:zrender/mixin/Transformable} target
	 * @param {module:zrender/mixin/Transformable} [ancestor]
	 */


	function getTransform(target, ancestor) {
	  var mat = matrix.identity([]);

	  while (target && target !== ancestor) {
	    matrix.mul(mat, target.getLocalTransform(), mat);
	    target = target.parent;
	  }

	  return mat;
	}
	/**
	 * Apply transform to an vertex.
	 * @param {Array.<number>} target [x, y]
	 * @param {Array.<number>|TypedArray.<number>|Object} transform Can be:
	 *      + Transform matrix: like [1, 0, 0, 1, 0, 0]
	 *      + {position, rotation, scale}, the same as `zrender/Transformable`.
	 * @param {boolean=} invert Whether use invert matrix.
	 * @return {Array.<number>} [x, y]
	 */


	function applyTransform(target, transform, invert) {
	  if (transform && !zrUtil.isArrayLike(transform)) {
	    transform = Transformable.getLocalTransform(transform);
	  }

	  if (invert) {
	    transform = matrix.invert([], transform);
	  }

	  return vector.applyTransform([], target, transform);
	}
	/**
	 * @param {string} direction 'left' 'right' 'top' 'bottom'
	 * @param {Array.<number>} transform Transform matrix: like [1, 0, 0, 1, 0, 0]
	 * @param {boolean=} invert Whether use invert matrix.
	 * @return {string} Transformed direction. 'left' 'right' 'top' 'bottom'
	 */


	function transformDirection(direction, transform, invert) {
	  // Pick a base, ensure that transform result will not be (0, 0).
	  var hBase = transform[4] === 0 || transform[5] === 0 || transform[0] === 0 ? 1 : Math.abs(2 * transform[4] / transform[0]);
	  var vBase = transform[4] === 0 || transform[5] === 0 || transform[2] === 0 ? 1 : Math.abs(2 * transform[4] / transform[2]);
	  var vertex = [direction === 'left' ? -hBase : direction === 'right' ? hBase : 0, direction === 'top' ? -vBase : direction === 'bottom' ? vBase : 0];
	  vertex = applyTransform(vertex, transform, invert);
	  return Math.abs(vertex[0]) > Math.abs(vertex[1]) ? vertex[0] > 0 ? 'right' : 'left' : vertex[1] > 0 ? 'bottom' : 'top';
	}
	/**
	 * Apply group transition animation from g1 to g2.
	 * If no animatableModel, no animation.
	 */


	function groupTransition(g1, g2, animatableModel, cb) {
	  if (!g1 || !g2) {
	    return;
	  }

	  function getElMap(g) {
	    var elMap = {};
	    g.traverse(function (el) {
	      if (!el.isGroup && el.anid) {
	        elMap[el.anid] = el;
	      }
	    });
	    return elMap;
	  }

	  function getAnimatableProps(el) {
	    var obj = {
	      position: vector.clone(el.position),
	      rotation: el.rotation
	    };

	    if (el.shape) {
	      obj.shape = zrUtil.extend({}, el.shape);
	    }

	    return obj;
	  }

	  var elMap1 = getElMap(g1);
	  g2.traverse(function (el) {
	    if (!el.isGroup && el.anid) {
	      var oldEl = elMap1[el.anid];

	      if (oldEl) {
	        var newProp = getAnimatableProps(el);
	        el.attr(getAnimatableProps(oldEl));
	        updateProps(el, newProp, animatableModel, el.dataIndex);
	      } // else {
	      //     if (el.previousProps) {
	      //         graphic.updateProps
	      //     }
	      // }

	    }
	  });
	}
	/**
	 * @param {Array.<Array.<number>>} points Like: [[23, 44], [53, 66], ...]
	 * @param {Object} rect {x, y, width, height}
	 * @return {Array.<Array.<number>>} A new clipped points.
	 */


	function clipPointsByRect(points, rect) {
	  return zrUtil.map(points, function (point) {
	    var x = point[0];
	    x = mathMax(x, rect.x);
	    x = mathMin(x, rect.x + rect.width);
	    var y = point[1];
	    y = mathMax(y, rect.y);
	    y = mathMin(y, rect.y + rect.height);
	    return [x, y];
	  });
	}
	/**
	 * @param {Object} targetRect {x, y, width, height}
	 * @param {Object} rect {x, y, width, height}
	 * @return {Object} A new clipped rect. If rect size are negative, return undefined.
	 */


	function clipRectByRect(targetRect, rect) {
	  var x = mathMax(targetRect.x, rect.x);
	  var x2 = mathMin(targetRect.x + targetRect.width, rect.x + rect.width);
	  var y = mathMax(targetRect.y, rect.y);
	  var y2 = mathMin(targetRect.y + targetRect.height, rect.y + rect.height);

	  if (x2 >= x && y2 >= y) {
	    return {
	      x: x,
	      y: y,
	      width: x2 - x,
	      height: y2 - y
	    };
	  }
	}
	/**
	 * @param {string} iconStr Support 'image://' or 'path://' or direct svg path.
	 * @param {Object} [opt] Properties of `module:zrender/Element`, except `style`.
	 * @param {Object} [rect] {x, y, width, height}
	 * @return {module:zrender/Element} Icon path or image element.
	 */


	function createIcon(iconStr, opt, rect) {
	  opt = zrUtil.extend({
	    rectHover: true
	  }, opt);
	  var style = opt.style = {
	    strokeNoScale: true
	  };
	  rect = rect || {
	    x: -1,
	    y: -1,
	    width: 2,
	    height: 2
	  };

	  if (iconStr) {
	    return iconStr.indexOf('image://') === 0 ? (style.image = iconStr.slice(8), zrUtil.defaults(style, rect), new ZImage(opt)) : makePath(iconStr.replace('path://', ''), opt, rect, 'center');
	  }
	}

	exports.extendShape = extendShape;
	exports.extendPath = extendPath;
	exports.makePath = makePath;
	exports.makeImage = makeImage;
	exports.mergePath = mergePath;
	exports.resizePath = resizePath;
	exports.subPixelOptimizeLine = subPixelOptimizeLine;
	exports.subPixelOptimizeRect = subPixelOptimizeRect;
	exports.subPixelOptimize = subPixelOptimize;
	exports.setHoverStyle = setHoverStyle;
	exports.setLabelStyle = setLabelStyle;
	exports.setTextStyle = setTextStyle;
	exports.setText = setText;
	exports.getFont = getFont;
	exports.updateProps = updateProps;
	exports.initProps = initProps;
	exports.getTransform = getTransform;
	exports.applyTransform = applyTransform;
	exports.transformDirection = transformDirection;
	exports.groupTransition = groupTransition;
	exports.clipPointsByRect = clipPointsByRect;
	exports.clipRectByRect = clipRectByRect;
	exports.createIcon = createIcon;

/***/ }),
/* 227 */
/***/ (function(module, exports, __webpack_require__) {

	var Path = __webpack_require__(228);

	var PathProxy = __webpack_require__(229);

	var transformPath = __webpack_require__(239);

	// command chars
	var cc = ['m', 'M', 'l', 'L', 'v', 'V', 'h', 'H', 'z', 'Z', 'c', 'C', 'q', 'Q', 't', 'T', 's', 'S', 'a', 'A'];
	var mathSqrt = Math.sqrt;
	var mathSin = Math.sin;
	var mathCos = Math.cos;
	var PI = Math.PI;

	var vMag = function (v) {
	  return Math.sqrt(v[0] * v[0] + v[1] * v[1]);
	};

	var vRatio = function (u, v) {
	  return (u[0] * v[0] + u[1] * v[1]) / (vMag(u) * vMag(v));
	};

	var vAngle = function (u, v) {
	  return (u[0] * v[1] < u[1] * v[0] ? -1 : 1) * Math.acos(vRatio(u, v));
	};

	function processArc(x1, y1, x2, y2, fa, fs, rx, ry, psiDeg, cmd, path) {
	  var psi = psiDeg * (PI / 180.0);
	  var xp = mathCos(psi) * (x1 - x2) / 2.0 + mathSin(psi) * (y1 - y2) / 2.0;
	  var yp = -1 * mathSin(psi) * (x1 - x2) / 2.0 + mathCos(psi) * (y1 - y2) / 2.0;
	  var lambda = xp * xp / (rx * rx) + yp * yp / (ry * ry);

	  if (lambda > 1) {
	    rx *= mathSqrt(lambda);
	    ry *= mathSqrt(lambda);
	  }

	  var f = (fa === fs ? -1 : 1) * mathSqrt((rx * rx * (ry * ry) - rx * rx * (yp * yp) - ry * ry * (xp * xp)) / (rx * rx * (yp * yp) + ry * ry * (xp * xp))) || 0;
	  var cxp = f * rx * yp / ry;
	  var cyp = f * -ry * xp / rx;
	  var cx = (x1 + x2) / 2.0 + mathCos(psi) * cxp - mathSin(psi) * cyp;
	  var cy = (y1 + y2) / 2.0 + mathSin(psi) * cxp + mathCos(psi) * cyp;
	  var theta = vAngle([1, 0], [(xp - cxp) / rx, (yp - cyp) / ry]);
	  var u = [(xp - cxp) / rx, (yp - cyp) / ry];
	  var v = [(-1 * xp - cxp) / rx, (-1 * yp - cyp) / ry];
	  var dTheta = vAngle(u, v);

	  if (vRatio(u, v) <= -1) {
	    dTheta = PI;
	  }

	  if (vRatio(u, v) >= 1) {
	    dTheta = 0;
	  }

	  if (fs === 0 && dTheta > 0) {
	    dTheta = dTheta - 2 * PI;
	  }

	  if (fs === 1 && dTheta < 0) {
	    dTheta = dTheta + 2 * PI;
	  }

	  path.addData(cmd, cx, cy, rx, ry, theta, dTheta, psi, fs);
	}

	function createPathProxyFromString(data) {
	  if (!data) {
	    return [];
	  } // command string


	  var cs = data.replace(/-/g, ' -').replace(/  /g, ' ').replace(/ /g, ',').replace(/,,/g, ',');
	  var n; // create pipes so that we can split the data

	  for (n = 0; n < cc.length; n++) {
	    cs = cs.replace(new RegExp(cc[n], 'g'), '|' + cc[n]);
	  } // create array


	  var arr = cs.split('|'); // init context point

	  var cpx = 0;
	  var cpy = 0;
	  var path = new PathProxy();
	  var CMD = PathProxy.CMD;
	  var prevCmd;

	  for (n = 1; n < arr.length; n++) {
	    var str = arr[n];
	    var c = str.charAt(0);
	    var off = 0;
	    var p = str.slice(1).replace(/e,-/g, 'e-').split(',');
	    var cmd;

	    if (p.length > 0 && p[0] === '') {
	      p.shift();
	    }

	    for (var i = 0; i < p.length; i++) {
	      p[i] = parseFloat(p[i]);
	    }

	    while (off < p.length && !isNaN(p[off])) {
	      if (isNaN(p[0])) {
	        break;
	      }

	      var ctlPtx;
	      var ctlPty;
	      var rx;
	      var ry;
	      var psi;
	      var fa;
	      var fs;
	      var x1 = cpx;
	      var y1 = cpy; // convert l, H, h, V, and v to L

	      switch (c) {
	        case 'l':
	          cpx += p[off++];
	          cpy += p[off++];
	          cmd = CMD.L;
	          path.addData(cmd, cpx, cpy);
	          break;

	        case 'L':
	          cpx = p[off++];
	          cpy = p[off++];
	          cmd = CMD.L;
	          path.addData(cmd, cpx, cpy);
	          break;

	        case 'm':
	          cpx += p[off++];
	          cpy += p[off++];
	          cmd = CMD.M;
	          path.addData(cmd, cpx, cpy);
	          c = 'l';
	          break;

	        case 'M':
	          cpx = p[off++];
	          cpy = p[off++];
	          cmd = CMD.M;
	          path.addData(cmd, cpx, cpy);
	          c = 'L';
	          break;

	        case 'h':
	          cpx += p[off++];
	          cmd = CMD.L;
	          path.addData(cmd, cpx, cpy);
	          break;

	        case 'H':
	          cpx = p[off++];
	          cmd = CMD.L;
	          path.addData(cmd, cpx, cpy);
	          break;

	        case 'v':
	          cpy += p[off++];
	          cmd = CMD.L;
	          path.addData(cmd, cpx, cpy);
	          break;

	        case 'V':
	          cpy = p[off++];
	          cmd = CMD.L;
	          path.addData(cmd, cpx, cpy);
	          break;

	        case 'C':
	          cmd = CMD.C;
	          path.addData(cmd, p[off++], p[off++], p[off++], p[off++], p[off++], p[off++]);
	          cpx = p[off - 2];
	          cpy = p[off - 1];
	          break;

	        case 'c':
	          cmd = CMD.C;
	          path.addData(cmd, p[off++] + cpx, p[off++] + cpy, p[off++] + cpx, p[off++] + cpy, p[off++] + cpx, p[off++] + cpy);
	          cpx += p[off - 2];
	          cpy += p[off - 1];
	          break;

	        case 'S':
	          ctlPtx = cpx;
	          ctlPty = cpy;
	          var len = path.len();
	          var pathData = path.data;

	          if (prevCmd === CMD.C) {
	            ctlPtx += cpx - pathData[len - 4];
	            ctlPty += cpy - pathData[len - 3];
	          }

	          cmd = CMD.C;
	          x1 = p[off++];
	          y1 = p[off++];
	          cpx = p[off++];
	          cpy = p[off++];
	          path.addData(cmd, ctlPtx, ctlPty, x1, y1, cpx, cpy);
	          break;

	        case 's':
	          ctlPtx = cpx;
	          ctlPty = cpy;
	          var len = path.len();
	          var pathData = path.data;

	          if (prevCmd === CMD.C) {
	            ctlPtx += cpx - pathData[len - 4];
	            ctlPty += cpy - pathData[len - 3];
	          }

	          cmd = CMD.C;
	          x1 = cpx + p[off++];
	          y1 = cpy + p[off++];
	          cpx += p[off++];
	          cpy += p[off++];
	          path.addData(cmd, ctlPtx, ctlPty, x1, y1, cpx, cpy);
	          break;

	        case 'Q':
	          x1 = p[off++];
	          y1 = p[off++];
	          cpx = p[off++];
	          cpy = p[off++];
	          cmd = CMD.Q;
	          path.addData(cmd, x1, y1, cpx, cpy);
	          break;

	        case 'q':
	          x1 = p[off++] + cpx;
	          y1 = p[off++] + cpy;
	          cpx += p[off++];
	          cpy += p[off++];
	          cmd = CMD.Q;
	          path.addData(cmd, x1, y1, cpx, cpy);
	          break;

	        case 'T':
	          ctlPtx = cpx;
	          ctlPty = cpy;
	          var len = path.len();
	          var pathData = path.data;

	          if (prevCmd === CMD.Q) {
	            ctlPtx += cpx - pathData[len - 4];
	            ctlPty += cpy - pathData[len - 3];
	          }

	          cpx = p[off++];
	          cpy = p[off++];
	          cmd = CMD.Q;
	          path.addData(cmd, ctlPtx, ctlPty, cpx, cpy);
	          break;

	        case 't':
	          ctlPtx = cpx;
	          ctlPty = cpy;
	          var len = path.len();
	          var pathData = path.data;

	          if (prevCmd === CMD.Q) {
	            ctlPtx += cpx - pathData[len - 4];
	            ctlPty += cpy - pathData[len - 3];
	          }

	          cpx += p[off++];
	          cpy += p[off++];
	          cmd = CMD.Q;
	          path.addData(cmd, ctlPtx, ctlPty, cpx, cpy);
	          break;

	        case 'A':
	          rx = p[off++];
	          ry = p[off++];
	          psi = p[off++];
	          fa = p[off++];
	          fs = p[off++];
	          x1 = cpx, y1 = cpy;
	          cpx = p[off++];
	          cpy = p[off++];
	          cmd = CMD.A;
	          processArc(x1, y1, cpx, cpy, fa, fs, rx, ry, psi, cmd, path);
	          break;

	        case 'a':
	          rx = p[off++];
	          ry = p[off++];
	          psi = p[off++];
	          fa = p[off++];
	          fs = p[off++];
	          x1 = cpx, y1 = cpy;
	          cpx += p[off++];
	          cpy += p[off++];
	          cmd = CMD.A;
	          processArc(x1, y1, cpx, cpy, fa, fs, rx, ry, psi, cmd, path);
	          break;
	      }
	    }

	    if (c === 'z' || c === 'Z') {
	      cmd = CMD.Z;
	      path.addData(cmd);
	    }

	    prevCmd = cmd;
	  }

	  path.toStatic();
	  return path;
	} // TODO Optimize double memory cost problem


	function createPathOptions(str, opts) {
	  var pathProxy = createPathProxyFromString(str);
	  opts = opts || {};

	  opts.buildPath = function (path) {
	    if (path.setData) {
	      path.setData(pathProxy.data); // Svg and vml renderer don't have context

	      var ctx = path.getContext();

	      if (ctx) {
	        path.rebuildPath(ctx);
	      }
	    } else {
	      var ctx = path;
	      pathProxy.rebuildPath(ctx);
	    }
	  };

	  opts.applyTransform = function (m) {
	    transformPath(pathProxy, m);
	    this.dirty(true);
	  };

	  return opts;
	}
	/**
	 * Create a Path object from path string data
	 * http://www.w3.org/TR/SVG/paths.html#PathData
	 * @param  {Object} opts Other options
	 */


	function createFromString(str, opts) {
	  return new Path(createPathOptions(str, opts));
	}
	/**
	 * Create a Path class from path string data
	 * @param  {string} str
	 * @param  {Object} opts Other options
	 */


	function extendFromString(str, opts) {
	  return Path.extend(createPathOptions(str, opts));
	}
	/**
	 * Merge multiple paths
	 */
	// TODO Apply transform
	// TODO stroke dash
	// TODO Optimize double memory cost problem


	function mergePath(pathEls, opts) {
	  var pathList = [];
	  var len = pathEls.length;

	  for (var i = 0; i < len; i++) {
	    var pathEl = pathEls[i];

	    if (!pathEl.path) {
	      pathEl.createPathProxy();
	    }

	    if (pathEl.__dirtyPath) {
	      pathEl.buildPath(pathEl.path, pathEl.shape, true);
	    }

	    pathList.push(pathEl.path);
	  }

	  var pathBundle = new Path(opts); // Need path proxy.

	  pathBundle.createPathProxy();

	  pathBundle.buildPath = function (path) {
	    path.appendPath(pathList); // Svg and vml renderer don't have context

	    var ctx = path.getContext();

	    if (ctx) {
	      path.rebuildPath(ctx);
	    }
	  };

	  return pathBundle;
	}

	exports.createFromString = createFromString;
	exports.extendFromString = extendFromString;
	exports.mergePath = mergePath;

/***/ }),
/* 228 */
/***/ (function(module, exports, __webpack_require__) {

	var Displayable = __webpack_require__(208);

	var zrUtil = __webpack_require__(181);

	var PathProxy = __webpack_require__(229);

	var pathContain = __webpack_require__(232);

	var Pattern = __webpack_require__(205);

	var getCanvasPattern = Pattern.prototype.getCanvasPattern;
	var abs = Math.abs;
	var pathProxyForDraw = new PathProxy(true);
	/**
	 * @alias module:zrender/graphic/Path
	 * @extends module:zrender/graphic/Displayable
	 * @constructor
	 * @param {Object} opts
	 */

	function Path(opts) {
	  Displayable.call(this, opts);
	  /**
	   * @type {module:zrender/core/PathProxy}
	   * @readOnly
	   */

	  this.path = null;
	}

	Path.prototype = {
	  constructor: Path,
	  type: 'path',
	  __dirtyPath: true,
	  strokeContainThreshold: 5,
	  brush: function (ctx, prevEl) {
	    var style = this.style;
	    var path = this.path || pathProxyForDraw;
	    var hasStroke = style.hasStroke();
	    var hasFill = style.hasFill();
	    var fill = style.fill;
	    var stroke = style.stroke;
	    var hasFillGradient = hasFill && !!fill.colorStops;
	    var hasStrokeGradient = hasStroke && !!stroke.colorStops;
	    var hasFillPattern = hasFill && !!fill.image;
	    var hasStrokePattern = hasStroke && !!stroke.image;
	    style.bind(ctx, this, prevEl);
	    this.setTransform(ctx);

	    if (this.__dirty) {
	      var rect; // Update gradient because bounding rect may changed

	      if (hasFillGradient) {
	        rect = rect || this.getBoundingRect();
	        this._fillGradient = style.getGradient(ctx, fill, rect);
	      }

	      if (hasStrokeGradient) {
	        rect = rect || this.getBoundingRect();
	        this._strokeGradient = style.getGradient(ctx, stroke, rect);
	      }
	    } // Use the gradient or pattern


	    if (hasFillGradient) {
	      // PENDING If may have affect the state
	      ctx.fillStyle = this._fillGradient;
	    } else if (hasFillPattern) {
	      ctx.fillStyle = getCanvasPattern.call(fill, ctx);
	    }

	    if (hasStrokeGradient) {
	      ctx.strokeStyle = this._strokeGradient;
	    } else if (hasStrokePattern) {
	      ctx.strokeStyle = getCanvasPattern.call(stroke, ctx);
	    }

	    var lineDash = style.lineDash;
	    var lineDashOffset = style.lineDashOffset;
	    var ctxLineDash = !!ctx.setLineDash; // Update path sx, sy

	    var scale = this.getGlobalScale();
	    path.setScale(scale[0], scale[1]); // Proxy context
	    // Rebuild path in following 2 cases
	    // 1. Path is dirty
	    // 2. Path needs javascript implemented lineDash stroking.
	    //    In this case, lineDash information will not be saved in PathProxy

	    if (this.__dirtyPath || lineDash && !ctxLineDash && hasStroke) {
	      path.beginPath(ctx); // Setting line dash before build path

	      if (lineDash && !ctxLineDash) {
	        path.setLineDash(lineDash);
	        path.setLineDashOffset(lineDashOffset);
	      }

	      this.buildPath(path, this.shape, false); // Clear path dirty flag

	      if (this.path) {
	        this.__dirtyPath = false;
	      }
	    } else {
	      // Replay path building
	      ctx.beginPath();
	      this.path.rebuildPath(ctx);
	    }

	    hasFill && path.fill(ctx);

	    if (lineDash && ctxLineDash) {
	      ctx.setLineDash(lineDash);
	      ctx.lineDashOffset = lineDashOffset;
	    }

	    hasStroke && path.stroke(ctx);

	    if (lineDash && ctxLineDash) {
	      // PENDING
	      // Remove lineDash
	      ctx.setLineDash([]);
	    } // Draw rect text


	    if (style.text != null) {
	      // Only restore transform when needs draw text.
	      this.restoreTransform(ctx);
	      this.drawRectText(ctx, this.getBoundingRect());
	    }
	  },
	  // When bundling path, some shape may decide if use moveTo to begin a new subpath or closePath
	  // Like in circle
	  buildPath: function (ctx, shapeCfg, inBundle) {},
	  createPathProxy: function () {
	    this.path = new PathProxy();
	  },
	  getBoundingRect: function () {
	    var rect = this._rect;
	    var style = this.style;
	    var needsUpdateRect = !rect;

	    if (needsUpdateRect) {
	      var path = this.path;

	      if (!path) {
	        // Create path on demand.
	        path = this.path = new PathProxy();
	      }

	      if (this.__dirtyPath) {
	        path.beginPath();
	        this.buildPath(path, this.shape, false);
	      }

	      rect = path.getBoundingRect();
	    }

	    this._rect = rect;

	    if (style.hasStroke()) {
	      // Needs update rect with stroke lineWidth when
	      // 1. Element changes scale or lineWidth
	      // 2. Shape is changed
	      var rectWithStroke = this._rectWithStroke || (this._rectWithStroke = rect.clone());

	      if (this.__dirty || needsUpdateRect) {
	        rectWithStroke.copy(rect); // FIXME Must after updateTransform

	        var w = style.lineWidth; // PENDING, Min line width is needed when line is horizontal or vertical

	        var lineScale = style.strokeNoScale ? this.getLineScale() : 1; // Only add extra hover lineWidth when there are no fill

	        if (!style.hasFill()) {
	          w = Math.max(w, this.strokeContainThreshold || 4);
	        } // Consider line width
	        // Line scale can't be 0;


	        if (lineScale > 1e-10) {
	          rectWithStroke.width += w / lineScale;
	          rectWithStroke.height += w / lineScale;
	          rectWithStroke.x -= w / lineScale / 2;
	          rectWithStroke.y -= w / lineScale / 2;
	        }
	      } // Return rect with stroke


	      return rectWithStroke;
	    }

	    return rect;
	  },
	  contain: function (x, y) {
	    var localPos = this.transformCoordToLocal(x, y);
	    var rect = this.getBoundingRect();
	    var style = this.style;
	    x = localPos[0];
	    y = localPos[1];

	    if (rect.contain(x, y)) {
	      var pathData = this.path.data;

	      if (style.hasStroke()) {
	        var lineWidth = style.lineWidth;
	        var lineScale = style.strokeNoScale ? this.getLineScale() : 1; // Line scale can't be 0;

	        if (lineScale > 1e-10) {
	          // Only add extra hover lineWidth when there are no fill
	          if (!style.hasFill()) {
	            lineWidth = Math.max(lineWidth, this.strokeContainThreshold);
	          }

	          if (pathContain.containStroke(pathData, lineWidth / lineScale, x, y)) {
	            return true;
	          }
	        }
	      }

	      if (style.hasFill()) {
	        return pathContain.contain(pathData, x, y);
	      }
	    }

	    return false;
	  },

	  /**
	   * @param  {boolean} dirtyPath
	   */
	  dirty: function (dirtyPath) {
	    if (dirtyPath == null) {
	      dirtyPath = true;
	    } // Only mark dirty, not mark clean


	    if (dirtyPath) {
	      this.__dirtyPath = dirtyPath;
	      this._rect = null;
	    }

	    this.__dirty = true;
	    this.__zr && this.__zr.refresh(); // Used as a clipping path

	    if (this.__clipTarget) {
	      this.__clipTarget.dirty();
	    }
	  },

	  /**
	   * Alias for animate('shape')
	   * @param {boolean} loop
	   */
	  animateShape: function (loop) {
	    return this.animate('shape', loop);
	  },
	  // Overwrite attrKV
	  attrKV: function (key, value) {
	    // FIXME
	    if (key === 'shape') {
	      this.setShape(value);
	      this.__dirtyPath = true;
	      this._rect = null;
	    } else {
	      Displayable.prototype.attrKV.call(this, key, value);
	    }
	  },

	  /**
	   * @param {Object|string} key
	   * @param {*} value
	   */
	  setShape: function (key, value) {
	    var shape = this.shape; // Path from string may not have shape

	    if (shape) {
	      if (zrUtil.isObject(key)) {
	        for (var name in key) {
	          if (key.hasOwnProperty(name)) {
	            shape[name] = key[name];
	          }
	        }
	      } else {
	        shape[key] = value;
	      }

	      this.dirty(true);
	    }

	    return this;
	  },
	  getLineScale: function () {
	    var m = this.transform; // Get the line scale.
	    // Determinant of `m` means how much the area is enlarged by the
	    // transformation. So its square root can be used as a scale factor
	    // for width.

	    return m && abs(m[0] - 1) > 1e-10 && abs(m[3] - 1) > 1e-10 ? Math.sqrt(abs(m[0] * m[3] - m[2] * m[1])) : 1;
	  }
	};
	/**
	 * 扩展一个 Path element, 比如星形，圆等。
	 * Extend a path element
	 * @param {Object} props
	 * @param {string} props.type Path type
	 * @param {Function} props.init Initialize
	 * @param {Function} props.buildPath Overwrite buildPath method
	 * @param {Object} [props.style] Extended default style config
	 * @param {Object} [props.shape] Extended default shape config
	 */

	Path.extend = function (defaults) {
	  var Sub = function (opts) {
	    Path.call(this, opts);

	    if (defaults.style) {
	      // Extend default style
	      this.style.extendFrom(defaults.style, false);
	    } // Extend default shape


	    var defaultShape = defaults.shape;

	    if (defaultShape) {
	      this.shape = this.shape || {};
	      var thisShape = this.shape;

	      for (var name in defaultShape) {
	        if (!thisShape.hasOwnProperty(name) && defaultShape.hasOwnProperty(name)) {
	          thisShape[name] = defaultShape[name];
	        }
	      }
	    }

	    defaults.init && defaults.init.call(this, opts);
	  };

	  zrUtil.inherits(Sub, Path); // FIXME 不能 extend position, rotation 等引用对象

	  for (var name in defaults) {
	    // Extending prototype values and methods
	    if (name !== 'style' && name !== 'shape') {
	      Sub.prototype[name] = defaults[name];
	    }
	  }

	  return Sub;
	};

	zrUtil.inherits(Path, Displayable);
	var _default = Path;
	module.exports = _default;

/***/ }),
/* 229 */
/***/ (function(module, exports, __webpack_require__) {

	var curve = __webpack_require__(230);

	var vec2 = __webpack_require__(183);

	var bbox = __webpack_require__(231);

	var BoundingRect = __webpack_require__(199);

	var _config = __webpack_require__(198);

	var dpr = _config.devicePixelRatio;

	/**
	 * Path 代理，可以在`buildPath`中用于替代`ctx`, 会保存每个path操作的命令到pathCommands属性中
	 * 可以用于 isInsidePath 判断以及获取boundingRect
	 *
	 * @module zrender/core/PathProxy
	 * @author Yi Shen (http://www.github.com/pissang)
	 */
	// TODO getTotalLength, getPointAtLength
	var CMD = {
	  M: 1,
	  L: 2,
	  C: 3,
	  Q: 4,
	  A: 5,
	  Z: 6,
	  // Rect
	  R: 7
	}; // var CMD_MEM_SIZE = {
	//     M: 3,
	//     L: 3,
	//     C: 7,
	//     Q: 5,
	//     A: 9,
	//     R: 5,
	//     Z: 1
	// };

	var min = [];
	var max = [];
	var min2 = [];
	var max2 = [];
	var mathMin = Math.min;
	var mathMax = Math.max;
	var mathCos = Math.cos;
	var mathSin = Math.sin;
	var mathSqrt = Math.sqrt;
	var mathAbs = Math.abs;
	var hasTypedArray = typeof Float32Array != 'undefined';
	/**
	 * @alias module:zrender/core/PathProxy
	 * @constructor
	 */

	var PathProxy = function (notSaveData) {
	  this._saveData = !(notSaveData || false);

	  if (this._saveData) {
	    /**
	     * Path data. Stored as flat array
	     * @type {Array.<Object>}
	     */
	    this.data = [];
	  }

	  this._ctx = null;
	};
	/**
	 * 快速计算Path包围盒（并不是最小包围盒）
	 * @return {Object}
	 */


	PathProxy.prototype = {
	  constructor: PathProxy,
	  _xi: 0,
	  _yi: 0,
	  _x0: 0,
	  _y0: 0,
	  // Unit x, Unit y. Provide for avoiding drawing that too short line segment
	  _ux: 0,
	  _uy: 0,
	  _len: 0,
	  _lineDash: null,
	  _dashOffset: 0,
	  _dashIdx: 0,
	  _dashSum: 0,

	  /**
	   * @readOnly
	   */
	  setScale: function (sx, sy) {
	    this._ux = mathAbs(1 / dpr / sx) || 0;
	    this._uy = mathAbs(1 / dpr / sy) || 0;
	  },
	  getContext: function () {
	    return this._ctx;
	  },

	  /**
	   * @param  {CanvasRenderingContext2D} ctx
	   * @return {module:zrender/core/PathProxy}
	   */
	  beginPath: function (ctx) {
	    this._ctx = ctx;
	    ctx && ctx.beginPath();
	    ctx && (this.dpr = ctx.dpr); // Reset

	    if (this._saveData) {
	      this._len = 0;
	    }

	    if (this._lineDash) {
	      this._lineDash = null;
	      this._dashOffset = 0;
	    }

	    return this;
	  },

	  /**
	   * @param  {number} x
	   * @param  {number} y
	   * @return {module:zrender/core/PathProxy}
	   */
	  moveTo: function (x, y) {
	    this.addData(CMD.M, x, y);
	    this._ctx && this._ctx.moveTo(x, y); // x0, y0, xi, yi 是记录在 _dashedXXXXTo 方法中使用
	    // xi, yi 记录当前点, x0, y0 在 closePath 的时候回到起始点。
	    // 有可能在 beginPath 之后直接调用 lineTo，这时候 x0, y0 需要
	    // 在 lineTo 方法中记录，这里先不考虑这种情况，dashed line 也只在 IE10- 中不支持

	    this._x0 = x;
	    this._y0 = y;
	    this._xi = x;
	    this._yi = y;
	    return this;
	  },

	  /**
	   * @param  {number} x
	   * @param  {number} y
	   * @return {module:zrender/core/PathProxy}
	   */
	  lineTo: function (x, y) {
	    var exceedUnit = mathAbs(x - this._xi) > this._ux || mathAbs(y - this._yi) > this._uy // Force draw the first segment
	    || this._len < 5;
	    this.addData(CMD.L, x, y);

	    if (this._ctx && exceedUnit) {
	      this._needsDash() ? this._dashedLineTo(x, y) : this._ctx.lineTo(x, y);
	    }

	    if (exceedUnit) {
	      this._xi = x;
	      this._yi = y;
	    }

	    return this;
	  },

	  /**
	   * @param  {number} x1
	   * @param  {number} y1
	   * @param  {number} x2
	   * @param  {number} y2
	   * @param  {number} x3
	   * @param  {number} y3
	   * @return {module:zrender/core/PathProxy}
	   */
	  bezierCurveTo: function (x1, y1, x2, y2, x3, y3) {
	    this.addData(CMD.C, x1, y1, x2, y2, x3, y3);

	    if (this._ctx) {
	      this._needsDash() ? this._dashedBezierTo(x1, y1, x2, y2, x3, y3) : this._ctx.bezierCurveTo(x1, y1, x2, y2, x3, y3);
	    }

	    this._xi = x3;
	    this._yi = y3;
	    return this;
	  },

	  /**
	   * @param  {number} x1
	   * @param  {number} y1
	   * @param  {number} x2
	   * @param  {number} y2
	   * @return {module:zrender/core/PathProxy}
	   */
	  quadraticCurveTo: function (x1, y1, x2, y2) {
	    this.addData(CMD.Q, x1, y1, x2, y2);

	    if (this._ctx) {
	      this._needsDash() ? this._dashedQuadraticTo(x1, y1, x2, y2) : this._ctx.quadraticCurveTo(x1, y1, x2, y2);
	    }

	    this._xi = x2;
	    this._yi = y2;
	    return this;
	  },

	  /**
	   * @param  {number} cx
	   * @param  {number} cy
	   * @param  {number} r
	   * @param  {number} startAngle
	   * @param  {number} endAngle
	   * @param  {boolean} anticlockwise
	   * @return {module:zrender/core/PathProxy}
	   */
	  arc: function (cx, cy, r, startAngle, endAngle, anticlockwise) {
	    this.addData(CMD.A, cx, cy, r, r, startAngle, endAngle - startAngle, 0, anticlockwise ? 0 : 1);
	    this._ctx && this._ctx.arc(cx, cy, r, startAngle, endAngle, anticlockwise);
	    this._xi = mathCos(endAngle) * r + cx;
	    this._yi = mathSin(endAngle) * r + cx;
	    return this;
	  },
	  // TODO
	  arcTo: function (x1, y1, x2, y2, radius) {
	    if (this._ctx) {
	      this._ctx.arcTo(x1, y1, x2, y2, radius);
	    }

	    return this;
	  },
	  // TODO
	  rect: function (x, y, w, h) {
	    this._ctx && this._ctx.rect(x, y, w, h);
	    this.addData(CMD.R, x, y, w, h);
	    return this;
	  },

	  /**
	   * @return {module:zrender/core/PathProxy}
	   */
	  closePath: function () {
	    this.addData(CMD.Z);
	    var ctx = this._ctx;
	    var x0 = this._x0;
	    var y0 = this._y0;

	    if (ctx) {
	      this._needsDash() && this._dashedLineTo(x0, y0);
	      ctx.closePath();
	    }

	    this._xi = x0;
	    this._yi = y0;
	    return this;
	  },

	  /**
	   * Context 从外部传入，因为有可能是 rebuildPath 完之后再 fill。
	   * stroke 同样
	   * @param {CanvasRenderingContext2D} ctx
	   * @return {module:zrender/core/PathProxy}
	   */
	  fill: function (ctx) {
	    ctx && ctx.fill();
	    this.toStatic();
	  },

	  /**
	   * @param {CanvasRenderingContext2D} ctx
	   * @return {module:zrender/core/PathProxy}
	   */
	  stroke: function (ctx) {
	    ctx && ctx.stroke();
	    this.toStatic();
	  },

	  /**
	   * 必须在其它绘制命令前调用
	   * Must be invoked before all other path drawing methods
	   * @return {module:zrender/core/PathProxy}
	   */
	  setLineDash: function (lineDash) {
	    if (lineDash instanceof Array) {
	      this._lineDash = lineDash;
	      this._dashIdx = 0;
	      var lineDashSum = 0;

	      for (var i = 0; i < lineDash.length; i++) {
	        lineDashSum += lineDash[i];
	      }

	      this._dashSum = lineDashSum;
	    }

	    return this;
	  },

	  /**
	   * 必须在其它绘制命令前调用
	   * Must be invoked before all other path drawing methods
	   * @return {module:zrender/core/PathProxy}
	   */
	  setLineDashOffset: function (offset) {
	    this._dashOffset = offset;
	    return this;
	  },

	  /**
	   *
	   * @return {boolean}
	   */
	  len: function () {
	    return this._len;
	  },

	  /**
	   * 直接设置 Path 数据
	   */
	  setData: function (data) {
	    var len = data.length;

	    if (!(this.data && this.data.length == len) && hasTypedArray) {
	      this.data = new Float32Array(len);
	    }

	    for (var i = 0; i < len; i++) {
	      this.data[i] = data[i];
	    }

	    this._len = len;
	  },

	  /**
	   * 添加子路径
	   * @param {module:zrender/core/PathProxy|Array.<module:zrender/core/PathProxy>} path
	   */
	  appendPath: function (path) {
	    if (!(path instanceof Array)) {
	      path = [path];
	    }

	    var len = path.length;
	    var appendSize = 0;
	    var offset = this._len;

	    for (var i = 0; i < len; i++) {
	      appendSize += path[i].len();
	    }

	    if (hasTypedArray && this.data instanceof Float32Array) {
	      this.data = new Float32Array(offset + appendSize);
	    }

	    for (var i = 0; i < len; i++) {
	      var appendPathData = path[i].data;

	      for (var k = 0; k < appendPathData.length; k++) {
	        this.data[offset++] = appendPathData[k];
	      }
	    }

	    this._len = offset;
	  },

	  /**
	   * 填充 Path 数据。
	   * 尽量复用而不申明新的数组。大部分图形重绘的指令数据长度都是不变的。
	   */
	  addData: function (cmd) {
	    if (!this._saveData) {
	      return;
	    }

	    var data = this.data;

	    if (this._len + arguments.length > data.length) {
	      // 因为之前的数组已经转换成静态的 Float32Array
	      // 所以不够用时需要扩展一个新的动态数组
	      this._expandData();

	      data = this.data;
	    }

	    for (var i = 0; i < arguments.length; i++) {
	      data[this._len++] = arguments[i];
	    }

	    this._prevCmd = cmd;
	  },
	  _expandData: function () {
	    // Only if data is Float32Array
	    if (!(this.data instanceof Array)) {
	      var newData = [];

	      for (var i = 0; i < this._len; i++) {
	        newData[i] = this.data[i];
	      }

	      this.data = newData;
	    }
	  },

	  /**
	   * If needs js implemented dashed line
	   * @return {boolean}
	   * @private
	   */
	  _needsDash: function () {
	    return this._lineDash;
	  },
	  _dashedLineTo: function (x1, y1) {
	    var dashSum = this._dashSum;
	    var offset = this._dashOffset;
	    var lineDash = this._lineDash;
	    var ctx = this._ctx;
	    var x0 = this._xi;
	    var y0 = this._yi;
	    var dx = x1 - x0;
	    var dy = y1 - y0;
	    var dist = mathSqrt(dx * dx + dy * dy);
	    var x = x0;
	    var y = y0;
	    var dash;
	    var nDash = lineDash.length;
	    var idx;
	    dx /= dist;
	    dy /= dist;

	    if (offset < 0) {
	      // Convert to positive offset
	      offset = dashSum + offset;
	    }

	    offset %= dashSum;
	    x -= offset * dx;
	    y -= offset * dy;

	    while (dx > 0 && x <= x1 || dx < 0 && x >= x1 || dx == 0 && (dy > 0 && y <= y1 || dy < 0 && y >= y1)) {
	      idx = this._dashIdx;
	      dash = lineDash[idx];
	      x += dx * dash;
	      y += dy * dash;
	      this._dashIdx = (idx + 1) % nDash; // Skip positive offset

	      if (dx > 0 && x < x0 || dx < 0 && x > x0 || dy > 0 && y < y0 || dy < 0 && y > y0) {
	        continue;
	      }

	      ctx[idx % 2 ? 'moveTo' : 'lineTo'](dx >= 0 ? mathMin(x, x1) : mathMax(x, x1), dy >= 0 ? mathMin(y, y1) : mathMax(y, y1));
	    } // Offset for next lineTo


	    dx = x - x1;
	    dy = y - y1;
	    this._dashOffset = -mathSqrt(dx * dx + dy * dy);
	  },
	  // Not accurate dashed line to
	  _dashedBezierTo: function (x1, y1, x2, y2, x3, y3) {
	    var dashSum = this._dashSum;
	    var offset = this._dashOffset;
	    var lineDash = this._lineDash;
	    var ctx = this._ctx;
	    var x0 = this._xi;
	    var y0 = this._yi;
	    var t;
	    var dx;
	    var dy;
	    var cubicAt = curve.cubicAt;
	    var bezierLen = 0;
	    var idx = this._dashIdx;
	    var nDash = lineDash.length;
	    var x;
	    var y;
	    var tmpLen = 0;

	    if (offset < 0) {
	      // Convert to positive offset
	      offset = dashSum + offset;
	    }

	    offset %= dashSum; // Bezier approx length

	    for (t = 0; t < 1; t += 0.1) {
	      dx = cubicAt(x0, x1, x2, x3, t + 0.1) - cubicAt(x0, x1, x2, x3, t);
	      dy = cubicAt(y0, y1, y2, y3, t + 0.1) - cubicAt(y0, y1, y2, y3, t);
	      bezierLen += mathSqrt(dx * dx + dy * dy);
	    } // Find idx after add offset


	    for (; idx < nDash; idx++) {
	      tmpLen += lineDash[idx];

	      if (tmpLen > offset) {
	        break;
	      }
	    }

	    t = (tmpLen - offset) / bezierLen;

	    while (t <= 1) {
	      x = cubicAt(x0, x1, x2, x3, t);
	      y = cubicAt(y0, y1, y2, y3, t); // Use line to approximate dashed bezier
	      // Bad result if dash is long

	      idx % 2 ? ctx.moveTo(x, y) : ctx.lineTo(x, y);
	      t += lineDash[idx] / bezierLen;
	      idx = (idx + 1) % nDash;
	    } // Finish the last segment and calculate the new offset


	    idx % 2 !== 0 && ctx.lineTo(x3, y3);
	    dx = x3 - x;
	    dy = y3 - y;
	    this._dashOffset = -mathSqrt(dx * dx + dy * dy);
	  },
	  _dashedQuadraticTo: function (x1, y1, x2, y2) {
	    // Convert quadratic to cubic using degree elevation
	    var x3 = x2;
	    var y3 = y2;
	    x2 = (x2 + 2 * x1) / 3;
	    y2 = (y2 + 2 * y1) / 3;
	    x1 = (this._xi + 2 * x1) / 3;
	    y1 = (this._yi + 2 * y1) / 3;

	    this._dashedBezierTo(x1, y1, x2, y2, x3, y3);
	  },

	  /**
	   * 转成静态的 Float32Array 减少堆内存占用
	   * Convert dynamic array to static Float32Array
	   */
	  toStatic: function () {
	    var data = this.data;

	    if (data instanceof Array) {
	      data.length = this._len;

	      if (hasTypedArray) {
	        this.data = new Float32Array(data);
	      }
	    }
	  },

	  /**
	   * @return {module:zrender/core/BoundingRect}
	   */
	  getBoundingRect: function () {
	    min[0] = min[1] = min2[0] = min2[1] = Number.MAX_VALUE;
	    max[0] = max[1] = max2[0] = max2[1] = -Number.MAX_VALUE;
	    var data = this.data;
	    var xi = 0;
	    var yi = 0;
	    var x0 = 0;
	    var y0 = 0;

	    for (var i = 0; i < data.length;) {
	      var cmd = data[i++];

	      if (i == 1) {
	        // 如果第一个命令是 L, C, Q
	        // 则 previous point 同绘制命令的第一个 point
	        //
	        // 第一个命令为 Arc 的情况下会在后面特殊处理
	        xi = data[i];
	        yi = data[i + 1];
	        x0 = xi;
	        y0 = yi;
	      }

	      switch (cmd) {
	        case CMD.M:
	          // moveTo 命令重新创建一个新的 subpath, 并且更新新的起点
	          // 在 closePath 的时候使用
	          x0 = data[i++];
	          y0 = data[i++];
	          xi = x0;
	          yi = y0;
	          min2[0] = x0;
	          min2[1] = y0;
	          max2[0] = x0;
	          max2[1] = y0;
	          break;

	        case CMD.L:
	          bbox.fromLine(xi, yi, data[i], data[i + 1], min2, max2);
	          xi = data[i++];
	          yi = data[i++];
	          break;

	        case CMD.C:
	          bbox.fromCubic(xi, yi, data[i++], data[i++], data[i++], data[i++], data[i], data[i + 1], min2, max2);
	          xi = data[i++];
	          yi = data[i++];
	          break;

	        case CMD.Q:
	          bbox.fromQuadratic(xi, yi, data[i++], data[i++], data[i], data[i + 1], min2, max2);
	          xi = data[i++];
	          yi = data[i++];
	          break;

	        case CMD.A:
	          // TODO Arc 判断的开销比较大
	          var cx = data[i++];
	          var cy = data[i++];
	          var rx = data[i++];
	          var ry = data[i++];
	          var startAngle = data[i++];
	          var endAngle = data[i++] + startAngle; // TODO Arc 旋转

	          var psi = data[i++];
	          var anticlockwise = 1 - data[i++];

	          if (i == 1) {
	            // 直接使用 arc 命令
	            // 第一个命令起点还未定义
	            x0 = mathCos(startAngle) * rx + cx;
	            y0 = mathSin(startAngle) * ry + cy;
	          }

	          bbox.fromArc(cx, cy, rx, ry, startAngle, endAngle, anticlockwise, min2, max2);
	          xi = mathCos(endAngle) * rx + cx;
	          yi = mathSin(endAngle) * ry + cy;
	          break;

	        case CMD.R:
	          x0 = xi = data[i++];
	          y0 = yi = data[i++];
	          var width = data[i++];
	          var height = data[i++]; // Use fromLine

	          bbox.fromLine(x0, y0, x0 + width, y0 + height, min2, max2);
	          break;

	        case CMD.Z:
	          xi = x0;
	          yi = y0;
	          break;
	      } // Union


	      vec2.min(min, min, min2);
	      vec2.max(max, max, max2);
	    } // No data


	    if (i === 0) {
	      min[0] = min[1] = max[0] = max[1] = 0;
	    }

	    return new BoundingRect(min[0], min[1], max[0] - min[0], max[1] - min[1]);
	  },

	  /**
	   * Rebuild path from current data
	   * Rebuild path will not consider javascript implemented line dash.
	   * @param {CanvasRenderingContext2D} ctx
	   */
	  rebuildPath: function (ctx) {
	    var d = this.data;
	    var x0, y0;
	    var xi, yi;
	    var x, y;
	    var ux = this._ux;
	    var uy = this._uy;
	    var len = this._len;

	    for (var i = 0; i < len;) {
	      var cmd = d[i++];

	      if (i == 1) {
	        // 如果第一个命令是 L, C, Q
	        // 则 previous point 同绘制命令的第一个 point
	        //
	        // 第一个命令为 Arc 的情况下会在后面特殊处理
	        xi = d[i];
	        yi = d[i + 1];
	        x0 = xi;
	        y0 = yi;
	      }

	      switch (cmd) {
	        case CMD.M:
	          x0 = xi = d[i++];
	          y0 = yi = d[i++];
	          ctx.moveTo(xi, yi);
	          break;

	        case CMD.L:
	          x = d[i++];
	          y = d[i++]; // Not draw too small seg between

	          if (mathAbs(x - xi) > ux || mathAbs(y - yi) > uy || i === len - 1) {
	            ctx.lineTo(x, y);
	            xi = x;
	            yi = y;
	          }

	          break;

	        case CMD.C:
	          ctx.bezierCurveTo(d[i++], d[i++], d[i++], d[i++], d[i++], d[i++]);
	          xi = d[i - 2];
	          yi = d[i - 1];
	          break;

	        case CMD.Q:
	          ctx.quadraticCurveTo(d[i++], d[i++], d[i++], d[i++]);
	          xi = d[i - 2];
	          yi = d[i - 1];
	          break;

	        case CMD.A:
	          var cx = d[i++];
	          var cy = d[i++];
	          var rx = d[i++];
	          var ry = d[i++];
	          var theta = d[i++];
	          var dTheta = d[i++];
	          var psi = d[i++];
	          var fs = d[i++];
	          var r = rx > ry ? rx : ry;
	          var scaleX = rx > ry ? 1 : rx / ry;
	          var scaleY = rx > ry ? ry / rx : 1;
	          var isEllipse = Math.abs(rx - ry) > 1e-3;
	          var endAngle = theta + dTheta;

	          if (isEllipse) {
	            ctx.translate(cx, cy);
	            ctx.rotate(psi);
	            ctx.scale(scaleX, scaleY);
	            ctx.arc(0, 0, r, theta, endAngle, 1 - fs);
	            ctx.scale(1 / scaleX, 1 / scaleY);
	            ctx.rotate(-psi);
	            ctx.translate(-cx, -cy);
	          } else {
	            ctx.arc(cx, cy, r, theta, endAngle, 1 - fs);
	          }

	          if (i == 1) {
	            // 直接使用 arc 命令
	            // 第一个命令起点还未定义
	            x0 = mathCos(theta) * rx + cx;
	            y0 = mathSin(theta) * ry + cy;
	          }

	          xi = mathCos(endAngle) * rx + cx;
	          yi = mathSin(endAngle) * ry + cy;
	          break;

	        case CMD.R:
	          x0 = xi = d[i];
	          y0 = yi = d[i + 1];
	          ctx.rect(d[i++], d[i++], d[i++], d[i++]);
	          break;

	        case CMD.Z:
	          ctx.closePath();
	          xi = x0;
	          yi = y0;
	      }
	    }
	  }
	};
	PathProxy.CMD = CMD;
	var _default = PathProxy;
	module.exports = _default;

/***/ }),
/* 230 */
/***/ (function(module, exports, __webpack_require__) {

	var _vector = __webpack_require__(183);

	var v2Create = _vector.create;
	var v2DistSquare = _vector.distSquare;

	/**
	 * 曲线辅助模块
	 * @module zrender/core/curve
	 * @author pissang(https://www.github.com/pissang)
	 */
	var mathPow = Math.pow;
	var mathSqrt = Math.sqrt;
	var EPSILON = 1e-8;
	var EPSILON_NUMERIC = 1e-4;
	var THREE_SQRT = mathSqrt(3);
	var ONE_THIRD = 1 / 3; // 临时变量

	var _v0 = v2Create();

	var _v1 = v2Create();

	var _v2 = v2Create();

	function isAroundZero(val) {
	  return val > -EPSILON && val < EPSILON;
	}

	function isNotAroundZero(val) {
	  return val > EPSILON || val < -EPSILON;
	}
	/**
	 * 计算三次贝塞尔值
	 * @memberOf module:zrender/core/curve
	 * @param  {number} p0
	 * @param  {number} p1
	 * @param  {number} p2
	 * @param  {number} p3
	 * @param  {number} t
	 * @return {number}
	 */


	function cubicAt(p0, p1, p2, p3, t) {
	  var onet = 1 - t;
	  return onet * onet * (onet * p0 + 3 * t * p1) + t * t * (t * p3 + 3 * onet * p2);
	}
	/**
	 * 计算三次贝塞尔导数值
	 * @memberOf module:zrender/core/curve
	 * @param  {number} p0
	 * @param  {number} p1
	 * @param  {number} p2
	 * @param  {number} p3
	 * @param  {number} t
	 * @return {number}
	 */


	function cubicDerivativeAt(p0, p1, p2, p3, t) {
	  var onet = 1 - t;
	  return 3 * (((p1 - p0) * onet + 2 * (p2 - p1) * t) * onet + (p3 - p2) * t * t);
	}
	/**
	 * 计算三次贝塞尔方程根，使用盛金公式
	 * @memberOf module:zrender/core/curve
	 * @param  {number} p0
	 * @param  {number} p1
	 * @param  {number} p2
	 * @param  {number} p3
	 * @param  {number} val
	 * @param  {Array.<number>} roots
	 * @return {number} 有效根数目
	 */


	function cubicRootAt(p0, p1, p2, p3, val, roots) {
	  // Evaluate roots of cubic functions
	  var a = p3 + 3 * (p1 - p2) - p0;
	  var b = 3 * (p2 - p1 * 2 + p0);
	  var c = 3 * (p1 - p0);
	  var d = p0 - val;
	  var A = b * b - 3 * a * c;
	  var B = b * c - 9 * a * d;
	  var C = c * c - 3 * b * d;
	  var n = 0;

	  if (isAroundZero(A) && isAroundZero(B)) {
	    if (isAroundZero(b)) {
	      roots[0] = 0;
	    } else {
	      var t1 = -c / b; //t1, t2, t3, b is not zero

	      if (t1 >= 0 && t1 <= 1) {
	        roots[n++] = t1;
	      }
	    }
	  } else {
	    var disc = B * B - 4 * A * C;

	    if (isAroundZero(disc)) {
	      var K = B / A;
	      var t1 = -b / a + K; // t1, a is not zero

	      var t2 = -K / 2; // t2, t3

	      if (t1 >= 0 && t1 <= 1) {
	        roots[n++] = t1;
	      }

	      if (t2 >= 0 && t2 <= 1) {
	        roots[n++] = t2;
	      }
	    } else if (disc > 0) {
	      var discSqrt = mathSqrt(disc);
	      var Y1 = A * b + 1.5 * a * (-B + discSqrt);
	      var Y2 = A * b + 1.5 * a * (-B - discSqrt);

	      if (Y1 < 0) {
	        Y1 = -mathPow(-Y1, ONE_THIRD);
	      } else {
	        Y1 = mathPow(Y1, ONE_THIRD);
	      }

	      if (Y2 < 0) {
	        Y2 = -mathPow(-Y2, ONE_THIRD);
	      } else {
	        Y2 = mathPow(Y2, ONE_THIRD);
	      }

	      var t1 = (-b - (Y1 + Y2)) / (3 * a);

	      if (t1 >= 0 && t1 <= 1) {
	        roots[n++] = t1;
	      }
	    } else {
	      var T = (2 * A * b - 3 * a * B) / (2 * mathSqrt(A * A * A));
	      var theta = Math.acos(T) / 3;
	      var ASqrt = mathSqrt(A);
	      var tmp = Math.cos(theta);
	      var t1 = (-b - 2 * ASqrt * tmp) / (3 * a);
	      var t2 = (-b + ASqrt * (tmp + THREE_SQRT * Math.sin(theta))) / (3 * a);
	      var t3 = (-b + ASqrt * (tmp - THREE_SQRT * Math.sin(theta))) / (3 * a);

	      if (t1 >= 0 && t1 <= 1) {
	        roots[n++] = t1;
	      }

	      if (t2 >= 0 && t2 <= 1) {
	        roots[n++] = t2;
	      }

	      if (t3 >= 0 && t3 <= 1) {
	        roots[n++] = t3;
	      }
	    }
	  }

	  return n;
	}
	/**
	 * 计算三次贝塞尔方程极限值的位置
	 * @memberOf module:zrender/core/curve
	 * @param  {number} p0
	 * @param  {number} p1
	 * @param  {number} p2
	 * @param  {number} p3
	 * @param  {Array.<number>} extrema
	 * @return {number} 有效数目
	 */


	function cubicExtrema(p0, p1, p2, p3, extrema) {
	  var b = 6 * p2 - 12 * p1 + 6 * p0;
	  var a = 9 * p1 + 3 * p3 - 3 * p0 - 9 * p2;
	  var c = 3 * p1 - 3 * p0;
	  var n = 0;

	  if (isAroundZero(a)) {
	    if (isNotAroundZero(b)) {
	      var t1 = -c / b;

	      if (t1 >= 0 && t1 <= 1) {
	        extrema[n++] = t1;
	      }
	    }
	  } else {
	    var disc = b * b - 4 * a * c;

	    if (isAroundZero(disc)) {
	      extrema[0] = -b / (2 * a);
	    } else if (disc > 0) {
	      var discSqrt = mathSqrt(disc);
	      var t1 = (-b + discSqrt) / (2 * a);
	      var t2 = (-b - discSqrt) / (2 * a);

	      if (t1 >= 0 && t1 <= 1) {
	        extrema[n++] = t1;
	      }

	      if (t2 >= 0 && t2 <= 1) {
	        extrema[n++] = t2;
	      }
	    }
	  }

	  return n;
	}
	/**
	 * 细分三次贝塞尔曲线
	 * @memberOf module:zrender/core/curve
	 * @param  {number} p0
	 * @param  {number} p1
	 * @param  {number} p2
	 * @param  {number} p3
	 * @param  {number} t
	 * @param  {Array.<number>} out
	 */


	function cubicSubdivide(p0, p1, p2, p3, t, out) {
	  var p01 = (p1 - p0) * t + p0;
	  var p12 = (p2 - p1) * t + p1;
	  var p23 = (p3 - p2) * t + p2;
	  var p012 = (p12 - p01) * t + p01;
	  var p123 = (p23 - p12) * t + p12;
	  var p0123 = (p123 - p012) * t + p012; // Seg0

	  out[0] = p0;
	  out[1] = p01;
	  out[2] = p012;
	  out[3] = p0123; // Seg1

	  out[4] = p0123;
	  out[5] = p123;
	  out[6] = p23;
	  out[7] = p3;
	}
	/**
	 * 投射点到三次贝塞尔曲线上，返回投射距离。
	 * 投射点有可能会有一个或者多个，这里只返回其中距离最短的一个。
	 * @param {number} x0
	 * @param {number} y0
	 * @param {number} x1
	 * @param {number} y1
	 * @param {number} x2
	 * @param {number} y2
	 * @param {number} x3
	 * @param {number} y3
	 * @param {number} x
	 * @param {number} y
	 * @param {Array.<number>} [out] 投射点
	 * @return {number}
	 */


	function cubicProjectPoint(x0, y0, x1, y1, x2, y2, x3, y3, x, y, out) {
	  // http://pomax.github.io/bezierinfo/#projections
	  var t;
	  var interval = 0.005;
	  var d = Infinity;
	  var prev;
	  var next;
	  var d1;
	  var d2;
	  _v0[0] = x;
	  _v0[1] = y; // 先粗略估计一下可能的最小距离的 t 值
	  // PENDING

	  for (var _t = 0; _t < 1; _t += 0.05) {
	    _v1[0] = cubicAt(x0, x1, x2, x3, _t);
	    _v1[1] = cubicAt(y0, y1, y2, y3, _t);
	    d1 = v2DistSquare(_v0, _v1);

	    if (d1 < d) {
	      t = _t;
	      d = d1;
	    }
	  }

	  d = Infinity; // At most 32 iteration

	  for (var i = 0; i < 32; i++) {
	    if (interval < EPSILON_NUMERIC) {
	      break;
	    }

	    prev = t - interval;
	    next = t + interval; // t - interval

	    _v1[0] = cubicAt(x0, x1, x2, x3, prev);
	    _v1[1] = cubicAt(y0, y1, y2, y3, prev);
	    d1 = v2DistSquare(_v1, _v0);

	    if (prev >= 0 && d1 < d) {
	      t = prev;
	      d = d1;
	    } else {
	      // t + interval
	      _v2[0] = cubicAt(x0, x1, x2, x3, next);
	      _v2[1] = cubicAt(y0, y1, y2, y3, next);
	      d2 = v2DistSquare(_v2, _v0);

	      if (next <= 1 && d2 < d) {
	        t = next;
	        d = d2;
	      } else {
	        interval *= 0.5;
	      }
	    }
	  } // t


	  if (out) {
	    out[0] = cubicAt(x0, x1, x2, x3, t);
	    out[1] = cubicAt(y0, y1, y2, y3, t);
	  } // console.log(interval, i);


	  return mathSqrt(d);
	}
	/**
	 * 计算二次方贝塞尔值
	 * @param  {number} p0
	 * @param  {number} p1
	 * @param  {number} p2
	 * @param  {number} t
	 * @return {number}
	 */


	function quadraticAt(p0, p1, p2, t) {
	  var onet = 1 - t;
	  return onet * (onet * p0 + 2 * t * p1) + t * t * p2;
	}
	/**
	 * 计算二次方贝塞尔导数值
	 * @param  {number} p0
	 * @param  {number} p1
	 * @param  {number} p2
	 * @param  {number} t
	 * @return {number}
	 */


	function quadraticDerivativeAt(p0, p1, p2, t) {
	  return 2 * ((1 - t) * (p1 - p0) + t * (p2 - p1));
	}
	/**
	 * 计算二次方贝塞尔方程根
	 * @param  {number} p0
	 * @param  {number} p1
	 * @param  {number} p2
	 * @param  {number} t
	 * @param  {Array.<number>} roots
	 * @return {number} 有效根数目
	 */


	function quadraticRootAt(p0, p1, p2, val, roots) {
	  var a = p0 - 2 * p1 + p2;
	  var b = 2 * (p1 - p0);
	  var c = p0 - val;
	  var n = 0;

	  if (isAroundZero(a)) {
	    if (isNotAroundZero(b)) {
	      var t1 = -c / b;

	      if (t1 >= 0 && t1 <= 1) {
	        roots[n++] = t1;
	      }
	    }
	  } else {
	    var disc = b * b - 4 * a * c;

	    if (isAroundZero(disc)) {
	      var t1 = -b / (2 * a);

	      if (t1 >= 0 && t1 <= 1) {
	        roots[n++] = t1;
	      }
	    } else if (disc > 0) {
	      var discSqrt = mathSqrt(disc);
	      var t1 = (-b + discSqrt) / (2 * a);
	      var t2 = (-b - discSqrt) / (2 * a);

	      if (t1 >= 0 && t1 <= 1) {
	        roots[n++] = t1;
	      }

	      if (t2 >= 0 && t2 <= 1) {
	        roots[n++] = t2;
	      }
	    }
	  }

	  return n;
	}
	/**
	 * 计算二次贝塞尔方程极限值
	 * @memberOf module:zrender/core/curve
	 * @param  {number} p0
	 * @param  {number} p1
	 * @param  {number} p2
	 * @return {number}
	 */


	function quadraticExtremum(p0, p1, p2) {
	  var divider = p0 + p2 - 2 * p1;

	  if (divider === 0) {
	    // p1 is center of p0 and p2
	    return 0.5;
	  } else {
	    return (p0 - p1) / divider;
	  }
	}
	/**
	 * 细分二次贝塞尔曲线
	 * @memberOf module:zrender/core/curve
	 * @param  {number} p0
	 * @param  {number} p1
	 * @param  {number} p2
	 * @param  {number} t
	 * @param  {Array.<number>} out
	 */


	function quadraticSubdivide(p0, p1, p2, t, out) {
	  var p01 = (p1 - p0) * t + p0;
	  var p12 = (p2 - p1) * t + p1;
	  var p012 = (p12 - p01) * t + p01; // Seg0

	  out[0] = p0;
	  out[1] = p01;
	  out[2] = p012; // Seg1

	  out[3] = p012;
	  out[4] = p12;
	  out[5] = p2;
	}
	/**
	 * 投射点到二次贝塞尔曲线上，返回投射距离。
	 * 投射点有可能会有一个或者多个，这里只返回其中距离最短的一个。
	 * @param {number} x0
	 * @param {number} y0
	 * @param {number} x1
	 * @param {number} y1
	 * @param {number} x2
	 * @param {number} y2
	 * @param {number} x
	 * @param {number} y
	 * @param {Array.<number>} out 投射点
	 * @return {number}
	 */


	function quadraticProjectPoint(x0, y0, x1, y1, x2, y2, x, y, out) {
	  // http://pomax.github.io/bezierinfo/#projections
	  var t;
	  var interval = 0.005;
	  var d = Infinity;
	  _v0[0] = x;
	  _v0[1] = y; // 先粗略估计一下可能的最小距离的 t 值
	  // PENDING

	  for (var _t = 0; _t < 1; _t += 0.05) {
	    _v1[0] = quadraticAt(x0, x1, x2, _t);
	    _v1[1] = quadraticAt(y0, y1, y2, _t);
	    var d1 = v2DistSquare(_v0, _v1);

	    if (d1 < d) {
	      t = _t;
	      d = d1;
	    }
	  }

	  d = Infinity; // At most 32 iteration

	  for (var i = 0; i < 32; i++) {
	    if (interval < EPSILON_NUMERIC) {
	      break;
	    }

	    var prev = t - interval;
	    var next = t + interval; // t - interval

	    _v1[0] = quadraticAt(x0, x1, x2, prev);
	    _v1[1] = quadraticAt(y0, y1, y2, prev);
	    var d1 = v2DistSquare(_v1, _v0);

	    if (prev >= 0 && d1 < d) {
	      t = prev;
	      d = d1;
	    } else {
	      // t + interval
	      _v2[0] = quadraticAt(x0, x1, x2, next);
	      _v2[1] = quadraticAt(y0, y1, y2, next);
	      var d2 = v2DistSquare(_v2, _v0);

	      if (next <= 1 && d2 < d) {
	        t = next;
	        d = d2;
	      } else {
	        interval *= 0.5;
	      }
	    }
	  } // t


	  if (out) {
	    out[0] = quadraticAt(x0, x1, x2, t);
	    out[1] = quadraticAt(y0, y1, y2, t);
	  } // console.log(interval, i);


	  return mathSqrt(d);
	}

	exports.cubicAt = cubicAt;
	exports.cubicDerivativeAt = cubicDerivativeAt;
	exports.cubicRootAt = cubicRootAt;
	exports.cubicExtrema = cubicExtrema;
	exports.cubicSubdivide = cubicSubdivide;
	exports.cubicProjectPoint = cubicProjectPoint;
	exports.quadraticAt = quadraticAt;
	exports.quadraticDerivativeAt = quadraticDerivativeAt;
	exports.quadraticRootAt = quadraticRootAt;
	exports.quadraticExtremum = quadraticExtremum;
	exports.quadraticSubdivide = quadraticSubdivide;
	exports.quadraticProjectPoint = quadraticProjectPoint;

/***/ }),
/* 231 */
/***/ (function(module, exports, __webpack_require__) {

	var vec2 = __webpack_require__(183);

	var curve = __webpack_require__(230);

	/**
	 * @author Yi Shen(https://github.com/pissang)
	 */
	var mathMin = Math.min;
	var mathMax = Math.max;
	var mathSin = Math.sin;
	var mathCos = Math.cos;
	var PI2 = Math.PI * 2;
	var start = vec2.create();
	var end = vec2.create();
	var extremity = vec2.create();
	/**
	 * 从顶点数组中计算出最小包围盒，写入`min`和`max`中
	 * @module zrender/core/bbox
	 * @param {Array<Object>} points 顶点数组
	 * @param {number} min
	 * @param {number} max
	 */

	function fromPoints(points, min, max) {
	  if (points.length === 0) {
	    return;
	  }

	  var p = points[0];
	  var left = p[0];
	  var right = p[0];
	  var top = p[1];
	  var bottom = p[1];
	  var i;

	  for (i = 1; i < points.length; i++) {
	    p = points[i];
	    left = mathMin(left, p[0]);
	    right = mathMax(right, p[0]);
	    top = mathMin(top, p[1]);
	    bottom = mathMax(bottom, p[1]);
	  }

	  min[0] = left;
	  min[1] = top;
	  max[0] = right;
	  max[1] = bottom;
	}
	/**
	 * @memberOf module:zrender/core/bbox
	 * @param {number} x0
	 * @param {number} y0
	 * @param {number} x1
	 * @param {number} y1
	 * @param {Array.<number>} min
	 * @param {Array.<number>} max
	 */


	function fromLine(x0, y0, x1, y1, min, max) {
	  min[0] = mathMin(x0, x1);
	  min[1] = mathMin(y0, y1);
	  max[0] = mathMax(x0, x1);
	  max[1] = mathMax(y0, y1);
	}

	var xDim = [];
	var yDim = [];
	/**
	 * 从三阶贝塞尔曲线(p0, p1, p2, p3)中计算出最小包围盒，写入`min`和`max`中
	 * @memberOf module:zrender/core/bbox
	 * @param {number} x0
	 * @param {number} y0
	 * @param {number} x1
	 * @param {number} y1
	 * @param {number} x2
	 * @param {number} y2
	 * @param {number} x3
	 * @param {number} y3
	 * @param {Array.<number>} min
	 * @param {Array.<number>} max
	 */

	function fromCubic(x0, y0, x1, y1, x2, y2, x3, y3, min, max) {
	  var cubicExtrema = curve.cubicExtrema;
	  var cubicAt = curve.cubicAt;
	  var i;
	  var n = cubicExtrema(x0, x1, x2, x3, xDim);
	  min[0] = Infinity;
	  min[1] = Infinity;
	  max[0] = -Infinity;
	  max[1] = -Infinity;

	  for (i = 0; i < n; i++) {
	    var x = cubicAt(x0, x1, x2, x3, xDim[i]);
	    min[0] = mathMin(x, min[0]);
	    max[0] = mathMax(x, max[0]);
	  }

	  n = cubicExtrema(y0, y1, y2, y3, yDim);

	  for (i = 0; i < n; i++) {
	    var y = cubicAt(y0, y1, y2, y3, yDim[i]);
	    min[1] = mathMin(y, min[1]);
	    max[1] = mathMax(y, max[1]);
	  }

	  min[0] = mathMin(x0, min[0]);
	  max[0] = mathMax(x0, max[0]);
	  min[0] = mathMin(x3, min[0]);
	  max[0] = mathMax(x3, max[0]);
	  min[1] = mathMin(y0, min[1]);
	  max[1] = mathMax(y0, max[1]);
	  min[1] = mathMin(y3, min[1]);
	  max[1] = mathMax(y3, max[1]);
	}
	/**
	 * 从二阶贝塞尔曲线(p0, p1, p2)中计算出最小包围盒，写入`min`和`max`中
	 * @memberOf module:zrender/core/bbox
	 * @param {number} x0
	 * @param {number} y0
	 * @param {number} x1
	 * @param {number} y1
	 * @param {number} x2
	 * @param {number} y2
	 * @param {Array.<number>} min
	 * @param {Array.<number>} max
	 */


	function fromQuadratic(x0, y0, x1, y1, x2, y2, min, max) {
	  var quadraticExtremum = curve.quadraticExtremum;
	  var quadraticAt = curve.quadraticAt; // Find extremities, where derivative in x dim or y dim is zero

	  var tx = mathMax(mathMin(quadraticExtremum(x0, x1, x2), 1), 0);
	  var ty = mathMax(mathMin(quadraticExtremum(y0, y1, y2), 1), 0);
	  var x = quadraticAt(x0, x1, x2, tx);
	  var y = quadraticAt(y0, y1, y2, ty);
	  min[0] = mathMin(x0, x2, x);
	  min[1] = mathMin(y0, y2, y);
	  max[0] = mathMax(x0, x2, x);
	  max[1] = mathMax(y0, y2, y);
	}
	/**
	 * 从圆弧中计算出最小包围盒，写入`min`和`max`中
	 * @method
	 * @memberOf module:zrender/core/bbox
	 * @param {number} x
	 * @param {number} y
	 * @param {number} rx
	 * @param {number} ry
	 * @param {number} startAngle
	 * @param {number} endAngle
	 * @param {number} anticlockwise
	 * @param {Array.<number>} min
	 * @param {Array.<number>} max
	 */


	function fromArc(x, y, rx, ry, startAngle, endAngle, anticlockwise, min, max) {
	  var vec2Min = vec2.min;
	  var vec2Max = vec2.max;
	  var diff = Math.abs(startAngle - endAngle);

	  if (diff % PI2 < 1e-4 && diff > 1e-4) {
	    // Is a circle
	    min[0] = x - rx;
	    min[1] = y - ry;
	    max[0] = x + rx;
	    max[1] = y + ry;
	    return;
	  }

	  start[0] = mathCos(startAngle) * rx + x;
	  start[1] = mathSin(startAngle) * ry + y;
	  end[0] = mathCos(endAngle) * rx + x;
	  end[1] = mathSin(endAngle) * ry + y;
	  vec2Min(min, start, end);
	  vec2Max(max, start, end); // Thresh to [0, Math.PI * 2]

	  startAngle = startAngle % PI2;

	  if (startAngle < 0) {
	    startAngle = startAngle + PI2;
	  }

	  endAngle = endAngle % PI2;

	  if (endAngle < 0) {
	    endAngle = endAngle + PI2;
	  }

	  if (startAngle > endAngle && !anticlockwise) {
	    endAngle += PI2;
	  } else if (startAngle < endAngle && anticlockwise) {
	    startAngle += PI2;
	  }

	  if (anticlockwise) {
	    var tmp = endAngle;
	    endAngle = startAngle;
	    startAngle = tmp;
	  } // var number = 0;
	  // var step = (anticlockwise ? -Math.PI : Math.PI) / 2;


	  for (var angle = 0; angle < endAngle; angle += Math.PI / 2) {
	    if (angle > startAngle) {
	      extremity[0] = mathCos(angle) * rx + x;
	      extremity[1] = mathSin(angle) * ry + y;
	      vec2Min(min, extremity, min);
	      vec2Max(max, extremity, max);
	    }
	  }
	}

	exports.fromPoints = fromPoints;
	exports.fromLine = fromLine;
	exports.fromCubic = fromCubic;
	exports.fromQuadratic = fromQuadratic;
	exports.fromArc = fromArc;

/***/ }),
/* 232 */
/***/ (function(module, exports, __webpack_require__) {

	var PathProxy = __webpack_require__(229);

	var line = __webpack_require__(233);

	var cubic = __webpack_require__(234);

	var quadratic = __webpack_require__(235);

	var arc = __webpack_require__(236);

	var _util = __webpack_require__(237);

	var normalizeRadian = _util.normalizeRadian;

	var curve = __webpack_require__(230);

	var windingLine = __webpack_require__(238);

	var CMD = PathProxy.CMD;
	var PI2 = Math.PI * 2;
	var EPSILON = 1e-4;

	function isAroundEqual(a, b) {
	  return Math.abs(a - b) < EPSILON;
	} // 临时数组


	var roots = [-1, -1, -1];
	var extrema = [-1, -1];

	function swapExtrema() {
	  var tmp = extrema[0];
	  extrema[0] = extrema[1];
	  extrema[1] = tmp;
	}

	function windingCubic(x0, y0, x1, y1, x2, y2, x3, y3, x, y) {
	  // Quick reject
	  if (y > y0 && y > y1 && y > y2 && y > y3 || y < y0 && y < y1 && y < y2 && y < y3) {
	    return 0;
	  }

	  var nRoots = curve.cubicRootAt(y0, y1, y2, y3, y, roots);

	  if (nRoots === 0) {
	    return 0;
	  } else {
	    var w = 0;
	    var nExtrema = -1;
	    var y0_, y1_;

	    for (var i = 0; i < nRoots; i++) {
	      var t = roots[i]; // Avoid winding error when intersection point is the connect point of two line of polygon

	      var unit = t === 0 || t === 1 ? 0.5 : 1;
	      var x_ = curve.cubicAt(x0, x1, x2, x3, t);

	      if (x_ < x) {
	        // Quick reject
	        continue;
	      }

	      if (nExtrema < 0) {
	        nExtrema = curve.cubicExtrema(y0, y1, y2, y3, extrema);

	        if (extrema[1] < extrema[0] && nExtrema > 1) {
	          swapExtrema();
	        }

	        y0_ = curve.cubicAt(y0, y1, y2, y3, extrema[0]);

	        if (nExtrema > 1) {
	          y1_ = curve.cubicAt(y0, y1, y2, y3, extrema[1]);
	        }
	      }

	      if (nExtrema == 2) {
	        // 分成三段单调函数
	        if (t < extrema[0]) {
	          w += y0_ < y0 ? unit : -unit;
	        } else if (t < extrema[1]) {
	          w += y1_ < y0_ ? unit : -unit;
	        } else {
	          w += y3 < y1_ ? unit : -unit;
	        }
	      } else {
	        // 分成两段单调函数
	        if (t < extrema[0]) {
	          w += y0_ < y0 ? unit : -unit;
	        } else {
	          w += y3 < y0_ ? unit : -unit;
	        }
	      }
	    }

	    return w;
	  }
	}

	function windingQuadratic(x0, y0, x1, y1, x2, y2, x, y) {
	  // Quick reject
	  if (y > y0 && y > y1 && y > y2 || y < y0 && y < y1 && y < y2) {
	    return 0;
	  }

	  var nRoots = curve.quadraticRootAt(y0, y1, y2, y, roots);

	  if (nRoots === 0) {
	    return 0;
	  } else {
	    var t = curve.quadraticExtremum(y0, y1, y2);

	    if (t >= 0 && t <= 1) {
	      var w = 0;
	      var y_ = curve.quadraticAt(y0, y1, y2, t);

	      for (var i = 0; i < nRoots; i++) {
	        // Remove one endpoint.
	        var unit = roots[i] === 0 || roots[i] === 1 ? 0.5 : 1;
	        var x_ = curve.quadraticAt(x0, x1, x2, roots[i]);

	        if (x_ < x) {
	          // Quick reject
	          continue;
	        }

	        if (roots[i] < t) {
	          w += y_ < y0 ? unit : -unit;
	        } else {
	          w += y2 < y_ ? unit : -unit;
	        }
	      }

	      return w;
	    } else {
	      // Remove one endpoint.
	      var unit = roots[0] === 0 || roots[0] === 1 ? 0.5 : 1;
	      var x_ = curve.quadraticAt(x0, x1, x2, roots[0]);

	      if (x_ < x) {
	        // Quick reject
	        return 0;
	      }

	      return y2 < y0 ? unit : -unit;
	    }
	  }
	} // TODO
	// Arc 旋转


	function windingArc(cx, cy, r, startAngle, endAngle, anticlockwise, x, y) {
	  y -= cy;

	  if (y > r || y < -r) {
	    return 0;
	  }

	  var tmp = Math.sqrt(r * r - y * y);
	  roots[0] = -tmp;
	  roots[1] = tmp;
	  var diff = Math.abs(startAngle - endAngle);

	  if (diff < 1e-4) {
	    return 0;
	  }

	  if (diff % PI2 < 1e-4) {
	    // Is a circle
	    startAngle = 0;
	    endAngle = PI2;
	    var dir = anticlockwise ? 1 : -1;

	    if (x >= roots[0] + cx && x <= roots[1] + cx) {
	      return dir;
	    } else {
	      return 0;
	    }
	  }

	  if (anticlockwise) {
	    var tmp = startAngle;
	    startAngle = normalizeRadian(endAngle);
	    endAngle = normalizeRadian(tmp);
	  } else {
	    startAngle = normalizeRadian(startAngle);
	    endAngle = normalizeRadian(endAngle);
	  }

	  if (startAngle > endAngle) {
	    endAngle += PI2;
	  }

	  var w = 0;

	  for (var i = 0; i < 2; i++) {
	    var x_ = roots[i];

	    if (x_ + cx > x) {
	      var angle = Math.atan2(y, x_);
	      var dir = anticlockwise ? 1 : -1;

	      if (angle < 0) {
	        angle = PI2 + angle;
	      }

	      if (angle >= startAngle && angle <= endAngle || angle + PI2 >= startAngle && angle + PI2 <= endAngle) {
	        if (angle > Math.PI / 2 && angle < Math.PI * 1.5) {
	          dir = -dir;
	        }

	        w += dir;
	      }
	    }
	  }

	  return w;
	}

	function containPath(data, lineWidth, isStroke, x, y) {
	  var w = 0;
	  var xi = 0;
	  var yi = 0;
	  var x0 = 0;
	  var y0 = 0;

	  for (var i = 0; i < data.length;) {
	    var cmd = data[i++]; // Begin a new subpath

	    if (cmd === CMD.M && i > 1) {
	      // Close previous subpath
	      if (!isStroke) {
	        w += windingLine(xi, yi, x0, y0, x, y);
	      } // 如果被任何一个 subpath 包含
	      // if (w !== 0) {
	      //     return true;
	      // }

	    }

	    if (i == 1) {
	      // 如果第一个命令是 L, C, Q
	      // 则 previous point 同绘制命令的第一个 point
	      //
	      // 第一个命令为 Arc 的情况下会在后面特殊处理
	      xi = data[i];
	      yi = data[i + 1];
	      x0 = xi;
	      y0 = yi;
	    }

	    switch (cmd) {
	      case CMD.M:
	        // moveTo 命令重新创建一个新的 subpath, 并且更新新的起点
	        // 在 closePath 的时候使用
	        x0 = data[i++];
	        y0 = data[i++];
	        xi = x0;
	        yi = y0;
	        break;

	      case CMD.L:
	        if (isStroke) {
	          if (line.containStroke(xi, yi, data[i], data[i + 1], lineWidth, x, y)) {
	            return true;
	          }
	        } else {
	          // NOTE 在第一个命令为 L, C, Q 的时候会计算出 NaN
	          w += windingLine(xi, yi, data[i], data[i + 1], x, y) || 0;
	        }

	        xi = data[i++];
	        yi = data[i++];
	        break;

	      case CMD.C:
	        if (isStroke) {
	          if (cubic.containStroke(xi, yi, data[i++], data[i++], data[i++], data[i++], data[i], data[i + 1], lineWidth, x, y)) {
	            return true;
	          }
	        } else {
	          w += windingCubic(xi, yi, data[i++], data[i++], data[i++], data[i++], data[i], data[i + 1], x, y) || 0;
	        }

	        xi = data[i++];
	        yi = data[i++];
	        break;

	      case CMD.Q:
	        if (isStroke) {
	          if (quadratic.containStroke(xi, yi, data[i++], data[i++], data[i], data[i + 1], lineWidth, x, y)) {
	            return true;
	          }
	        } else {
	          w += windingQuadratic(xi, yi, data[i++], data[i++], data[i], data[i + 1], x, y) || 0;
	        }

	        xi = data[i++];
	        yi = data[i++];
	        break;

	      case CMD.A:
	        // TODO Arc 判断的开销比较大
	        var cx = data[i++];
	        var cy = data[i++];
	        var rx = data[i++];
	        var ry = data[i++];
	        var theta = data[i++];
	        var dTheta = data[i++]; // TODO Arc 旋转

	        var psi = data[i++];
	        var anticlockwise = 1 - data[i++];
	        var x1 = Math.cos(theta) * rx + cx;
	        var y1 = Math.sin(theta) * ry + cy; // 不是直接使用 arc 命令

	        if (i > 1) {
	          w += windingLine(xi, yi, x1, y1, x, y);
	        } else {
	          // 第一个命令起点还未定义
	          x0 = x1;
	          y0 = y1;
	        } // zr 使用scale来模拟椭圆, 这里也对x做一定的缩放


	        var _x = (x - cx) * ry / rx + cx;

	        if (isStroke) {
	          if (arc.containStroke(cx, cy, ry, theta, theta + dTheta, anticlockwise, lineWidth, _x, y)) {
	            return true;
	          }
	        } else {
	          w += windingArc(cx, cy, ry, theta, theta + dTheta, anticlockwise, _x, y);
	        }

	        xi = Math.cos(theta + dTheta) * rx + cx;
	        yi = Math.sin(theta + dTheta) * ry + cy;
	        break;

	      case CMD.R:
	        x0 = xi = data[i++];
	        y0 = yi = data[i++];
	        var width = data[i++];
	        var height = data[i++];
	        var x1 = x0 + width;
	        var y1 = y0 + height;

	        if (isStroke) {
	          if (line.containStroke(x0, y0, x1, y0, lineWidth, x, y) || line.containStroke(x1, y0, x1, y1, lineWidth, x, y) || line.containStroke(x1, y1, x0, y1, lineWidth, x, y) || line.containStroke(x0, y1, x0, y0, lineWidth, x, y)) {
	            return true;
	          }
	        } else {
	          // FIXME Clockwise ?
	          w += windingLine(x1, y0, x1, y1, x, y);
	          w += windingLine(x0, y1, x0, y0, x, y);
	        }

	        break;

	      case CMD.Z:
	        if (isStroke) {
	          if (line.containStroke(xi, yi, x0, y0, lineWidth, x, y)) {
	            return true;
	          }
	        } else {
	          // Close a subpath
	          w += windingLine(xi, yi, x0, y0, x, y); // 如果被任何一个 subpath 包含
	          // FIXME subpaths may overlap
	          // if (w !== 0) {
	          //     return true;
	          // }
	        }

	        xi = x0;
	        yi = y0;
	        break;
	    }
	  }

	  if (!isStroke && !isAroundEqual(yi, y0)) {
	    w += windingLine(xi, yi, x0, y0, x, y) || 0;
	  }

	  return w !== 0;
	}

	function contain(pathData, x, y) {
	  return containPath(pathData, 0, false, x, y);
	}

	function containStroke(pathData, lineWidth, x, y) {
	  return containPath(pathData, lineWidth, true, x, y);
	}

	exports.contain = contain;
	exports.containStroke = containStroke;

/***/ }),
/* 233 */
/***/ (function(module, exports) {

	/**
	 * 线段包含判断
	 * @param  {number}  x0
	 * @param  {number}  y0
	 * @param  {number}  x1
	 * @param  {number}  y1
	 * @param  {number}  lineWidth
	 * @param  {number}  x
	 * @param  {number}  y
	 * @return {boolean}
	 */
	function containStroke(x0, y0, x1, y1, lineWidth, x, y) {
	  if (lineWidth === 0) {
	    return false;
	  }

	  var _l = lineWidth;
	  var _a = 0;
	  var _b = x0; // Quick reject

	  if (y > y0 + _l && y > y1 + _l || y < y0 - _l && y < y1 - _l || x > x0 + _l && x > x1 + _l || x < x0 - _l && x < x1 - _l) {
	    return false;
	  }

	  if (x0 !== x1) {
	    _a = (y0 - y1) / (x0 - x1);
	    _b = (x0 * y1 - x1 * y0) / (x0 - x1);
	  } else {
	    return Math.abs(x - x0) <= _l / 2;
	  }

	  var tmp = _a * x - y + _b;

	  var _s = tmp * tmp / (_a * _a + 1);

	  return _s <= _l / 2 * _l / 2;
	}

	exports.containStroke = containStroke;

/***/ }),
/* 234 */
/***/ (function(module, exports, __webpack_require__) {

	var curve = __webpack_require__(230);

	/**
	 * 三次贝塞尔曲线描边包含判断
	 * @param  {number}  x0
	 * @param  {number}  y0
	 * @param  {number}  x1
	 * @param  {number}  y1
	 * @param  {number}  x2
	 * @param  {number}  y2
	 * @param  {number}  x3
	 * @param  {number}  y3
	 * @param  {number}  lineWidth
	 * @param  {number}  x
	 * @param  {number}  y
	 * @return {boolean}
	 */
	function containStroke(x0, y0, x1, y1, x2, y2, x3, y3, lineWidth, x, y) {
	  if (lineWidth === 0) {
	    return false;
	  }

	  var _l = lineWidth; // Quick reject

	  if (y > y0 + _l && y > y1 + _l && y > y2 + _l && y > y3 + _l || y < y0 - _l && y < y1 - _l && y < y2 - _l && y < y3 - _l || x > x0 + _l && x > x1 + _l && x > x2 + _l && x > x3 + _l || x < x0 - _l && x < x1 - _l && x < x2 - _l && x < x3 - _l) {
	    return false;
	  }

	  var d = curve.cubicProjectPoint(x0, y0, x1, y1, x2, y2, x3, y3, x, y, null);
	  return d <= _l / 2;
	}

	exports.containStroke = containStroke;

/***/ }),
/* 235 */
/***/ (function(module, exports, __webpack_require__) {

	var _curve = __webpack_require__(230);

	var quadraticProjectPoint = _curve.quadraticProjectPoint;

	/**
	 * 二次贝塞尔曲线描边包含判断
	 * @param  {number}  x0
	 * @param  {number}  y0
	 * @param  {number}  x1
	 * @param  {number}  y1
	 * @param  {number}  x2
	 * @param  {number}  y2
	 * @param  {number}  lineWidth
	 * @param  {number}  x
	 * @param  {number}  y
	 * @return {boolean}
	 */
	function containStroke(x0, y0, x1, y1, x2, y2, lineWidth, x, y) {
	  if (lineWidth === 0) {
	    return false;
	  }

	  var _l = lineWidth; // Quick reject

	  if (y > y0 + _l && y > y1 + _l && y > y2 + _l || y < y0 - _l && y < y1 - _l && y < y2 - _l || x > x0 + _l && x > x1 + _l && x > x2 + _l || x < x0 - _l && x < x1 - _l && x < x2 - _l) {
	    return false;
	  }

	  var d = quadraticProjectPoint(x0, y0, x1, y1, x2, y2, x, y, null);
	  return d <= _l / 2;
	}

	exports.containStroke = containStroke;

/***/ }),
/* 236 */
/***/ (function(module, exports, __webpack_require__) {

	var _util = __webpack_require__(237);

	var normalizeRadian = _util.normalizeRadian;
	var PI2 = Math.PI * 2;
	/**
	 * 圆弧描边包含判断
	 * @param  {number}  cx
	 * @param  {number}  cy
	 * @param  {number}  r
	 * @param  {number}  startAngle
	 * @param  {number}  endAngle
	 * @param  {boolean}  anticlockwise
	 * @param  {number} lineWidth
	 * @param  {number}  x
	 * @param  {number}  y
	 * @return {Boolean}
	 */

	function containStroke(cx, cy, r, startAngle, endAngle, anticlockwise, lineWidth, x, y) {
	  if (lineWidth === 0) {
	    return false;
	  }

	  var _l = lineWidth;
	  x -= cx;
	  y -= cy;
	  var d = Math.sqrt(x * x + y * y);

	  if (d - _l > r || d + _l < r) {
	    return false;
	  }

	  if (Math.abs(startAngle - endAngle) % PI2 < 1e-4) {
	    // Is a circle
	    return true;
	  }

	  if (anticlockwise) {
	    var tmp = startAngle;
	    startAngle = normalizeRadian(endAngle);
	    endAngle = normalizeRadian(tmp);
	  } else {
	    startAngle = normalizeRadian(startAngle);
	    endAngle = normalizeRadian(endAngle);
	  }

	  if (startAngle > endAngle) {
	    endAngle += PI2;
	  }

	  var angle = Math.atan2(y, x);

	  if (angle < 0) {
	    angle += PI2;
	  }

	  return angle >= startAngle && angle <= endAngle || angle + PI2 >= startAngle && angle + PI2 <= endAngle;
	}

	exports.containStroke = containStroke;

/***/ }),
/* 237 */
/***/ (function(module, exports) {

	var PI2 = Math.PI * 2;

	function normalizeRadian(angle) {
	  angle %= PI2;

	  if (angle < 0) {
	    angle += PI2;
	  }

	  return angle;
	}

	exports.normalizeRadian = normalizeRadian;

/***/ }),
/* 238 */
/***/ (function(module, exports) {

	function windingLine(x0, y0, x1, y1, x, y) {
	  if (y > y0 && y > y1 || y < y0 && y < y1) {
	    return 0;
	  } // Ignore horizontal line


	  if (y1 === y0) {
	    return 0;
	  }

	  var dir = y1 < y0 ? 1 : -1;
	  var t = (y - y0) / (y1 - y0); // Avoid winding error when intersection point is the connect point of two line of polygon

	  if (t === 1 || t === 0) {
	    dir = y1 < y0 ? 0.5 : -0.5;
	  }

	  var x_ = t * (x1 - x0) + x0; // If (x, y) on the line, considered as "contain".

	  return x_ === x ? Infinity : x_ > x ? dir : 0;
	}

	module.exports = windingLine;

/***/ }),
/* 239 */
/***/ (function(module, exports, __webpack_require__) {

	var PathProxy = __webpack_require__(229);

	var _vector = __webpack_require__(183);

	var v2ApplyTransform = _vector.applyTransform;
	var CMD = PathProxy.CMD;
	var points = [[], [], []];
	var mathSqrt = Math.sqrt;
	var mathAtan2 = Math.atan2;

	function _default(path, m) {
	  var data = path.data;
	  var cmd;
	  var nPoint;
	  var i;
	  var j;
	  var k;
	  var p;
	  var M = CMD.M;
	  var C = CMD.C;
	  var L = CMD.L;
	  var R = CMD.R;
	  var A = CMD.A;
	  var Q = CMD.Q;

	  for (i = 0, j = 0; i < data.length;) {
	    cmd = data[i++];
	    j = i;
	    nPoint = 0;

	    switch (cmd) {
	      case M:
	        nPoint = 1;
	        break;

	      case L:
	        nPoint = 1;
	        break;

	      case C:
	        nPoint = 3;
	        break;

	      case Q:
	        nPoint = 2;
	        break;

	      case A:
	        var x = m[4];
	        var y = m[5];
	        var sx = mathSqrt(m[0] * m[0] + m[1] * m[1]);
	        var sy = mathSqrt(m[2] * m[2] + m[3] * m[3]);
	        var angle = mathAtan2(-m[1] / sy, m[0] / sx); // cx

	        data[i] *= sx;
	        data[i++] += x; // cy

	        data[i] *= sy;
	        data[i++] += y; // Scale rx and ry
	        // FIXME Assume psi is 0 here

	        data[i++] *= sx;
	        data[i++] *= sy; // Start angle

	        data[i++] += angle; // end angle

	        data[i++] += angle; // FIXME psi

	        i += 2;
	        j = i;
	        break;

	      case R:
	        // x0, y0
	        p[0] = data[i++];
	        p[1] = data[i++];
	        v2ApplyTransform(p, p, m);
	        data[j++] = p[0];
	        data[j++] = p[1]; // x1, y1

	        p[0] += data[i++];
	        p[1] += data[i++];
	        v2ApplyTransform(p, p, m);
	        data[j++] = p[0];
	        data[j++] = p[1];
	    }

	    for (k = 0; k < nPoint; k++) {
	      var p = points[k];
	      p[0] = data[i++];
	      p[1] = data[i++];
	      v2ApplyTransform(p, p, m); // Write back

	      data[j++] = p[0];
	      data[j++] = p[1];
	    }
	  }
	}

	module.exports = _default;

/***/ }),
/* 240 */
/***/ (function(module, exports, __webpack_require__) {

	var Displayable = __webpack_require__(208);

	var zrUtil = __webpack_require__(181);

	var textContain = __webpack_require__(211);

	var textHelper = __webpack_require__(210);

	/**
	 * @alias zrender/graphic/Text
	 * @extends module:zrender/graphic/Displayable
	 * @constructor
	 * @param {Object} opts
	 */
	var Text = function (opts) {
	  // jshint ignore:line
	  Displayable.call(this, opts);
	};

	Text.prototype = {
	  constructor: Text,
	  type: 'text',
	  brush: function (ctx, prevEl) {
	    var style = this.style; // Optimize, avoid normalize every time.

	    this.__dirty && textHelper.normalizeTextStyle(style, true); // Use props with prefix 'text'.

	    style.fill = style.stroke = style.shadowBlur = style.shadowColor = style.shadowOffsetX = style.shadowOffsetY = null;
	    var text = style.text; // Convert to string

	    text != null && (text += ''); // Always bind style

	    style.bind(ctx, this, prevEl);

	    if (!textHelper.needDrawText(text, style)) {
	      return;
	    }

	    this.setTransform(ctx);
	    textHelper.renderText(this, ctx, text, style);
	    this.restoreTransform(ctx);
	  },
	  getBoundingRect: function () {
	    var style = this.style; // Optimize, avoid normalize every time.

	    this.__dirty && textHelper.normalizeTextStyle(style, true);

	    if (!this._rect) {
	      var text = style.text;
	      text != null ? text += '' : text = '';
	      var rect = textContain.getBoundingRect(style.text + '', style.font, style.textAlign, style.textVerticalAlign, style.textPadding, style.rich);
	      rect.x += style.x || 0;
	      rect.y += style.y || 0;

	      if (textHelper.getStroke(style.textStroke, style.textStrokeWidth)) {
	        var w = style.textStrokeWidth;
	        rect.x -= w / 2;
	        rect.y -= w / 2;
	        rect.width += w;
	        rect.height += w;
	      }

	      this._rect = rect;
	    }

	    return this._rect;
	  }
	};
	zrUtil.inherits(Text, Displayable);
	var _default = Text;
	module.exports = _default;

/***/ }),
/* 241 */
/***/ (function(module, exports, __webpack_require__) {

	var Path = __webpack_require__(228);

	/**
	 * 圆形
	 * @module zrender/shape/Circle
	 */
	var _default = Path.extend({
	  type: 'circle',
	  shape: {
	    cx: 0,
	    cy: 0,
	    r: 0
	  },
	  buildPath: function (ctx, shape, inBundle) {
	    // Better stroking in ShapeBundle
	    // Always do it may have performence issue ( fill may be 2x more cost)
	    if (inBundle) {
	      ctx.moveTo(shape.cx + shape.r, shape.cy);
	    } // else {
	    //     if (ctx.allocate && !ctx.data.length) {
	    //         ctx.allocate(ctx.CMD_MEM_SIZE.A);
	    //     }
	    // }
	    // Better stroking in ShapeBundle
	    // ctx.moveTo(shape.cx + shape.r, shape.cy);


	    ctx.arc(shape.cx, shape.cy, shape.r, 0, Math.PI * 2, true);
	  }
	});

	module.exports = _default;

/***/ }),
/* 242 */
/***/ (function(module, exports, __webpack_require__) {

	var Path = __webpack_require__(228);

	var fixClipWithShadow = __webpack_require__(243);

	/**
	 * 扇形
	 * @module zrender/graphic/shape/Sector
	 */
	var _default = Path.extend({
	  type: 'sector',
	  shape: {
	    cx: 0,
	    cy: 0,
	    r0: 0,
	    r: 0,
	    startAngle: 0,
	    endAngle: Math.PI * 2,
	    clockwise: true
	  },
	  brush: fixClipWithShadow(Path.prototype.brush),
	  buildPath: function (ctx, shape) {
	    var x = shape.cx;
	    var y = shape.cy;
	    var r0 = Math.max(shape.r0 || 0, 0);
	    var r = Math.max(shape.r, 0);
	    var startAngle = shape.startAngle;
	    var endAngle = shape.endAngle;
	    var clockwise = shape.clockwise;
	    var unitX = Math.cos(startAngle);
	    var unitY = Math.sin(startAngle);
	    ctx.moveTo(unitX * r0 + x, unitY * r0 + y);
	    ctx.lineTo(unitX * r + x, unitY * r + y);
	    ctx.arc(x, y, r, startAngle, endAngle, !clockwise);
	    ctx.lineTo(Math.cos(endAngle) * r0 + x, Math.sin(endAngle) * r0 + y);

	    if (r0 !== 0) {
	      ctx.arc(x, y, r0, endAngle, startAngle, clockwise);
	    }

	    ctx.closePath();
	  }
	});

	module.exports = _default;

/***/ }),
/* 243 */
/***/ (function(module, exports, __webpack_require__) {

	var env = __webpack_require__(180);

	// Fix weird bug in some version of IE11 (like 11.0.9600.178**),
	// where exception "unexpected call to method or property access"
	// might be thrown when calling ctx.fill or ctx.stroke after a path
	// whose area size is zero is drawn and ctx.clip() is called and
	// shadowBlur is set. See #4572, #3112, #5777.
	// (e.g.,
	//  ctx.moveTo(10, 10);
	//  ctx.lineTo(20, 10);
	//  ctx.closePath();
	//  ctx.clip();
	//  ctx.shadowBlur = 10;
	//  ...
	//  ctx.fill();
	// )
	var shadowTemp = [['shadowBlur', 0], ['shadowColor', '#000'], ['shadowOffsetX', 0], ['shadowOffsetY', 0]];

	function _default(orignalBrush) {
	  // version string can be: '11.0'
	  return env.browser.ie && env.browser.version >= 11 ? function () {
	    var clipPaths = this.__clipPaths;
	    var style = this.style;
	    var modified;

	    if (clipPaths) {
	      for (var i = 0; i < clipPaths.length; i++) {
	        var clipPath = clipPaths[i];
	        var shape = clipPath && clipPath.shape;
	        var type = clipPath && clipPath.type;

	        if (shape && (type === 'sector' && shape.startAngle === shape.endAngle || type === 'rect' && (!shape.width || !shape.height))) {
	          for (var j = 0; j < shadowTemp.length; j++) {
	            // It is save to put shadowTemp static, because shadowTemp
	            // will be all modified each item brush called.
	            shadowTemp[j][2] = style[shadowTemp[j][0]];
	            style[shadowTemp[j][0]] = shadowTemp[j][1];
	          }

	          modified = true;
	          break;
	        }
	      }
	    }

	    orignalBrush.apply(this, arguments);

	    if (modified) {
	      for (var j = 0; j < shadowTemp.length; j++) {
	        style[shadowTemp[j][0]] = shadowTemp[j][2];
	      }
	    }
	  } : orignalBrush;
	}

	module.exports = _default;

/***/ }),
/* 244 */
/***/ (function(module, exports, __webpack_require__) {

	var Path = __webpack_require__(228);

	/**
	 * 圆环
	 * @module zrender/graphic/shape/Ring
	 */
	var _default = Path.extend({
	  type: 'ring',
	  shape: {
	    cx: 0,
	    cy: 0,
	    r: 0,
	    r0: 0
	  },
	  buildPath: function (ctx, shape) {
	    var x = shape.cx;
	    var y = shape.cy;
	    var PI2 = Math.PI * 2;
	    ctx.moveTo(x + shape.r, y);
	    ctx.arc(x, y, shape.r, 0, PI2, false);
	    ctx.moveTo(x + shape.r0, y);
	    ctx.arc(x, y, shape.r0, 0, PI2, true);
	  }
	});

	module.exports = _default;

/***/ }),
/* 245 */
/***/ (function(module, exports, __webpack_require__) {

	var Path = __webpack_require__(228);

	var polyHelper = __webpack_require__(246);

	/**
	 * 多边形
	 * @module zrender/shape/Polygon
	 */
	var _default = Path.extend({
	  type: 'polygon',
	  shape: {
	    points: null,
	    smooth: false,
	    smoothConstraint: null
	  },
	  buildPath: function (ctx, shape) {
	    polyHelper.buildPath(ctx, shape, true);
	  }
	});

	module.exports = _default;

/***/ }),
/* 246 */
/***/ (function(module, exports, __webpack_require__) {

	var smoothSpline = __webpack_require__(247);

	var smoothBezier = __webpack_require__(248);

	function buildPath(ctx, shape, closePath) {
	  var points = shape.points;
	  var smooth = shape.smooth;

	  if (points && points.length >= 2) {
	    if (smooth && smooth !== 'spline') {
	      var controlPoints = smoothBezier(points, smooth, closePath, shape.smoothConstraint);
	      ctx.moveTo(points[0][0], points[0][1]);
	      var len = points.length;

	      for (var i = 0; i < (closePath ? len : len - 1); i++) {
	        var cp1 = controlPoints[i * 2];
	        var cp2 = controlPoints[i * 2 + 1];
	        var p = points[(i + 1) % len];
	        ctx.bezierCurveTo(cp1[0], cp1[1], cp2[0], cp2[1], p[0], p[1]);
	      }
	    } else {
	      if (smooth === 'spline') {
	        points = smoothSpline(points, closePath);
	      }

	      ctx.moveTo(points[0][0], points[0][1]);

	      for (var i = 1, l = points.length; i < l; i++) {
	        ctx.lineTo(points[i][0], points[i][1]);
	      }
	    }

	    closePath && ctx.closePath();
	  }
	}

	exports.buildPath = buildPath;

/***/ }),
/* 247 */
/***/ (function(module, exports, __webpack_require__) {

	var _vector = __webpack_require__(183);

	var v2Distance = _vector.distance;

	/**
	 * Catmull-Rom spline 插值折线
	 * @module zrender/shape/util/smoothSpline
	 * @author pissang (https://www.github.com/pissang)
	 *         Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *         errorrik (errorrik@gmail.com)
	 */

	/**
	 * @inner
	 */
	function interpolate(p0, p1, p2, p3, t, t2, t3) {
	  var v0 = (p2 - p0) * 0.5;
	  var v1 = (p3 - p1) * 0.5;
	  return (2 * (p1 - p2) + v0 + v1) * t3 + (-3 * (p1 - p2) - 2 * v0 - v1) * t2 + v0 * t + p1;
	}
	/**
	 * @alias module:zrender/shape/util/smoothSpline
	 * @param {Array} points 线段顶点数组
	 * @param {boolean} isLoop
	 * @return {Array}
	 */


	function _default(points, isLoop) {
	  var len = points.length;
	  var ret = [];
	  var distance = 0;

	  for (var i = 1; i < len; i++) {
	    distance += v2Distance(points[i - 1], points[i]);
	  }

	  var segs = distance / 2;
	  segs = segs < len ? len : segs;

	  for (var i = 0; i < segs; i++) {
	    var pos = i / (segs - 1) * (isLoop ? len : len - 1);
	    var idx = Math.floor(pos);
	    var w = pos - idx;
	    var p0;
	    var p1 = points[idx % len];
	    var p2;
	    var p3;

	    if (!isLoop) {
	      p0 = points[idx === 0 ? idx : idx - 1];
	      p2 = points[idx > len - 2 ? len - 1 : idx + 1];
	      p3 = points[idx > len - 3 ? len - 1 : idx + 2];
	    } else {
	      p0 = points[(idx - 1 + len) % len];
	      p2 = points[(idx + 1) % len];
	      p3 = points[(idx + 2) % len];
	    }

	    var w2 = w * w;
	    var w3 = w * w2;
	    ret.push([interpolate(p0[0], p1[0], p2[0], p3[0], w, w2, w3), interpolate(p0[1], p1[1], p2[1], p3[1], w, w2, w3)]);
	  }

	  return ret;
	}

	module.exports = _default;

/***/ }),
/* 248 */
/***/ (function(module, exports, __webpack_require__) {

	var _vector = __webpack_require__(183);

	var v2Min = _vector.min;
	var v2Max = _vector.max;
	var v2Scale = _vector.scale;
	var v2Distance = _vector.distance;
	var v2Add = _vector.add;
	var v2Clone = _vector.clone;
	var v2Sub = _vector.sub;

	/**
	 * 贝塞尔平滑曲线
	 * @module zrender/shape/util/smoothBezier
	 * @author pissang (https://www.github.com/pissang)
	 *         Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *         errorrik (errorrik@gmail.com)
	 */

	/**
	 * 贝塞尔平滑曲线
	 * @alias module:zrender/shape/util/smoothBezier
	 * @param {Array} points 线段顶点数组
	 * @param {number} smooth 平滑等级, 0-1
	 * @param {boolean} isLoop
	 * @param {Array} constraint 将计算出来的控制点约束在一个包围盒内
	 *                           比如 [[0, 0], [100, 100]], 这个包围盒会与
	 *                           整个折线的包围盒做一个并集用来约束控制点。
	 * @param {Array} 计算出来的控制点数组
	 */
	function _default(points, smooth, isLoop, constraint) {
	  var cps = [];
	  var v = [];
	  var v1 = [];
	  var v2 = [];
	  var prevPoint;
	  var nextPoint;
	  var min, max;

	  if (constraint) {
	    min = [Infinity, Infinity];
	    max = [-Infinity, -Infinity];

	    for (var i = 0, len = points.length; i < len; i++) {
	      v2Min(min, min, points[i]);
	      v2Max(max, max, points[i]);
	    } // 与指定的包围盒做并集


	    v2Min(min, min, constraint[0]);
	    v2Max(max, max, constraint[1]);
	  }

	  for (var i = 0, len = points.length; i < len; i++) {
	    var point = points[i];

	    if (isLoop) {
	      prevPoint = points[i ? i - 1 : len - 1];
	      nextPoint = points[(i + 1) % len];
	    } else {
	      if (i === 0 || i === len - 1) {
	        cps.push(v2Clone(points[i]));
	        continue;
	      } else {
	        prevPoint = points[i - 1];
	        nextPoint = points[i + 1];
	      }
	    }

	    v2Sub(v, nextPoint, prevPoint); // use degree to scale the handle length

	    v2Scale(v, v, smooth);
	    var d0 = v2Distance(point, prevPoint);
	    var d1 = v2Distance(point, nextPoint);
	    var sum = d0 + d1;

	    if (sum !== 0) {
	      d0 /= sum;
	      d1 /= sum;
	    }

	    v2Scale(v1, v, -d0);
	    v2Scale(v2, v, d1);
	    var cp0 = v2Add([], point, v1);
	    var cp1 = v2Add([], point, v2);

	    if (constraint) {
	      v2Max(cp0, cp0, min);
	      v2Min(cp0, cp0, max);
	      v2Max(cp1, cp1, min);
	      v2Min(cp1, cp1, max);
	    }

	    cps.push(cp0);
	    cps.push(cp1);
	  }

	  if (isLoop) {
	    cps.push(cps.shift());
	  }

	  return cps;
	}

	module.exports = _default;

/***/ }),
/* 249 */
/***/ (function(module, exports, __webpack_require__) {

	var Path = __webpack_require__(228);

	var polyHelper = __webpack_require__(246);

	/**
	 * @module zrender/graphic/shape/Polyline
	 */
	var _default = Path.extend({
	  type: 'polyline',
	  shape: {
	    points: null,
	    smooth: false,
	    smoothConstraint: null
	  },
	  style: {
	    stroke: '#000',
	    fill: null
	  },
	  buildPath: function (ctx, shape) {
	    polyHelper.buildPath(ctx, shape, false);
	  }
	});

	module.exports = _default;

/***/ }),
/* 250 */
/***/ (function(module, exports, __webpack_require__) {

	var Path = __webpack_require__(228);

	var roundRectHelper = __webpack_require__(213);

	/**
	 * 矩形
	 * @module zrender/graphic/shape/Rect
	 */
	var _default = Path.extend({
	  type: 'rect',
	  shape: {
	    // 左上、右上、右下、左下角的半径依次为r1、r2、r3、r4
	    // r缩写为1         相当于 [1, 1, 1, 1]
	    // r缩写为[1]       相当于 [1, 1, 1, 1]
	    // r缩写为[1, 2]    相当于 [1, 2, 1, 2]
	    // r缩写为[1, 2, 3] 相当于 [1, 2, 3, 2]
	    r: 0,
	    x: 0,
	    y: 0,
	    width: 0,
	    height: 0
	  },
	  buildPath: function (ctx, shape) {
	    var x = shape.x;
	    var y = shape.y;
	    var width = shape.width;
	    var height = shape.height;

	    if (!shape.r) {
	      ctx.rect(x, y, width, height);
	    } else {
	      roundRectHelper.buildPath(ctx, shape);
	    }

	    ctx.closePath();
	    return;
	  }
	});

	module.exports = _default;

/***/ }),
/* 251 */
/***/ (function(module, exports, __webpack_require__) {

	var Path = __webpack_require__(228);

	/**
	 * 直线
	 * @module zrender/graphic/shape/Line
	 */
	var _default = Path.extend({
	  type: 'line',
	  shape: {
	    // Start point
	    x1: 0,
	    y1: 0,
	    // End point
	    x2: 0,
	    y2: 0,
	    percent: 1
	  },
	  style: {
	    stroke: '#000',
	    fill: null
	  },
	  buildPath: function (ctx, shape) {
	    var x1 = shape.x1;
	    var y1 = shape.y1;
	    var x2 = shape.x2;
	    var y2 = shape.y2;
	    var percent = shape.percent;

	    if (percent === 0) {
	      return;
	    }

	    ctx.moveTo(x1, y1);

	    if (percent < 1) {
	      x2 = x1 * (1 - percent) + x2 * percent;
	      y2 = y1 * (1 - percent) + y2 * percent;
	    }

	    ctx.lineTo(x2, y2);
	  },

	  /**
	   * Get point at percent
	   * @param  {number} percent
	   * @return {Array.<number>}
	   */
	  pointAt: function (p) {
	    var shape = this.shape;
	    return [shape.x1 * (1 - p) + shape.x2 * p, shape.y1 * (1 - p) + shape.y2 * p];
	  }
	});

	module.exports = _default;

/***/ }),
/* 252 */
/***/ (function(module, exports, __webpack_require__) {

	var Path = __webpack_require__(228);

	var vec2 = __webpack_require__(183);

	var _curve = __webpack_require__(230);

	var quadraticSubdivide = _curve.quadraticSubdivide;
	var cubicSubdivide = _curve.cubicSubdivide;
	var quadraticAt = _curve.quadraticAt;
	var cubicAt = _curve.cubicAt;
	var quadraticDerivativeAt = _curve.quadraticDerivativeAt;
	var cubicDerivativeAt = _curve.cubicDerivativeAt;

	/**
	 * 贝塞尔曲线
	 * @module zrender/shape/BezierCurve
	 */
	var out = [];

	function someVectorAt(shape, t, isTangent) {
	  var cpx2 = shape.cpx2;
	  var cpy2 = shape.cpy2;

	  if (cpx2 === null || cpy2 === null) {
	    return [(isTangent ? cubicDerivativeAt : cubicAt)(shape.x1, shape.cpx1, shape.cpx2, shape.x2, t), (isTangent ? cubicDerivativeAt : cubicAt)(shape.y1, shape.cpy1, shape.cpy2, shape.y2, t)];
	  } else {
	    return [(isTangent ? quadraticDerivativeAt : quadraticAt)(shape.x1, shape.cpx1, shape.x2, t), (isTangent ? quadraticDerivativeAt : quadraticAt)(shape.y1, shape.cpy1, shape.y2, t)];
	  }
	}

	var _default = Path.extend({
	  type: 'bezier-curve',
	  shape: {
	    x1: 0,
	    y1: 0,
	    x2: 0,
	    y2: 0,
	    cpx1: 0,
	    cpy1: 0,
	    // cpx2: 0,
	    // cpy2: 0
	    // Curve show percent, for animating
	    percent: 1
	  },
	  style: {
	    stroke: '#000',
	    fill: null
	  },
	  buildPath: function (ctx, shape) {
	    var x1 = shape.x1;
	    var y1 = shape.y1;
	    var x2 = shape.x2;
	    var y2 = shape.y2;
	    var cpx1 = shape.cpx1;
	    var cpy1 = shape.cpy1;
	    var cpx2 = shape.cpx2;
	    var cpy2 = shape.cpy2;
	    var percent = shape.percent;

	    if (percent === 0) {
	      return;
	    }

	    ctx.moveTo(x1, y1);

	    if (cpx2 == null || cpy2 == null) {
	      if (percent < 1) {
	        quadraticSubdivide(x1, cpx1, x2, percent, out);
	        cpx1 = out[1];
	        x2 = out[2];
	        quadraticSubdivide(y1, cpy1, y2, percent, out);
	        cpy1 = out[1];
	        y2 = out[2];
	      }

	      ctx.quadraticCurveTo(cpx1, cpy1, x2, y2);
	    } else {
	      if (percent < 1) {
	        cubicSubdivide(x1, cpx1, cpx2, x2, percent, out);
	        cpx1 = out[1];
	        cpx2 = out[2];
	        x2 = out[3];
	        cubicSubdivide(y1, cpy1, cpy2, y2, percent, out);
	        cpy1 = out[1];
	        cpy2 = out[2];
	        y2 = out[3];
	      }

	      ctx.bezierCurveTo(cpx1, cpy1, cpx2, cpy2, x2, y2);
	    }
	  },

	  /**
	   * Get point at percent
	   * @param  {number} t
	   * @return {Array.<number>}
	   */
	  pointAt: function (t) {
	    return someVectorAt(this.shape, t, false);
	  },

	  /**
	   * Get tangent at percent
	   * @param  {number} t
	   * @return {Array.<number>}
	   */
	  tangentAt: function (t) {
	    var p = someVectorAt(this.shape, t, true);
	    return vec2.normalize(p, p);
	  }
	});

	module.exports = _default;

/***/ }),
/* 253 */
/***/ (function(module, exports, __webpack_require__) {

	var Path = __webpack_require__(228);

	/**
	 * 圆弧
	 * @module zrender/graphic/shape/Arc
	 */
	var _default = Path.extend({
	  type: 'arc',
	  shape: {
	    cx: 0,
	    cy: 0,
	    r: 0,
	    startAngle: 0,
	    endAngle: Math.PI * 2,
	    clockwise: true
	  },
	  style: {
	    stroke: '#000',
	    fill: null
	  },
	  buildPath: function (ctx, shape) {
	    var x = shape.cx;
	    var y = shape.cy;
	    var r = Math.max(shape.r, 0);
	    var startAngle = shape.startAngle;
	    var endAngle = shape.endAngle;
	    var clockwise = shape.clockwise;
	    var unitX = Math.cos(startAngle);
	    var unitY = Math.sin(startAngle);
	    ctx.moveTo(unitX * r + x, unitY * r + y);
	    ctx.arc(x, y, r, startAngle, endAngle, !clockwise);
	  }
	});

	module.exports = _default;

/***/ }),
/* 254 */
/***/ (function(module, exports, __webpack_require__) {

	var Path = __webpack_require__(228);

	// CompoundPath to improve performance
	var _default = Path.extend({
	  type: 'compound',
	  shape: {
	    paths: null
	  },
	  _updatePathDirty: function () {
	    var dirtyPath = this.__dirtyPath;
	    var paths = this.shape.paths;

	    for (var i = 0; i < paths.length; i++) {
	      // Mark as dirty if any subpath is dirty
	      dirtyPath = dirtyPath || paths[i].__dirtyPath;
	    }

	    this.__dirtyPath = dirtyPath;
	    this.__dirty = this.__dirty || dirtyPath;
	  },
	  beforeBrush: function () {
	    this._updatePathDirty();

	    var paths = this.shape.paths || [];
	    var scale = this.getGlobalScale(); // Update path scale

	    for (var i = 0; i < paths.length; i++) {
	      if (!paths[i].path) {
	        paths[i].createPathProxy();
	      }

	      paths[i].path.setScale(scale[0], scale[1]);
	    }
	  },
	  buildPath: function (ctx, shape) {
	    var paths = shape.paths || [];

	    for (var i = 0; i < paths.length; i++) {
	      paths[i].buildPath(ctx, paths[i].shape, true);
	    }
	  },
	  afterBrush: function () {
	    var paths = this.shape.paths || [];

	    for (var i = 0; i < paths.length; i++) {
	      paths[i].__dirtyPath = false;
	    }
	  },
	  getBoundingRect: function () {
	    this._updatePathDirty();

	    return Path.prototype.getBoundingRect.call(this);
	  }
	});

	module.exports = _default;

/***/ }),
/* 255 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(181);

	var Gradient = __webpack_require__(256);

	/**
	 * x, y, x2, y2 are all percent from 0 to 1
	 * @param {number} [x=0]
	 * @param {number} [y=0]
	 * @param {number} [x2=1]
	 * @param {number} [y2=0]
	 * @param {Array.<Object>} colorStops
	 * @param {boolean} [globalCoord=false]
	 */
	var LinearGradient = function (x, y, x2, y2, colorStops, globalCoord) {
	  // Should do nothing more in this constructor. Because gradient can be
	  // declard by `color: {type: 'linear', colorStops: ...}`, where
	  // this constructor will not be called.
	  this.x = x == null ? 0 : x;
	  this.y = y == null ? 0 : y;
	  this.x2 = x2 == null ? 1 : x2;
	  this.y2 = y2 == null ? 0 : y2; // Can be cloned

	  this.type = 'linear'; // If use global coord

	  this.global = globalCoord || false;
	  Gradient.call(this, colorStops);
	};

	LinearGradient.prototype = {
	  constructor: LinearGradient
	};
	zrUtil.inherits(LinearGradient, Gradient);
	var _default = LinearGradient;
	module.exports = _default;

/***/ }),
/* 256 */
/***/ (function(module, exports) {

	/**
	 * @param {Array.<Object>} colorStops
	 */
	var Gradient = function (colorStops) {
	  this.colorStops = colorStops || [];
	};

	Gradient.prototype = {
	  constructor: Gradient,
	  addColorStop: function (offset, color) {
	    this.colorStops.push({
	      offset: offset,
	      color: color
	    });
	  }
	};
	var _default = Gradient;
	module.exports = _default;

/***/ }),
/* 257 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(181);

	var Gradient = __webpack_require__(256);

	/**
	 * x, y, r are all percent from 0 to 1
	 * @param {number} [x=0.5]
	 * @param {number} [y=0.5]
	 * @param {number} [r=0.5]
	 * @param {Array.<Object>} [colorStops]
	 * @param {boolean} [globalCoord=false]
	 */
	var RadialGradient = function (x, y, r, colorStops, globalCoord) {
	  // Should do nothing more in this constructor. Because gradient can be
	  // declard by `color: {type: 'radial', colorStops: ...}`, where
	  // this constructor will not be called.
	  this.x = x == null ? 0.5 : x;
	  this.y = y == null ? 0.5 : y;
	  this.r = r == null ? 0.5 : r; // Can be cloned

	  this.type = 'radial'; // If use global coord

	  this.global = globalCoord || false;
	  Gradient.call(this, colorStops);
	};

	RadialGradient.prototype = {
	  constructor: RadialGradient
	};
	zrUtil.inherits(RadialGradient, Gradient);
	var _default = RadialGradient;
	module.exports = _default;

/***/ }),
/* 258 */
/***/ (function(module, exports, __webpack_require__) {

	var _util = __webpack_require__(181);

	var inherits = _util.inherits;

	var Displayble = __webpack_require__(208);

	var BoundingRect = __webpack_require__(199);

	/**
	 * Displayable for incremental rendering. It will be rendered in a separate layer
	 * IncrementalDisplay have too main methods. `clearDisplayables` and `addDisplayables`
	 * addDisplayables will render the added displayables incremetally.
	 *
	 * It use a not clearFlag to tell the painter don't clear the layer if it's the first element.
	 */
	// TODO Style override ?
	function IncrementalDisplayble(opts) {
	  Displayble.call(this, opts);
	  this._displayables = [];
	  this._temporaryDisplayables = [];
	  this._cursor = 0;
	  this.notClear = true;
	}

	IncrementalDisplayble.prototype.incremental = true;

	IncrementalDisplayble.prototype.clearDisplaybles = function () {
	  this._displayables = [];
	  this._temporaryDisplayables = [];
	  this._cursor = 0;
	  this.dirty();
	  this.notClear = false;
	};

	IncrementalDisplayble.prototype.addDisplayable = function (displayable, notPersistent) {
	  if (notPersistent) {
	    this._temporaryDisplayables.push(displayable);
	  } else {
	    this._displayables.push(displayable);
	  }

	  this.dirty();
	};

	IncrementalDisplayble.prototype.addDisplayables = function (displayables, notPersistent) {
	  notPersistent = notPersistent || false;

	  for (var i = 0; i < displayables.length; i++) {
	    this.addDisplayable(displayables[i], notPersistent);
	  }
	};

	IncrementalDisplayble.prototype.eachPendingDisplayable = function (cb) {
	  for (var i = this._cursor; i < this._displayables.length; i++) {
	    cb && cb(this._displayables[i]);
	  }

	  for (var i = 0; i < this._temporaryDisplayables.length; i++) {
	    cb && cb(this._temporaryDisplayables[i]);
	  }
	};

	IncrementalDisplayble.prototype.update = function () {
	  this.updateTransform();

	  for (var i = this._cursor; i < this._displayables.length; i++) {
	    var displayable = this._displayables[i]; // PENDING

	    displayable.parent = this;
	    displayable.update();
	    displayable.parent = null;
	  }

	  for (var i = 0; i < this._temporaryDisplayables.length; i++) {
	    var displayable = this._temporaryDisplayables[i]; // PENDING

	    displayable.parent = this;
	    displayable.update();
	    displayable.parent = null;
	  }
	};

	IncrementalDisplayble.prototype.brush = function (ctx, prevEl) {
	  // Render persistant displayables.
	  for (var i = this._cursor; i < this._displayables.length; i++) {
	    var displayable = this._displayables[i];
	    displayable.beforeBrush && displayable.beforeBrush(ctx);
	    displayable.brush(ctx, i === this._cursor ? null : this._displayables[i - 1]);
	    displayable.afterBrush && displayable.afterBrush(ctx);
	  }

	  this._cursor = i; // Render temporary displayables.

	  for (var i = 0; i < this._temporaryDisplayables.length; i++) {
	    var displayable = this._temporaryDisplayables[i];
	    displayable.beforeBrush && displayable.beforeBrush(ctx);
	    displayable.brush(ctx, i === 0 ? null : this._temporaryDisplayables[i - 1]);
	    displayable.afterBrush && displayable.afterBrush(ctx);
	  }

	  this._temporaryDisplayables = [];
	  this.notClear = true;
	};

	var m = [];

	IncrementalDisplayble.prototype.getBoundingRect = function () {
	  if (!this._rect) {
	    var rect = new BoundingRect(Infinity, Infinity, -Infinity, -Infinity);

	    for (var i = 0; i < this._displayables.length; i++) {
	      var displayable = this._displayables[i];
	      var childRect = displayable.getBoundingRect().clone();

	      if (displayable.needLocalTransform()) {
	        childRect.applyTransform(displayable.getLocalTransform(m));
	      }

	      rect.union(childRect);
	    }

	    this._rect = rect;
	  }

	  return this._rect;
	};

	IncrementalDisplayble.prototype.contain = function (x, y) {
	  var localPos = this.transformCoordToLocal(x, y);
	  var rect = this.getBoundingRect();

	  if (rect.contain(localPos[0], localPos[1])) {
	    for (var i = 0; i < this._displayables.length; i++) {
	      var displayable = this._displayables[i];

	      if (displayable.contain(x, y)) {
	        return true;
	      }
	    }
	  }

	  return false;
	};

	inherits(IncrementalDisplayble, Displayble);
	var _default = IncrementalDisplayble;
	module.exports = _default;

/***/ }),
/* 259 */
/***/ (function(module, exports, __webpack_require__) {

	var makeStyleMapper = __webpack_require__(223);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var getItemStyle = makeStyleMapper([['fill', 'color'], ['stroke', 'borderColor'], ['lineWidth', 'borderWidth'], ['opacity'], ['shadowBlur'], ['shadowOffsetX'], ['shadowOffsetY'], ['shadowColor'], ['textPosition'], ['textAlign']]);
	var _default = {
	  getItemStyle: function (excludes, includes) {
	    var style = getItemStyle(this, excludes, includes);
	    var lineDash = this.getBorderLineDash();
	    lineDash && (style.lineDash = lineDash);
	    return style;
	  },
	  getBorderLineDash: function () {
	    var lineType = this.get('borderType');
	    return lineType === 'solid' || lineType == null ? null : lineType === 'dashed' ? [5, 5] : [1, 1];
	  }
	};
	module.exports = _default;

/***/ }),
/* 260 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(181);

	var Model = __webpack_require__(220);

	var componentUtil = __webpack_require__(261);

	var _clazz = __webpack_require__(221);

	var enableClassManagement = _clazz.enableClassManagement;
	var parseClassType = _clazz.parseClassType;

	var _model = __webpack_require__(219);

	var makeInner = _model.makeInner;

	var layout = __webpack_require__(262);

	var boxLayoutMixin = __webpack_require__(265);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/

	/**
	 * Component model
	 *
	 * @module echarts/model/Component
	 */
	var inner = makeInner();
	/**
	 * @alias module:echarts/model/Component
	 * @constructor
	 * @param {Object} option
	 * @param {module:echarts/model/Model} parentModel
	 * @param {module:echarts/model/Model} ecModel
	 */

	var ComponentModel = Model.extend({
	  type: 'component',

	  /**
	   * @readOnly
	   * @type {string}
	   */
	  id: '',

	  /**
	   * Because simplified concept is probably better, series.name (or component.name)
	   * has been having too many resposibilities:
	   * (1) Generating id (which requires name in option should not be modified).
	   * (2) As an index to mapping series when merging option or calling API (a name
	   * can refer to more then one components, which is convinient is some case).
	   * (3) Display.
	   * @readOnly
	   */
	  name: '',

	  /**
	   * @readOnly
	   * @type {string}
	   */
	  mainType: '',

	  /**
	   * @readOnly
	   * @type {string}
	   */
	  subType: '',

	  /**
	   * @readOnly
	   * @type {number}
	   */
	  componentIndex: 0,

	  /**
	   * @type {Object}
	   * @protected
	   */
	  defaultOption: null,

	  /**
	   * @type {module:echarts/model/Global}
	   * @readOnly
	   */
	  ecModel: null,

	  /**
	   * key: componentType
	   * value:  Component model list, can not be null.
	   * @type {Object.<string, Array.<module:echarts/model/Model>>}
	   * @readOnly
	   */
	  dependentModels: [],

	  /**
	   * @type {string}
	   * @readOnly
	   */
	  uid: null,

	  /**
	   * Support merge layout params.
	   * Only support 'box' now (left/right/top/bottom/width/height).
	   * @type {string|Object} Object can be {ignoreSize: true}
	   * @readOnly
	   */
	  layoutMode: null,
	  $constructor: function (option, parentModel, ecModel, extraOpt) {
	    Model.call(this, option, parentModel, ecModel, extraOpt);
	    this.uid = componentUtil.getUID('ec_cpt_model');
	  },
	  init: function (option, parentModel, ecModel, extraOpt) {
	    this.mergeDefaultAndTheme(option, ecModel);
	  },
	  mergeDefaultAndTheme: function (option, ecModel) {
	    var layoutMode = this.layoutMode;
	    var inputPositionParams = layoutMode ? layout.getLayoutParams(option) : {};
	    var themeModel = ecModel.getTheme();
	    zrUtil.merge(option, themeModel.get(this.mainType));
	    zrUtil.merge(option, this.getDefaultOption());

	    if (layoutMode) {
	      layout.mergeLayoutParam(option, inputPositionParams, layoutMode);
	    }
	  },
	  mergeOption: function (option, extraOpt) {
	    zrUtil.merge(this.option, option, true);
	    var layoutMode = this.layoutMode;

	    if (layoutMode) {
	      layout.mergeLayoutParam(this.option, option, layoutMode);
	    }
	  },
	  // Hooker after init or mergeOption
	  optionUpdated: function (newCptOption, isInit) {},
	  getDefaultOption: function () {
	    var fields = inner(this);

	    if (!fields.defaultOption) {
	      var optList = [];
	      var Class = this.constructor;

	      while (Class) {
	        var opt = Class.prototype.defaultOption;
	        opt && optList.push(opt);
	        Class = Class.superClass;
	      }

	      var defaultOption = {};

	      for (var i = optList.length - 1; i >= 0; i--) {
	        defaultOption = zrUtil.merge(defaultOption, optList[i], true);
	      }

	      fields.defaultOption = defaultOption;
	    }

	    return fields.defaultOption;
	  },
	  getReferringComponents: function (mainType) {
	    return this.ecModel.queryComponents({
	      mainType: mainType,
	      index: this.get(mainType + 'Index', true),
	      id: this.get(mainType + 'Id', true)
	    });
	  }
	}); // Reset ComponentModel.extend, add preConstruct.
	// clazzUtil.enableClassExtend(
	//     ComponentModel,
	//     function (option, parentModel, ecModel, extraOpt) {
	//         // Set dependentModels, componentIndex, name, id, mainType, subType.
	//         zrUtil.extend(this, extraOpt);
	//         this.uid = componentUtil.getUID('componentModel');
	//         // this.setReadOnly([
	//         //     'type', 'id', 'uid', 'name', 'mainType', 'subType',
	//         //     'dependentModels', 'componentIndex'
	//         // ]);
	//     }
	// );
	// Add capability of registerClass, getClass, hasClass, registerSubTypeDefaulter and so on.

	enableClassManagement(ComponentModel, {
	  registerWhenExtend: true
	});
	componentUtil.enableSubTypeDefaulter(ComponentModel); // Add capability of ComponentModel.topologicalTravel.

	componentUtil.enableTopologicalTravel(ComponentModel, getDependencies);

	function getDependencies(componentType) {
	  var deps = [];
	  zrUtil.each(ComponentModel.getClassesByMainType(componentType), function (Clazz) {
	    deps = deps.concat(Clazz.prototype.dependencies || []);
	  }); // Ensure main type.

	  deps = zrUtil.map(deps, function (type) {
	    return parseClassType(type).main;
	  }); // Hack dataset for convenience.

	  if (componentType !== 'dataset' && zrUtil.indexOf(deps, 'dataset') <= 0) {
	    deps.unshift('dataset');
	  }

	  return deps;
	}

	zrUtil.mixin(ComponentModel, boxLayoutMixin);
	var _default = ComponentModel;
	module.exports = _default;

/***/ }),
/* 261 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(181);

	var _clazz = __webpack_require__(221);

	var parseClassType = _clazz.parseClassType;

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var base = 0;
	/**
	 * @public
	 * @param {string} type
	 * @return {string}
	 */

	function getUID(type) {
	  // Considering the case of crossing js context,
	  // use Math.random to make id as unique as possible.
	  return [type || '', base++, Math.random().toFixed(5)].join('_');
	}
	/**
	 * @inner
	 */


	function enableSubTypeDefaulter(entity) {
	  var subTypeDefaulters = {};

	  entity.registerSubTypeDefaulter = function (componentType, defaulter) {
	    componentType = parseClassType(componentType);
	    subTypeDefaulters[componentType.main] = defaulter;
	  };

	  entity.determineSubType = function (componentType, option) {
	    var type = option.type;

	    if (!type) {
	      var componentTypeMain = parseClassType(componentType).main;

	      if (entity.hasSubTypes(componentType) && subTypeDefaulters[componentTypeMain]) {
	        type = subTypeDefaulters[componentTypeMain](option);
	      }
	    }

	    return type;
	  };

	  return entity;
	}
	/**
	 * Topological travel on Activity Network (Activity On Vertices).
	 * Dependencies is defined in Model.prototype.dependencies, like ['xAxis', 'yAxis'].
	 *
	 * If 'xAxis' or 'yAxis' is absent in componentTypeList, just ignore it in topology.
	 *
	 * If there is circle dependencey, Error will be thrown.
	 *
	 */


	function enableTopologicalTravel(entity, dependencyGetter) {
	  /**
	   * @public
	   * @param {Array.<string>} targetNameList Target Component type list.
	   *                                           Can be ['aa', 'bb', 'aa.xx']
	   * @param {Array.<string>} fullNameList By which we can build dependency graph.
	   * @param {Function} callback Params: componentType, dependencies.
	   * @param {Object} context Scope of callback.
	   */
	  entity.topologicalTravel = function (targetNameList, fullNameList, callback, context) {
	    if (!targetNameList.length) {
	      return;
	    }

	    var result = makeDepndencyGraph(fullNameList);
	    var graph = result.graph;
	    var stack = result.noEntryList;
	    var targetNameSet = {};
	    zrUtil.each(targetNameList, function (name) {
	      targetNameSet[name] = true;
	    });

	    while (stack.length) {
	      var currComponentType = stack.pop();
	      var currVertex = graph[currComponentType];
	      var isInTargetNameSet = !!targetNameSet[currComponentType];

	      if (isInTargetNameSet) {
	        callback.call(context, currComponentType, currVertex.originalDeps.slice());
	        delete targetNameSet[currComponentType];
	      }

	      zrUtil.each(currVertex.successor, isInTargetNameSet ? removeEdgeAndAdd : removeEdge);
	    }

	    zrUtil.each(targetNameSet, function () {
	      throw new Error('Circle dependency may exists');
	    });

	    function removeEdge(succComponentType) {
	      graph[succComponentType].entryCount--;

	      if (graph[succComponentType].entryCount === 0) {
	        stack.push(succComponentType);
	      }
	    } // Consider this case: legend depends on series, and we call
	    // chart.setOption({series: [...]}), where only series is in option.
	    // If we do not have 'removeEdgeAndAdd', legendModel.mergeOption will
	    // not be called, but only sereis.mergeOption is called. Thus legend
	    // have no chance to update its local record about series (like which
	    // name of series is available in legend).


	    function removeEdgeAndAdd(succComponentType) {
	      targetNameSet[succComponentType] = true;
	      removeEdge(succComponentType);
	    }
	  };
	  /**
	   * DepndencyGraph: {Object}
	   * key: conponentType,
	   * value: {
	   *     successor: [conponentTypes...],
	   *     originalDeps: [conponentTypes...],
	   *     entryCount: {number}
	   * }
	   */


	  function makeDepndencyGraph(fullNameList) {
	    var graph = {};
	    var noEntryList = [];
	    zrUtil.each(fullNameList, function (name) {
	      var thisItem = createDependencyGraphItem(graph, name);
	      var originalDeps = thisItem.originalDeps = dependencyGetter(name);
	      var availableDeps = getAvailableDependencies(originalDeps, fullNameList);
	      thisItem.entryCount = availableDeps.length;

	      if (thisItem.entryCount === 0) {
	        noEntryList.push(name);
	      }

	      zrUtil.each(availableDeps, function (dependentName) {
	        if (zrUtil.indexOf(thisItem.predecessor, dependentName) < 0) {
	          thisItem.predecessor.push(dependentName);
	        }

	        var thatItem = createDependencyGraphItem(graph, dependentName);

	        if (zrUtil.indexOf(thatItem.successor, dependentName) < 0) {
	          thatItem.successor.push(name);
	        }
	      });
	    });
	    return {
	      graph: graph,
	      noEntryList: noEntryList
	    };
	  }

	  function createDependencyGraphItem(graph, name) {
	    if (!graph[name]) {
	      graph[name] = {
	        predecessor: [],
	        successor: []
	      };
	    }

	    return graph[name];
	  }

	  function getAvailableDependencies(originalDeps, fullNameList) {
	    var availableDeps = [];
	    zrUtil.each(originalDeps, function (dep) {
	      zrUtil.indexOf(fullNameList, dep) >= 0 && availableDeps.push(dep);
	    });
	    return availableDeps;
	  }
	}

	exports.getUID = getUID;
	exports.enableSubTypeDefaulter = enableSubTypeDefaulter;
	exports.enableTopologicalTravel = enableTopologicalTravel;

/***/ }),
/* 262 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(181);

	var BoundingRect = __webpack_require__(199);

	var _number = __webpack_require__(263);

	var parsePercent = _number.parsePercent;

	var formatUtil = __webpack_require__(264);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	// Layout helpers for each component positioning
	var each = zrUtil.each;
	/**
	 * @public
	 */

	var LOCATION_PARAMS = ['left', 'right', 'top', 'bottom', 'width', 'height'];
	/**
	 * @public
	 */

	var HV_NAMES = [['width', 'left', 'right'], ['height', 'top', 'bottom']];

	function boxLayout(orient, group, gap, maxWidth, maxHeight) {
	  var x = 0;
	  var y = 0;

	  if (maxWidth == null) {
	    maxWidth = Infinity;
	  }

	  if (maxHeight == null) {
	    maxHeight = Infinity;
	  }

	  var currentLineMaxSize = 0;
	  group.eachChild(function (child, idx) {
	    var position = child.position;
	    var rect = child.getBoundingRect();
	    var nextChild = group.childAt(idx + 1);
	    var nextChildRect = nextChild && nextChild.getBoundingRect();
	    var nextX;
	    var nextY;

	    if (orient === 'horizontal') {
	      var moveX = rect.width + (nextChildRect ? -nextChildRect.x + rect.x : 0);
	      nextX = x + moveX; // Wrap when width exceeds maxWidth or meet a `newline` group
	      // FIXME compare before adding gap?

	      if (nextX > maxWidth || child.newline) {
	        x = 0;
	        nextX = moveX;
	        y += currentLineMaxSize + gap;
	        currentLineMaxSize = rect.height;
	      } else {
	        // FIXME: consider rect.y is not `0`?
	        currentLineMaxSize = Math.max(currentLineMaxSize, rect.height);
	      }
	    } else {
	      var moveY = rect.height + (nextChildRect ? -nextChildRect.y + rect.y : 0);
	      nextY = y + moveY; // Wrap when width exceeds maxHeight or meet a `newline` group

	      if (nextY > maxHeight || child.newline) {
	        x += currentLineMaxSize + gap;
	        y = 0;
	        nextY = moveY;
	        currentLineMaxSize = rect.width;
	      } else {
	        currentLineMaxSize = Math.max(currentLineMaxSize, rect.width);
	      }
	    }

	    if (child.newline) {
	      return;
	    }

	    position[0] = x;
	    position[1] = y;
	    orient === 'horizontal' ? x = nextX + gap : y = nextY + gap;
	  });
	}
	/**
	 * VBox or HBox layouting
	 * @param {string} orient
	 * @param {module:zrender/container/Group} group
	 * @param {number} gap
	 * @param {number} [width=Infinity]
	 * @param {number} [height=Infinity]
	 */


	var box = boxLayout;
	/**
	 * VBox layouting
	 * @param {module:zrender/container/Group} group
	 * @param {number} gap
	 * @param {number} [width=Infinity]
	 * @param {number} [height=Infinity]
	 */

	var vbox = zrUtil.curry(boxLayout, 'vertical');
	/**
	 * HBox layouting
	 * @param {module:zrender/container/Group} group
	 * @param {number} gap
	 * @param {number} [width=Infinity]
	 * @param {number} [height=Infinity]
	 */

	var hbox = zrUtil.curry(boxLayout, 'horizontal');
	/**
	 * If x or x2 is not specified or 'center' 'left' 'right',
	 * the width would be as long as possible.
	 * If y or y2 is not specified or 'middle' 'top' 'bottom',
	 * the height would be as long as possible.
	 *
	 * @param {Object} positionInfo
	 * @param {number|string} [positionInfo.x]
	 * @param {number|string} [positionInfo.y]
	 * @param {number|string} [positionInfo.x2]
	 * @param {number|string} [positionInfo.y2]
	 * @param {Object} containerRect {width, height}
	 * @param {string|number} margin
	 * @return {Object} {width, height}
	 */

	function getAvailableSize(positionInfo, containerRect, margin) {
	  var containerWidth = containerRect.width;
	  var containerHeight = containerRect.height;
	  var x = parsePercent(positionInfo.x, containerWidth);
	  var y = parsePercent(positionInfo.y, containerHeight);
	  var x2 = parsePercent(positionInfo.x2, containerWidth);
	  var y2 = parsePercent(positionInfo.y2, containerHeight);
	  (isNaN(x) || isNaN(parseFloat(positionInfo.x))) && (x = 0);
	  (isNaN(x2) || isNaN(parseFloat(positionInfo.x2))) && (x2 = containerWidth);
	  (isNaN(y) || isNaN(parseFloat(positionInfo.y))) && (y = 0);
	  (isNaN(y2) || isNaN(parseFloat(positionInfo.y2))) && (y2 = containerHeight);
	  margin = formatUtil.normalizeCssArray(margin || 0);
	  return {
	    width: Math.max(x2 - x - margin[1] - margin[3], 0),
	    height: Math.max(y2 - y - margin[0] - margin[2], 0)
	  };
	}
	/**
	 * Parse position info.
	 *
	 * @param {Object} positionInfo
	 * @param {number|string} [positionInfo.left]
	 * @param {number|string} [positionInfo.top]
	 * @param {number|string} [positionInfo.right]
	 * @param {number|string} [positionInfo.bottom]
	 * @param {number|string} [positionInfo.width]
	 * @param {number|string} [positionInfo.height]
	 * @param {number|string} [positionInfo.aspect] Aspect is width / height
	 * @param {Object} containerRect
	 * @param {string|number} [margin]
	 *
	 * @return {module:zrender/core/BoundingRect}
	 */


	function getLayoutRect(positionInfo, containerRect, margin) {
	  margin = formatUtil.normalizeCssArray(margin || 0);
	  var containerWidth = containerRect.width;
	  var containerHeight = containerRect.height;
	  var left = parsePercent(positionInfo.left, containerWidth);
	  var top = parsePercent(positionInfo.top, containerHeight);
	  var right = parsePercent(positionInfo.right, containerWidth);
	  var bottom = parsePercent(positionInfo.bottom, containerHeight);
	  var width = parsePercent(positionInfo.width, containerWidth);
	  var height = parsePercent(positionInfo.height, containerHeight);
	  var verticalMargin = margin[2] + margin[0];
	  var horizontalMargin = margin[1] + margin[3];
	  var aspect = positionInfo.aspect; // If width is not specified, calculate width from left and right

	  if (isNaN(width)) {
	    width = containerWidth - right - horizontalMargin - left;
	  }

	  if (isNaN(height)) {
	    height = containerHeight - bottom - verticalMargin - top;
	  }

	  if (aspect != null) {
	    // If width and height are not given
	    // 1. Graph should not exceeds the container
	    // 2. Aspect must be keeped
	    // 3. Graph should take the space as more as possible
	    // FIXME
	    // Margin is not considered, because there is no case that both
	    // using margin and aspect so far.
	    if (isNaN(width) && isNaN(height)) {
	      if (aspect > containerWidth / containerHeight) {
	        width = containerWidth * 0.8;
	      } else {
	        height = containerHeight * 0.8;
	      }
	    } // Calculate width or height with given aspect


	    if (isNaN(width)) {
	      width = aspect * height;
	    }

	    if (isNaN(height)) {
	      height = width / aspect;
	    }
	  } // If left is not specified, calculate left from right and width


	  if (isNaN(left)) {
	    left = containerWidth - right - width - horizontalMargin;
	  }

	  if (isNaN(top)) {
	    top = containerHeight - bottom - height - verticalMargin;
	  } // Align left and top


	  switch (positionInfo.left || positionInfo.right) {
	    case 'center':
	      left = containerWidth / 2 - width / 2 - margin[3];
	      break;

	    case 'right':
	      left = containerWidth - width - horizontalMargin;
	      break;
	  }

	  switch (positionInfo.top || positionInfo.bottom) {
	    case 'middle':
	    case 'center':
	      top = containerHeight / 2 - height / 2 - margin[0];
	      break;

	    case 'bottom':
	      top = containerHeight - height - verticalMargin;
	      break;
	  } // If something is wrong and left, top, width, height are calculated as NaN


	  left = left || 0;
	  top = top || 0;

	  if (isNaN(width)) {
	    // Width may be NaN if only one value is given except width
	    width = containerWidth - horizontalMargin - left - (right || 0);
	  }

	  if (isNaN(height)) {
	    // Height may be NaN if only one value is given except height
	    height = containerHeight - verticalMargin - top - (bottom || 0);
	  }

	  var rect = new BoundingRect(left + margin[3], top + margin[0], width, height);
	  rect.margin = margin;
	  return rect;
	}
	/**
	 * Position a zr element in viewport
	 *  Group position is specified by either
	 *  {left, top}, {right, bottom}
	 *  If all properties exists, right and bottom will be igonred.
	 *
	 * Logic:
	 *     1. Scale (against origin point in parent coord)
	 *     2. Rotate (against origin point in parent coord)
	 *     3. Traslate (with el.position by this method)
	 * So this method only fixes the last step 'Traslate', which does not affect
	 * scaling and rotating.
	 *
	 * If be called repeatly with the same input el, the same result will be gotten.
	 *
	 * @param {module:zrender/Element} el Should have `getBoundingRect` method.
	 * @param {Object} positionInfo
	 * @param {number|string} [positionInfo.left]
	 * @param {number|string} [positionInfo.top]
	 * @param {number|string} [positionInfo.right]
	 * @param {number|string} [positionInfo.bottom]
	 * @param {number|string} [positionInfo.width] Only for opt.boundingModel: 'raw'
	 * @param {number|string} [positionInfo.height] Only for opt.boundingModel: 'raw'
	 * @param {Object} containerRect
	 * @param {string|number} margin
	 * @param {Object} [opt]
	 * @param {Array.<number>} [opt.hv=[1,1]] Only horizontal or only vertical.
	 * @param {Array.<number>} [opt.boundingMode='all']
	 *        Specify how to calculate boundingRect when locating.
	 *        'all': Position the boundingRect that is transformed and uioned
	 *               both itself and its descendants.
	 *               This mode simplies confine the elements in the bounding
	 *               of their container (e.g., using 'right: 0').
	 *        'raw': Position the boundingRect that is not transformed and only itself.
	 *               This mode is useful when you want a element can overflow its
	 *               container. (Consider a rotated circle needs to be located in a corner.)
	 *               In this mode positionInfo.width/height can only be number.
	 */


	function positionElement(el, positionInfo, containerRect, margin, opt) {
	  var h = !opt || !opt.hv || opt.hv[0];
	  var v = !opt || !opt.hv || opt.hv[1];
	  var boundingMode = opt && opt.boundingMode || 'all';

	  if (!h && !v) {
	    return;
	  }

	  var rect;

	  if (boundingMode === 'raw') {
	    rect = el.type === 'group' ? new BoundingRect(0, 0, +positionInfo.width || 0, +positionInfo.height || 0) : el.getBoundingRect();
	  } else {
	    rect = el.getBoundingRect();

	    if (el.needLocalTransform()) {
	      var transform = el.getLocalTransform(); // Notice: raw rect may be inner object of el,
	      // which should not be modified.

	      rect = rect.clone();
	      rect.applyTransform(transform);
	    }
	  } // The real width and height can not be specified but calculated by the given el.


	  positionInfo = getLayoutRect(zrUtil.defaults({
	    width: rect.width,
	    height: rect.height
	  }, positionInfo), containerRect, margin); // Because 'tranlate' is the last step in transform
	  // (see zrender/core/Transformable#getLocalTransform),
	  // we can just only modify el.position to get final result.

	  var elPos = el.position;
	  var dx = h ? positionInfo.x - rect.x : 0;
	  var dy = v ? positionInfo.y - rect.y : 0;
	  el.attr('position', boundingMode === 'raw' ? [dx, dy] : [elPos[0] + dx, elPos[1] + dy]);
	}
	/**
	 * @param {Object} option Contains some of the properties in HV_NAMES.
	 * @param {number} hvIdx 0: horizontal; 1: vertical.
	 */


	function sizeCalculable(option, hvIdx) {
	  return option[HV_NAMES[hvIdx][0]] != null || option[HV_NAMES[hvIdx][1]] != null && option[HV_NAMES[hvIdx][2]] != null;
	}
	/**
	 * Consider Case:
	 * When defulat option has {left: 0, width: 100}, and we set {right: 0}
	 * through setOption or media query, using normal zrUtil.merge will cause
	 * {right: 0} does not take effect.
	 *
	 * @example
	 * ComponentModel.extend({
	 *     init: function () {
	 *         ...
	 *         var inputPositionParams = layout.getLayoutParams(option);
	 *         this.mergeOption(inputPositionParams);
	 *     },
	 *     mergeOption: function (newOption) {
	 *         newOption && zrUtil.merge(thisOption, newOption, true);
	 *         layout.mergeLayoutParam(thisOption, newOption);
	 *     }
	 * });
	 *
	 * @param {Object} targetOption
	 * @param {Object} newOption
	 * @param {Object|string} [opt]
	 * @param {boolean|Array.<boolean>} [opt.ignoreSize=false] Used for the components
	 *  that width (or height) should not be calculated by left and right (or top and bottom).
	 */


	function mergeLayoutParam(targetOption, newOption, opt) {
	  !zrUtil.isObject(opt) && (opt = {});
	  var ignoreSize = opt.ignoreSize;
	  !zrUtil.isArray(ignoreSize) && (ignoreSize = [ignoreSize, ignoreSize]);
	  var hResult = merge(HV_NAMES[0], 0);
	  var vResult = merge(HV_NAMES[1], 1);
	  copy(HV_NAMES[0], targetOption, hResult);
	  copy(HV_NAMES[1], targetOption, vResult);

	  function merge(names, hvIdx) {
	    var newParams = {};
	    var newValueCount = 0;
	    var merged = {};
	    var mergedValueCount = 0;
	    var enoughParamNumber = 2;
	    each(names, function (name) {
	      merged[name] = targetOption[name];
	    });
	    each(names, function (name) {
	      // Consider case: newOption.width is null, which is
	      // set by user for removing width setting.
	      hasProp(newOption, name) && (newParams[name] = merged[name] = newOption[name]);
	      hasValue(newParams, name) && newValueCount++;
	      hasValue(merged, name) && mergedValueCount++;
	    });

	    if (ignoreSize[hvIdx]) {
	      // Only one of left/right is premitted to exist.
	      if (hasValue(newOption, names[1])) {
	        merged[names[2]] = null;
	      } else if (hasValue(newOption, names[2])) {
	        merged[names[1]] = null;
	      }

	      return merged;
	    } // Case: newOption: {width: ..., right: ...},
	    // or targetOption: {right: ...} and newOption: {width: ...},
	    // There is no conflict when merged only has params count
	    // little than enoughParamNumber.


	    if (mergedValueCount === enoughParamNumber || !newValueCount) {
	      return merged;
	    } // Case: newOption: {width: ..., right: ...},
	    // Than we can make sure user only want those two, and ignore
	    // all origin params in targetOption.
	    else if (newValueCount >= enoughParamNumber) {
	        return newParams;
	      } else {
	        // Chose another param from targetOption by priority.
	        for (var i = 0; i < names.length; i++) {
	          var name = names[i];

	          if (!hasProp(newParams, name) && hasProp(targetOption, name)) {
	            newParams[name] = targetOption[name];
	            break;
	          }
	        }

	        return newParams;
	      }
	  }

	  function hasProp(obj, name) {
	    return obj.hasOwnProperty(name);
	  }

	  function hasValue(obj, name) {
	    return obj[name] != null && obj[name] !== 'auto';
	  }

	  function copy(names, target, source) {
	    each(names, function (name) {
	      target[name] = source[name];
	    });
	  }
	}
	/**
	 * Retrieve 'left', 'right', 'top', 'bottom', 'width', 'height' from object.
	 * @param {Object} source
	 * @return {Object} Result contains those props.
	 */


	function getLayoutParams(source) {
	  return copyLayoutParams({}, source);
	}
	/**
	 * Retrieve 'left', 'right', 'top', 'bottom', 'width', 'height' from object.
	 * @param {Object} source
	 * @return {Object} Result contains those props.
	 */


	function copyLayoutParams(target, source) {
	  source && target && each(LOCATION_PARAMS, function (name) {
	    source.hasOwnProperty(name) && (target[name] = source[name]);
	  });
	  return target;
	}

	exports.LOCATION_PARAMS = LOCATION_PARAMS;
	exports.HV_NAMES = HV_NAMES;
	exports.box = box;
	exports.vbox = vbox;
	exports.hbox = hbox;
	exports.getAvailableSize = getAvailableSize;
	exports.getLayoutRect = getLayoutRect;
	exports.positionElement = positionElement;
	exports.sizeCalculable = sizeCalculable;
	exports.mergeLayoutParam = mergeLayoutParam;
	exports.getLayoutParams = getLayoutParams;
	exports.copyLayoutParams = copyLayoutParams;

/***/ }),
/* 263 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(181);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var RADIAN_EPSILON = 1e-4;

	function _trim(str) {
	  return str.replace(/^\s+/, '').replace(/\s+$/, '');
	}
	/**
	 * Linear mapping a value from domain to range
	 * @memberOf module:echarts/util/number
	 * @param  {(number|Array.<number>)} val
	 * @param  {Array.<number>} domain Domain extent domain[0] can be bigger than domain[1]
	 * @param  {Array.<number>} range  Range extent range[0] can be bigger than range[1]
	 * @param  {boolean} clamp
	 * @return {(number|Array.<number>}
	 */


	function linearMap(val, domain, range, clamp) {
	  var subDomain = domain[1] - domain[0];
	  var subRange = range[1] - range[0];

	  if (subDomain === 0) {
	    return subRange === 0 ? range[0] : (range[0] + range[1]) / 2;
	  } // Avoid accuracy problem in edge, such as
	  // 146.39 - 62.83 === 83.55999999999999.
	  // See echarts/test/ut/spec/util/number.js#linearMap#accuracyError
	  // It is a little verbose for efficiency considering this method
	  // is a hotspot.


	  if (clamp) {
	    if (subDomain > 0) {
	      if (val <= domain[0]) {
	        return range[0];
	      } else if (val >= domain[1]) {
	        return range[1];
	      }
	    } else {
	      if (val >= domain[0]) {
	        return range[0];
	      } else if (val <= domain[1]) {
	        return range[1];
	      }
	    }
	  } else {
	    if (val === domain[0]) {
	      return range[0];
	    }

	    if (val === domain[1]) {
	      return range[1];
	    }
	  }

	  return (val - domain[0]) / subDomain * subRange + range[0];
	}
	/**
	 * Convert a percent string to absolute number.
	 * Returns NaN if percent is not a valid string or number
	 * @memberOf module:echarts/util/number
	 * @param {string|number} percent
	 * @param {number} all
	 * @return {number}
	 */


	function parsePercent(percent, all) {
	  switch (percent) {
	    case 'center':
	    case 'middle':
	      percent = '50%';
	      break;

	    case 'left':
	    case 'top':
	      percent = '0%';
	      break;

	    case 'right':
	    case 'bottom':
	      percent = '100%';
	      break;
	  }

	  if (typeof percent === 'string') {
	    if (_trim(percent).match(/%$/)) {
	      return parseFloat(percent) / 100 * all;
	    }

	    return parseFloat(percent);
	  }

	  return percent == null ? NaN : +percent;
	}
	/**
	 * (1) Fix rounding error of float numbers.
	 * (2) Support return string to avoid scientific notation like '3.5e-7'.
	 *
	 * @param {number} x
	 * @param {number} [precision]
	 * @param {boolean} [returnStr]
	 * @return {number|string}
	 */


	function round(x, precision, returnStr) {
	  if (precision == null) {
	    precision = 10;
	  } // Avoid range error


	  precision = Math.min(Math.max(0, precision), 20);
	  x = (+x).toFixed(precision);
	  return returnStr ? x : +x;
	}

	function asc(arr) {
	  arr.sort(function (a, b) {
	    return a - b;
	  });
	  return arr;
	}
	/**
	 * Get precision
	 * @param {number} val
	 */


	function getPrecision(val) {
	  val = +val;

	  if (isNaN(val)) {
	    return 0;
	  } // It is much faster than methods converting number to string as follows
	  //      var tmp = val.toString();
	  //      return tmp.length - 1 - tmp.indexOf('.');
	  // especially when precision is low


	  var e = 1;
	  var count = 0;

	  while (Math.round(val * e) / e !== val) {
	    e *= 10;
	    count++;
	  }

	  return count;
	}
	/**
	 * @param {string|number} val
	 * @return {number}
	 */


	function getPrecisionSafe(val) {
	  var str = val.toString(); // Consider scientific notation: '3.4e-12' '3.4e+12'

	  var eIndex = str.indexOf('e');

	  if (eIndex > 0) {
	    var precision = +str.slice(eIndex + 1);
	    return precision < 0 ? -precision : 0;
	  } else {
	    var dotIndex = str.indexOf('.');
	    return dotIndex < 0 ? 0 : str.length - 1 - dotIndex;
	  }
	}
	/**
	 * Minimal dicernible data precisioin according to a single pixel.
	 *
	 * @param {Array.<number>} dataExtent
	 * @param {Array.<number>} pixelExtent
	 * @return {number} precision
	 */


	function getPixelPrecision(dataExtent, pixelExtent) {
	  var log = Math.log;
	  var LN10 = Math.LN10;
	  var dataQuantity = Math.floor(log(dataExtent[1] - dataExtent[0]) / LN10);
	  var sizeQuantity = Math.round(log(Math.abs(pixelExtent[1] - pixelExtent[0])) / LN10); // toFixed() digits argument must be between 0 and 20.

	  var precision = Math.min(Math.max(-dataQuantity + sizeQuantity, 0), 20);
	  return !isFinite(precision) ? 20 : precision;
	}
	/**
	 * Get a data of given precision, assuring the sum of percentages
	 * in valueList is 1.
	 * The largest remainer method is used.
	 * https://en.wikipedia.org/wiki/Largest_remainder_method
	 *
	 * @param {Array.<number>} valueList a list of all data
	 * @param {number} idx index of the data to be processed in valueList
	 * @param {number} precision integer number showing digits of precision
	 * @return {number} percent ranging from 0 to 100
	 */


	function getPercentWithPrecision(valueList, idx, precision) {
	  if (!valueList[idx]) {
	    return 0;
	  }

	  var sum = zrUtil.reduce(valueList, function (acc, val) {
	    return acc + (isNaN(val) ? 0 : val);
	  }, 0);

	  if (sum === 0) {
	    return 0;
	  }

	  var digits = Math.pow(10, precision);
	  var votesPerQuota = zrUtil.map(valueList, function (val) {
	    return (isNaN(val) ? 0 : val) / sum * digits * 100;
	  });
	  var targetSeats = digits * 100;
	  var seats = zrUtil.map(votesPerQuota, function (votes) {
	    // Assign automatic seats.
	    return Math.floor(votes);
	  });
	  var currentSum = zrUtil.reduce(seats, function (acc, val) {
	    return acc + val;
	  }, 0);
	  var remainder = zrUtil.map(votesPerQuota, function (votes, idx) {
	    return votes - seats[idx];
	  }); // Has remainding votes.

	  while (currentSum < targetSeats) {
	    // Find next largest remainder.
	    var max = Number.NEGATIVE_INFINITY;
	    var maxId = null;

	    for (var i = 0, len = remainder.length; i < len; ++i) {
	      if (remainder[i] > max) {
	        max = remainder[i];
	        maxId = i;
	      }
	    } // Add a vote to max remainder.


	    ++seats[maxId];
	    remainder[maxId] = 0;
	    ++currentSum;
	  }

	  return seats[idx] / digits;
	} // Number.MAX_SAFE_INTEGER, ie do not support.


	var MAX_SAFE_INTEGER = 9007199254740991;
	/**
	 * To 0 - 2 * PI, considering negative radian.
	 * @param {number} radian
	 * @return {number}
	 */

	function remRadian(radian) {
	  var pi2 = Math.PI * 2;
	  return (radian % pi2 + pi2) % pi2;
	}
	/**
	 * @param {type} radian
	 * @return {boolean}
	 */


	function isRadianAroundZero(val) {
	  return val > -RADIAN_EPSILON && val < RADIAN_EPSILON;
	}

	var TIME_REG = /^(?:(\d{4})(?:[-\/](\d{1,2})(?:[-\/](\d{1,2})(?:[T ](\d{1,2})(?::(\d\d)(?::(\d\d)(?:[.,](\d+))?)?)?(Z|[\+\-]\d\d:?\d\d)?)?)?)?)?$/; // jshint ignore:line

	/**
	 * @param {string|Date|number} value These values can be accepted:
	 *   + An instance of Date, represent a time in its own time zone.
	 *   + Or string in a subset of ISO 8601, only including:
	 *     + only year, month, date: '2012-03', '2012-03-01', '2012-03-01 05', '2012-03-01 05:06',
	 *     + separated with T or space: '2012-03-01T12:22:33.123', '2012-03-01 12:22:33.123',
	 *     + time zone: '2012-03-01T12:22:33Z', '2012-03-01T12:22:33+8000', '2012-03-01T12:22:33-05:00',
	 *     all of which will be treated as local time if time zone is not specified
	 *     (see <https://momentjs.com/>).
	 *   + Or other string format, including (all of which will be treated as loacal time):
	 *     '2012', '2012-3-1', '2012/3/1', '2012/03/01',
	 *     '2009/6/12 2:00', '2009/6/12 2:05:08', '2009/6/12 2:05:08.123'
	 *   + a timestamp, which represent a time in UTC.
	 * @return {Date} date
	 */

	function parseDate(value) {
	  if (value instanceof Date) {
	    return value;
	  } else if (typeof value === 'string') {
	    // Different browsers parse date in different way, so we parse it manually.
	    // Some other issues:
	    // new Date('1970-01-01') is UTC,
	    // new Date('1970/01/01') and new Date('1970-1-01') is local.
	    // See issue #3623
	    var match = TIME_REG.exec(value);

	    if (!match) {
	      // return Invalid Date.
	      return new Date(NaN);
	    } // Use local time when no timezone offset specifed.


	    if (!match[8]) {
	      // match[n] can only be string or undefined.
	      // But take care of '12' + 1 => '121'.
	      return new Date(+match[1], +(match[2] || 1) - 1, +match[3] || 1, +match[4] || 0, +(match[5] || 0), +match[6] || 0, +match[7] || 0);
	    } // Timezoneoffset of Javascript Date has considered DST (Daylight Saving Time,
	    // https://tc39.github.io/ecma262/#sec-daylight-saving-time-adjustment).
	    // For example, system timezone is set as "Time Zone: America/Toronto",
	    // then these code will get different result:
	    // `new Date(1478411999999).getTimezoneOffset();  // get 240`
	    // `new Date(1478412000000).getTimezoneOffset();  // get 300`
	    // So we should not use `new Date`, but use `Date.UTC`.
	    else {
	        var hour = +match[4] || 0;

	        if (match[8].toUpperCase() !== 'Z') {
	          hour -= match[8].slice(0, 3);
	        }

	        return new Date(Date.UTC(+match[1], +(match[2] || 1) - 1, +match[3] || 1, hour, +(match[5] || 0), +match[6] || 0, +match[7] || 0));
	      }
	  } else if (value == null) {
	    return new Date(NaN);
	  }

	  return new Date(Math.round(value));
	}
	/**
	 * Quantity of a number. e.g. 0.1, 1, 10, 100
	 *
	 * @param  {number} val
	 * @return {number}
	 */


	function quantity(val) {
	  return Math.pow(10, quantityExponent(val));
	}

	function quantityExponent(val) {
	  return Math.floor(Math.log(val) / Math.LN10);
	}
	/**
	 * find a “nice” number approximately equal to x. Round the number if round = true,
	 * take ceiling if round = false. The primary observation is that the “nicest”
	 * numbers in decimal are 1, 2, and 5, and all power-of-ten multiples of these numbers.
	 *
	 * See "Nice Numbers for Graph Labels" of Graphic Gems.
	 *
	 * @param  {number} val Non-negative value.
	 * @param  {boolean} round
	 * @return {number}
	 */


	function nice(val, round) {
	  var exponent = quantityExponent(val);
	  var exp10 = Math.pow(10, exponent);
	  var f = val / exp10; // 1 <= f < 10

	  var nf;

	  if (round) {
	    if (f < 1.5) {
	      nf = 1;
	    } else if (f < 2.5) {
	      nf = 2;
	    } else if (f < 4) {
	      nf = 3;
	    } else if (f < 7) {
	      nf = 5;
	    } else {
	      nf = 10;
	    }
	  } else {
	    if (f < 1) {
	      nf = 1;
	    } else if (f < 2) {
	      nf = 2;
	    } else if (f < 3) {
	      nf = 3;
	    } else if (f < 5) {
	      nf = 5;
	    } else {
	      nf = 10;
	    }
	  }

	  val = nf * exp10; // Fix 3 * 0.1 === 0.30000000000000004 issue (see IEEE 754).
	  // 20 is the uppper bound of toFixed.

	  return exponent >= -20 ? +val.toFixed(exponent < 0 ? -exponent : 0) : val;
	}
	/**
	 * Order intervals asc, and split them when overlap.
	 * expect(numberUtil.reformIntervals([
	 *     {interval: [18, 62], close: [1, 1]},
	 *     {interval: [-Infinity, -70], close: [0, 0]},
	 *     {interval: [-70, -26], close: [1, 1]},
	 *     {interval: [-26, 18], close: [1, 1]},
	 *     {interval: [62, 150], close: [1, 1]},
	 *     {interval: [106, 150], close: [1, 1]},
	 *     {interval: [150, Infinity], close: [0, 0]}
	 * ])).toEqual([
	 *     {interval: [-Infinity, -70], close: [0, 0]},
	 *     {interval: [-70, -26], close: [1, 1]},
	 *     {interval: [-26, 18], close: [0, 1]},
	 *     {interval: [18, 62], close: [0, 1]},
	 *     {interval: [62, 150], close: [0, 1]},
	 *     {interval: [150, Infinity], close: [0, 0]}
	 * ]);
	 * @param {Array.<Object>} list, where `close` mean open or close
	 *        of the interval, and Infinity can be used.
	 * @return {Array.<Object>} The origin list, which has been reformed.
	 */


	function reformIntervals(list) {
	  list.sort(function (a, b) {
	    return littleThan(a, b, 0) ? -1 : 1;
	  });
	  var curr = -Infinity;
	  var currClose = 1;

	  for (var i = 0; i < list.length;) {
	    var interval = list[i].interval;
	    var close = list[i].close;

	    for (var lg = 0; lg < 2; lg++) {
	      if (interval[lg] <= curr) {
	        interval[lg] = curr;
	        close[lg] = !lg ? 1 - currClose : 1;
	      }

	      curr = interval[lg];
	      currClose = close[lg];
	    }

	    if (interval[0] === interval[1] && close[0] * close[1] !== 1) {
	      list.splice(i, 1);
	    } else {
	      i++;
	    }
	  }

	  return list;

	  function littleThan(a, b, lg) {
	    return a.interval[lg] < b.interval[lg] || a.interval[lg] === b.interval[lg] && (a.close[lg] - b.close[lg] === (!lg ? 1 : -1) || !lg && littleThan(a, b, 1));
	  }
	}
	/**
	 * parseFloat NaNs numeric-cast false positives (null|true|false|"")
	 * ...but misinterprets leading-number strings, particularly hex literals ("0x...")
	 * subtraction forces infinities to NaN
	 *
	 * @param {*} v
	 * @return {boolean}
	 */


	function isNumeric(v) {
	  return v - parseFloat(v) >= 0;
	}

	exports.linearMap = linearMap;
	exports.parsePercent = parsePercent;
	exports.round = round;
	exports.asc = asc;
	exports.getPrecision = getPrecision;
	exports.getPrecisionSafe = getPrecisionSafe;
	exports.getPixelPrecision = getPixelPrecision;
	exports.getPercentWithPrecision = getPercentWithPrecision;
	exports.MAX_SAFE_INTEGER = MAX_SAFE_INTEGER;
	exports.remRadian = remRadian;
	exports.isRadianAroundZero = isRadianAroundZero;
	exports.parseDate = parseDate;
	exports.quantity = quantity;
	exports.nice = nice;
	exports.reformIntervals = reformIntervals;
	exports.isNumeric = isNumeric;

/***/ }),
/* 264 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(181);

	var textContain = __webpack_require__(211);

	var numberUtil = __webpack_require__(263);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/

	/**
	 * 每三位默认加,格式化
	 * @param {string|number} x
	 * @return {string}
	 */
	function addCommas(x) {
	  if (isNaN(x)) {
	    return '-';
	  }

	  x = (x + '').split('.');
	  return x[0].replace(/(\d{1,3})(?=(?:\d{3})+(?!\d))/g, '$1,') + (x.length > 1 ? '.' + x[1] : '');
	}
	/**
	 * @param {string} str
	 * @param {boolean} [upperCaseFirst=false]
	 * @return {string} str
	 */


	function toCamelCase(str, upperCaseFirst) {
	  str = (str || '').toLowerCase().replace(/-(.)/g, function (match, group1) {
	    return group1.toUpperCase();
	  });

	  if (upperCaseFirst && str) {
	    str = str.charAt(0).toUpperCase() + str.slice(1);
	  }

	  return str;
	}

	var normalizeCssArray = zrUtil.normalizeCssArray;
	var replaceReg = /([&<>"'])/g;
	var replaceMap = {
	  '&': '&amp;',
	  '<': '&lt;',
	  '>': '&gt;',
	  '"': '&quot;',
	  '\'': '&#39;'
	};

	function encodeHTML(source) {
	  return source == null ? '' : (source + '').replace(replaceReg, function (str, c) {
	    return replaceMap[c];
	  });
	}

	var TPL_VAR_ALIAS = ['a', 'b', 'c', 'd', 'e', 'f', 'g'];

	var wrapVar = function (varName, seriesIdx) {
	  return '{' + varName + (seriesIdx == null ? '' : seriesIdx) + '}';
	};
	/**
	 * Template formatter
	 * @param {string} tpl
	 * @param {Array.<Object>|Object} paramsList
	 * @param {boolean} [encode=false]
	 * @return {string}
	 */


	function formatTpl(tpl, paramsList, encode) {
	  if (!zrUtil.isArray(paramsList)) {
	    paramsList = [paramsList];
	  }

	  var seriesLen = paramsList.length;

	  if (!seriesLen) {
	    return '';
	  }

	  var $vars = paramsList[0].$vars || [];

	  for (var i = 0; i < $vars.length; i++) {
	    var alias = TPL_VAR_ALIAS[i];
	    tpl = tpl.replace(wrapVar(alias), wrapVar(alias, 0));
	  }

	  for (var seriesIdx = 0; seriesIdx < seriesLen; seriesIdx++) {
	    for (var k = 0; k < $vars.length; k++) {
	      var val = paramsList[seriesIdx][$vars[k]];
	      tpl = tpl.replace(wrapVar(TPL_VAR_ALIAS[k], seriesIdx), encode ? encodeHTML(val) : val);
	    }
	  }

	  return tpl;
	}
	/**
	 * simple Template formatter
	 *
	 * @param {string} tpl
	 * @param {Object} param
	 * @param {boolean} [encode=false]
	 * @return {string}
	 */


	function formatTplSimple(tpl, param, encode) {
	  zrUtil.each(param, function (value, key) {
	    tpl = tpl.replace('{' + key + '}', encode ? encodeHTML(value) : value);
	  });
	  return tpl;
	}
	/**
	 * @param {Object|string} [opt] If string, means color.
	 * @param {string} [opt.color]
	 * @param {string} [opt.extraCssText]
	 * @param {string} [opt.type='item'] 'item' or 'subItem'
	 * @return {string}
	 */


	function getTooltipMarker(opt, extraCssText) {
	  opt = zrUtil.isString(opt) ? {
	    color: opt,
	    extraCssText: extraCssText
	  } : opt || {};
	  var color = opt.color;
	  var type = opt.type;
	  var extraCssText = opt.extraCssText;

	  if (!color) {
	    return '';
	  }

	  return type === 'subItem' ? '<span style="display:inline-block;vertical-align:middle;margin-right:8px;margin-left:3px;' + 'border-radius:4px;width:4px;height:4px;background-color:' + encodeHTML(color) + ';' + (extraCssText || '') + '"></span>' : '<span style="display:inline-block;margin-right:5px;' + 'border-radius:10px;width:10px;height:10px;background-color:' + encodeHTML(color) + ';' + (extraCssText || '') + '"></span>';
	}

	function pad(str, len) {
	  str += '';
	  return '0000'.substr(0, len - str.length) + str;
	}
	/**
	 * ISO Date format
	 * @param {string} tpl
	 * @param {number} value
	 * @param {boolean} [isUTC=false] Default in local time.
	 *           see `module:echarts/scale/Time`
	 *           and `module:echarts/util/number#parseDate`.
	 * @inner
	 */


	function formatTime(tpl, value, isUTC) {
	  if (tpl === 'week' || tpl === 'month' || tpl === 'quarter' || tpl === 'half-year' || tpl === 'year') {
	    tpl = 'MM-dd\nyyyy';
	  }

	  var date = numberUtil.parseDate(value);
	  var utc = isUTC ? 'UTC' : '';
	  var y = date['get' + utc + 'FullYear']();
	  var M = date['get' + utc + 'Month']() + 1;
	  var d = date['get' + utc + 'Date']();
	  var h = date['get' + utc + 'Hours']();
	  var m = date['get' + utc + 'Minutes']();
	  var s = date['get' + utc + 'Seconds']();
	  var S = date['get' + utc + 'Milliseconds']();
	  tpl = tpl.replace('MM', pad(M, 2)).replace('M', M).replace('yyyy', y).replace('yy', y % 100).replace('dd', pad(d, 2)).replace('d', d).replace('hh', pad(h, 2)).replace('h', h).replace('mm', pad(m, 2)).replace('m', m).replace('ss', pad(s, 2)).replace('s', s).replace('SSS', pad(S, 3));
	  return tpl;
	}
	/**
	 * Capital first
	 * @param {string} str
	 * @return {string}
	 */


	function capitalFirst(str) {
	  return str ? str.charAt(0).toUpperCase() + str.substr(1) : str;
	}

	var truncateText = textContain.truncateText;
	var getTextRect = textContain.getBoundingRect;
	exports.addCommas = addCommas;
	exports.toCamelCase = toCamelCase;
	exports.normalizeCssArray = normalizeCssArray;
	exports.encodeHTML = encodeHTML;
	exports.formatTpl = formatTpl;
	exports.formatTplSimple = formatTplSimple;
	exports.getTooltipMarker = getTooltipMarker;
	exports.formatTime = formatTime;
	exports.capitalFirst = capitalFirst;
	exports.truncateText = truncateText;
	exports.getTextRect = getTextRect;

/***/ }),
/* 265 */
/***/ (function(module, exports) {

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var _default = {
	  getBoxLayoutParams: function () {
	    return {
	      left: this.get('left'),
	      top: this.get('top'),
	      right: this.get('right'),
	      bottom: this.get('bottom'),
	      width: this.get('width'),
	      height: this.get('height')
	    };
	  }
	};
	module.exports = _default;

/***/ }),
/* 266 */
/***/ (function(module, exports) {

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var platform = ''; // Navigator not exists in node

	if (typeof navigator !== 'undefined') {
	  platform = navigator.platform || '';
	}

	var _default = {
	  // backgroundColor: 'rgba(0,0,0,0)',
	  // https://dribbble.com/shots/1065960-Infographic-Pie-chart-visualization
	  // color: ['#5793f3', '#d14a61', '#fd9c35', '#675bba', '#fec42c', '#dd4444', '#d4df5a', '#cd4870'],
	  // Light colors:
	  // color: ['#bcd3bb', '#e88f70', '#edc1a5', '#9dc5c8', '#e1e8c8', '#7b7c68', '#e5b5b5', '#f0b489', '#928ea8', '#bda29a'],
	  // color: ['#cc5664', '#9bd6ec', '#ea946e', '#8acaaa', '#f1ec64', '#ee8686', '#a48dc1', '#5da6bc', '#b9dcae'],
	  // Dark colors:
	  color: ['#c23531', '#2f4554', '#61a0a8', '#d48265', '#91c7ae', '#749f83', '#ca8622', '#bda29a', '#6e7074', '#546570', '#c4ccd3'],
	  gradientColor: ['#f6efa6', '#d88273', '#bf444c'],
	  // If xAxis and yAxis declared, grid is created by default.
	  // grid: {},
	  textStyle: {
	    // color: '#000',
	    // decoration: 'none',
	    // PENDING
	    fontFamily: platform.match(/^Win/) ? 'Microsoft YaHei' : 'sans-serif',
	    // fontFamily: 'Arial, Verdana, sans-serif',
	    fontSize: 12,
	    fontStyle: 'normal',
	    fontWeight: 'normal'
	  },
	  // http://blogs.adobe.com/webplatform/2014/02/24/using-blend-modes-in-html-canvas/
	  // https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation
	  // Default is source-over
	  blendMode: null,
	  animation: 'auto',
	  animationDuration: 1000,
	  animationDurationUpdate: 300,
	  animationEasing: 'exponentialOut',
	  animationEasingUpdate: 'cubicOut',
	  animationThreshold: 2000,
	  // Configuration for progressive/incremental rendering
	  progressiveThreshold: 3000,
	  progressive: 400,
	  // Threshold of if use single hover layer to optimize.
	  // It is recommended that `hoverLayerThreshold` is equivalent to or less than
	  // `progressiveThreshold`, otherwise hover will cause restart of progressive,
	  // which is unexpected.
	  // see example <echarts/test/heatmap-large.html>.
	  hoverLayerThreshold: 3000,
	  // See: module:echarts/scale/Time
	  useUTC: false
	};
	module.exports = _default;

/***/ }),
/* 267 */
/***/ (function(module, exports, __webpack_require__) {

	var _model = __webpack_require__(219);

	var makeInner = _model.makeInner;
	var normalizeToArray = _model.normalizeToArray;

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var inner = makeInner();

	function getNearestColorPalette(colors, requestColorNum) {
	  var paletteNum = colors.length; // TODO colors must be in order

	  for (var i = 0; i < paletteNum; i++) {
	    if (colors[i].length > requestColorNum) {
	      return colors[i];
	    }
	  }

	  return colors[paletteNum - 1];
	}

	var _default = {
	  clearColorPalette: function () {
	    inner(this).colorIdx = 0;
	    inner(this).colorNameMap = {};
	  },

	  /**
	   * @param {string} name MUST NOT be null/undefined. Otherwise call this function
	   *                 twise with the same parameters will get different result.
	   * @param {Object} [scope=this]
	   * @param {Object} [requestColorNum]
	   * @return {string} color string.
	   */
	  getColorFromPalette: function (name, scope, requestColorNum) {
	    scope = scope || this;
	    var scopeFields = inner(scope);
	    var colorIdx = scopeFields.colorIdx || 0;
	    var colorNameMap = scopeFields.colorNameMap = scopeFields.colorNameMap || {}; // Use `hasOwnProperty` to avoid conflict with Object.prototype.

	    if (colorNameMap.hasOwnProperty(name)) {
	      return colorNameMap[name];
	    }

	    var defaultColorPalette = normalizeToArray(this.get('color', true));
	    var layeredColorPalette = this.get('colorLayer', true);
	    var colorPalette = requestColorNum == null || !layeredColorPalette ? defaultColorPalette : getNearestColorPalette(layeredColorPalette, requestColorNum); // In case can't find in layered color palette.

	    colorPalette = colorPalette || defaultColorPalette;

	    if (!colorPalette || !colorPalette.length) {
	      return;
	    }

	    var color = colorPalette[colorIdx];

	    if (name) {
	      colorNameMap[name] = color;
	    }

	    scopeFields.colorIdx = (colorIdx + 1) % colorPalette.length;
	    return color;
	  }
	};
	module.exports = _default;

/***/ }),
/* 268 */
/***/ (function(module, exports, __webpack_require__) {

	var _config = __webpack_require__(177);

	var __DEV__ = _config.__DEV__;

	var _model = __webpack_require__(219);

	var makeInner = _model.makeInner;
	var getDataItemValue = _model.getDataItemValue;

	var _referHelper = __webpack_require__(269);

	var getCoordSysDefineBySeries = _referHelper.getCoordSysDefineBySeries;

	var _util = __webpack_require__(181);

	var createHashMap = _util.createHashMap;
	var each = _util.each;
	var map = _util.map;
	var isArray = _util.isArray;
	var isString = _util.isString;
	var isObject = _util.isObject;
	var isTypedArray = _util.isTypedArray;
	var isArrayLike = _util.isArrayLike;
	var extend = _util.extend;
	var assert = _util.assert;

	var Source = __webpack_require__(270);

	var _sourceType = __webpack_require__(271);

	var SOURCE_FORMAT_ORIGINAL = _sourceType.SOURCE_FORMAT_ORIGINAL;
	var SOURCE_FORMAT_ARRAY_ROWS = _sourceType.SOURCE_FORMAT_ARRAY_ROWS;
	var SOURCE_FORMAT_OBJECT_ROWS = _sourceType.SOURCE_FORMAT_OBJECT_ROWS;
	var SOURCE_FORMAT_KEYED_COLUMNS = _sourceType.SOURCE_FORMAT_KEYED_COLUMNS;
	var SOURCE_FORMAT_UNKNOWN = _sourceType.SOURCE_FORMAT_UNKNOWN;
	var SOURCE_FORMAT_TYPED_ARRAY = _sourceType.SOURCE_FORMAT_TYPED_ARRAY;
	var SERIES_LAYOUT_BY_ROW = _sourceType.SERIES_LAYOUT_BY_ROW;

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var inner = makeInner();
	/**
	 * @see {module:echarts/data/Source}
	 * @param {module:echarts/component/dataset/DatasetModel} datasetModel
	 * @return {string} sourceFormat
	 */

	function detectSourceFormat(datasetModel) {
	  var data = datasetModel.option.source;
	  var sourceFormat = SOURCE_FORMAT_UNKNOWN;

	  if (isTypedArray(data)) {
	    sourceFormat = SOURCE_FORMAT_TYPED_ARRAY;
	  } else if (isArray(data)) {
	    // FIXME Whether tolerate null in top level array?
	    for (var i = 0, len = data.length; i < len; i++) {
	      var item = data[i];

	      if (item == null) {
	        continue;
	      } else if (isArray(item)) {
	        sourceFormat = SOURCE_FORMAT_ARRAY_ROWS;
	        break;
	      } else if (isObject(item)) {
	        sourceFormat = SOURCE_FORMAT_OBJECT_ROWS;
	        break;
	      }
	    }
	  } else if (isObject(data)) {
	    for (var key in data) {
	      if (data.hasOwnProperty(key) && isArrayLike(data[key])) {
	        sourceFormat = SOURCE_FORMAT_KEYED_COLUMNS;
	        break;
	      }
	    }
	  } else if (data != null) {
	    throw new Error('Invalid data');
	  }

	  inner(datasetModel).sourceFormat = sourceFormat;
	}
	/**
	 * [Scenarios]:
	 * (1) Provide source data directly:
	 *     series: {
	 *         encode: {...},
	 *         dimensions: [...]
	 *         seriesLayoutBy: 'row',
	 *         data: [[...]]
	 *     }
	 * (2) Refer to datasetModel.
	 *     series: [{
	 *         encode: {...}
	 *         // Ignore datasetIndex means `datasetIndex: 0`
	 *         // and the dimensions defination in dataset is used
	 *     }, {
	 *         encode: {...},
	 *         seriesLayoutBy: 'column',
	 *         datasetIndex: 1
	 *     }]
	 *
	 * Get data from series itself or datset.
	 * @return {module:echarts/data/Source} source
	 */


	function getSource(seriesModel) {
	  return inner(seriesModel).source;
	}
	/**
	 * MUST be called before mergeOption of all series.
	 * @param {module:echarts/model/Global} ecModel
	 */


	function resetSourceDefaulter(ecModel) {
	  // `datasetMap` is used to make default encode.
	  inner(ecModel).datasetMap = createHashMap();
	}
	/**
	 * [Caution]:
	 * MUST be called after series option merged and
	 * before "series.getInitailData()" called.
	 *
	 * [The rule of making default encode]:
	 * Category axis (if exists) alway map to the first dimension.
	 * Each other axis occupies a subsequent dimension.
	 *
	 * [Why make default encode]:
	 * Simplify the typing of encode in option, avoiding the case like that:
	 * series: [{encode: {x: 0, y: 1}}, {encode: {x: 0, y: 2}}, {encode: {x: 0, y: 3}}],
	 * where the "y" have to be manually typed as "1, 2, 3, ...".
	 *
	 * @param {module:echarts/model/Series} seriesModel
	 */


	function prepareSource(seriesModel) {
	  var seriesOption = seriesModel.option;
	  var data = seriesOption.data;
	  var sourceFormat = isTypedArray(data) ? SOURCE_FORMAT_TYPED_ARRAY : SOURCE_FORMAT_ORIGINAL;
	  var fromDataset = false;
	  var seriesLayoutBy = seriesOption.seriesLayoutBy;
	  var sourceHeader = seriesOption.sourceHeader;
	  var dimensionsDefine = seriesOption.dimensions;
	  var datasetModel = getDatasetModel(seriesModel);

	  if (datasetModel) {
	    var datasetOption = datasetModel.option;
	    data = datasetOption.source;
	    sourceFormat = inner(datasetModel).sourceFormat;
	    fromDataset = true; // These settings from series has higher priority.

	    seriesLayoutBy = seriesLayoutBy || datasetOption.seriesLayoutBy;
	    sourceHeader == null && (sourceHeader = datasetOption.sourceHeader);
	    dimensionsDefine = dimensionsDefine || datasetOption.dimensions;
	  }

	  var completeResult = completeBySourceData(data, sourceFormat, seriesLayoutBy, sourceHeader, dimensionsDefine); // Note: dataset option does not have `encode`.

	  var encodeDefine = seriesOption.encode;

	  if (!encodeDefine && datasetModel) {
	    encodeDefine = makeDefaultEncode(seriesModel, datasetModel, data, sourceFormat, seriesLayoutBy, completeResult);
	  }

	  inner(seriesModel).source = new Source({
	    data: data,
	    fromDataset: fromDataset,
	    seriesLayoutBy: seriesLayoutBy,
	    sourceFormat: sourceFormat,
	    dimensionsDefine: completeResult.dimensionsDefine,
	    startIndex: completeResult.startIndex,
	    dimensionsDetectCount: completeResult.dimensionsDetectCount,
	    encodeDefine: encodeDefine
	  });
	} // return {startIndex, dimensionsDefine, dimensionsCount}


	function completeBySourceData(data, sourceFormat, seriesLayoutBy, sourceHeader, dimensionsDefine) {
	  if (!data) {
	    return {
	      dimensionsDefine: normalizeDimensionsDefine(dimensionsDefine)
	    };
	  }

	  var dimensionsDetectCount;
	  var startIndex;
	  var findPotentialName;

	  if (sourceFormat === SOURCE_FORMAT_ARRAY_ROWS) {
	    // Rule: Most of the first line are string: it is header.
	    // Caution: consider a line with 5 string and 1 number,
	    // it still can not be sure it is a head, because the
	    // 5 string may be 5 values of category columns.
	    if (sourceHeader === 'auto' || sourceHeader == null) {
	      arrayRowsTravelFirst(function (val) {
	        // '-' is regarded as null/undefined.
	        if (val != null && val !== '-') {
	          if (isString(val)) {
	            startIndex == null && (startIndex = 1);
	          } else {
	            startIndex = 0;
	          }
	        } // 10 is an experience number, avoid long loop.

	      }, seriesLayoutBy, data, 10);
	    } else {
	      startIndex = sourceHeader ? 1 : 0;
	    }

	    if (!dimensionsDefine && startIndex === 1) {
	      dimensionsDefine = [];
	      arrayRowsTravelFirst(function (val, index) {
	        dimensionsDefine[index] = val != null ? val : '';
	      }, seriesLayoutBy, data);
	    }

	    dimensionsDetectCount = dimensionsDefine ? dimensionsDefine.length : seriesLayoutBy === SERIES_LAYOUT_BY_ROW ? data.length : data[0] ? data[0].length : null;
	  } else if (sourceFormat === SOURCE_FORMAT_OBJECT_ROWS) {
	    if (!dimensionsDefine) {
	      dimensionsDefine = objectRowsCollectDimensions(data);
	      findPotentialName = true;
	    }
	  } else if (sourceFormat === SOURCE_FORMAT_KEYED_COLUMNS) {
	    if (!dimensionsDefine) {
	      dimensionsDefine = [];
	      findPotentialName = true;
	      each(data, function (colArr, key) {
	        dimensionsDefine.push(key);
	      });
	    }
	  } else if (sourceFormat === SOURCE_FORMAT_ORIGINAL) {
	    var value0 = getDataItemValue(data[0]);
	    dimensionsDetectCount = isArray(value0) && value0.length || 1;
	  } else if (sourceFormat === SOURCE_FORMAT_TYPED_ARRAY) {}

	  var potentialNameDimIndex;

	  if (findPotentialName) {
	    each(dimensionsDefine, function (dim, idx) {
	      if ((isObject(dim) ? dim.name : dim) === 'name') {
	        potentialNameDimIndex = idx;
	      }
	    });
	  }

	  return {
	    startIndex: startIndex,
	    dimensionsDefine: normalizeDimensionsDefine(dimensionsDefine),
	    dimensionsDetectCount: dimensionsDetectCount,
	    potentialNameDimIndex: potentialNameDimIndex // TODO: potentialIdDimIdx

	  };
	} // Consider dimensions defined like ['A', 'price', 'B', 'price', 'C', 'price'],
	// which is reasonable. But dimension name is duplicated.
	// Returns undefined or an array contains only object without null/undefiend or string.


	function normalizeDimensionsDefine(dimensionsDefine) {
	  if (!dimensionsDefine) {
	    // The meaning of null/undefined is different from empty array.
	    return;
	  }

	  var nameMap = createHashMap();
	  return map(dimensionsDefine, function (item, index) {
	    item = extend({}, isObject(item) ? item : {
	      name: item
	    }); // User can set null in dimensions.
	    // We dont auto specify name, othewise a given name may
	    // cause it be refered unexpectedly.

	    if (item.name == null) {
	      return item;
	    } // Also consider number form like 2012.


	    item.name += ''; // User may also specify displayName.
	    // displayName will always exists except user not
	    // specified or dim name is not specified or detected.
	    // (A auto generated dim name will not be used as
	    // displayName).

	    if (item.displayName == null) {
	      item.displayName = item.name;
	    }

	    var exist = nameMap.get(item.name);

	    if (!exist) {
	      nameMap.set(item.name, {
	        count: 1
	      });
	    } else {
	      item.name += '-' + exist.count++;
	    }

	    return item;
	  });
	}

	function arrayRowsTravelFirst(cb, seriesLayoutBy, data, maxLoop) {
	  maxLoop == null && (maxLoop = Infinity);

	  if (seriesLayoutBy === SERIES_LAYOUT_BY_ROW) {
	    for (var i = 0; i < data.length && i < maxLoop; i++) {
	      cb(data[i] ? data[i][0] : null, i);
	    }
	  } else {
	    var value0 = data[0] || [];

	    for (var i = 0; i < value0.length && i < maxLoop; i++) {
	      cb(value0[i], i);
	    }
	  }
	}

	function objectRowsCollectDimensions(data) {
	  var firstIndex = 0;
	  var obj;

	  while (firstIndex < data.length && !(obj = data[firstIndex++])) {} // jshint ignore: line


	  if (obj) {
	    var dimensions = [];
	    each(obj, function (value, key) {
	      dimensions.push(key);
	    });
	    return dimensions;
	  }
	} // ??? TODO merge to completedimensions, where also has
	// default encode making logic. And the default rule
	// should depends on series? consider 'map'.


	function makeDefaultEncode(seriesModel, datasetModel, data, sourceFormat, seriesLayoutBy, completeResult) {
	  var coordSysDefine = getCoordSysDefineBySeries(seriesModel);
	  var encode = {}; // var encodeTooltip = [];
	  // var encodeLabel = [];

	  var encodeItemName = [];
	  var encodeSeriesName = [];
	  var seriesType = seriesModel.subType; // ??? TODO refactor: provide by series itself.
	  // Consider the case: 'map' series is based on geo coordSys,
	  // 'graph', 'heatmap' can be based on cartesian. But can not
	  // give default rule simply here.

	  var nSeriesMap = createHashMap(['pie', 'map', 'funnel']);
	  var cSeriesMap = createHashMap(['line', 'bar', 'pictorialBar', 'scatter', 'effectScatter', 'candlestick', 'boxplot']); // Usually in this case series will use the first data
	  // dimension as the "value" dimension, or other default
	  // processes respectively.

	  if (coordSysDefine && cSeriesMap.get(seriesType) != null) {
	    var ecModel = seriesModel.ecModel;
	    var datasetMap = inner(ecModel).datasetMap;
	    var key = datasetModel.uid + '_' + seriesLayoutBy;
	    var datasetRecord = datasetMap.get(key) || datasetMap.set(key, {
	      categoryWayDim: 1,
	      valueWayDim: 0
	    }); // TODO
	    // Auto detect first time axis and do arrangement.

	    each(coordSysDefine.coordSysDims, function (coordDim) {
	      // In value way.
	      if (coordSysDefine.firstCategoryDimIndex == null) {
	        var dataDim = datasetRecord.valueWayDim++;
	        encode[coordDim] = dataDim; // ??? TODO give a better default series name rule?
	        // especially when encode x y specified.
	        // consider: when mutiple series share one dimension
	        // category axis, series name should better use
	        // the other dimsion name. On the other hand, use
	        // both dimensions name.

	        encodeSeriesName.push(dataDim); // encodeTooltip.push(dataDim);
	        // encodeLabel.push(dataDim);
	      } // In category way, category axis.
	      else if (coordSysDefine.categoryAxisMap.get(coordDim)) {
	          encode[coordDim] = 0;
	          encodeItemName.push(0);
	        } // In category way, non-category axis.
	        else {
	            var dataDim = datasetRecord.categoryWayDim++;
	            encode[coordDim] = dataDim; // encodeTooltip.push(dataDim);
	            // encodeLabel.push(dataDim);

	            encodeSeriesName.push(dataDim);
	          }
	    });
	  } // Do not make a complex rule! Hard to code maintain and not necessary.
	  // ??? TODO refactor: provide by series itself.
	  // [{name: ..., value: ...}, ...] like:
	  else if (nSeriesMap.get(seriesType) != null) {
	      // Find the first not ordinal. (5 is an experience value)
	      var firstNotOrdinal;

	      for (var i = 0; i < 5 && firstNotOrdinal == null; i++) {
	        if (!doGuessOrdinal(data, sourceFormat, seriesLayoutBy, completeResult.dimensionsDefine, completeResult.startIndex, i)) {
	          firstNotOrdinal = i;
	        }
	      }

	      if (firstNotOrdinal != null) {
	        encode.value = firstNotOrdinal;
	        var nameDimIndex = completeResult.potentialNameDimIndex || Math.max(firstNotOrdinal - 1, 0); // By default, label use itemName in charts.
	        // So we dont set encodeLabel here.

	        encodeSeriesName.push(nameDimIndex);
	        encodeItemName.push(nameDimIndex); // encodeTooltip.push(firstNotOrdinal);
	      }
	    } // encodeTooltip.length && (encode.tooltip = encodeTooltip);
	  // encodeLabel.length && (encode.label = encodeLabel);


	  encodeItemName.length && (encode.itemName = encodeItemName);
	  encodeSeriesName.length && (encode.seriesName = encodeSeriesName);
	  return encode;
	}
	/**
	 * If return null/undefined, indicate that should not use datasetModel.
	 */


	function getDatasetModel(seriesModel) {
	  var option = seriesModel.option; // Caution: consider the scenario:
	  // A dataset is declared and a series is not expected to use the dataset,
	  // and at the beginning `setOption({series: { noData })` (just prepare other
	  // option but no data), then `setOption({series: {data: [...]}); In this case,
	  // the user should set an empty array to avoid that dataset is used by default.

	  var thisData = option.data;

	  if (!thisData) {
	    return seriesModel.ecModel.getComponent('dataset', option.datasetIndex || 0);
	  }
	}
	/**
	 * The rule should not be complex, otherwise user might not
	 * be able to known where the data is wrong.
	 * The code is ugly, but how to make it neat?
	 *
	 * @param {module:echars/data/Source} source
	 * @param {number} dimIndex
	 * @return {boolean} Whether ordinal.
	 */


	function guessOrdinal(source, dimIndex) {
	  return doGuessOrdinal(source.data, source.sourceFormat, source.seriesLayoutBy, source.dimensionsDefine, source.startIndex, dimIndex);
	} // dimIndex may be overflow source data.


	function doGuessOrdinal(data, sourceFormat, seriesLayoutBy, dimensionsDefine, startIndex, dimIndex) {
	  var result; // Experience value.

	  var maxLoop = 5;

	  if (isTypedArray(data)) {
	    return false;
	  } // When sourceType is 'objectRows' or 'keyedColumns', dimensionsDefine
	  // always exists in source.


	  var dimName;

	  if (dimensionsDefine) {
	    dimName = dimensionsDefine[dimIndex];
	    dimName = isObject(dimName) ? dimName.name : dimName;
	  }

	  if (sourceFormat === SOURCE_FORMAT_ARRAY_ROWS) {
	    if (seriesLayoutBy === SERIES_LAYOUT_BY_ROW) {
	      var sample = data[dimIndex];

	      for (var i = 0; i < (sample || []).length && i < maxLoop; i++) {
	        if ((result = detectValue(sample[startIndex + i])) != null) {
	          return result;
	        }
	      }
	    } else {
	      for (var i = 0; i < data.length && i < maxLoop; i++) {
	        var row = data[startIndex + i];

	        if (row && (result = detectValue(row[dimIndex])) != null) {
	          return result;
	        }
	      }
	    }
	  } else if (sourceFormat === SOURCE_FORMAT_OBJECT_ROWS) {
	    if (!dimName) {
	      return;
	    }

	    for (var i = 0; i < data.length && i < maxLoop; i++) {
	      var item = data[i];

	      if (item && (result = detectValue(item[dimName])) != null) {
	        return result;
	      }
	    }
	  } else if (sourceFormat === SOURCE_FORMAT_KEYED_COLUMNS) {
	    if (!dimName) {
	      return;
	    }

	    var sample = data[dimName];

	    if (!sample || isTypedArray(sample)) {
	      return false;
	    }

	    for (var i = 0; i < sample.length && i < maxLoop; i++) {
	      if ((result = detectValue(sample[i])) != null) {
	        return result;
	      }
	    }
	  } else if (sourceFormat === SOURCE_FORMAT_ORIGINAL) {
	    for (var i = 0; i < data.length && i < maxLoop; i++) {
	      var item = data[i];
	      var val = getDataItemValue(item);

	      if (!isArray(val)) {
	        return false;
	      }

	      if ((result = detectValue(val[dimIndex])) != null) {
	        return result;
	      }
	    }
	  }

	  function detectValue(val) {
	    // Consider usage convenience, '1', '2' will be treated as "number".
	    // `isFinit('')` get `true`.
	    if (val != null && isFinite(val) && val !== '') {
	      return false;
	    } else if (isString(val) && val !== '-') {
	      return true;
	    }
	  }

	  return false;
	}

	exports.detectSourceFormat = detectSourceFormat;
	exports.getSource = getSource;
	exports.resetSourceDefaulter = resetSourceDefaulter;
	exports.prepareSource = prepareSource;
	exports.guessOrdinal = guessOrdinal;

/***/ }),
/* 269 */
/***/ (function(module, exports, __webpack_require__) {

	var _config = __webpack_require__(177);

	var __DEV__ = _config.__DEV__;

	var _util = __webpack_require__(181);

	var createHashMap = _util.createHashMap;
	var retrieve = _util.retrieve;
	var each = _util.each;

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/

	/**
	 * Helper for model references.
	 * There are many manners to refer axis/coordSys.
	 */
	// TODO
	// merge relevant logic to this file?
	// check: "modelHelper" of tooltip and "BrushTargetManager".

	/**
	 * @return {Object} For example:
	 * {
	 *     coordSysName: 'cartesian2d',
	 *     coordSysDims: ['x', 'y', ...],
	 *     axisMap: HashMap({
	 *         x: xAxisModel,
	 *         y: yAxisModel
	 *     }),
	 *     categoryAxisMap: HashMap({
	 *         x: xAxisModel,
	 *         y: undefined
	 *     }),
	 *     // It also indicate that whether there is category axis.
	 *     firstCategoryDimIndex: 1,
	 *     // To replace user specified encode.
	 * }
	 */
	function getCoordSysDefineBySeries(seriesModel) {
	  var coordSysName = seriesModel.get('coordinateSystem');
	  var result = {
	    coordSysName: coordSysName,
	    coordSysDims: [],
	    axisMap: createHashMap(),
	    categoryAxisMap: createHashMap()
	  };
	  var fetch = fetchers[coordSysName];

	  if (fetch) {
	    fetch(seriesModel, result, result.axisMap, result.categoryAxisMap);
	    return result;
	  }
	}

	var fetchers = {
	  cartesian2d: function (seriesModel, result, axisMap, categoryAxisMap) {
	    var xAxisModel = seriesModel.getReferringComponents('xAxis')[0];
	    var yAxisModel = seriesModel.getReferringComponents('yAxis')[0];
	    result.coordSysDims = ['x', 'y'];
	    axisMap.set('x', xAxisModel);
	    axisMap.set('y', yAxisModel);

	    if (isCategory(xAxisModel)) {
	      categoryAxisMap.set('x', xAxisModel);
	      result.firstCategoryDimIndex = 0;
	    }

	    if (isCategory(yAxisModel)) {
	      categoryAxisMap.set('y', yAxisModel);
	      result.firstCategoryDimIndex = 1;
	    }
	  },
	  singleAxis: function (seriesModel, result, axisMap, categoryAxisMap) {
	    var singleAxisModel = seriesModel.getReferringComponents('singleAxis')[0];
	    result.coordSysDims = ['single'];
	    axisMap.set('single', singleAxisModel);

	    if (isCategory(singleAxisModel)) {
	      categoryAxisMap.set('single', singleAxisModel);
	      result.firstCategoryDimIndex = 0;
	    }
	  },
	  polar: function (seriesModel, result, axisMap, categoryAxisMap) {
	    var polarModel = seriesModel.getReferringComponents('polar')[0];
	    var radiusAxisModel = polarModel.findAxisModel('radiusAxis');
	    var angleAxisModel = polarModel.findAxisModel('angleAxis');
	    result.coordSysDims = ['radius', 'angle'];
	    axisMap.set('radius', radiusAxisModel);
	    axisMap.set('angle', angleAxisModel);

	    if (isCategory(radiusAxisModel)) {
	      categoryAxisMap.set('radius', radiusAxisModel);
	      result.firstCategoryDimIndex = 0;
	    }

	    if (isCategory(angleAxisModel)) {
	      categoryAxisMap.set('angle', angleAxisModel);
	      result.firstCategoryDimIndex = 1;
	    }
	  },
	  geo: function (seriesModel, result, axisMap, categoryAxisMap) {
	    result.coordSysDims = ['lng', 'lat'];
	  },
	  parallel: function (seriesModel, result, axisMap, categoryAxisMap) {
	    var ecModel = seriesModel.ecModel;
	    var parallelModel = ecModel.getComponent('parallel', seriesModel.get('parallelIndex'));
	    var coordSysDims = result.coordSysDims = parallelModel.dimensions.slice();
	    each(parallelModel.parallelAxisIndex, function (axisIndex, index) {
	      var axisModel = ecModel.getComponent('parallelAxis', axisIndex);
	      var axisDim = coordSysDims[index];
	      axisMap.set(axisDim, axisModel);

	      if (isCategory(axisModel) && result.firstCategoryDimIndex == null) {
	        categoryAxisMap.set(axisDim, axisModel);
	        result.firstCategoryDimIndex = index;
	      }
	    });
	  }
	};

	function isCategory(axisModel) {
	  return axisModel.get('type') === 'category';
	}

	exports.getCoordSysDefineBySeries = getCoordSysDefineBySeries;

/***/ }),
/* 270 */
/***/ (function(module, exports, __webpack_require__) {

	var _util = __webpack_require__(181);

	var createHashMap = _util.createHashMap;
	var isTypedArray = _util.isTypedArray;

	var _clazz = __webpack_require__(221);

	var enableClassCheck = _clazz.enableClassCheck;

	var _sourceType = __webpack_require__(271);

	var SOURCE_FORMAT_ORIGINAL = _sourceType.SOURCE_FORMAT_ORIGINAL;
	var SERIES_LAYOUT_BY_COLUMN = _sourceType.SERIES_LAYOUT_BY_COLUMN;
	var SOURCE_FORMAT_UNKNOWN = _sourceType.SOURCE_FORMAT_UNKNOWN;
	var SOURCE_FORMAT_TYPED_ARRAY = _sourceType.SOURCE_FORMAT_TYPED_ARRAY;
	var SOURCE_FORMAT_KEYED_COLUMNS = _sourceType.SOURCE_FORMAT_KEYED_COLUMNS;

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/

	/**
	 * [sourceFormat]
	 *
	 * + "original":
	 * This format is only used in series.data, where
	 * itemStyle can be specified in data item.
	 *
	 * + "arrayRows":
	 * [
	 *     ['product', 'score', 'amount'],
	 *     ['Matcha Latte', 89.3, 95.8],
	 *     ['Milk Tea', 92.1, 89.4],
	 *     ['Cheese Cocoa', 94.4, 91.2],
	 *     ['Walnut Brownie', 85.4, 76.9]
	 * ]
	 *
	 * + "objectRows":
	 * [
	 *     {product: 'Matcha Latte', score: 89.3, amount: 95.8},
	 *     {product: 'Milk Tea', score: 92.1, amount: 89.4},
	 *     {product: 'Cheese Cocoa', score: 94.4, amount: 91.2},
	 *     {product: 'Walnut Brownie', score: 85.4, amount: 76.9}
	 * ]
	 *
	 * + "keyedColumns":
	 * {
	 *     'product': ['Matcha Latte', 'Milk Tea', 'Cheese Cocoa', 'Walnut Brownie'],
	 *     'count': [823, 235, 1042, 988],
	 *     'score': [95.8, 81.4, 91.2, 76.9]
	 * }
	 *
	 * + "typedArray"
	 *
	 * + "unknown"
	 */

	/**
	 * @constructor
	 * @param {Object} fields
	 * @param {string} fields.sourceFormat
	 * @param {Array|Object} fields.fromDataset
	 * @param {Array|Object} [fields.data]
	 * @param {string} [seriesLayoutBy='column']
	 * @param {Array.<Object|string>} [dimensionsDefine]
	 * @param {Objet|HashMap} [encodeDefine]
	 * @param {number} [startIndex=0]
	 * @param {number} [dimensionsDetectCount]
	 */
	function Source(fields) {
	  /**
	   * @type {boolean}
	   */
	  this.fromDataset = fields.fromDataset;
	  /**
	   * Not null/undefined.
	   * @type {Array|Object}
	   */

	  this.data = fields.data || (fields.sourceFormat === SOURCE_FORMAT_KEYED_COLUMNS ? {} : []);
	  /**
	   * See also "detectSourceFormat".
	   * Not null/undefined.
	   * @type {string}
	   */

	  this.sourceFormat = fields.sourceFormat || SOURCE_FORMAT_UNKNOWN;
	  /**
	   * 'row' or 'column'
	   * Not null/undefined.
	   * @type {string} seriesLayoutBy
	   */

	  this.seriesLayoutBy = fields.seriesLayoutBy || SERIES_LAYOUT_BY_COLUMN;
	  /**
	   * dimensions definition in option.
	   * can be null/undefined.
	   * @type {Array.<Object|string>}
	   */

	  this.dimensionsDefine = fields.dimensionsDefine;
	  /**
	   * encode definition in option.
	   * can be null/undefined.
	   * @type {Objet|HashMap}
	   */

	  this.encodeDefine = fields.encodeDefine && createHashMap(fields.encodeDefine);
	  /**
	   * Not null/undefined, uint.
	   * @type {number}
	   */

	  this.startIndex = fields.startIndex || 0;
	  /**
	   * Can be null/undefined (when unknown), uint.
	   * @type {number}
	   */

	  this.dimensionsDetectCount = fields.dimensionsDetectCount;
	}
	/**
	 * Wrap original series data for some compatibility cases.
	 */


	Source.seriesDataToSource = function (data) {
	  return new Source({
	    data: data,
	    sourceFormat: isTypedArray(data) ? SOURCE_FORMAT_TYPED_ARRAY : SOURCE_FORMAT_ORIGINAL,
	    fromDataset: false
	  });
	};

	enableClassCheck(Source);
	var _default = Source;
	module.exports = _default;

/***/ }),
/* 271 */
/***/ (function(module, exports) {

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	// Avoid typo.
	var SOURCE_FORMAT_ORIGINAL = 'original';
	var SOURCE_FORMAT_ARRAY_ROWS = 'arrayRows';
	var SOURCE_FORMAT_OBJECT_ROWS = 'objectRows';
	var SOURCE_FORMAT_KEYED_COLUMNS = 'keyedColumns';
	var SOURCE_FORMAT_UNKNOWN = 'unknown'; // ??? CHANGE A NAME

	var SOURCE_FORMAT_TYPED_ARRAY = 'typedArray';
	var SERIES_LAYOUT_BY_COLUMN = 'column';
	var SERIES_LAYOUT_BY_ROW = 'row';
	exports.SOURCE_FORMAT_ORIGINAL = SOURCE_FORMAT_ORIGINAL;
	exports.SOURCE_FORMAT_ARRAY_ROWS = SOURCE_FORMAT_ARRAY_ROWS;
	exports.SOURCE_FORMAT_OBJECT_ROWS = SOURCE_FORMAT_OBJECT_ROWS;
	exports.SOURCE_FORMAT_KEYED_COLUMNS = SOURCE_FORMAT_KEYED_COLUMNS;
	exports.SOURCE_FORMAT_UNKNOWN = SOURCE_FORMAT_UNKNOWN;
	exports.SOURCE_FORMAT_TYPED_ARRAY = SOURCE_FORMAT_TYPED_ARRAY;
	exports.SERIES_LAYOUT_BY_COLUMN = SERIES_LAYOUT_BY_COLUMN;
	exports.SERIES_LAYOUT_BY_ROW = SERIES_LAYOUT_BY_ROW;

/***/ }),
/* 272 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(181);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var echartsAPIList = ['getDom', 'getZr', 'getWidth', 'getHeight', 'getDevicePixelRatio', 'dispatchAction', 'isDisposed', 'on', 'off', 'getDataURL', 'getConnectedDataURL', 'getModel', 'getOption', 'getViewOfComponentModel', 'getViewOfSeriesModel']; // And `getCoordinateSystems` and `getComponentByElement` will be injected in echarts.js

	function ExtensionAPI(chartInstance) {
	  zrUtil.each(echartsAPIList, function (name) {
	    this[name] = zrUtil.bind(chartInstance[name], chartInstance);
	  }, this);
	}

	var _default = ExtensionAPI;
	module.exports = _default;

/***/ }),
/* 273 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(181);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var coordinateSystemCreators = {};

	function CoordinateSystemManager() {
	  this._coordinateSystems = [];
	}

	CoordinateSystemManager.prototype = {
	  constructor: CoordinateSystemManager,
	  create: function (ecModel, api) {
	    var coordinateSystems = [];
	    zrUtil.each(coordinateSystemCreators, function (creater, type) {
	      var list = creater.create(ecModel, api);
	      coordinateSystems = coordinateSystems.concat(list || []);
	    });
	    this._coordinateSystems = coordinateSystems;
	  },
	  update: function (ecModel, api) {
	    zrUtil.each(this._coordinateSystems, function (coordSys) {
	      coordSys.update && coordSys.update(ecModel, api);
	    });
	  },
	  getCoordinateSystems: function () {
	    return this._coordinateSystems.slice();
	  }
	};

	CoordinateSystemManager.register = function (type, coordinateSystemCreator) {
	  coordinateSystemCreators[type] = coordinateSystemCreator;
	};

	CoordinateSystemManager.get = function (type) {
	  return coordinateSystemCreators[type];
	};

	var _default = CoordinateSystemManager;
	module.exports = _default;

/***/ }),
/* 274 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(181);

	var modelUtil = __webpack_require__(219);

	var ComponentModel = __webpack_require__(260);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/

	/**
	 * ECharts option manager
	 *
	 * @module {echarts/model/OptionManager}
	 */
	var each = zrUtil.each;
	var clone = zrUtil.clone;
	var map = zrUtil.map;
	var merge = zrUtil.merge;
	var QUERY_REG = /^(min|max)?(.+)$/;
	/**
	 * TERM EXPLANATIONS:
	 *
	 * [option]:
	 *
	 *     An object that contains definitions of components. For example:
	 *     var option = {
	 *         title: {...},
	 *         legend: {...},
	 *         visualMap: {...},
	 *         series: [
	 *             {data: [...]},
	 *             {data: [...]},
	 *             ...
	 *         ]
	 *     };
	 *
	 * [rawOption]:
	 *
	 *     An object input to echarts.setOption. 'rawOption' may be an
	 *     'option', or may be an object contains multi-options. For example:
	 *     var option = {
	 *         baseOption: {
	 *             title: {...},
	 *             legend: {...},
	 *             series: [
	 *                 {data: [...]},
	 *                 {data: [...]},
	 *                 ...
	 *             ]
	 *         },
	 *         timeline: {...},
	 *         options: [
	 *             {title: {...}, series: {data: [...]}},
	 *             {title: {...}, series: {data: [...]}},
	 *             ...
	 *         ],
	 *         media: [
	 *             {
	 *                 query: {maxWidth: 320},
	 *                 option: {series: {x: 20}, visualMap: {show: false}}
	 *             },
	 *             {
	 *                 query: {minWidth: 320, maxWidth: 720},
	 *                 option: {series: {x: 500}, visualMap: {show: true}}
	 *             },
	 *             {
	 *                 option: {series: {x: 1200}, visualMap: {show: true}}
	 *             }
	 *         ]
	 *     };
	 *
	 * @alias module:echarts/model/OptionManager
	 * @param {module:echarts/ExtensionAPI} api
	 */

	function OptionManager(api) {
	  /**
	   * @private
	   * @type {module:echarts/ExtensionAPI}
	   */
	  this._api = api;
	  /**
	   * @private
	   * @type {Array.<number>}
	   */

	  this._timelineOptions = [];
	  /**
	   * @private
	   * @type {Array.<Object>}
	   */

	  this._mediaList = [];
	  /**
	   * @private
	   * @type {Object}
	   */

	  this._mediaDefault;
	  /**
	   * -1, means default.
	   * empty means no media.
	   * @private
	   * @type {Array.<number>}
	   */

	  this._currentMediaIndices = [];
	  /**
	   * @private
	   * @type {Object}
	   */

	  this._optionBackup;
	  /**
	   * @private
	   * @type {Object}
	   */

	  this._newBaseOption;
	} // timeline.notMerge is not supported in ec3. Firstly there is rearly
	// case that notMerge is needed. Secondly supporting 'notMerge' requires
	// rawOption cloned and backuped when timeline changed, which does no
	// good to performance. What's more, that both timeline and setOption
	// method supply 'notMerge' brings complex and some problems.
	// Consider this case:
	// (step1) chart.setOption({timeline: {notMerge: false}, ...}, false);
	// (step2) chart.setOption({timeline: {notMerge: true}, ...}, false);


	OptionManager.prototype = {
	  constructor: OptionManager,

	  /**
	   * @public
	   * @param {Object} rawOption Raw option.
	   * @param {module:echarts/model/Global} ecModel
	   * @param {Array.<Function>} optionPreprocessorFuncs
	   * @return {Object} Init option
	   */
	  setOption: function (rawOption, optionPreprocessorFuncs) {
	    if (rawOption) {
	      // That set dat primitive is dangerous if user reuse the data when setOption again.
	      zrUtil.each(modelUtil.normalizeToArray(rawOption.series), function (series) {
	        series && series.data && zrUtil.isTypedArray(series.data) && zrUtil.setAsPrimitive(series.data);
	      });
	    } // Caution: some series modify option data, if do not clone,
	    // it should ensure that the repeat modify correctly
	    // (create a new object when modify itself).


	    rawOption = clone(rawOption, true); // FIXME
	    // 如果 timeline options 或者 media 中设置了某个属性，而baseOption中没有设置，则进行警告。

	    var oldOptionBackup = this._optionBackup;
	    var newParsedOption = parseRawOption.call(this, rawOption, optionPreprocessorFuncs, !oldOptionBackup);
	    this._newBaseOption = newParsedOption.baseOption; // For setOption at second time (using merge mode);

	    if (oldOptionBackup) {
	      // Only baseOption can be merged.
	      mergeOption(oldOptionBackup.baseOption, newParsedOption.baseOption); // For simplicity, timeline options and media options do not support merge,
	      // that is, if you `setOption` twice and both has timeline options, the latter
	      // timeline opitons will not be merged to the formers, but just substitude them.

	      if (newParsedOption.timelineOptions.length) {
	        oldOptionBackup.timelineOptions = newParsedOption.timelineOptions;
	      }

	      if (newParsedOption.mediaList.length) {
	        oldOptionBackup.mediaList = newParsedOption.mediaList;
	      }

	      if (newParsedOption.mediaDefault) {
	        oldOptionBackup.mediaDefault = newParsedOption.mediaDefault;
	      }
	    } else {
	      this._optionBackup = newParsedOption;
	    }
	  },

	  /**
	   * @param {boolean} isRecreate
	   * @return {Object}
	   */
	  mountOption: function (isRecreate) {
	    var optionBackup = this._optionBackup; // TODO
	    // 如果没有reset功能则不clone。

	    this._timelineOptions = map(optionBackup.timelineOptions, clone);
	    this._mediaList = map(optionBackup.mediaList, clone);
	    this._mediaDefault = clone(optionBackup.mediaDefault);
	    this._currentMediaIndices = [];
	    return clone(isRecreate // this._optionBackup.baseOption, which is created at the first `setOption`
	    // called, and is merged into every new option by inner method `mergeOption`
	    // each time `setOption` called, can be only used in `isRecreate`, because
	    // its reliability is under suspicion. In other cases option merge is
	    // performed by `model.mergeOption`.
	    ? optionBackup.baseOption : this._newBaseOption);
	  },

	  /**
	   * @param {module:echarts/model/Global} ecModel
	   * @return {Object}
	   */
	  getTimelineOption: function (ecModel) {
	    var option;
	    var timelineOptions = this._timelineOptions;

	    if (timelineOptions.length) {
	      // getTimelineOption can only be called after ecModel inited,
	      // so we can get currentIndex from timelineModel.
	      var timelineModel = ecModel.getComponent('timeline');

	      if (timelineModel) {
	        option = clone(timelineOptions[timelineModel.getCurrentIndex()], true);
	      }
	    }

	    return option;
	  },

	  /**
	   * @param {module:echarts/model/Global} ecModel
	   * @return {Array.<Object>}
	   */
	  getMediaOption: function (ecModel) {
	    var ecWidth = this._api.getWidth();

	    var ecHeight = this._api.getHeight();

	    var mediaList = this._mediaList;
	    var mediaDefault = this._mediaDefault;
	    var indices = [];
	    var result = []; // No media defined.

	    if (!mediaList.length && !mediaDefault) {
	      return result;
	    } // Multi media may be applied, the latter defined media has higher priority.


	    for (var i = 0, len = mediaList.length; i < len; i++) {
	      if (applyMediaQuery(mediaList[i].query, ecWidth, ecHeight)) {
	        indices.push(i);
	      }
	    } // FIXME
	    // 是否mediaDefault应该强制用户设置，否则可能修改不能回归。


	    if (!indices.length && mediaDefault) {
	      indices = [-1];
	    }

	    if (indices.length && !indicesEquals(indices, this._currentMediaIndices)) {
	      result = map(indices, function (index) {
	        return clone(index === -1 ? mediaDefault.option : mediaList[index].option);
	      });
	    } // Otherwise return nothing.


	    this._currentMediaIndices = indices;
	    return result;
	  }
	};

	function parseRawOption(rawOption, optionPreprocessorFuncs, isNew) {
	  var timelineOptions = [];
	  var mediaList = [];
	  var mediaDefault;
	  var baseOption; // Compatible with ec2.

	  var timelineOpt = rawOption.timeline;

	  if (rawOption.baseOption) {
	    baseOption = rawOption.baseOption;
	  } // For timeline


	  if (timelineOpt || rawOption.options) {
	    baseOption = baseOption || {};
	    timelineOptions = (rawOption.options || []).slice();
	  } // For media query


	  if (rawOption.media) {
	    baseOption = baseOption || {};
	    var media = rawOption.media;
	    each(media, function (singleMedia) {
	      if (singleMedia && singleMedia.option) {
	        if (singleMedia.query) {
	          mediaList.push(singleMedia);
	        } else if (!mediaDefault) {
	          // Use the first media default.
	          mediaDefault = singleMedia;
	        }
	      }
	    });
	  } // For normal option


	  if (!baseOption) {
	    baseOption = rawOption;
	  } // Set timelineOpt to baseOption in ec3,
	  // which is convenient for merge option.


	  if (!baseOption.timeline) {
	    baseOption.timeline = timelineOpt;
	  } // Preprocess.


	  each([baseOption].concat(timelineOptions).concat(zrUtil.map(mediaList, function (media) {
	    return media.option;
	  })), function (option) {
	    each(optionPreprocessorFuncs, function (preProcess) {
	      preProcess(option, isNew);
	    });
	  });
	  return {
	    baseOption: baseOption,
	    timelineOptions: timelineOptions,
	    mediaDefault: mediaDefault,
	    mediaList: mediaList
	  };
	}
	/**
	 * @see <http://www.w3.org/TR/css3-mediaqueries/#media1>
	 * Support: width, height, aspectRatio
	 * Can use max or min as prefix.
	 */


	function applyMediaQuery(query, ecWidth, ecHeight) {
	  var realMap = {
	    width: ecWidth,
	    height: ecHeight,
	    aspectratio: ecWidth / ecHeight // lowser case for convenientce.

	  };
	  var applicatable = true;
	  zrUtil.each(query, function (value, attr) {
	    var matched = attr.match(QUERY_REG);

	    if (!matched || !matched[1] || !matched[2]) {
	      return;
	    }

	    var operator = matched[1];
	    var realAttr = matched[2].toLowerCase();

	    if (!compare(realMap[realAttr], value, operator)) {
	      applicatable = false;
	    }
	  });
	  return applicatable;
	}

	function compare(real, expect, operator) {
	  if (operator === 'min') {
	    return real >= expect;
	  } else if (operator === 'max') {
	    return real <= expect;
	  } else {
	    // Equals
	    return real === expect;
	  }
	}

	function indicesEquals(indices1, indices2) {
	  // indices is always order by asc and has only finite number.
	  return indices1.join(',') === indices2.join(',');
	}
	/**
	 * Consider case:
	 * `chart.setOption(opt1);`
	 * Then user do some interaction like dataZoom, dataView changing.
	 * `chart.setOption(opt2);`
	 * Then user press 'reset button' in toolbox.
	 *
	 * After doing that all of the interaction effects should be reset, the
	 * chart should be the same as the result of invoke
	 * `chart.setOption(opt1); chart.setOption(opt2);`.
	 *
	 * Although it is not able ensure that
	 * `chart.setOption(opt1); chart.setOption(opt2);` is equivalents to
	 * `chart.setOption(merge(opt1, opt2));` exactly,
	 * this might be the only simple way to implement that feature.
	 *
	 * MEMO: We've considered some other approaches:
	 * 1. Each model handle its self restoration but not uniform treatment.
	 *     (Too complex in logic and error-prone)
	 * 2. Use a shadow ecModel. (Performace expensive)
	 */


	function mergeOption(oldOption, newOption) {
	  newOption = newOption || {};
	  each(newOption, function (newCptOpt, mainType) {
	    if (newCptOpt == null) {
	      return;
	    }

	    var oldCptOpt = oldOption[mainType];

	    if (!ComponentModel.hasClass(mainType)) {
	      oldOption[mainType] = merge(oldCptOpt, newCptOpt, true);
	    } else {
	      newCptOpt = modelUtil.normalizeToArray(newCptOpt);
	      oldCptOpt = modelUtil.normalizeToArray(oldCptOpt);
	      var mapResult = modelUtil.mappingToExists(oldCptOpt, newCptOpt);
	      oldOption[mainType] = map(mapResult, function (item) {
	        return item.option && item.exist ? merge(item.exist, item.option, true) : item.exist || item.option;
	      });
	    }
	  });
	}

	var _default = OptionManager;
	module.exports = _default;

/***/ }),
/* 275 */
/***/ (function(module, exports, __webpack_require__) {

	var _util = __webpack_require__(181);

	var each = _util.each;
	var isArray = _util.isArray;
	var isObject = _util.isObject;

	var compatStyle = __webpack_require__(276);

	var _model = __webpack_require__(219);

	var normalizeToArray = _model.normalizeToArray;

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	// Compatitable with 2.0
	function get(opt, path) {
	  path = path.split(',');
	  var obj = opt;

	  for (var i = 0; i < path.length; i++) {
	    obj = obj && obj[path[i]];

	    if (obj == null) {
	      break;
	    }
	  }

	  return obj;
	}

	function set(opt, path, val, overwrite) {
	  path = path.split(',');
	  var obj = opt;
	  var key;

	  for (var i = 0; i < path.length - 1; i++) {
	    key = path[i];

	    if (obj[key] == null) {
	      obj[key] = {};
	    }

	    obj = obj[key];
	  }

	  if (overwrite || obj[path[i]] == null) {
	    obj[path[i]] = val;
	  }
	}

	function compatLayoutProperties(option) {
	  each(LAYOUT_PROPERTIES, function (prop) {
	    if (prop[0] in option && !(prop[1] in option)) {
	      option[prop[1]] = option[prop[0]];
	    }
	  });
	}

	var LAYOUT_PROPERTIES = [['x', 'left'], ['y', 'top'], ['x2', 'right'], ['y2', 'bottom']];
	var COMPATITABLE_COMPONENTS = ['grid', 'geo', 'parallel', 'legend', 'toolbox', 'title', 'visualMap', 'dataZoom', 'timeline'];

	function _default(option, isTheme) {
	  compatStyle(option, isTheme); // Make sure series array for model initialization.

	  option.series = normalizeToArray(option.series);
	  each(option.series, function (seriesOpt) {
	    if (!isObject(seriesOpt)) {
	      return;
	    }

	    var seriesType = seriesOpt.type;

	    if (seriesType === 'pie' || seriesType === 'gauge') {
	      if (seriesOpt.clockWise != null) {
	        seriesOpt.clockwise = seriesOpt.clockWise;
	      }
	    }

	    if (seriesType === 'gauge') {
	      var pointerColor = get(seriesOpt, 'pointer.color');
	      pointerColor != null && set(seriesOpt, 'itemStyle.normal.color', pointerColor);
	    }

	    compatLayoutProperties(seriesOpt);
	  }); // dataRange has changed to visualMap

	  if (option.dataRange) {
	    option.visualMap = option.dataRange;
	  }

	  each(COMPATITABLE_COMPONENTS, function (componentName) {
	    var options = option[componentName];

	    if (options) {
	      if (!isArray(options)) {
	        options = [options];
	      }

	      each(options, function (option) {
	        compatLayoutProperties(option);
	      });
	    }
	  });
	}

	module.exports = _default;

/***/ }),
/* 276 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(181);

	var modelUtil = __webpack_require__(219);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var each = zrUtil.each;
	var isObject = zrUtil.isObject;
	var POSSIBLE_STYLES = ['areaStyle', 'lineStyle', 'nodeStyle', 'linkStyle', 'chordStyle', 'label', 'labelLine'];

	function compatEC2ItemStyle(opt) {
	  var itemStyleOpt = opt && opt.itemStyle;

	  if (!itemStyleOpt) {
	    return;
	  }

	  for (var i = 0, len = POSSIBLE_STYLES.length; i < len; i++) {
	    var styleName = POSSIBLE_STYLES[i];
	    var normalItemStyleOpt = itemStyleOpt.normal;
	    var emphasisItemStyleOpt = itemStyleOpt.emphasis;

	    if (normalItemStyleOpt && normalItemStyleOpt[styleName]) {
	      opt[styleName] = opt[styleName] || {};

	      if (!opt[styleName].normal) {
	        opt[styleName].normal = normalItemStyleOpt[styleName];
	      } else {
	        zrUtil.merge(opt[styleName].normal, normalItemStyleOpt[styleName]);
	      }

	      normalItemStyleOpt[styleName] = null;
	    }

	    if (emphasisItemStyleOpt && emphasisItemStyleOpt[styleName]) {
	      opt[styleName] = opt[styleName] || {};

	      if (!opt[styleName].emphasis) {
	        opt[styleName].emphasis = emphasisItemStyleOpt[styleName];
	      } else {
	        zrUtil.merge(opt[styleName].emphasis, emphasisItemStyleOpt[styleName]);
	      }

	      emphasisItemStyleOpt[styleName] = null;
	    }
	  }
	}

	function convertNormalEmphasis(opt, optType, useExtend) {
	  if (opt && opt[optType] && (opt[optType].normal || opt[optType].emphasis)) {
	    var normalOpt = opt[optType].normal;
	    var emphasisOpt = opt[optType].emphasis;

	    if (normalOpt) {
	      // Timeline controlStyle has other properties besides normal and emphasis
	      if (useExtend) {
	        opt[optType].normal = opt[optType].emphasis = null;
	        zrUtil.defaults(opt[optType], normalOpt);
	      } else {
	        opt[optType] = normalOpt;
	      }
	    }

	    if (emphasisOpt) {
	      opt.emphasis = opt.emphasis || {};
	      opt.emphasis[optType] = emphasisOpt;
	    }
	  }
	}

	function removeEC3NormalStatus(opt) {
	  convertNormalEmphasis(opt, 'itemStyle');
	  convertNormalEmphasis(opt, 'lineStyle');
	  convertNormalEmphasis(opt, 'areaStyle');
	  convertNormalEmphasis(opt, 'label');
	  convertNormalEmphasis(opt, 'labelLine'); // treemap

	  convertNormalEmphasis(opt, 'upperLabel'); // graph

	  convertNormalEmphasis(opt, 'edgeLabel');
	}

	function compatTextStyle(opt, propName) {
	  // Check whether is not object (string\null\undefined ...)
	  var labelOptSingle = isObject(opt) && opt[propName];
	  var textStyle = isObject(labelOptSingle) && labelOptSingle.textStyle;

	  if (textStyle) {
	    for (var i = 0, len = modelUtil.TEXT_STYLE_OPTIONS.length; i < len; i++) {
	      var propName = modelUtil.TEXT_STYLE_OPTIONS[i];

	      if (textStyle.hasOwnProperty(propName)) {
	        labelOptSingle[propName] = textStyle[propName];
	      }
	    }
	  }
	}

	function compatEC3CommonStyles(opt) {
	  if (opt) {
	    removeEC3NormalStatus(opt);
	    compatTextStyle(opt, 'label');
	    opt.emphasis && compatTextStyle(opt.emphasis, 'label');
	  }
	}

	function processSeries(seriesOpt) {
	  if (!isObject(seriesOpt)) {
	    return;
	  }

	  compatEC2ItemStyle(seriesOpt);
	  removeEC3NormalStatus(seriesOpt);
	  compatTextStyle(seriesOpt, 'label'); // treemap

	  compatTextStyle(seriesOpt, 'upperLabel'); // graph

	  compatTextStyle(seriesOpt, 'edgeLabel');

	  if (seriesOpt.emphasis) {
	    compatTextStyle(seriesOpt.emphasis, 'label'); // treemap

	    compatTextStyle(seriesOpt.emphasis, 'upperLabel'); // graph

	    compatTextStyle(seriesOpt.emphasis, 'edgeLabel');
	  }

	  var markPoint = seriesOpt.markPoint;

	  if (markPoint) {
	    compatEC2ItemStyle(markPoint);
	    compatEC3CommonStyles(markPoint);
	  }

	  var markLine = seriesOpt.markLine;

	  if (markLine) {
	    compatEC2ItemStyle(markLine);
	    compatEC3CommonStyles(markLine);
	  }

	  var markArea = seriesOpt.markArea;

	  if (markArea) {
	    compatEC3CommonStyles(markArea);
	  }

	  var data = seriesOpt.data; // Break with ec3: if `setOption` again, there may be no `type` in option,
	  // then the backward compat based on option type will not be performed.

	  if (seriesOpt.type === 'graph') {
	    data = data || seriesOpt.nodes;
	    var edgeData = seriesOpt.links || seriesOpt.edges;

	    if (edgeData && !zrUtil.isTypedArray(edgeData)) {
	      for (var i = 0; i < edgeData.length; i++) {
	        compatEC3CommonStyles(edgeData[i]);
	      }
	    }

	    zrUtil.each(seriesOpt.categories, function (opt) {
	      removeEC3NormalStatus(opt);
	    });
	  }

	  if (data && !zrUtil.isTypedArray(data)) {
	    for (var i = 0; i < data.length; i++) {
	      compatEC3CommonStyles(data[i]);
	    }
	  } // mark point data


	  var markPoint = seriesOpt.markPoint;

	  if (markPoint && markPoint.data) {
	    var mpData = markPoint.data;

	    for (var i = 0; i < mpData.length; i++) {
	      compatEC3CommonStyles(mpData[i]);
	    }
	  } // mark line data


	  var markLine = seriesOpt.markLine;

	  if (markLine && markLine.data) {
	    var mlData = markLine.data;

	    for (var i = 0; i < mlData.length; i++) {
	      if (zrUtil.isArray(mlData[i])) {
	        compatEC3CommonStyles(mlData[i][0]);
	        compatEC3CommonStyles(mlData[i][1]);
	      } else {
	        compatEC3CommonStyles(mlData[i]);
	      }
	    }
	  } // Series


	  if (seriesOpt.type === 'gauge') {
	    compatTextStyle(seriesOpt, 'axisLabel');
	    compatTextStyle(seriesOpt, 'title');
	    compatTextStyle(seriesOpt, 'detail');
	  } else if (seriesOpt.type === 'treemap') {
	    convertNormalEmphasis(seriesOpt.breadcrumb, 'itemStyle');
	    zrUtil.each(seriesOpt.levels, function (opt) {
	      removeEC3NormalStatus(opt);
	    });
	  } else if (seriesOpt.type === 'tree') {
	    removeEC3NormalStatus(seriesOpt.leaves);
	  } // sunburst starts from ec4, so it does not need to compat levels.

	}

	function toArr(o) {
	  return zrUtil.isArray(o) ? o : o ? [o] : [];
	}

	function toObj(o) {
	  return (zrUtil.isArray(o) ? o[0] : o) || {};
	}

	function _default(option, isTheme) {
	  each(toArr(option.series), function (seriesOpt) {
	    isObject(seriesOpt) && processSeries(seriesOpt);
	  });
	  var axes = ['xAxis', 'yAxis', 'radiusAxis', 'angleAxis', 'singleAxis', 'parallelAxis', 'radar'];
	  isTheme && axes.push('valueAxis', 'categoryAxis', 'logAxis', 'timeAxis');
	  each(axes, function (axisName) {
	    each(toArr(option[axisName]), function (axisOpt) {
	      if (axisOpt) {
	        compatTextStyle(axisOpt, 'axisLabel');
	        compatTextStyle(axisOpt.axisPointer, 'label');
	      }
	    });
	  });
	  each(toArr(option.parallel), function (parallelOpt) {
	    var parallelAxisDefault = parallelOpt && parallelOpt.parallelAxisDefault;
	    compatTextStyle(parallelAxisDefault, 'axisLabel');
	    compatTextStyle(parallelAxisDefault && parallelAxisDefault.axisPointer, 'label');
	  });
	  each(toArr(option.calendar), function (calendarOpt) {
	    convertNormalEmphasis(calendarOpt, 'itemStyle');
	    compatTextStyle(calendarOpt, 'dayLabel');
	    compatTextStyle(calendarOpt, 'monthLabel');
	    compatTextStyle(calendarOpt, 'yearLabel');
	  }); // radar.name.textStyle

	  each(toArr(option.radar), function (radarOpt) {
	    compatTextStyle(radarOpt, 'name');
	  });
	  each(toArr(option.geo), function (geoOpt) {
	    if (isObject(geoOpt)) {
	      compatEC3CommonStyles(geoOpt);
	      each(toArr(geoOpt.regions), function (regionObj) {
	        compatEC3CommonStyles(regionObj);
	      });
	    }
	  });
	  each(toArr(option.timeline), function (timelineOpt) {
	    compatEC3CommonStyles(timelineOpt);
	    convertNormalEmphasis(timelineOpt, 'label');
	    convertNormalEmphasis(timelineOpt, 'itemStyle');
	    convertNormalEmphasis(timelineOpt, 'controlStyle', true);
	    var data = timelineOpt.data;
	    zrUtil.isArray(data) && zrUtil.each(data, function (item) {
	      if (zrUtil.isObject(item)) {
	        convertNormalEmphasis(item, 'label');
	        convertNormalEmphasis(item, 'itemStyle');
	      }
	    });
	  });
	  each(toArr(option.toolbox), function (toolboxOpt) {
	    convertNormalEmphasis(toolboxOpt, 'iconStyle');
	    each(toolboxOpt.feature, function (featureOpt) {
	      convertNormalEmphasis(featureOpt, 'iconStyle');
	    });
	  });
	  compatTextStyle(toObj(option.axisPointer), 'label');
	  compatTextStyle(toObj(option.tooltip).axisPointer, 'label');
	}

	module.exports = _default;

/***/ }),
/* 277 */
/***/ (function(module, exports, __webpack_require__) {

	var _util = __webpack_require__(181);

	var createHashMap = _util.createHashMap;
	var each = _util.each;

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	// (1) [Caution]: the logic is correct based on the premises:
	//     data processing stage is blocked in stream.
	//     See <module:echarts/stream/Scheduler#performDataProcessorTasks>
	// (2) Only register once when import repeatly.
	//     Should be executed before after series filtered and before stack calculation.
	function _default(ecModel) {
	  var stackInfoMap = createHashMap();
	  ecModel.eachSeries(function (seriesModel) {
	    var stack = seriesModel.get('stack'); // Compatibal: when `stack` is set as '', do not stack.

	    if (stack) {
	      var stackInfoList = stackInfoMap.get(stack) || stackInfoMap.set(stack, []);
	      var data = seriesModel.getData();
	      var stackInfo = {
	        // Used for calculate axis extent automatically.
	        stackResultDimension: data.getCalculationInfo('stackResultDimension'),
	        stackedOverDimension: data.getCalculationInfo('stackedOverDimension'),
	        stackedDimension: data.getCalculationInfo('stackedDimension'),
	        stackedByDimension: data.getCalculationInfo('stackedByDimension'),
	        isStackedByIndex: data.getCalculationInfo('isStackedByIndex'),
	        data: data,
	        seriesModel: seriesModel
	      }; // If stacked on axis that do not support data stack.

	      if (!stackInfo.stackedDimension || !(stackInfo.isStackedByIndex || stackInfo.stackedByDimension)) {
	        return;
	      }

	      stackInfoList.length && data.setCalculationInfo('stackedOnSeries', stackInfoList[stackInfoList.length - 1].seriesModel);
	      stackInfoList.push(stackInfo);
	    }
	  });
	  stackInfoMap.each(calculateStack);
	}

	function calculateStack(stackInfoList) {
	  each(stackInfoList, function (targetStackInfo, idxInStack) {
	    var resultVal = [];
	    var resultNaN = [NaN, NaN];
	    var dims = [targetStackInfo.stackResultDimension, targetStackInfo.stackedOverDimension];
	    var targetData = targetStackInfo.data;
	    var isStackedByIndex = targetStackInfo.isStackedByIndex; // Should not write on raw data, because stack series model list changes
	    // depending on legend selection.

	    var newData = targetData.map(dims, function (v0, v1, dataIndex) {
	      var sum = targetData.get(targetStackInfo.stackedDimension, dataIndex); // Consider `connectNulls` of line area, if value is NaN, stackedOver
	      // should also be NaN, to draw a appropriate belt area.

	      if (isNaN(sum)) {
	        return resultNaN;
	      }

	      var byValue;
	      var stackedDataRawIndex;

	      if (isStackedByIndex) {
	        stackedDataRawIndex = targetData.getRawIndex(dataIndex);
	      } else {
	        byValue = targetData.get(targetStackInfo.stackedByDimension, dataIndex);
	      } // If stackOver is NaN, chart view will render point on value start.


	      var stackedOver = NaN;

	      for (var j = idxInStack - 1; j >= 0; j--) {
	        var stackInfo = stackInfoList[j]; // Has been optimized by inverted indices on `stackedByDimension`.

	        if (!isStackedByIndex) {
	          stackedDataRawIndex = stackInfo.data.rawIndexOf(stackInfo.stackedByDimension, byValue);
	        }

	        if (stackedDataRawIndex >= 0) {
	          var val = stackInfo.data.getByRawIndex(stackInfo.stackResultDimension, stackedDataRawIndex); // Considering positive stack, negative stack and empty data

	          if (sum >= 0 && val > 0 || // Positive stack
	          sum <= 0 && val < 0 // Negative stack
	          ) {
	              sum += val;
	              stackedOver = val;
	              break;
	            }
	        }
	      }

	      resultVal[0] = sum;
	      resultVal[1] = stackedOver;
	      return resultVal;
	    });
	    targetData.hostModel.setData(newData); // Update for consequent calculation

	    targetStackInfo.data = newData;
	  });
	}

	module.exports = _default;

/***/ }),
/* 278 */
/***/ (function(module, exports, __webpack_require__) {

	var _config = __webpack_require__(177);

	var __DEV__ = _config.__DEV__;

	var zrUtil = __webpack_require__(181);

	var env = __webpack_require__(180);

	var _format = __webpack_require__(264);

	var formatTime = _format.formatTime;
	var encodeHTML = _format.encodeHTML;
	var addCommas = _format.addCommas;
	var getTooltipMarker = _format.getTooltipMarker;

	var modelUtil = __webpack_require__(219);

	var ComponentModel = __webpack_require__(260);

	var colorPaletteMixin = __webpack_require__(267);

	var dataFormatMixin = __webpack_require__(279);

	var _layout = __webpack_require__(262);

	var getLayoutParams = _layout.getLayoutParams;
	var mergeLayoutParam = _layout.mergeLayoutParam;

	var _task = __webpack_require__(281);

	var createTask = _task.createTask;

	var _sourceHelper = __webpack_require__(268);

	var prepareSource = _sourceHelper.prepareSource;
	var getSource = _sourceHelper.getSource;

	var _dataProvider = __webpack_require__(280);

	var retrieveRawValue = _dataProvider.retrieveRawValue;

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var inner = modelUtil.makeInner();
	var SeriesModel = ComponentModel.extend({
	  type: 'series.__base__',

	  /**
	   * @readOnly
	   */
	  seriesIndex: 0,
	  // coodinateSystem will be injected in the echarts/CoordinateSystem
	  coordinateSystem: null,

	  /**
	   * @type {Object}
	   * @protected
	   */
	  defaultOption: null,

	  /**
	   * Data provided for legend
	   * @type {Function}
	   */
	  // PENDING
	  legendDataProvider: null,

	  /**
	   * Access path of color for visual
	   */
	  visualColorAccessPath: 'itemStyle.color',

	  /**
	   * Support merge layout params.
	   * Only support 'box' now (left/right/top/bottom/width/height).
	   * @type {string|Object} Object can be {ignoreSize: true}
	   * @readOnly
	   */
	  layoutMode: null,
	  init: function (option, parentModel, ecModel, extraOpt) {
	    /**
	     * @type {number}
	     * @readOnly
	     */
	    this.seriesIndex = this.componentIndex;
	    this.dataTask = createTask({
	      count: dataTaskCount,
	      reset: dataTaskReset
	    });
	    this.dataTask.context = {
	      model: this
	    };
	    this.mergeDefaultAndTheme(option, ecModel);
	    prepareSource(this);
	    var data = this.getInitialData(option, ecModel);
	    wrapData(data, this);
	    this.dataTask.context.data = data;

	    /**
	     * @type {module:echarts/data/List|module:echarts/data/Tree|module:echarts/data/Graph}
	     * @private
	     */
	    inner(this).dataBeforeProcessed = data; // If we reverse the order (make data firstly, and then make
	    // dataBeforeProcessed by cloneShallow), cloneShallow will
	    // cause data.graph.data !== data when using
	    // module:echarts/data/Graph or module:echarts/data/Tree.
	    // See module:echarts/data/helper/linkList
	    // Theoretically, it is unreasonable to call `seriesModel.getData()` in the model
	    // init or merge stage, because the data can be restored. So we do not `restoreData`
	    // and `setData` here, which forbids calling `seriesModel.getData()` in this stage.
	    // Call `seriesModel.getRawData()` instead.
	    // this.restoreData();

	    autoSeriesName(this);
	  },

	  /**
	   * Util for merge default and theme to option
	   * @param  {Object} option
	   * @param  {module:echarts/model/Global} ecModel
	   */
	  mergeDefaultAndTheme: function (option, ecModel) {
	    var layoutMode = this.layoutMode;
	    var inputPositionParams = layoutMode ? getLayoutParams(option) : {}; // Backward compat: using subType on theme.
	    // But if name duplicate between series subType
	    // (for example: parallel) add component mainType,
	    // add suffix 'Series'.

	    var themeSubType = this.subType;

	    if (ComponentModel.hasClass(themeSubType)) {
	      themeSubType += 'Series';
	    }

	    zrUtil.merge(option, ecModel.getTheme().get(this.subType));
	    zrUtil.merge(option, this.getDefaultOption()); // Default label emphasis `show`

	    modelUtil.defaultEmphasis(option, 'label', ['show']);
	    this.fillDataTextStyle(option.data);

	    if (layoutMode) {
	      mergeLayoutParam(option, inputPositionParams, layoutMode);
	    }
	  },
	  mergeOption: function (newSeriesOption, ecModel) {
	    // this.settingTask.dirty();
	    newSeriesOption = zrUtil.merge(this.option, newSeriesOption, true);
	    this.fillDataTextStyle(newSeriesOption.data);
	    var layoutMode = this.layoutMode;

	    if (layoutMode) {
	      mergeLayoutParam(this.option, newSeriesOption, layoutMode);
	    }

	    prepareSource(this);
	    var data = this.getInitialData(newSeriesOption, ecModel);
	    wrapData(data, this);
	    this.dataTask.dirty();
	    this.dataTask.context.data = data;
	    inner(this).dataBeforeProcessed = data;
	    autoSeriesName(this);
	  },
	  fillDataTextStyle: function (data) {
	    // Default data label emphasis `show`
	    // FIXME Tree structure data ?
	    // FIXME Performance ?
	    if (data && !zrUtil.isTypedArray(data)) {
	      var props = ['show'];

	      for (var i = 0; i < data.length; i++) {
	        if (data[i] && data[i].label) {
	          modelUtil.defaultEmphasis(data[i], 'label', props);
	        }
	      }
	    }
	  },

	  /**
	   * Init a data structure from data related option in series
	   * Must be overwritten
	   */
	  getInitialData: function () {},

	  /**
	   * Append data to list
	   * @param {Object} params
	   * @param {Array|TypedArray} params.data
	   */
	  appendData: function (params) {
	    // FIXME ???
	    // (1) If data from dataset, forbidden append.
	    // (2) support append data of dataset.
	    var data = this.getRawData();
	    data.appendData(params.data);
	  },

	  /**
	   * Consider some method like `filter`, `map` need make new data,
	   * We should make sure that `seriesModel.getData()` get correct
	   * data in the stream procedure. So we fetch data from upstream
	   * each time `task.perform` called.
	   * @param {string} [dataType]
	   * @return {module:echarts/data/List}
	   */
	  getData: function (dataType) {
	    var task = getCurrentTask(this);

	    if (task) {
	      var data = task.context.data;
	      return dataType == null ? data : data.getLinkedData(dataType);
	    } else {
	      // When series is not alive (that may happen when click toolbox
	      // restore or setOption with not merge mode), series data may
	      // be still need to judge animation or something when graphic
	      // elements want to know whether fade out.
	      return inner(this).data;
	    }
	  },

	  /**
	   * @param {module:echarts/data/List} data
	   */
	  setData: function (data) {
	    var task = getCurrentTask(this);

	    if (task) {
	      var context = task.context; // Consider case: filter, data sample.

	      if (context.data !== data && task.modifyOutputEnd) {
	        task.setOutputEnd(data.count());
	      }

	      context.outputData = data; // Caution: setData should update context.data,
	      // Because getData may be called multiply in a
	      // single stage and expect to get the data just
	      // set. (For example, AxisProxy, x y both call
	      // getData and setDate sequentially).
	      // So the context.data should be fetched from
	      // upstream each time when a stage starts to be
	      // performed.

	      if (task !== this.dataTask) {
	        context.data = data;
	      }
	    }

	    inner(this).data = data;
	  },

	  /**
	   * @see {module:echarts/data/helper/sourceHelper#getSource}
	   * @return {module:echarts/data/Source} source
	   */
	  getSource: function () {
	    return getSource(this);
	  },

	  /**
	   * Get data before processed
	   * @return {module:echarts/data/List}
	   */
	  getRawData: function () {
	    return inner(this).dataBeforeProcessed;
	  },

	  /**
	   * Get base axis if has coordinate system and has axis.
	   * By default use coordSys.getBaseAxis();
	   * Can be overrided for some chart.
	   * @return {type} description
	   */
	  getBaseAxis: function () {
	    var coordSys = this.coordinateSystem;
	    return coordSys && coordSys.getBaseAxis && coordSys.getBaseAxis();
	  },
	  // FIXME

	  /**
	   * Default tooltip formatter
	   *
	   * @param {number} dataIndex
	   * @param {boolean} [multipleSeries=false]
	   * @param {number} [dataType]
	   */
	  formatTooltip: function (dataIndex, multipleSeries, dataType) {
	    function formatArrayValue(value) {
	      // ??? TODO refactor these logic.
	      // check: category-no-encode-has-axis-data in dataset.html
	      var vertially = zrUtil.reduce(value, function (vertially, val, idx) {
	        var dimItem = data.getDimensionInfo(idx);
	        return vertially |= dimItem && dimItem.tooltip !== false && dimItem.displayName != null;
	      }, 0);
	      var result = [];
	      tooltipDims.length ? zrUtil.each(tooltipDims, function (dim) {
	        setEachItem(retrieveRawValue(data, dataIndex, dim), dim);
	      }) // By default, all dims is used on tooltip.
	      : zrUtil.each(value, setEachItem);

	      function setEachItem(val, dim) {
	        var dimInfo = data.getDimensionInfo(dim); // If `dimInfo.tooltip` is not set, show tooltip.

	        if (!dimInfo || dimInfo.otherDims.tooltip === false) {
	          return;
	        }

	        var dimType = dimInfo.type;
	        var dimHead = getTooltipMarker({
	          color: color,
	          type: 'subItem'
	        });
	        var valStr = (vertially ? dimHead + encodeHTML(dimInfo.displayName || '-') + ': ' : '') + // FIXME should not format time for raw data?
	        encodeHTML(dimType === 'ordinal' ? val + '' : dimType === 'time' ? multipleSeries ? '' : formatTime('yyyy/MM/dd hh:mm:ss', val) : addCommas(val));
	        valStr && result.push(valStr);
	      }

	      return (vertially ? '<br/>' : '') + result.join(vertially ? '<br/>' : ', ');
	    }

	    function formatSingleValue(val) {
	      return encodeHTML(addCommas(val));
	    }

	    var data = this.getData();
	    var tooltipDims = data.mapDimension('defaultedTooltip', true);
	    var tooltipDimLen = tooltipDims.length;
	    var value = this.getRawValue(dataIndex);
	    var isValueArr = zrUtil.isArray(value);
	    var color = data.getItemVisual(dataIndex, 'color');

	    if (zrUtil.isObject(color) && color.colorStops) {
	      color = (color.colorStops[0] || {}).color;
	    }

	    color = color || 'transparent'; // Complicated rule for pretty tooltip.

	    var formattedValue = tooltipDimLen > 1 || isValueArr && !tooltipDimLen ? formatArrayValue(value) : tooltipDimLen ? formatSingleValue(retrieveRawValue(data, dataIndex, tooltipDims[0])) : formatSingleValue(isValueArr ? value[0] : value);
	    var colorEl = getTooltipMarker(color);
	    var name = data.getName(dataIndex);
	    var seriesName = this.name;

	    if (!modelUtil.isNameSpecified(this)) {
	      seriesName = '';
	    }

	    seriesName = seriesName ? encodeHTML(seriesName) + (!multipleSeries ? '<br/>' : ': ') : '';
	    return !multipleSeries ? seriesName + colorEl + (name ? encodeHTML(name) + ': ' + formattedValue : formattedValue) : colorEl + seriesName + formattedValue;
	  },

	  /**
	   * @return {boolean}
	   */
	  isAnimationEnabled: function () {
	    if (env.node) {
	      return false;
	    }

	    var animationEnabled = this.getShallow('animation');

	    if (animationEnabled) {
	      if (this.getData().count() > this.getShallow('animationThreshold')) {
	        animationEnabled = false;
	      }
	    }

	    return animationEnabled;
	  },
	  restoreData: function () {
	    this.dataTask.dirty();
	  },
	  getColorFromPalette: function (name, scope, requestColorNum) {
	    var ecModel = this.ecModel; // PENDING

	    var color = colorPaletteMixin.getColorFromPalette.call(this, name, scope, requestColorNum);

	    if (!color) {
	      color = ecModel.getColorFromPalette(name, scope, requestColorNum);
	    }

	    return color;
	  },

	  /**
	   * Use `data.mapDimension(coordDim, true)` instead.
	   * @deprecated
	   */
	  coordDimToDataDim: function (coordDim) {
	    return this.getRawData().mapDimension(coordDim, true);
	  },

	  /**
	   * Get progressive rendering count each step
	   * @return {number}
	   */
	  getProgressive: function () {
	    return this.get('progressive');
	  },

	  /**
	   * Get progressive rendering count each step
	   * @return {number}
	   */
	  getProgressiveThreshold: function () {
	    return this.get('progressiveThreshold');
	  },

	  /**
	   * Get data indices for show tooltip content. See tooltip.
	   * @abstract
	   * @param {Array.<string>|string} dim
	   * @param {Array.<number>} value
	   * @param {module:echarts/coord/single/SingleAxis} baseAxis
	   * @return {Object} {dataIndices, nestestValue}.
	   */
	  getAxisTooltipData: null,

	  /**
	   * See tooltip.
	   * @abstract
	   * @param {number} dataIndex
	   * @return {Array.<number>} Point of tooltip. null/undefined can be returned.
	   */
	  getTooltipPosition: null,

	  /**
	   * @see {module:echarts/stream/Scheduler}
	   */
	  pipeTask: null,

	  /**
	   * Convinient for override in extended class.
	   * @protected
	   * @type {Function}
	   */
	  preventIncremental: null,

	  /**
	   * @public
	   * @readOnly
	   * @type {Object}
	   */
	  pipelineContext: null
	});
	zrUtil.mixin(SeriesModel, dataFormatMixin);
	zrUtil.mixin(SeriesModel, colorPaletteMixin);
	/**
	 * MUST be called after `prepareSource` called
	 * Here we need to make auto series, especially for auto legend. But we
	 * do not modify series.name in option to avoid side effects.
	 */

	function autoSeriesName(seriesModel) {
	  // User specified name has higher priority, otherwise it may cause
	  // series can not be queried unexpectedly.
	  var name = seriesModel.name;

	  if (!modelUtil.isNameSpecified(seriesModel)) {
	    seriesModel.name = getSeriesAutoName(seriesModel) || name;
	  }
	}

	function getSeriesAutoName(seriesModel) {
	  var data = seriesModel.getRawData();
	  var dataDims = data.mapDimension('seriesName', true);
	  var nameArr = [];
	  zrUtil.each(dataDims, function (dataDim) {
	    var dimInfo = data.getDimensionInfo(dataDim);
	    dimInfo.displayName && nameArr.push(dimInfo.displayName);
	  });
	  return nameArr.join(' ');
	}

	function dataTaskCount(context) {
	  return context.model.getRawData().count();
	}

	function dataTaskReset(context) {
	  var seriesModel = context.model;
	  seriesModel.setData(seriesModel.getRawData().cloneShallow());
	  return dataTaskProgress;
	}

	function dataTaskProgress(param, context) {
	  // Avoid repead cloneShallow when data just created in reset.
	  if (param.end > context.outputData.count()) {
	    context.model.getRawData().cloneShallow(context.outputData);
	  }
	} // TODO refactor


	function wrapData(data, seriesModel) {
	  zrUtil.each(data.CHANGABLE_METHODS, function (methodName) {
	    data.wrapMethod(methodName, zrUtil.curry(onDataSelfChange, seriesModel));
	  });
	}

	function onDataSelfChange(seriesModel) {
	  var task = getCurrentTask(seriesModel);

	  if (task) {
	    // Consider case: filter, selectRange
	    task.setOutputEnd(this.count());
	  }
	}

	function getCurrentTask(seriesModel) {
	  var scheduler = (seriesModel.ecModel || {}).scheduler;
	  var pipeline = scheduler && scheduler.getPipeline(seriesModel.uid);

	  if (pipeline) {
	    // When pipline finished, the currrentTask keep the last
	    // task (renderTask).
	    var task = pipeline.currentTask;

	    if (task) {
	      var agentStubMap = task.agentStubMap;

	      if (agentStubMap) {
	        task = agentStubMap.get(seriesModel.uid);
	      }
	    }

	    return task;
	  }
	}

	var _default = SeriesModel;
	module.exports = _default;

/***/ }),
/* 279 */
/***/ (function(module, exports, __webpack_require__) {

	var _dataProvider = __webpack_require__(280);

	var retrieveRawValue = _dataProvider.retrieveRawValue;

	var _format = __webpack_require__(264);

	var getTooltipMarker = _format.getTooltipMarker;
	var formatTpl = _format.formatTpl;

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var DIMENSION_LABEL_REG = /\{@(.+?)\}/g; // PENDING A little ugly

	var _default = {
	  /**
	   * Get params for formatter
	   * @param {number} dataIndex
	   * @param {string} [dataType]
	   * @return {Object}
	   */
	  getDataParams: function (dataIndex, dataType) {
	    var data = this.getData(dataType);
	    var rawValue = this.getRawValue(dataIndex, dataType);
	    var rawDataIndex = data.getRawIndex(dataIndex);
	    var name = data.getName(dataIndex);
	    var itemOpt = data.getRawDataItem(dataIndex);
	    var color = data.getItemVisual(dataIndex, 'color');
	    return {
	      componentType: this.mainType,
	      componentSubType: this.subType,
	      seriesType: this.mainType === 'series' ? this.subType : null,
	      seriesIndex: this.seriesIndex,
	      seriesId: this.id,
	      seriesName: this.name,
	      name: name,
	      dataIndex: rawDataIndex,
	      data: itemOpt,
	      dataType: dataType,
	      value: rawValue,
	      color: color,
	      marker: getTooltipMarker(color),
	      // Param name list for mapping `a`, `b`, `c`, `d`, `e`
	      $vars: ['seriesName', 'name', 'value']
	    };
	  },

	  /**
	   * Format label
	   * @param {number} dataIndex
	   * @param {string} [status='normal'] 'normal' or 'emphasis'
	   * @param {string} [dataType]
	   * @param {number} [dimIndex]
	   * @param {string} [labelProp='label']
	   * @return {string} If not formatter, return null/undefined
	   */
	  getFormattedLabel: function (dataIndex, status, dataType, dimIndex, labelProp) {
	    status = status || 'normal';
	    var data = this.getData(dataType);
	    var itemModel = data.getItemModel(dataIndex);
	    var params = this.getDataParams(dataIndex, dataType);

	    if (dimIndex != null && params.value instanceof Array) {
	      params.value = params.value[dimIndex];
	    }

	    var formatter = itemModel.get(status === 'normal' ? [labelProp || 'label', 'formatter'] : [status, labelProp || 'label', 'formatter']);

	    if (typeof formatter === 'function') {
	      params.status = status;
	      return formatter(params);
	    } else if (typeof formatter === 'string') {
	      var str = formatTpl(formatter, params); // Support 'aaa{@[3]}bbb{@product}ccc'.
	      // Do not support '}' in dim name util have to.

	      return str.replace(DIMENSION_LABEL_REG, function (origin, dim) {
	        var len = dim.length;

	        if (dim.charAt(0) === '[' && dim.charAt(len - 1) === ']') {
	          dim = +dim.slice(1, len - 1); // Also: '[]' => 0
	        }

	        return retrieveRawValue(data, dataIndex, dim);
	      });
	    }
	  },

	  /**
	   * Get raw value in option
	   * @param {number} idx
	   * @param {string} [dataType]
	   * @return {Array|number|string}
	   */
	  getRawValue: function (idx, dataType) {
	    return retrieveRawValue(this.getData(dataType), idx);
	  },

	  /**
	   * Should be implemented.
	   * @param {number} dataIndex
	   * @param {boolean} [multipleSeries=false]
	   * @param {number} [dataType]
	   * @return {string} tooltip string
	   */
	  formatTooltip: function () {// Empty function
	  }
	};
	module.exports = _default;

/***/ }),
/* 280 */
/***/ (function(module, exports, __webpack_require__) {

	var _config = __webpack_require__(177);

	var __DEV__ = _config.__DEV__;

	var _util = __webpack_require__(181);

	var isTypedArray = _util.isTypedArray;
	var extend = _util.extend;
	var assert = _util.assert;
	var each = _util.each;
	var isObject = _util.isObject;

	var _model = __webpack_require__(219);

	var getDataItemValue = _model.getDataItemValue;
	var isDataItemOption = _model.isDataItemOption;

	var _number = __webpack_require__(263);

	var parseDate = _number.parseDate;

	var Source = __webpack_require__(270);

	var _sourceType = __webpack_require__(271);

	var SOURCE_FORMAT_TYPED_ARRAY = _sourceType.SOURCE_FORMAT_TYPED_ARRAY;
	var SOURCE_FORMAT_ARRAY_ROWS = _sourceType.SOURCE_FORMAT_ARRAY_ROWS;
	var SOURCE_FORMAT_ORIGINAL = _sourceType.SOURCE_FORMAT_ORIGINAL;
	var SOURCE_FORMAT_OBJECT_ROWS = _sourceType.SOURCE_FORMAT_OBJECT_ROWS;

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	// TODO
	// ??? refactor? check the outer usage of data provider.
	// merge with defaultDimValueGetter?

	/**
	 * If normal array used, mutable chunk size is supported.
	 * If typed array used, chunk size must be fixed.
	 */
	function DefaultDataProvider(source, dimSize) {
	  if (!Source.isInstance(source)) {
	    source = Source.seriesDataToSource(source);
	  }

	  this._source = source;
	  var data = this._data = source.data;
	  var sourceFormat = source.sourceFormat; // Typed array. TODO IE10+?

	  if (sourceFormat === SOURCE_FORMAT_TYPED_ARRAY) {
	    this._offset = 0;
	    this._dimSize = dimSize;
	    this._data = data;
	  }

	  var methods = providerMethods[sourceFormat === SOURCE_FORMAT_ARRAY_ROWS ? sourceFormat + '_' + source.seriesLayoutBy : sourceFormat];
	  extend(this, methods);
	}

	var providerProto = DefaultDataProvider.prototype; // If data is pure without style configuration

	providerProto.pure = false; // If data is persistent and will not be released after use.

	providerProto.persistent = true; // ???! FIXME legacy data provider do not has method getSource

	providerProto.getSource = function () {
	  return this._source;
	};

	var providerMethods = {
	  'arrayRows_column': {
	    pure: true,
	    count: function () {
	      return Math.max(0, this._data.length - this._source.startIndex);
	    },
	    getItem: function (idx) {
	      return this._data[idx + this._source.startIndex];
	    },
	    appendData: appendDataSimply
	  },
	  'arrayRows_row': {
	    pure: true,
	    count: function () {
	      var row = this._data[0];
	      return row ? Math.max(0, row.length - this._source.startIndex) : 0;
	    },
	    getItem: function (idx) {
	      idx += this._source.startIndex;
	      var item = [];
	      var data = this._data;

	      for (var i = 0; i < data.length; i++) {
	        var row = data[i];
	        item.push(row ? row[idx] : null);
	      }

	      return item;
	    },
	    appendData: function () {
	      throw new Error('Do not support appendData when set seriesLayoutBy: "row".');
	    }
	  },
	  'objectRows': {
	    pure: true,
	    count: countSimply,
	    getItem: getItemSimply,
	    appendData: appendDataSimply
	  },
	  'keyedColumns': {
	    pure: true,
	    count: function () {
	      var dimName = this._source.dimensionsDefine[0].name;
	      var col = this._data[dimName];
	      return col ? col.length : 0;
	    },
	    getItem: function (idx) {
	      var item = [];
	      var dims = this._source.dimensionsDefine;

	      for (var i = 0; i < dims.length; i++) {
	        var col = this._data[dims[i].name];
	        item.push(col ? col[idx] : null);
	      }

	      return item;
	    },
	    appendData: function (newData) {
	      var data = this._data;
	      each(newData, function (newCol, key) {
	        var oldCol = data[key] || (data[key] = []);

	        for (var i = 0; i < (newCol || []).length; i++) {
	          oldCol.push(newCol[i]);
	        }
	      });
	    }
	  },
	  'original': {
	    count: countSimply,
	    getItem: getItemSimply,
	    appendData: appendDataSimply
	  },
	  'typedArray': {
	    persistent: false,
	    pure: true,
	    count: function () {
	      return this._data ? this._data.length / this._dimSize : 0;
	    },
	    getItem: function (idx, out) {
	      idx = idx - this._offset;
	      out = out || [];
	      var offset = this._dimSize * idx;

	      for (var i = 0; i < this._dimSize; i++) {
	        out[i] = this._data[offset + i];
	      }

	      return out;
	    },
	    appendData: function (newData) {
	      this._data = newData;
	    },
	    // Clean self if data is already used.
	    clean: function () {
	      // PENDING
	      this._offset += this.count();
	      this._data = null;
	    }
	  }
	};

	function countSimply() {
	  return this._data.length;
	}

	function getItemSimply(idx) {
	  return this._data[idx];
	}

	function appendDataSimply(newData) {
	  for (var i = 0; i < newData.length; i++) {
	    this._data.push(newData[i]);
	  }
	}

	var rawValueGetters = {
	  arrayRows: getRawValueSimply,
	  objectRows: function (dataItem, dataIndex, dimIndex, dimName) {
	    return dimIndex != null ? dataItem[dimName] : dataItem;
	  },
	  keyedColumns: getRawValueSimply,
	  original: function (dataItem, dataIndex, dimIndex, dimName) {
	    // FIXME
	    // In some case (markpoint in geo (geo-map.html)), dataItem
	    // is {coord: [...]}
	    var value = getDataItemValue(dataItem);
	    return dimIndex == null || !(value instanceof Array) ? value : value[dimIndex];
	  },
	  typedArray: getRawValueSimply
	};

	function getRawValueSimply(dataItem, dataIndex, dimIndex, dimName) {
	  return dimIndex != null ? dataItem[dimIndex] : dataItem;
	}

	var defaultDimValueGetters = {
	  arrayRows: getDimValueSimply,
	  objectRows: function (dataItem, dimName, dataIndex, dimIndex) {
	    return converDataValue(dataItem[dimName], this._dimensionInfos[dimName]);
	  },
	  keyedColumns: getDimValueSimply,
	  original: function (dataItem, dimName, dataIndex, dimIndex) {
	    // Performance sensitive, do not use modelUtil.getDataItemValue.
	    // If dataItem is an plain object with no value field, the var `value`
	    // will be assigned with the object, but it will be tread correctly
	    // in the `convertDataValue`.
	    var value = dataItem && (dataItem.value == null ? dataItem : dataItem.value); // If any dataItem is like { value: 10 }

	    if (!this._rawData.pure && isDataItemOption(dataItem)) {
	      this.hasItemOption = true;
	    }

	    return converDataValue(value instanceof Array ? value[dimIndex] // If value is a single number or something else not array.
	    : value, this._dimensionInfos[dimName]);
	  },
	  typedArray: function (dataItem, dimName, dataIndex, dimIndex) {
	    return dataItem[dimIndex];
	  }
	};

	function getDimValueSimply(dataItem, dimName, dataIndex, dimIndex) {
	  return converDataValue(dataItem[dimIndex], this._dimensionInfos[dimName]);
	}
	/**
	 * This helper method convert value in data.
	 * @param {string|number|Date} value
	 * @param {Object|string} [dimInfo] If string (like 'x'), dimType defaults 'number'.
	 *        If "dimInfo.ordinalParseAndSave", ordinal value can be parsed.
	 */


	function converDataValue(value, dimInfo) {
	  // Performance sensitive.
	  var dimType = dimInfo && dimInfo.type;

	  if (dimType === 'ordinal') {
	    // If given value is a category string
	    var ordinalMeta = dimInfo && dimInfo.ordinalMeta;
	    return ordinalMeta ? ordinalMeta.parseAndCollect(value) : value;
	  }

	  if (dimType === 'time' // spead up when using timestamp
	  && typeof value !== 'number' && value != null && value !== '-') {
	    value = +parseDate(value);
	  } // dimType defaults 'number'.
	  // If dimType is not ordinal and value is null or undefined or NaN or '-',
	  // parse to NaN.


	  return value == null || value === '' ? NaN // If string (like '-'), using '+' parse to NaN
	  // If object, also parse to NaN
	  : +value;
	} // ??? FIXME can these logic be more neat: getRawValue, getRawDataItem,
	// Consider persistent.
	// Caution: why use raw value to display on label or tooltip?
	// A reason is to avoid format. For example time value we do not know
	// how to format is expected. More over, if stack is used, calculated
	// value may be 0.91000000001, which have brings trouble to display.
	// TODO: consider how to treat null/undefined/NaN when display?

	/**
	 * @param {module:echarts/data/List} data
	 * @param {number} dataIndex
	 * @param {string|number} [dim] dimName or dimIndex
	 * @return {Array.<number>|string|number} can be null/undefined.
	 */


	function retrieveRawValue(data, dataIndex, dim) {
	  if (!data) {
	    return;
	  } // Consider data may be not persistent.


	  var dataItem = data.getRawDataItem(dataIndex);

	  if (dataItem == null) {
	    return;
	  }

	  var sourceFormat = data.getProvider().getSource().sourceFormat;
	  var dimName;
	  var dimIndex;
	  var dimInfo = data.getDimensionInfo(dim);

	  if (dimInfo) {
	    dimName = dimInfo.name;
	    dimIndex = dimInfo.index;
	  }

	  return rawValueGetters[sourceFormat](dataItem, dataIndex, dimIndex, dimName);
	}
	/**
	 * Compatible with some cases (in pie, map) like:
	 * data: [{name: 'xx', value: 5, selected: true}, ...]
	 * where only sourceFormat is 'original' and 'objectRows' supported.
	 *
	 * ??? TODO
	 * Supported detail options in data item when using 'arrayRows'.
	 *
	 * @param {module:echarts/data/List} data
	 * @param {number} dataIndex
	 * @param {string} attr like 'selected'
	 */


	function retrieveRawAttr(data, dataIndex, attr) {
	  if (!data) {
	    return;
	  }

	  var sourceFormat = data.getProvider().getSource().sourceFormat;

	  if (sourceFormat !== SOURCE_FORMAT_ORIGINAL && sourceFormat !== SOURCE_FORMAT_OBJECT_ROWS) {
	    return;
	  }

	  var dataItem = data.getRawDataItem(dataIndex);

	  if (sourceFormat === SOURCE_FORMAT_ORIGINAL && !isObject(dataItem)) {
	    dataItem = null;
	  }

	  if (dataItem) {
	    return dataItem[attr];
	  }
	}

	exports.DefaultDataProvider = DefaultDataProvider;
	exports.defaultDimValueGetters = defaultDimValueGetters;
	exports.retrieveRawValue = retrieveRawValue;
	exports.retrieveRawAttr = retrieveRawAttr;

/***/ }),
/* 281 */
/***/ (function(module, exports, __webpack_require__) {

	var _util = __webpack_require__(181);

	var assert = _util.assert;
	var isArray = _util.isArray;

	var _config = __webpack_require__(177);

	var __DEV__ = _config.__DEV__;

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/

	/**
	 * @param {Object} define
	 * @return See the return of `createTask`.
	 */
	function createTask(define) {
	  return new Task(define);
	}
	/**
	 * @constructor
	 * @param {Object} define
	 * @param {Function} define.reset Custom reset
	 * @param {Function} [define.plan] Returns 'reset' indicate reset immediately.
	 * @param {Function} [define.count] count is used to determin data task.
	 * @param {Function} [define.onDirty] count is used to determin data task.
	 */


	function Task(define) {
	  define = define || {};
	  this._reset = define.reset;
	  this._plan = define.plan;
	  this._count = define.count;
	  this._onDirty = define.onDirty;
	  this._dirty = true; // Context must be specified implicitly, to
	  // avoid miss update context when model changed.

	  this.context;
	}

	var taskProto = Task.prototype;
	/**
	 * @param {Object} performArgs
	 * @param {number} [performArgs.step] Specified step.
	 * @param {number} [performArgs.skip] Skip customer perform call.
	 * @param {number} [performArgs.modBy] Sampling window size.
	 * @param {number} [performArgs.modDataCount] Sampling count.
	 */

	taskProto.perform = function (performArgs) {
	  var upTask = this._upstream;
	  var skip = performArgs && performArgs.skip; // TODO some refactor.
	  // Pull data. Must pull data each time, because context.data
	  // may be updated by Series.setData.

	  if (this._dirty && upTask) {
	    var context = this.context;
	    context.data = context.outputData = upTask.context.outputData;
	  }

	  if (this.__pipeline) {
	    this.__pipeline.currentTask = this;
	  }

	  var planResult;

	  if (this._plan && !skip) {
	    planResult = this._plan(this.context);
	  } // Support sharding by mod, which changes the render sequence and makes the rendered graphic
	  // elements uniformed distributed when progress, especially when moving or zooming.


	  var lastModBy = normalizeModBy(this._modBy);
	  var lastModDataCount = this._modDataCount || 0;
	  var modBy = normalizeModBy(performArgs && performArgs.modBy);
	  var modDataCount = performArgs && performArgs.modDataCount || 0;

	  if (lastModBy !== modBy || lastModDataCount !== modDataCount) {
	    planResult = 'reset';
	  }

	  function normalizeModBy(val) {
	    !(val >= 1) && (val = 1); // jshint ignore:line

	    return val;
	  }

	  var forceFirstProgress;

	  if (this._dirty || planResult === 'reset') {
	    this._dirty = false;
	    forceFirstProgress = reset(this, skip);
	  }

	  this._modBy = modBy;
	  this._modDataCount = modDataCount;
	  var step = performArgs && performArgs.step;

	  if (upTask) {
	    this._dueEnd = upTask._outputDueEnd;
	  } // DataTask or overallTask
	  else {
	      this._dueEnd = this._count ? this._count(this.context) : Infinity;
	    } // Note: Stubs, that its host overall task let it has progress, has progress.
	  // If no progress, pass index from upstream to downstream each time plan called.


	  if (this._progress) {
	    var start = this._dueIndex;
	    var end = Math.min(step != null ? this._dueIndex + step : Infinity, this._dueEnd);

	    if (!skip && (forceFirstProgress || start < end)) {
	      var progress = this._progress;

	      if (isArray(progress)) {
	        for (var i = 0; i < progress.length; i++) {
	          doProgress(this, progress[i], start, end, modBy, modDataCount);
	        }
	      } else {
	        doProgress(this, progress, start, end, modBy, modDataCount);
	      }
	    }

	    this._dueIndex = end; // If no `outputDueEnd`, assume that output data and
	    // input data is the same, so use `dueIndex` as `outputDueEnd`.

	    var outputDueEnd = this._settedOutputEnd != null ? this._settedOutputEnd : end;
	    this._outputDueEnd = outputDueEnd;
	  } else {
	    // (1) Some overall task has no progress.
	    // (2) Stubs, that its host overall task do not let it has progress, has no progress.
	    // This should always be performed so it can be passed to downstream.
	    this._dueIndex = this._outputDueEnd = this._settedOutputEnd != null ? this._settedOutputEnd : this._dueEnd;
	  }

	  return this.unfinished();
	};

	var iterator = function () {
	  var end;
	  var current;
	  var modBy;
	  var modDataCount;
	  var winCount;
	  var it = {
	    reset: function (s, e, sStep, sCount) {
	      current = s;
	      end = e;
	      modBy = sStep;
	      modDataCount = sCount;
	      winCount = Math.ceil(modDataCount / modBy);
	      it.next = modBy > 1 && modDataCount > 0 ? modNext : sequentialNext;
	    }
	  };
	  return it;

	  function sequentialNext() {
	    return current < end ? current++ : null;
	  }

	  function modNext() {
	    var dataIndex = current % winCount * modBy + Math.ceil(current / winCount);
	    var result = current >= end ? null : dataIndex < modDataCount ? dataIndex // If modDataCount is smaller than data.count() (consider `appendData` case),
	    // Use normal linear rendering mode.
	    : current;
	    current++;
	    return result;
	  }
	}();

	taskProto.dirty = function () {
	  this._dirty = true;
	  this._onDirty && this._onDirty(this.context);
	};

	function doProgress(taskIns, progress, start, end, modBy, modDataCount) {
	  iterator.reset(start, end, modBy, modDataCount);
	  taskIns._callingProgress = progress;

	  taskIns._callingProgress({
	    start: start,
	    end: end,
	    count: end - start,
	    next: iterator.next
	  }, taskIns.context);
	}

	function reset(taskIns, skip) {
	  taskIns._dueIndex = taskIns._outputDueEnd = taskIns._dueEnd = 0;
	  taskIns._settedOutputEnd = null;
	  var progress;
	  var forceFirstProgress;

	  if (!skip && taskIns._reset) {
	    progress = taskIns._reset(taskIns.context);

	    if (progress && progress.progress) {
	      forceFirstProgress = progress.forceFirstProgress;
	      progress = progress.progress;
	    } // To simplify no progress checking, array must has item.


	    if (isArray(progress) && !progress.length) {
	      progress = null;
	    }
	  }

	  taskIns._progress = progress;
	  taskIns._modBy = taskIns._modDataCount = null;
	  var downstream = taskIns._downstream;
	  downstream && downstream.dirty();
	  return forceFirstProgress;
	}
	/**
	 * @return {boolean}
	 */


	taskProto.unfinished = function () {
	  return this._progress && this._dueIndex < this._dueEnd;
	};
	/**
	 * @param {Object} downTask The downstream task.
	 * @return {Object} The downstream task.
	 */


	taskProto.pipe = function (downTask) {
	  // If already downstream, do not dirty downTask.
	  if (this._downstream !== downTask || this._dirty) {
	    this._downstream = downTask;
	    downTask._upstream = this;
	    downTask.dirty();
	  }
	};

	taskProto.dispose = function () {
	  if (this._disposed) {
	    return;
	  }

	  this._upstream && (this._upstream._downstream = null);
	  this._downstream && (this._downstream._upstream = null);
	  this._dirty = false;
	  this._disposed = true;
	};

	taskProto.getUpstream = function () {
	  return this._upstream;
	};

	taskProto.getDownstream = function () {
	  return this._downstream;
	};

	taskProto.setOutputEnd = function (end) {
	  // This only happend in dataTask, dataZoom, map, currently.
	  // where dataZoom do not set end each time, but only set
	  // when reset. So we should record the setted end, in case
	  // that the stub of dataZoom perform again and earse the
	  // setted end by upstream.
	  this._outputDueEnd = this._settedOutputEnd = end;
	}; ///////////////////////////////////////////////////////////
	// For stream debug (Should be commented out after used!)
	// Usage: printTask(this, 'begin');
	// Usage: printTask(this, null, {someExtraProp});
	// function printTask(task, prefix, extra) {
	//     window.ecTaskUID == null && (window.ecTaskUID = 0);
	//     task.uidDebug == null && (task.uidDebug = `task_${window.ecTaskUID++}`);
	//     task.agent && task.agent.uidDebug == null && (task.agent.uidDebug = `task_${window.ecTaskUID++}`);
	//     var props = [];
	//     if (task.__pipeline) {
	//         var val = `${task.__idxInPipeline}/${task.__pipeline.tail.__idxInPipeline} ${task.agent ? '(stub)' : ''}`;
	//         props.push({text: 'idx', value: val});
	//     } else {
	//         var stubCount = 0;
	//         task.agentStubMap.each(() => stubCount++);
	//         props.push({text: 'idx', value: `overall (stubs: ${stubCount})`});
	//     }
	//     props.push({text: 'uid', value: task.uidDebug});
	//     if (task.__pipeline) {
	//         props.push({text: 'pid', value: task.__pipeline.id});
	//         task.agent && props.push(
	//             {text: 'stubFor', value: task.agent.uidDebug}
	//         );
	//     }
	//     props.push(
	//         {text: 'dirty', value: task._dirty},
	//         {text: 'dueIndex', value: task._dueIndex},
	//         {text: 'dueEnd', value: task._dueEnd},
	//         {text: 'outputDueEnd', value: task._outputDueEnd}
	//     );
	//     if (extra) {
	//         Object.keys(extra).forEach(key => {
	//             props.push({text: key, value: extra[key]});
	//         });
	//     }
	//     var args = ['color: blue'];
	//     var msg = `%c[${prefix || 'T'}] %c` + props.map(item => (
	//         args.push('color: black', 'color: red'),
	//         `${item.text}: %c${item.value}`
	//     )).join('%c, ');
	//     console.log.apply(console, [msg].concat(args));
	//     // console.log(this);
	// }


	exports.createTask = createTask;

/***/ }),
/* 282 */
/***/ (function(module, exports, __webpack_require__) {

	var Group = __webpack_require__(187);

	var componentUtil = __webpack_require__(261);

	var clazzUtil = __webpack_require__(221);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var Component = function () {
	  /**
	   * @type {module:zrender/container/Group}
	   * @readOnly
	   */
	  this.group = new Group();
	  /**
	   * @type {string}
	   * @readOnly
	   */

	  this.uid = componentUtil.getUID('viewComponent');
	};

	Component.prototype = {
	  constructor: Component,
	  init: function (ecModel, api) {},
	  render: function (componentModel, ecModel, api, payload) {},
	  dispose: function () {}
	};
	var componentProto = Component.prototype;

	componentProto.updateView = componentProto.updateLayout = componentProto.updateVisual = function (seriesModel, ecModel, api, payload) {// Do nothing;
	}; // Enable Component.extend.


	clazzUtil.enableClassExtend(Component); // Enable capability of registerClass, getClass, hasClass, registerSubTypeDefaulter and so on.

	clazzUtil.enableClassManagement(Component, {
	  registerWhenExtend: true
	});
	var _default = Component;
	module.exports = _default;

/***/ }),
/* 283 */
/***/ (function(module, exports, __webpack_require__) {

	var _util = __webpack_require__(181);

	var each = _util.each;

	var Group = __webpack_require__(187);

	var componentUtil = __webpack_require__(261);

	var clazzUtil = __webpack_require__(221);

	var modelUtil = __webpack_require__(219);

	var _task = __webpack_require__(281);

	var createTask = _task.createTask;

	var createRenderPlanner = __webpack_require__(284);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var inner = modelUtil.makeInner();
	var renderPlanner = createRenderPlanner();

	function Chart() {
	  /**
	   * @type {module:zrender/container/Group}
	   * @readOnly
	   */
	  this.group = new Group();
	  /**
	   * @type {string}
	   * @readOnly
	   */

	  this.uid = componentUtil.getUID('viewChart');
	  this.renderTask = createTask({
	    plan: renderTaskPlan,
	    reset: renderTaskReset
	  });
	  this.renderTask.context = {
	    view: this
	  };
	}

	Chart.prototype = {
	  type: 'chart',

	  /**
	   * Init the chart.
	   * @param  {module:echarts/model/Global} ecModel
	   * @param  {module:echarts/ExtensionAPI} api
	   */
	  init: function (ecModel, api) {},

	  /**
	   * Render the chart.
	   * @param  {module:echarts/model/Series} seriesModel
	   * @param  {module:echarts/model/Global} ecModel
	   * @param  {module:echarts/ExtensionAPI} api
	   * @param  {Object} payload
	   */
	  render: function (seriesModel, ecModel, api, payload) {},

	  /**
	   * Highlight series or specified data item.
	   * @param  {module:echarts/model/Series} seriesModel
	   * @param  {module:echarts/model/Global} ecModel
	   * @param  {module:echarts/ExtensionAPI} api
	   * @param  {Object} payload
	   */
	  highlight: function (seriesModel, ecModel, api, payload) {
	    toggleHighlight(seriesModel.getData(), payload, 'emphasis');
	  },

	  /**
	   * Downplay series or specified data item.
	   * @param  {module:echarts/model/Series} seriesModel
	   * @param  {module:echarts/model/Global} ecModel
	   * @param  {module:echarts/ExtensionAPI} api
	   * @param  {Object} payload
	   */
	  downplay: function (seriesModel, ecModel, api, payload) {
	    toggleHighlight(seriesModel.getData(), payload, 'normal');
	  },

	  /**
	   * Remove self.
	   * @param  {module:echarts/model/Global} ecModel
	   * @param  {module:echarts/ExtensionAPI} api
	   */
	  remove: function (ecModel, api) {
	    this.group.removeAll();
	  },

	  /**
	   * Dispose self.
	   * @param  {module:echarts/model/Global} ecModel
	   * @param  {module:echarts/ExtensionAPI} api
	   */
	  dispose: function () {},

	  /**
	   * Rendering preparation in progressive mode.
	   * @param  {module:echarts/model/Series} seriesModel
	   * @param  {module:echarts/model/Global} ecModel
	   * @param  {module:echarts/ExtensionAPI} api
	   * @param  {Object} payload
	   */
	  incrementalPrepareRender: null,

	  /**
	   * Render in progressive mode.
	   * @param  {module:echarts/model/Series} seriesModel
	   * @param  {module:echarts/model/Global} ecModel
	   * @param  {module:echarts/ExtensionAPI} api
	   * @param  {Object} payload
	   */
	  incrementalRender: null,

	  /**
	   * Update transform directly.
	   * @param  {module:echarts/model/Series} seriesModel
	   * @param  {module:echarts/model/Global} ecModel
	   * @param  {module:echarts/ExtensionAPI} api
	   * @param  {Object} payload
	   * @return {Object} {update: true}
	   */
	  updateTransform: null
	  /**
	   * The view contains the given point.
	   * @interface
	   * @param {Array.<number>} point
	   * @return {boolean}
	   */
	  // containPoint: function () {}

	};
	var chartProto = Chart.prototype;

	chartProto.updateView = chartProto.updateLayout = chartProto.updateVisual = function (seriesModel, ecModel, api, payload) {
	  this.render(seriesModel, ecModel, api, payload);
	};
	/**
	 * Set state of single element
	 * @param  {module:zrender/Element} el
	 * @param  {string} state
	 */


	function elSetState(el, state) {
	  if (el) {
	    el.trigger(state);

	    if (el.type === 'group') {
	      for (var i = 0; i < el.childCount(); i++) {
	        elSetState(el.childAt(i), state);
	      }
	    }
	  }
	}
	/**
	 * @param  {module:echarts/data/List} data
	 * @param  {Object} payload
	 * @param  {string} state 'normal'|'emphasis'
	 */


	function toggleHighlight(data, payload, state) {
	  var dataIndex = modelUtil.queryDataIndex(data, payload);

	  if (dataIndex != null) {
	    each(modelUtil.normalizeToArray(dataIndex), function (dataIdx) {
	      elSetState(data.getItemGraphicEl(dataIdx), state);
	    });
	  } else {
	    data.eachItemGraphicEl(function (el) {
	      elSetState(el, state);
	    });
	  }
	} // Enable Chart.extend.


	clazzUtil.enableClassExtend(Chart, ['dispose']); // Add capability of registerClass, getClass, hasClass, registerSubTypeDefaulter and so on.

	clazzUtil.enableClassManagement(Chart, {
	  registerWhenExtend: true
	});

	Chart.markUpdateMethod = function (payload, methodName) {
	  inner(payload).updateMethod = methodName;
	};

	function renderTaskPlan(context) {
	  return renderPlanner(context.model);
	}

	function renderTaskReset(context) {
	  var seriesModel = context.model;
	  var ecModel = context.ecModel;
	  var api = context.api;
	  var payload = context.payload; // ???! remove updateView updateVisual

	  var progressiveRender = seriesModel.pipelineContext.progressiveRender;
	  var view = context.view;
	  var updateMethod = payload && inner(payload).updateMethod;
	  var methodName = progressiveRender ? 'incrementalPrepareRender' : updateMethod && view[updateMethod] ? updateMethod // `appendData` is also supported when data amount
	  // is less than progressive threshold.
	  : 'render';

	  if (methodName !== 'render') {
	    view[methodName](seriesModel, ecModel, api, payload);
	  }

	  return progressMethodMap[methodName];
	}

	var progressMethodMap = {
	  incrementalPrepareRender: {
	    progress: function (params, context) {
	      context.view.incrementalRender(params, context.model, context.ecModel, context.api, context.payload);
	    }
	  },
	  render: {
	    // Put view.render in `progress` to support appendData. But in this case
	    // view.render should not be called in reset, otherwise it will be called
	    // twise. Use `forceFirstProgress` to make sure that view.render is called
	    // in any cases.
	    forceFirstProgress: true,
	    progress: function (params, context) {
	      context.view.render(context.model, context.ecModel, context.api, context.payload);
	    }
	  }
	};
	var _default = Chart;
	module.exports = _default;

/***/ }),
/* 284 */
/***/ (function(module, exports, __webpack_require__) {

	var _model = __webpack_require__(219);

	var makeInner = _model.makeInner;

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/

	/**
	 * @return {string} If large mode changed, return string 'reset';
	 */
	function _default() {
	  var inner = makeInner();
	  return function (seriesModel) {
	    var fields = inner(seriesModel);
	    var pipelineContext = seriesModel.pipelineContext;
	    var originalLarge = fields.large;
	    var originalProgressive = fields.progressiveRender;
	    var large = fields.large = pipelineContext.large;
	    var progressive = fields.progressiveRender = pipelineContext.progressiveRender;
	    return !!(originalLarge ^ large || originalProgressive ^ progressive) && 'reset';
	  };
	}

	module.exports = _default;

/***/ }),
/* 285 */
/***/ (function(module, exports) {

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var ORIGIN_METHOD = '\0__throttleOriginMethod';
	var RATE = '\0__throttleRate';
	var THROTTLE_TYPE = '\0__throttleType';
	/**
	 * @public
	 * @param {(Function)} fn
	 * @param {number} [delay=0] Unit: ms.
	 * @param {boolean} [debounce=false]
	 *        true: If call interval less than `delay`, only the last call works.
	 *        false: If call interval less than `delay, call works on fixed rate.
	 * @return {(Function)} throttled fn.
	 */

	function throttle(fn, delay, debounce) {
	  var currCall;
	  var lastCall = 0;
	  var lastExec = 0;
	  var timer = null;
	  var diff;
	  var scope;
	  var args;
	  var debounceNextCall;
	  delay = delay || 0;

	  function exec() {
	    lastExec = new Date().getTime();
	    timer = null;
	    fn.apply(scope, args || []);
	  }

	  var cb = function () {
	    currCall = new Date().getTime();
	    scope = this;
	    args = arguments;
	    var thisDelay = debounceNextCall || delay;
	    var thisDebounce = debounceNextCall || debounce;
	    debounceNextCall = null;
	    diff = currCall - (thisDebounce ? lastCall : lastExec) - thisDelay;
	    clearTimeout(timer); // Here we should make sure that: the `exec` SHOULD NOT be called later
	    // than a new call of `cb`, that is, preserving the command order. Consider
	    // calculating "scale rate" when roaming as an example. When a call of `cb`
	    // happens, either the `exec` is called dierectly, or the call is delayed.
	    // But the delayed call should never be later than next call of `cb`. Under
	    // this assurance, we can simply update view state each time `dispatchAction`
	    // triggered by user roaming, but not need to add extra code to avoid the
	    // state being "rolled-back".

	    if (thisDebounce) {
	      timer = setTimeout(exec, thisDelay);
	    } else {
	      if (diff >= 0) {
	        exec();
	      } else {
	        timer = setTimeout(exec, -diff);
	      }
	    }

	    lastCall = currCall;
	  };
	  /**
	   * Clear throttle.
	   * @public
	   */


	  cb.clear = function () {
	    if (timer) {
	      clearTimeout(timer);
	      timer = null;
	    }
	  };
	  /**
	   * Enable debounce once.
	   */


	  cb.debounceNextCall = function (debounceDelay) {
	    debounceNextCall = debounceDelay;
	  };

	  return cb;
	}
	/**
	 * Create throttle method or update throttle rate.
	 *
	 * @example
	 * ComponentView.prototype.render = function () {
	 *     ...
	 *     throttle.createOrUpdate(
	 *         this,
	 *         '_dispatchAction',
	 *         this.model.get('throttle'),
	 *         'fixRate'
	 *     );
	 * };
	 * ComponentView.prototype.remove = function () {
	 *     throttle.clear(this, '_dispatchAction');
	 * };
	 * ComponentView.prototype.dispose = function () {
	 *     throttle.clear(this, '_dispatchAction');
	 * };
	 *
	 * @public
	 * @param {Object} obj
	 * @param {string} fnAttr
	 * @param {number} [rate]
	 * @param {string} [throttleType='fixRate'] 'fixRate' or 'debounce'
	 * @return {Function} throttled function.
	 */


	function createOrUpdate(obj, fnAttr, rate, throttleType) {
	  var fn = obj[fnAttr];

	  if (!fn) {
	    return;
	  }

	  var originFn = fn[ORIGIN_METHOD] || fn;
	  var lastThrottleType = fn[THROTTLE_TYPE];
	  var lastRate = fn[RATE];

	  if (lastRate !== rate || lastThrottleType !== throttleType) {
	    if (rate == null || !throttleType) {
	      return obj[fnAttr] = originFn;
	    }

	    fn = obj[fnAttr] = throttle(originFn, rate, throttleType === 'debounce');
	    fn[ORIGIN_METHOD] = originFn;
	    fn[THROTTLE_TYPE] = throttleType;
	    fn[RATE] = rate;
	  }

	  return fn;
	}
	/**
	 * Clear throttle. Example see throttle.createOrUpdate.
	 *
	 * @public
	 * @param {Object} obj
	 * @param {string} fnAttr
	 */


	function clear(obj, fnAttr) {
	  var fn = obj[fnAttr];

	  if (fn && fn[ORIGIN_METHOD]) {
	    obj[fnAttr] = fn[ORIGIN_METHOD];
	  }
	}

	exports.throttle = throttle;
	exports.createOrUpdate = createOrUpdate;
	exports.clear = clear;

/***/ }),
/* 286 */
/***/ (function(module, exports, __webpack_require__) {

	var Gradient = __webpack_require__(256);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var _default = {
	  createOnAllSeries: true,
	  performRawSeries: true,
	  reset: function (seriesModel, ecModel) {
	    var data = seriesModel.getData();
	    var colorAccessPath = (seriesModel.visualColorAccessPath || 'itemStyle.color').split('.');
	    var color = seriesModel.get(colorAccessPath) // Set in itemStyle
	    || seriesModel.getColorFromPalette( // TODO series count changed.
	    seriesModel.name, null, ecModel.getSeriesCount()); // Default color
	    // FIXME Set color function or use the platte color

	    data.setVisual('color', color); // Only visible series has each data be visual encoded

	    if (!ecModel.isSeriesFiltered(seriesModel)) {
	      if (typeof color === 'function' && !(color instanceof Gradient)) {
	        data.each(function (idx) {
	          data.setItemVisual(idx, 'color', color(seriesModel.getDataParams(idx)));
	        });
	      } // itemStyle in each data item


	      var dataEach = function (data, idx) {
	        var itemModel = data.getItemModel(idx);
	        var color = itemModel.get(colorAccessPath, true);

	        if (color != null) {
	          data.setItemVisual(idx, 'color', color);
	        }
	      };

	      return {
	        dataEach: data.hasItemOption ? dataEach : null
	      };
	    }
	  }
	};
	module.exports = _default;

/***/ }),
/* 287 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(181);

	var lang = __webpack_require__(288);

	var _dataProvider = __webpack_require__(280);

	var retrieveRawValue = _dataProvider.retrieveRawValue;

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	function _default(dom, ecModel) {
	  var ariaModel = ecModel.getModel('aria');

	  if (!ariaModel.get('show')) {
	    return;
	  } else if (ariaModel.get('description')) {
	    dom.setAttribute('aria-label', ariaModel.get('description'));
	    return;
	  }

	  var seriesCnt = 0;
	  ecModel.eachSeries(function (seriesModel, idx) {
	    ++seriesCnt;
	  }, this);
	  var maxDataCnt = ariaModel.get('data.maxCount') || 10;
	  var maxSeriesCnt = ariaModel.get('series.maxCount') || 10;
	  var displaySeriesCnt = Math.min(seriesCnt, maxSeriesCnt);
	  var ariaLabel;

	  if (seriesCnt < 1) {
	    // No series, no aria label
	    return;
	  } else {
	    var title = getTitle();

	    if (title) {
	      ariaLabel = replace(getConfig('general.withTitle'), {
	        title: title
	      });
	    } else {
	      ariaLabel = getConfig('general.withoutTitle');
	    }

	    var seriesLabels = [];
	    var prefix = seriesCnt > 1 ? 'series.multiple.prefix' : 'series.single.prefix';
	    ariaLabel += replace(getConfig(prefix), {
	      seriesCount: seriesCnt
	    });
	    ecModel.eachSeries(function (seriesModel, idx) {
	      if (idx < displaySeriesCnt) {
	        var seriesLabel;
	        var seriesName = seriesModel.get('name');
	        var seriesTpl = 'series.' + (seriesCnt > 1 ? 'multiple' : 'single') + '.';
	        seriesLabel = getConfig(seriesName ? seriesTpl + 'withName' : seriesTpl + 'withoutName');
	        seriesLabel = replace(seriesLabel, {
	          seriesId: seriesModel.seriesIndex,
	          seriesName: seriesModel.get('name'),
	          seriesType: getSeriesTypeName(seriesModel.subType)
	        });
	        var data = seriesModel.getData();
	        window.data = data;

	        if (data.count() > maxDataCnt) {
	          // Show part of data
	          seriesLabel += replace(getConfig('data.partialData'), {
	            displayCnt: maxDataCnt
	          });
	        } else {
	          seriesLabel += getConfig('data.allData');
	        }

	        var dataLabels = [];

	        for (var i = 0; i < data.count(); i++) {
	          if (i < maxDataCnt) {
	            var name = data.getName(i);
	            var value = retrieveRawValue(data, i);
	            dataLabels.push(replace(name ? getConfig('data.withName') : getConfig('data.withoutName'), {
	              name: name,
	              value: value
	            }));
	          }
	        }

	        seriesLabel += dataLabels.join(getConfig('data.separator.middle')) + getConfig('data.separator.end');
	        seriesLabels.push(seriesLabel);
	      }
	    });
	    ariaLabel += seriesLabels.join(getConfig('series.multiple.separator.middle')) + getConfig('series.multiple.separator.end');
	    dom.setAttribute('aria-label', ariaLabel);
	  }

	  function replace(str, keyValues) {
	    if (typeof str !== 'string') {
	      return str;
	    }

	    var result = str;
	    zrUtil.each(keyValues, function (value, key) {
	      result = result.replace(new RegExp('\\{\\s*' + key + '\\s*\\}', 'g'), value);
	    });
	    return result;
	  }

	  function getConfig(path) {
	    var userConfig = ariaModel.get(path);

	    if (userConfig == null) {
	      var pathArr = path.split('.');
	      var result = lang.aria;

	      for (var i = 0; i < pathArr.length; ++i) {
	        result = result[pathArr[i]];
	      }

	      return result;
	    } else {
	      return userConfig;
	    }
	  }

	  function getTitle() {
	    var title = ecModel.getModel('title').option;

	    if (title && title.length) {
	      title = title[0];
	    }

	    return title && title.text;
	  }

	  function getSeriesTypeName(type) {
	    return lang.series.typeNames[type] || '自定义图';
	  }
	}

	module.exports = _default;

/***/ }),
/* 288 */
/***/ (function(module, exports) {

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var _default = {
	  toolbox: {
	    brush: {
	      title: {
	        rect: '矩形选择',
	        polygon: '圈选',
	        lineX: '横向选择',
	        lineY: '纵向选择',
	        keep: '保持选择',
	        clear: '清除选择'
	      }
	    },
	    dataView: {
	      title: '数据视图',
	      lang: ['数据视图', '关闭', '刷新']
	    },
	    dataZoom: {
	      title: {
	        zoom: '区域缩放',
	        back: '区域缩放还原'
	      }
	    },
	    magicType: {
	      title: {
	        line: '切换为折线图',
	        bar: '切换为柱状图',
	        stack: '切换为堆叠',
	        tiled: '切换为平铺'
	      }
	    },
	    restore: {
	      title: '还原'
	    },
	    saveAsImage: {
	      title: '保存为图片',
	      lang: ['右键另存为图片']
	    }
	  },
	  series: {
	    typeNames: {
	      pie: '饼图',
	      bar: '柱状图',
	      line: '折线图',
	      scatter: '散点图',
	      effectScatter: '涟漪散点图',
	      radar: '雷达图',
	      tree: '树图',
	      treemap: '矩形树图',
	      boxplot: '箱型图',
	      candlestick: 'K线图',
	      k: 'K线图',
	      heatmap: '热力图',
	      map: '地图',
	      parallel: '平行坐标图',
	      lines: '线图',
	      graph: '关系图',
	      sankey: '桑基图',
	      funnel: '漏斗图',
	      gauge: '仪表盘图',
	      pictorialBar: '象形柱图',
	      themeRiver: '主题河流图',
	      sunburst: '旭日图'
	    }
	  },
	  aria: {
	    general: {
	      withTitle: '这是一个关于“{title}”的图表。',
	      withoutTitle: '这是一个图表，'
	    },
	    series: {
	      single: {
	        prefix: '',
	        withName: '图表类型是{seriesType}，表示{seriesName}。',
	        withoutName: '图表类型是{seriesType}。'
	      },
	      multiple: {
	        prefix: '它由{seriesCount}个图表系列组成。',
	        withName: '第{seriesId}个系列是一个表示{seriesName}的{seriesType}，',
	        withoutName: '第{seriesId}个系列是一个{seriesType}，',
	        separator: {
	          middle: '；',
	          end: '。'
	        }
	      }
	    },
	    data: {
	      allData: '其数据是——',
	      partialData: '其中，前{displayCnt}项是——',
	      withName: '{name}的数据是{value}',
	      withoutName: '{value}',
	      separator: {
	        middle: '，',
	        end: ''
	      }
	    }
	  }
	};
	module.exports = _default;

/***/ }),
/* 289 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(181);

	var graphic = __webpack_require__(226);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var PI = Math.PI;
	/**
	 * @param {module:echarts/ExtensionAPI} api
	 * @param {Object} [opts]
	 * @param {string} [opts.text]
	 * @param {string} [opts.color]
	 * @param {string} [opts.textColor]
	 * @return {module:zrender/Element}
	 */

	function _default(api, opts) {
	  opts = opts || {};
	  zrUtil.defaults(opts, {
	    text: 'loading',
	    color: '#c23531',
	    textColor: '#000',
	    maskColor: 'rgba(255, 255, 255, 0.8)',
	    zlevel: 0
	  });
	  var mask = new graphic.Rect({
	    style: {
	      fill: opts.maskColor
	    },
	    zlevel: opts.zlevel,
	    z: 10000
	  });
	  var arc = new graphic.Arc({
	    shape: {
	      startAngle: -PI / 2,
	      endAngle: -PI / 2 + 0.1,
	      r: 10
	    },
	    style: {
	      stroke: opts.color,
	      lineCap: 'round',
	      lineWidth: 5
	    },
	    zlevel: opts.zlevel,
	    z: 10001
	  });
	  var labelRect = new graphic.Rect({
	    style: {
	      fill: 'none',
	      text: opts.text,
	      textPosition: 'right',
	      textDistance: 10,
	      textFill: opts.textColor
	    },
	    zlevel: opts.zlevel,
	    z: 10001
	  });
	  arc.animateShape(true).when(1000, {
	    endAngle: PI * 3 / 2
	  }).start('circularInOut');
	  arc.animateShape(true).when(1000, {
	    startAngle: PI * 3 / 2
	  }).delay(300).start('circularInOut');
	  var group = new graphic.Group();
	  group.add(arc);
	  group.add(labelRect);
	  group.add(mask); // Inject resize

	  group.resize = function () {
	    var cx = api.getWidth() / 2;
	    var cy = api.getHeight() / 2;
	    arc.setShape({
	      cx: cx,
	      cy: cy
	    });
	    var r = arc.shape.r;
	    labelRect.setShape({
	      x: cx - r,
	      y: cy - r,
	      width: r * 2,
	      height: r * 2
	    });
	    mask.setShape({
	      x: 0,
	      y: 0,
	      width: api.getWidth(),
	      height: api.getHeight()
	    });
	  };

	  group.resize();
	  return group;
	}

	module.exports = _default;

/***/ }),
/* 290 */
/***/ (function(module, exports, __webpack_require__) {

	var _util = __webpack_require__(181);

	var each = _util.each;
	var map = _util.map;
	var isArray = _util.isArray;
	var isFunction = _util.isFunction;
	var createHashMap = _util.createHashMap;
	var noop = _util.noop;

	var _task = __webpack_require__(281);

	var createTask = _task.createTask;

	var _component = __webpack_require__(261);

	var getUID = _component.getUID;

	var GlobalModel = __webpack_require__(218);

	var ExtensionAPI = __webpack_require__(272);

	var _model = __webpack_require__(219);

	var normalizeToArray = _model.normalizeToArray;

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/

	/**
	 * @module echarts/stream/Scheduler
	 */

	/**
	 * @constructor
	 */
	function Scheduler(ecInstance, api, dataProcessorHandlers, visualHandlers) {
	  this.ecInstance = ecInstance;
	  this.api = api;
	  this.unfinished; // Fix current processors in case that in some rear cases that
	  // processors might be registered after echarts instance created.
	  // Register processors incrementally for a echarts instance is
	  // not supported by this stream architecture.

	  var dataProcessorHandlers = this._dataProcessorHandlers = dataProcessorHandlers.slice();
	  var visualHandlers = this._visualHandlers = visualHandlers.slice();
	  this._allHandlers = dataProcessorHandlers.concat(visualHandlers);
	  /**
	   * @private
	   * @type {
	   *     [handlerUID: string]: {
	   *         seriesTaskMap?: {
	   *             [seriesUID: string]: Task
	   *         },
	   *         overallTask?: Task
	   *     }
	   * }
	   */

	  this._stageTaskMap = createHashMap();
	}

	var proto = Scheduler.prototype;
	/**
	 * @param {module:echarts/model/Global} ecModel
	 * @param {Object} payload
	 */

	proto.restoreData = function (ecModel, payload) {
	  // TODO: Only restroe needed series and components, but not all components.
	  // Currently `restoreData` of all of the series and component will be called.
	  // But some independent components like `title`, `legend`, `graphic`, `toolbox`,
	  // `tooltip`, `axisPointer`, etc, do not need series refresh when `setOption`,
	  // and some components like coordinate system, axes, dataZoom, visualMap only
	  // need their target series refresh.
	  // (1) If we are implementing this feature some day, we should consider these cases:
	  // if a data processor depends on a component (e.g., dataZoomProcessor depends
	  // on the settings of `dataZoom`), it should be re-performed if the component
	  // is modified by `setOption`.
	  // (2) If a processor depends on sevral series, speicified by its `getTargetSeries`,
	  // it should be re-performed when the result array of `getTargetSeries` changed.
	  // We use `dependencies` to cover these issues.
	  // (3) How to update target series when coordinate system related components modified.
	  // TODO: simply the dirty mechanism? Check whether only the case here can set tasks dirty,
	  // and this case all of the tasks will be set as dirty.
	  ecModel.restoreData(payload); // Theoretically an overall task not only depends on each of its target series, but also
	  // depends on all of the series.
	  // The overall task is not in pipeline, and `ecModel.restoreData` only set pipeline tasks
	  // dirty. If `getTargetSeries` of an overall task returns nothing, we should also ensure
	  // that the overall task is set as dirty and to be performed, otherwise it probably cause
	  // state chaos. So we have to set dirty of all of the overall tasks manually, otherwise it
	  // probably cause state chaos (consider `dataZoomProcessor`).

	  this._stageTaskMap.each(function (taskRecord) {
	    var overallTask = taskRecord.overallTask;
	    overallTask && overallTask.dirty();
	  });
	}; // If seriesModel provided, incremental threshold is check by series data.


	proto.getPerformArgs = function (task, isBlock) {
	  // For overall task
	  if (!task.__pipeline) {
	    return;
	  }

	  var pipeline = this._pipelineMap.get(task.__pipeline.id);

	  var pCtx = pipeline.context;
	  var incremental = !isBlock && pipeline.progressiveEnabled && (!pCtx || pCtx.progressiveRender) && task.__idxInPipeline > pipeline.blockIndex;
	  var step = incremental ? pipeline.step : null;
	  var modDataCount = pCtx && pCtx.modDataCount;
	  var modBy = modDataCount != null ? Math.ceil(modDataCount / step) : null;
	  return {
	    step: step,
	    modBy: modBy,
	    modDataCount: modDataCount
	  };
	};

	proto.getPipeline = function (pipelineId) {
	  return this._pipelineMap.get(pipelineId);
	};
	/**
	 * Current, progressive rendering starts from visual and layout.
	 * Always detect render mode in the same stage, avoiding that incorrect
	 * detection caused by data filtering.
	 * Caution:
	 * `updateStreamModes` use `seriesModel.getData()`.
	 */


	proto.updateStreamModes = function (seriesModel, view) {
	  var pipeline = this._pipelineMap.get(seriesModel.uid);

	  var data = seriesModel.getData();
	  var dataLen = data.count(); // `progressiveRender` means that can render progressively in each
	  // animation frame. Note that some types of series do not provide
	  // `view.incrementalPrepareRender` but support `chart.appendData`. We
	  // use the term `incremental` but not `progressive` to describe the
	  // case that `chart.appendData`.

	  var progressiveRender = pipeline.progressiveEnabled && view.incrementalPrepareRender && dataLen >= pipeline.threshold;
	  var large = seriesModel.get('large') && dataLen >= seriesModel.get('largeThreshold'); // TODO: modDataCount should not updated if `appendData`, otherwise cause whole repaint.
	  // see `test/candlestick-large3.html`

	  var modDataCount = seriesModel.get('progressiveChunkMode') === 'mod' ? dataLen : null;
	  seriesModel.pipelineContext = pipeline.context = {
	    progressiveRender: progressiveRender,
	    modDataCount: modDataCount,
	    large: large
	  };
	};

	proto.restorePipelines = function (ecModel) {
	  var scheduler = this;
	  var pipelineMap = scheduler._pipelineMap = createHashMap();
	  ecModel.eachSeries(function (seriesModel) {
	    var progressive = seriesModel.getProgressive();
	    var pipelineId = seriesModel.uid;
	    pipelineMap.set(pipelineId, {
	      id: pipelineId,
	      head: null,
	      tail: null,
	      threshold: seriesModel.getProgressiveThreshold(),
	      progressiveEnabled: progressive && !(seriesModel.preventIncremental && seriesModel.preventIncremental()),
	      blockIndex: -1,
	      step: Math.round(progressive || 700),
	      count: 0
	    });
	    pipe(scheduler, seriesModel, seriesModel.dataTask);
	  });
	};

	proto.prepareStageTasks = function () {
	  var stageTaskMap = this._stageTaskMap;
	  var ecModel = this.ecInstance.getModel();
	  var api = this.api;
	  each(this._allHandlers, function (handler) {
	    var record = stageTaskMap.get(handler.uid) || stageTaskMap.set(handler.uid, []);
	    handler.reset && createSeriesStageTask(this, handler, record, ecModel, api);
	    handler.overallReset && createOverallStageTask(this, handler, record, ecModel, api);
	  }, this);
	};

	proto.prepareView = function (view, model, ecModel, api) {
	  var renderTask = view.renderTask;
	  var context = renderTask.context;
	  context.model = model;
	  context.ecModel = ecModel;
	  context.api = api;
	  renderTask.__block = !view.incrementalPrepareRender;
	  pipe(this, model, renderTask);
	};

	proto.performDataProcessorTasks = function (ecModel, payload) {
	  // If we do not use `block` here, it should be considered when to update modes.
	  performStageTasks(this, this._dataProcessorHandlers, ecModel, payload, {
	    block: true
	  });
	}; // opt
	// opt.visualType: 'visual' or 'layout'
	// opt.setDirty


	proto.performVisualTasks = function (ecModel, payload, opt) {
	  performStageTasks(this, this._visualHandlers, ecModel, payload, opt);
	};

	function performStageTasks(scheduler, stageHandlers, ecModel, payload, opt) {
	  opt = opt || {};
	  var unfinished;
	  each(stageHandlers, function (stageHandler, idx) {
	    if (opt.visualType && opt.visualType !== stageHandler.visualType) {
	      return;
	    }

	    var stageHandlerRecord = scheduler._stageTaskMap.get(stageHandler.uid);

	    var seriesTaskMap = stageHandlerRecord.seriesTaskMap;
	    var overallTask = stageHandlerRecord.overallTask;

	    if (overallTask) {
	      var overallNeedDirty;
	      var agentStubMap = overallTask.agentStubMap;
	      agentStubMap.each(function (stub) {
	        if (needSetDirty(opt, stub)) {
	          stub.dirty();
	          overallNeedDirty = true;
	        }
	      });
	      overallNeedDirty && overallTask.dirty();
	      updatePayload(overallTask, payload);
	      var performArgs = scheduler.getPerformArgs(overallTask, opt.block); // Execute stubs firstly, which may set the overall task dirty,
	      // then execute the overall task. And stub will call seriesModel.setData,
	      // which ensures that in the overallTask seriesModel.getData() will not
	      // return incorrect data.

	      agentStubMap.each(function (stub) {
	        stub.perform(performArgs);
	      });
	      unfinished |= overallTask.perform(performArgs);
	    } else if (seriesTaskMap) {
	      seriesTaskMap.each(function (task, pipelineId) {
	        if (needSetDirty(opt, task)) {
	          task.dirty();
	        }

	        var performArgs = scheduler.getPerformArgs(task, opt.block);
	        performArgs.skip = !stageHandler.performRawSeries && ecModel.isSeriesFiltered(task.context.model);
	        updatePayload(task, payload);
	        unfinished |= task.perform(performArgs);
	      });
	    }
	  });

	  function needSetDirty(opt, task) {
	    return opt.setDirty && (!opt.dirtyMap || opt.dirtyMap.get(task.__pipeline.id));
	  }

	  scheduler.unfinished |= unfinished;
	}

	proto.performSeriesTasks = function (ecModel) {
	  var unfinished;
	  ecModel.eachSeries(function (seriesModel) {
	    // Progress to the end for dataInit and dataRestore.
	    unfinished |= seriesModel.dataTask.perform();
	  });
	  this.unfinished |= unfinished;
	};

	proto.plan = function () {
	  // Travel pipelines, check block.
	  this._pipelineMap.each(function (pipeline) {
	    var task = pipeline.tail;

	    do {
	      if (task.__block) {
	        pipeline.blockIndex = task.__idxInPipeline;
	        break;
	      }

	      task = task.getUpstream();
	    } while (task);
	  });
	};

	var updatePayload = proto.updatePayload = function (task, payload) {
	  payload !== 'remain' && (task.context.payload = payload);
	};

	function createSeriesStageTask(scheduler, stageHandler, stageHandlerRecord, ecModel, api) {
	  var seriesTaskMap = stageHandlerRecord.seriesTaskMap || (stageHandlerRecord.seriesTaskMap = createHashMap());
	  var seriesType = stageHandler.seriesType;
	  var getTargetSeries = stageHandler.getTargetSeries; // If a stageHandler should cover all series, `createOnAllSeries` should be declared mandatorily,
	  // to avoid some typo or abuse. Otherwise if an extension do not specify a `seriesType`,
	  // it works but it may cause other irrelevant charts blocked.

	  if (stageHandler.createOnAllSeries) {
	    ecModel.eachRawSeries(create);
	  } else if (seriesType) {
	    ecModel.eachRawSeriesByType(seriesType, create);
	  } else if (getTargetSeries) {
	    getTargetSeries(ecModel, api).each(create);
	  }

	  function create(seriesModel) {
	    var pipelineId = seriesModel.uid; // Init tasks for each seriesModel only once.
	    // Reuse original task instance.

	    var task = seriesTaskMap.get(pipelineId) || seriesTaskMap.set(pipelineId, createTask({
	      plan: seriesTaskPlan,
	      reset: seriesTaskReset,
	      count: seriesTaskCount
	    }));
	    task.context = {
	      model: seriesModel,
	      ecModel: ecModel,
	      api: api,
	      useClearVisual: stageHandler.isVisual && !stageHandler.isLayout,
	      plan: stageHandler.plan,
	      reset: stageHandler.reset,
	      scheduler: scheduler
	    };
	    pipe(scheduler, seriesModel, task);
	  } // Clear unused series tasks.


	  var pipelineMap = scheduler._pipelineMap;
	  seriesTaskMap.each(function (task, pipelineId) {
	    if (!pipelineMap.get(pipelineId)) {
	      task.dispose();
	      seriesTaskMap.removeKey(pipelineId);
	    }
	  });
	}

	function createOverallStageTask(scheduler, stageHandler, stageHandlerRecord, ecModel, api) {
	  var overallTask = stageHandlerRecord.overallTask = stageHandlerRecord.overallTask // For overall task, the function only be called on reset stage.
	  || createTask({
	    reset: overallTaskReset
	  });
	  overallTask.context = {
	    ecModel: ecModel,
	    api: api,
	    overallReset: stageHandler.overallReset,
	    scheduler: scheduler
	  }; // Reuse orignal stubs.

	  var agentStubMap = overallTask.agentStubMap = overallTask.agentStubMap || createHashMap();
	  var seriesType = stageHandler.seriesType;
	  var getTargetSeries = stageHandler.getTargetSeries;
	  var overallProgress = true;
	  var modifyOutputEnd = stageHandler.modifyOutputEnd; // An overall task with seriesType detected or has `getTargetSeries`, we add
	  // stub in each pipelines, it will set the overall task dirty when the pipeline
	  // progress. Moreover, to avoid call the overall task each frame (too frequent),
	  // we set the pipeline block.

	  if (seriesType) {
	    ecModel.eachRawSeriesByType(seriesType, createStub);
	  } else if (getTargetSeries) {
	    getTargetSeries(ecModel, api).each(createStub);
	  } // Otherwise, (usually it is legancy case), the overall task will only be
	  // executed when upstream dirty. Otherwise the progressive rendering of all
	  // pipelines will be disabled unexpectedly. But it still needs stubs to receive
	  // dirty info from upsteam.
	  else {
	      overallProgress = false;
	      each(ecModel.getSeries(), createStub);
	    }

	  function createStub(seriesModel) {
	    var pipelineId = seriesModel.uid;
	    var stub = agentStubMap.get(pipelineId);

	    if (!stub) {
	      stub = agentStubMap.set(pipelineId, createTask({
	        reset: stubReset,
	        onDirty: stubOnDirty
	      })); // When the result of `getTargetSeries` changed, the overallTask
	      // should be set as dirty and re-performed.

	      overallTask.dirty();
	    }

	    stub.context = {
	      model: seriesModel,
	      overallProgress: overallProgress,
	      modifyOutputEnd: modifyOutputEnd
	    };
	    stub.agent = overallTask;
	    stub.__block = overallProgress;
	    pipe(scheduler, seriesModel, stub);
	  } // Clear unused stubs.


	  var pipelineMap = scheduler._pipelineMap;
	  agentStubMap.each(function (stub, pipelineId) {
	    if (!pipelineMap.get(pipelineId)) {
	      stub.dispose(); // When the result of `getTargetSeries` changed, the overallTask
	      // should be set as dirty and re-performed.

	      overallTask.dirty();
	      agentStubMap.removeKey(pipelineId);
	    }
	  });
	}

	function overallTaskReset(context) {
	  context.overallReset(context.ecModel, context.api, context.payload);
	}

	function stubReset(context, upstreamContext) {
	  return context.overallProgress && stubProgress;
	}

	function stubProgress() {
	  this.agent.dirty();
	  this.getDownstream().dirty();
	}

	function stubOnDirty() {
	  this.agent && this.agent.dirty();
	}

	function seriesTaskPlan(context) {
	  return context.plan && context.plan(context.model, context.ecModel, context.api, context.payload);
	}

	function seriesTaskReset(context) {
	  if (context.useClearVisual) {
	    context.data.clearAllVisual();
	  }

	  var resetDefines = context.resetDefines = normalizeToArray(context.reset(context.model, context.ecModel, context.api, context.payload));
	  return resetDefines.length > 1 ? map(resetDefines, function (v, idx) {
	    return makeSeriesTaskProgress(idx);
	  }) : singleSeriesTaskProgress;
	}

	var singleSeriesTaskProgress = makeSeriesTaskProgress(0);

	function makeSeriesTaskProgress(resetDefineIdx) {
	  return function (params, context) {
	    var data = context.data;
	    var resetDefine = context.resetDefines[resetDefineIdx];

	    if (resetDefine && resetDefine.dataEach) {
	      for (var i = params.start; i < params.end; i++) {
	        resetDefine.dataEach(data, i);
	      }
	    } else if (resetDefine && resetDefine.progress) {
	      resetDefine.progress(params, data);
	    }
	  };
	}

	function seriesTaskCount(context) {
	  return context.data.count();
	}

	function pipe(scheduler, seriesModel, task) {
	  var pipelineId = seriesModel.uid;

	  var pipeline = scheduler._pipelineMap.get(pipelineId);

	  !pipeline.head && (pipeline.head = task);
	  pipeline.tail && pipeline.tail.pipe(task);
	  pipeline.tail = task;
	  task.__idxInPipeline = pipeline.count++;
	  task.__pipeline = pipeline;
	}

	Scheduler.wrapStageHandler = function (stageHandler, visualType) {
	  if (isFunction(stageHandler)) {
	    stageHandler = {
	      overallReset: stageHandler,
	      seriesType: detectSeriseType(stageHandler)
	    };
	  }

	  stageHandler.uid = getUID('stageHandler');
	  visualType && (stageHandler.visualType = visualType);
	  return stageHandler;
	};
	/**
	 * Only some legacy stage handlers (usually in echarts extensions) are pure function.
	 * To ensure that they can work normally, they should work in block mode, that is,
	 * they should not be started util the previous tasks finished. So they cause the
	 * progressive rendering disabled. We try to detect the series type, to narrow down
	 * the block range to only the series type they concern, but not all series.
	 */


	function detectSeriseType(legacyFunc) {
	  seriesType = null;

	  try {
	    // Assume there is no async when calling `eachSeriesByType`.
	    legacyFunc(ecModelMock, apiMock);
	  } catch (e) {}

	  return seriesType;
	}

	var ecModelMock = {};
	var apiMock = {};
	var seriesType;
	mockMethods(ecModelMock, GlobalModel);
	mockMethods(apiMock, ExtensionAPI);

	ecModelMock.eachSeriesByType = ecModelMock.eachRawSeriesByType = function (type) {
	  seriesType = type;
	};

	ecModelMock.eachComponent = function (cond) {
	  if (cond.mainType === 'series' && cond.subType) {
	    seriesType = cond.subType;
	  }
	};

	function mockMethods(target, Clz) {
	  for (var name in Clz.prototype) {
	    // Do not use hasOwnProperty
	    target[name] = noop;
	  }
	}

	var _default = Scheduler;
	module.exports = _default;

/***/ }),
/* 291 */
/***/ (function(module, exports) {

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var colorAll = ['#37A2DA', '#32C5E9', '#67E0E3', '#9FE6B8', '#FFDB5C', '#ff9f7f', '#fb7293', '#E062AE', '#E690D1', '#e7bcf3', '#9d96f5', '#8378EA', '#96BFFF'];
	var _default = {
	  color: colorAll,
	  colorLayer: [['#37A2DA', '#ffd85c', '#fd7b5f'], ['#37A2DA', '#67E0E3', '#FFDB5C', '#ff9f7f', '#E062AE', '#9d96f5'], ['#37A2DA', '#32C5E9', '#9FE6B8', '#FFDB5C', '#ff9f7f', '#fb7293', '#e7bcf3', '#8378EA', '#96BFFF'], colorAll]
	};
	module.exports = _default;

/***/ }),
/* 292 */
/***/ (function(module, exports) {

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var contrastColor = '#eee';

	var axisCommon = function () {
	  return {
	    axisLine: {
	      lineStyle: {
	        color: contrastColor
	      }
	    },
	    axisTick: {
	      lineStyle: {
	        color: contrastColor
	      }
	    },
	    axisLabel: {
	      textStyle: {
	        color: contrastColor
	      }
	    },
	    splitLine: {
	      lineStyle: {
	        type: 'dashed',
	        color: '#aaa'
	      }
	    },
	    splitArea: {
	      areaStyle: {
	        color: contrastColor
	      }
	    }
	  };
	};

	var colorPalette = ['#dd6b66', '#759aa0', '#e69d87', '#8dc1a9', '#ea7e53', '#eedd78', '#73a373', '#73b9bc', '#7289ab', '#91ca8c', '#f49f42'];
	var theme = {
	  color: colorPalette,
	  backgroundColor: '#333',
	  tooltip: {
	    axisPointer: {
	      lineStyle: {
	        color: contrastColor
	      },
	      crossStyle: {
	        color: contrastColor
	      }
	    }
	  },
	  legend: {
	    textStyle: {
	      color: contrastColor
	    }
	  },
	  textStyle: {
	    color: contrastColor
	  },
	  title: {
	    textStyle: {
	      color: contrastColor
	    }
	  },
	  toolbox: {
	    iconStyle: {
	      normal: {
	        borderColor: contrastColor
	      }
	    }
	  },
	  dataZoom: {
	    textStyle: {
	      color: contrastColor
	    }
	  },
	  visualMap: {
	    textStyle: {
	      color: contrastColor
	    }
	  },
	  timeline: {
	    lineStyle: {
	      color: contrastColor
	    },
	    itemStyle: {
	      normal: {
	        color: colorPalette[1]
	      }
	    },
	    label: {
	      normal: {
	        textStyle: {
	          color: contrastColor
	        }
	      }
	    },
	    controlStyle: {
	      normal: {
	        color: contrastColor,
	        borderColor: contrastColor
	      }
	    }
	  },
	  timeAxis: axisCommon(),
	  logAxis: axisCommon(),
	  valueAxis: axisCommon(),
	  categoryAxis: axisCommon(),
	  line: {
	    symbol: 'circle'
	  },
	  graph: {
	    color: colorPalette
	  },
	  gauge: {
	    title: {
	      textStyle: {
	        color: contrastColor
	      }
	    }
	  },
	  candlestick: {
	    itemStyle: {
	      normal: {
	        color: '#FD1050',
	        color0: '#0CF49B',
	        borderColor: '#FD1050',
	        borderColor0: '#0CF49B'
	      }
	    }
	  }
	};
	theme.categoryAxis.splitLine.show = false;
	var _default = theme;
	module.exports = _default;

/***/ }),
/* 293 */
/***/ (function(module, exports, __webpack_require__) {

	var ComponentModel = __webpack_require__(260);

	var ComponentView = __webpack_require__(282);

	var _sourceHelper = __webpack_require__(268);

	var detectSourceFormat = _sourceHelper.detectSourceFormat;

	var _sourceType = __webpack_require__(271);

	var SERIES_LAYOUT_BY_COLUMN = _sourceType.SERIES_LAYOUT_BY_COLUMN;

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/

	/**
	 * This module is imported by echarts directly.
	 *
	 * Notice:
	 * Always keep this file exists for backward compatibility.
	 * Because before 4.1.0, dataset is an optional component,
	 * some users may import this module manually.
	 */
	ComponentModel.extend({
	  type: 'dataset',

	  /**
	   * @protected
	   */
	  defaultOption: {
	    // 'row', 'column'
	    seriesLayoutBy: SERIES_LAYOUT_BY_COLUMN,
	    // null/'auto': auto detect header, see "module:echarts/data/helper/sourceHelper"
	    sourceHeader: null,
	    dimensions: null,
	    source: null
	  },
	  optionUpdated: function () {
	    detectSourceFormat(this);
	  }
	});
	ComponentView.extend({
	  type: 'dataset'
	});

/***/ }),
/* 294 */
/***/ (function(module, exports, __webpack_require__) {

	var zrender = __webpack_require__(178);

	exports.zrender = zrender;

	var matrix = __webpack_require__(190);

	exports.matrix = matrix;

	var vector = __webpack_require__(183);

	exports.vector = vector;

	var zrUtil = __webpack_require__(181);

	var colorTool = __webpack_require__(195);

	exports.color = colorTool;

	var graphic = __webpack_require__(226);

	exports.graphic = graphic;

	var numberUtil = __webpack_require__(263);

	exports.number = numberUtil;

	var formatUtil = __webpack_require__(264);

	exports.format = formatUtil;

	var _throttle = __webpack_require__(285);

	var throttle = _throttle.throttle;
	exports.throttle = _throttle.throttle;

	var ecHelper = __webpack_require__(295);

	exports.helper = ecHelper;

	var parseGeoJSON = __webpack_require__(314);

	exports.parseGeoJSON = parseGeoJSON;

	var _List = __webpack_require__(297);

	exports.List = _List;

	var _Model = __webpack_require__(220);

	exports.Model = _Model;

	var _Axis = __webpack_require__(317);

	exports.Axis = _Axis;

	var _env = __webpack_require__(180);

	exports.env = _env;

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/

	/**
	 * Do not mount those modules on 'src/echarts' for better tree shaking.
	 */
	var parseGeoJson = parseGeoJSON;
	var ecUtil = {};
	zrUtil.each(['map', 'each', 'filter', 'indexOf', 'inherits', 'reduce', 'filter', 'bind', 'curry', 'isArray', 'isString', 'isObject', 'isFunction', 'extend', 'defaults', 'clone', 'merge'], function (name) {
	  ecUtil[name] = zrUtil[name];
	});
	exports.parseGeoJson = parseGeoJson;
	exports.util = ecUtil;

/***/ }),
/* 295 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(181);

	var createListFromArray = __webpack_require__(296);

	var axisHelper = __webpack_require__(303);

	var axisModelCommonMixin = __webpack_require__(312);

	var Model = __webpack_require__(220);

	var _layout = __webpack_require__(262);

	var getLayoutRect = _layout.getLayoutRect;
	exports.getLayoutRect = _layout.getLayoutRect;

	var _dataStackHelper = __webpack_require__(302);

	var enableDataStack = _dataStackHelper.enableDataStack;
	var isDimensionStacked = _dataStackHelper.isDimensionStacked;
	var getStackedDimension = _dataStackHelper.getStackedDimension;

	var _completeDimensions = __webpack_require__(301);

	exports.completeDimensions = _completeDimensions;

	var _createDimensions = __webpack_require__(300);

	exports.createDimensions = _createDimensions;

	var _symbol = __webpack_require__(313);

	exports.createSymbol = _symbol.createSymbol;

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	// import createGraphFromNodeEdge from './chart/helper/createGraphFromNodeEdge';

	/**
	 * Create a muti dimension List structure from seriesModel.
	 * @param  {module:echarts/model/Model} seriesModel
	 * @return {module:echarts/data/List} list
	 */
	function createList(seriesModel) {
	  return createListFromArray(seriesModel.getSource(), seriesModel);
	} // export function createGraph(seriesModel) {
	//     var nodes = seriesModel.get('data');
	//     var links = seriesModel.get('links');
	//     return createGraphFromNodeEdge(nodes, links, seriesModel);
	// }


	var dataStack = {
	  isDimensionStacked: isDimensionStacked,
	  enableDataStack: enableDataStack,
	  getStackedDimension: getStackedDimension
	};
	/**
	 * Create a symbol element with given symbol configuration: shape, x, y, width, height, color
	 * @see http://echarts.baidu.com/option.html#series-scatter.symbol
	 * @param {string} symbolDesc
	 * @param {number} x
	 * @param {number} y
	 * @param {number} w
	 * @param {number} h
	 * @param {string} color
	 */

	/**
	 * Create scale
	 * @param {Array.<number>} dataExtent
	 * @param {Object|module:echarts/Model} option
	 */
	function createScale(dataExtent, option) {
	  var axisModel = option;

	  if (!Model.isInstance(option)) {
	    axisModel = new Model(option);
	    zrUtil.mixin(axisModel, axisModelCommonMixin);
	  }

	  var scale = axisHelper.createScaleByModel(axisModel);
	  scale.setExtent(dataExtent[0], dataExtent[1]);
	  axisHelper.niceScaleExtent(scale, axisModel);
	  return scale;
	}
	/**
	 * Mixin common methods to axis model,
	 *
	 * Inlcude methods
	 * `getFormattedLabels() => Array.<string>`
	 * `getCategories() => Array.<string>`
	 * `getMin(origin: boolean) => number`
	 * `getMax(origin: boolean) => number`
	 * `getNeedCrossZero() => boolean`
	 * `setRange(start: number, end: number)`
	 * `resetRange()`
	 */


	function mixinAxisModelCommonMethods(Model) {
	  zrUtil.mixin(Model, axisModelCommonMixin);
	}

	exports.createList = createList;
	exports.dataStack = dataStack;
	exports.createScale = createScale;
	exports.mixinAxisModelCommonMethods = mixinAxisModelCommonMethods;

/***/ }),
/* 296 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(181);

	var List = __webpack_require__(297);

	var createDimensions = __webpack_require__(300);

	var _sourceType = __webpack_require__(271);

	var SOURCE_FORMAT_ORIGINAL = _sourceType.SOURCE_FORMAT_ORIGINAL;

	var _dimensionHelper = __webpack_require__(299);

	var getDimensionTypeByAxis = _dimensionHelper.getDimensionTypeByAxis;

	var _model = __webpack_require__(219);

	var getDataItemValue = _model.getDataItemValue;

	var CoordinateSystem = __webpack_require__(273);

	var _referHelper = __webpack_require__(269);

	var getCoordSysDefineBySeries = _referHelper.getCoordSysDefineBySeries;

	var Source = __webpack_require__(270);

	var _dataStackHelper = __webpack_require__(302);

	var enableDataStack = _dataStackHelper.enableDataStack;

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/

	/**
	 * @param {module:echarts/data/Source|Array} source Or raw data.
	 * @param {module:echarts/model/Series} seriesModel
	 * @param {Object} [opt]
	 * @param {string} [opt.generateCoord]
	 */
	function createListFromArray(source, seriesModel, opt) {
	  opt = opt || {};

	  if (!Source.isInstance(source)) {
	    source = Source.seriesDataToSource(source);
	  }

	  var coordSysName = seriesModel.get('coordinateSystem');
	  var registeredCoordSys = CoordinateSystem.get(coordSysName);
	  var coordSysDefine = getCoordSysDefineBySeries(seriesModel);
	  var coordSysDimDefs;

	  if (coordSysDefine) {
	    coordSysDimDefs = zrUtil.map(coordSysDefine.coordSysDims, function (dim) {
	      var dimInfo = {
	        name: dim
	      };
	      var axisModel = coordSysDefine.axisMap.get(dim);

	      if (axisModel) {
	        var axisType = axisModel.get('type');
	        dimInfo.type = getDimensionTypeByAxis(axisType); // dimInfo.stackable = isStackable(axisType);
	      }

	      return dimInfo;
	    });
	  }

	  if (!coordSysDimDefs) {
	    // Get dimensions from registered coordinate system
	    coordSysDimDefs = registeredCoordSys && (registeredCoordSys.getDimensionsInfo ? registeredCoordSys.getDimensionsInfo() : registeredCoordSys.dimensions.slice()) || ['x', 'y'];
	  }

	  var dimInfoList = createDimensions(source, {
	    coordDimensions: coordSysDimDefs,
	    generateCoord: opt.generateCoord
	  });
	  var firstCategoryDimIndex;
	  var hasNameEncode;
	  coordSysDefine && zrUtil.each(dimInfoList, function (dimInfo, dimIndex) {
	    var coordDim = dimInfo.coordDim;
	    var categoryAxisModel = coordSysDefine.categoryAxisMap.get(coordDim);

	    if (categoryAxisModel) {
	      if (firstCategoryDimIndex == null) {
	        firstCategoryDimIndex = dimIndex;
	      }

	      dimInfo.ordinalMeta = categoryAxisModel.getOrdinalMeta();
	    }

	    if (dimInfo.otherDims.itemName != null) {
	      hasNameEncode = true;
	    }
	  });

	  if (!hasNameEncode && firstCategoryDimIndex != null) {
	    dimInfoList[firstCategoryDimIndex].otherDims.itemName = 0;
	  }

	  var stackCalculationInfo = enableDataStack(seriesModel, dimInfoList);
	  var list = new List(dimInfoList, seriesModel);
	  list.setCalculationInfo(stackCalculationInfo);
	  var dimValueGetter = firstCategoryDimIndex != null && isNeedCompleteOrdinalData(source) ? function (itemOpt, dimName, dataIndex, dimIndex) {
	    // Use dataIndex as ordinal value in categoryAxis
	    return dimIndex === firstCategoryDimIndex ? dataIndex : this.defaultDimValueGetter(itemOpt, dimName, dataIndex, dimIndex);
	  } : null;
	  list.hasItemOption = false;
	  list.initData(source, null, dimValueGetter);
	  return list;
	}

	function isNeedCompleteOrdinalData(source) {
	  if (source.sourceFormat === SOURCE_FORMAT_ORIGINAL) {
	    var sampleItem = firstDataNotNull(source.data || []);
	    return sampleItem != null && !zrUtil.isArray(getDataItemValue(sampleItem));
	  }
	}

	function firstDataNotNull(data) {
	  var i = 0;

	  while (i < data.length && data[i] == null) {
	    i++;
	  }

	  return data[i];
	}

	var _default = createListFromArray;
	module.exports = _default;

/***/ }),
/* 297 */
/***/ (function(module, exports, __webpack_require__) {

	var _config = __webpack_require__(177);

	var __DEV__ = _config.__DEV__;

	var zrUtil = __webpack_require__(181);

	var Model = __webpack_require__(220);

	var DataDiffer = __webpack_require__(298);

	var Source = __webpack_require__(270);

	var _dataProvider = __webpack_require__(280);

	var defaultDimValueGetters = _dataProvider.defaultDimValueGetters;
	var DefaultDataProvider = _dataProvider.DefaultDataProvider;

	var _dimensionHelper = __webpack_require__(299);

	var summarizeDimensions = _dimensionHelper.summarizeDimensions;

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/

	/**
	 * List for data storage
	 * @module echarts/data/List
	 */
	var isObject = zrUtil.isObject;
	var UNDEFINED = 'undefined'; // Use prefix to avoid index to be the same as otherIdList[idx],
	// which will cause weird udpate animation.

	var ID_PREFIX = 'e\0\0';
	var dataCtors = {
	  'float': typeof Float64Array === UNDEFINED ? Array : Float64Array,
	  'int': typeof Int32Array === UNDEFINED ? Array : Int32Array,
	  // Ordinal data type can be string or int
	  'ordinal': Array,
	  'number': Array,
	  'time': Array
	}; // Caution: MUST not use `new CtorUint32Array(arr, 0, len)`, because the Ctor of array is
	// different from the Ctor of typed array.

	var CtorUint32Array = typeof Uint32Array === UNDEFINED ? Array : Uint32Array;
	var CtorUint16Array = typeof Uint16Array === UNDEFINED ? Array : Uint16Array;

	function getIndicesCtor(list) {
	  // The possible max value in this._indicies is always this._rawCount despite of filtering.
	  return list._rawCount > 65535 ? CtorUint32Array : CtorUint16Array;
	}

	function cloneChunk(originalChunk) {
	  var Ctor = originalChunk.constructor; // Only shallow clone is enough when Array.

	  return Ctor === Array ? originalChunk.slice() : new Ctor(originalChunk);
	}

	var TRANSFERABLE_PROPERTIES = ['hasItemOption', '_nameList', '_idList', '_invertedIndicesMap', '_rawData', '_chunkSize', '_chunkCount', '_dimValueGetter', '_count', '_rawCount', '_nameDimIdx', '_idDimIdx'];
	var CLONE_PROPERTIES = ['_extent', '_approximateExtent', '_rawExtent'];

	function transferProperties(target, source) {
	  zrUtil.each(TRANSFERABLE_PROPERTIES.concat(source.__wrappedMethods || []), function (propName) {
	    if (source.hasOwnProperty(propName)) {
	      target[propName] = source[propName];
	    }
	  });
	  target.__wrappedMethods = source.__wrappedMethods;
	  zrUtil.each(CLONE_PROPERTIES, function (propName) {
	    target[propName] = zrUtil.clone(source[propName]);
	  });
	  target._calculationInfo = zrUtil.extend(source._calculationInfo);
	}
	/**
	 * @constructor
	 * @alias module:echarts/data/List
	 *
	 * @param {Array.<string|Object>} dimensions
	 *      For example, ['someDimName', {name: 'someDimName', type: 'someDimType'}, ...].
	 *      Dimensions should be concrete names like x, y, z, lng, lat, angle, radius
	 *      Spetial fields: {
	 *          ordinalMeta: <module:echarts/data/OrdinalMeta>
	 *          createInvertedIndices: <boolean>
	 *      }
	 * @param {module:echarts/model/Model} hostModel
	 */


	var List = function (dimensions, hostModel) {
	  dimensions = dimensions || ['x', 'y'];
	  var dimensionInfos = {};
	  var dimensionNames = [];
	  var invertedIndicesMap = {};

	  for (var i = 0; i < dimensions.length; i++) {
	    // Use the original dimensions[i], where other flag props may exists.
	    var dimensionInfo = dimensions[i];

	    if (zrUtil.isString(dimensionInfo)) {
	      dimensionInfo = {
	        name: dimensionInfo
	      };
	    }

	    var dimensionName = dimensionInfo.name;
	    dimensionInfo.type = dimensionInfo.type || 'float';

	    if (!dimensionInfo.coordDim) {
	      dimensionInfo.coordDim = dimensionName;
	      dimensionInfo.coordDimIndex = 0;
	    }

	    dimensionInfo.otherDims = dimensionInfo.otherDims || {};
	    dimensionNames.push(dimensionName);
	    dimensionInfos[dimensionName] = dimensionInfo;
	    dimensionInfo.index = i;

	    if (dimensionInfo.createInvertedIndices) {
	      invertedIndicesMap[dimensionName] = [];
	    }
	  }
	  /**
	   * @readOnly
	   * @type {Array.<string>}
	   */


	  this.dimensions = dimensionNames;
	  /**
	   * Infomation of each data dimension, like data type.
	   * @type {Object}
	   */

	  this._dimensionInfos = dimensionInfos;
	  /**
	   * @type {module:echarts/model/Model}
	   */

	  this.hostModel = hostModel;
	  /**
	   * @type {module:echarts/model/Model}
	   */

	  this.dataType;
	  /**
	   * Indices stores the indices of data subset after filtered.
	   * This data subset will be used in chart.
	   * @type {Array.<number>}
	   * @readOnly
	   */

	  this._indices = null;
	  this._count = 0;
	  this._rawCount = 0;
	  /**
	   * Data storage
	   * @type {Object.<key, Array.<TypedArray|Array>>}
	   * @private
	   */

	  this._storage = {};
	  /**
	   * @type {Array.<string>}
	   */

	  this._nameList = [];
	  /**
	   * @type {Array.<string>}
	   */

	  this._idList = [];
	  /**
	   * Models of data option is stored sparse for optimizing memory cost
	   * @type {Array.<module:echarts/model/Model>}
	   * @private
	   */

	  this._optionModels = [];
	  /**
	   * Global visual properties after visual coding
	   * @type {Object}
	   * @private
	   */

	  this._visual = {};
	  /**
	   * Globel layout properties.
	   * @type {Object}
	   * @private
	   */

	  this._layout = {};
	  /**
	   * Item visual properties after visual coding
	   * @type {Array.<Object>}
	   * @private
	   */

	  this._itemVisuals = [];
	  /**
	   * Key: visual type, Value: boolean
	   * @type {Object}
	   * @readOnly
	   */

	  this.hasItemVisual = {};
	  /**
	   * Item layout properties after layout
	   * @type {Array.<Object>}
	   * @private
	   */

	  this._itemLayouts = [];
	  /**
	   * Graphic elemnents
	   * @type {Array.<module:zrender/Element>}
	   * @private
	   */

	  this._graphicEls = [];
	  /**
	   * Max size of each chunk.
	   * @type {number}
	   * @private
	   */

	  this._chunkSize = 1e5;
	  /**
	   * @type {number}
	   * @private
	   */

	  this._chunkCount = 0;
	  /**
	   * @type {Array.<Array|Object>}
	   * @private
	   */

	  this._rawData;
	  /**
	   * Raw extent will not be cloned, but only transfered.
	   * It will not be calculated util needed.
	   * key: dim,
	   * value: {end: number, extent: Array.<number>}
	   * @type {Object}
	   * @private
	   */

	  this._rawExtent = {};
	  /**
	   * @type {Object}
	   * @private
	   */

	  this._extent = {};
	  /**
	   * key: dim
	   * value: extent
	   * @type {Object}
	   * @private
	   */

	  this._approximateExtent = {};
	  /**
	   * Cache summary info for fast visit. See "dimensionHelper".
	   * @type {Object}
	   * @private
	   */

	  this._dimensionsSummary = summarizeDimensions(this);
	  /**
	   * @type {Object.<Array|TypedArray>}
	   * @private
	   */

	  this._invertedIndicesMap = invertedIndicesMap;
	  /**
	   * @type {Object}
	   * @private
	   */

	  this._calculationInfo = {};
	};

	var listProto = List.prototype;
	listProto.type = 'list';
	/**
	 * If each data item has it's own option
	 * @type {boolean}
	 */

	listProto.hasItemOption = true;
	/**
	 * Get dimension name
	 * @param {string|number} dim
	 *        Dimension can be concrete names like x, y, z, lng, lat, angle, radius
	 *        Or a ordinal number. For example getDimensionInfo(0) will return 'x' or 'lng' or 'radius'
	 * @return {string} Concrete dim name.
	 */

	listProto.getDimension = function (dim) {
	  if (!isNaN(dim)) {
	    dim = this.dimensions[dim] || dim;
	  }

	  return dim;
	};
	/**
	 * Get type and calculation info of particular dimension
	 * @param {string|number} dim
	 *        Dimension can be concrete names like x, y, z, lng, lat, angle, radius
	 *        Or a ordinal number. For example getDimensionInfo(0) will return 'x' or 'lng' or 'radius'
	 */


	listProto.getDimensionInfo = function (dim) {
	  // Do not clone, because there may be categories in dimInfo.
	  return this._dimensionInfos[this.getDimension(dim)];
	};
	/**
	 * @return {Array.<string>} concrete dimension name list on coord.
	 */


	listProto.getDimensionsOnCoord = function () {
	  return this._dimensionsSummary.dataDimsOnCoord.slice();
	};
	/**
	 * @param {string} coordDim
	 * @param {number} [idx] A coordDim may map to more than one data dim.
	 *        If idx is `true`, return a array of all mapped dims.
	 *        If idx is not specified, return the first dim not extra.
	 * @return {string|Array.<string>} concrete data dim.
	 *        If idx is number, and not found, return null/undefined.
	 *        If idx is `true`, and not found, return empty array (always return array).
	 */


	listProto.mapDimension = function (coordDim, idx) {
	  var dimensionsSummary = this._dimensionsSummary;

	  if (idx == null) {
	    return dimensionsSummary.encodeFirstDimNotExtra[coordDim];
	  }

	  var dims = dimensionsSummary.encode[coordDim];
	  return idx === true // always return array if idx is `true`
	  ? (dims || []).slice() : dims && dims[idx];
	};
	/**
	 * Initialize from data
	 * @param {Array.<Object|number|Array>} data source or data or data provider.
	 * @param {Array.<string>} [nameLIst] The name of a datum is used on data diff and
	 *        defualt label/tooltip.
	 *        A name can be specified in encode.itemName,
	 *        or dataItem.name (only for series option data),
	 *        or provided in nameList from outside.
	 * @param {Function} [dimValueGetter] (dataItem, dimName, dataIndex, dimIndex) => number
	 */


	listProto.initData = function (data, nameList, dimValueGetter) {
	  var notProvider = Source.isInstance(data) || zrUtil.isArrayLike(data);

	  if (notProvider) {
	    data = new DefaultDataProvider(data, this.dimensions.length);
	  }

	  this._rawData = data; // Clear

	  this._storage = {};
	  this._indices = null;
	  this._nameList = nameList || [];
	  this._idList = [];
	  this._nameRepeatCount = {};

	  if (!dimValueGetter) {
	    this.hasItemOption = false;
	  }
	  /**
	   * @readOnly
	   */


	  this.defaultDimValueGetter = defaultDimValueGetters[this._rawData.getSource().sourceFormat]; // Default dim value getter

	  this._dimValueGetter = dimValueGetter = dimValueGetter || this.defaultDimValueGetter; // Reset raw extent.

	  this._rawExtent = {};

	  this._initDataFromProvider(0, data.count()); // If data has no item option.


	  if (data.pure) {
	    this.hasItemOption = false;
	  }
	};

	listProto.getProvider = function () {
	  return this._rawData;
	};

	listProto.appendData = function (data) {
	  var rawData = this._rawData;
	  var start = this.count();
	  rawData.appendData(data);
	  var end = rawData.count();

	  if (!rawData.persistent) {
	    end += start;
	  }

	  this._initDataFromProvider(start, end);
	};

	listProto._initDataFromProvider = function (start, end) {
	  // Optimize.
	  if (start >= end) {
	    return;
	  }

	  var chunkSize = this._chunkSize;
	  var rawData = this._rawData;
	  var storage = this._storage;
	  var dimensions = this.dimensions;
	  var dimLen = dimensions.length;
	  var dimensionInfoMap = this._dimensionInfos;
	  var nameList = this._nameList;
	  var idList = this._idList;
	  var rawExtent = this._rawExtent;
	  var nameRepeatCount = this._nameRepeatCount = {};
	  var nameDimIdx;
	  var chunkCount = this._chunkCount;
	  var lastChunkIndex = chunkCount - 1;

	  for (var i = 0; i < dimLen; i++) {
	    var dim = dimensions[i];

	    if (!rawExtent[dim]) {
	      rawExtent[dim] = getInitialExtent();
	    }

	    var dimInfo = dimensionInfoMap[dim];

	    if (dimInfo.otherDims.itemName === 0) {
	      nameDimIdx = this._nameDimIdx = i;
	    }

	    if (dimInfo.otherDims.itemId === 0) {
	      this._idDimIdx = i;
	    }

	    var DataCtor = dataCtors[dimInfo.type];

	    if (!storage[dim]) {
	      storage[dim] = [];
	    }

	    var resizeChunkArray = storage[dim][lastChunkIndex];

	    if (resizeChunkArray && resizeChunkArray.length < chunkSize) {
	      var newStore = new DataCtor(Math.min(end - lastChunkIndex * chunkSize, chunkSize)); // The cost of the copy is probably inconsiderable
	      // within the initial chunkSize.

	      for (var j = 0; j < resizeChunkArray.length; j++) {
	        newStore[j] = resizeChunkArray[j];
	      }

	      storage[dim][lastChunkIndex] = newStore;
	    } // Create new chunks.


	    for (var k = chunkCount * chunkSize; k < end; k += chunkSize) {
	      storage[dim].push(new DataCtor(Math.min(end - k, chunkSize)));
	    }

	    this._chunkCount = storage[dim].length;
	  }

	  var dataItem = new Array(dimLen);

	  for (var idx = start; idx < end; idx++) {
	    // NOTICE: Try not to write things into dataItem
	    dataItem = rawData.getItem(idx, dataItem); // Each data item is value
	    // [1, 2]
	    // 2
	    // Bar chart, line chart which uses category axis
	    // only gives the 'y' value. 'x' value is the indices of category
	    // Use a tempValue to normalize the value to be a (x, y) value

	    var chunkIndex = Math.floor(idx / chunkSize);
	    var chunkOffset = idx % chunkSize; // Store the data by dimensions

	    for (var k = 0; k < dimLen; k++) {
	      var dim = dimensions[k];
	      var dimStorage = storage[dim][chunkIndex]; // PENDING NULL is empty or zero

	      var val = this._dimValueGetter(dataItem, dim, idx, k);

	      dimStorage[chunkOffset] = val;
	      var dimRawExtent = rawExtent[dim];

	      if (val < dimRawExtent[0]) {
	        dimRawExtent[0] = val;
	      }

	      if (val > dimRawExtent[1]) {
	        dimRawExtent[1] = val;
	      }
	    } // ??? FIXME not check by pure but sourceFormat?
	    // TODO refactor these logic.


	    if (!rawData.pure) {
	      var name = nameList[idx];

	      if (dataItem && name == null) {
	        // If dataItem is {name: ...}, it has highest priority.
	        // That is appropriate for many common cases.
	        if (dataItem.name != null) {
	          // There is no other place to persistent dataItem.name,
	          // so save it to nameList.
	          nameList[idx] = name = dataItem.name;
	        } else if (nameDimIdx != null) {
	          var nameDim = dimensions[nameDimIdx];
	          var nameDimChunk = storage[nameDim][chunkIndex];

	          if (nameDimChunk) {
	            name = nameDimChunk[chunkOffset];
	            var ordinalMeta = dimensionInfoMap[nameDim].ordinalMeta;

	            if (ordinalMeta && ordinalMeta.categories.length) {
	              name = ordinalMeta.categories[name];
	            }
	          }
	        }
	      } // Try using the id in option
	      // id or name is used on dynamical data, mapping old and new items.


	      var id = dataItem == null ? null : dataItem.id;

	      if (id == null && name != null) {
	        // Use name as id and add counter to avoid same name
	        nameRepeatCount[name] = nameRepeatCount[name] || 0;
	        id = name;

	        if (nameRepeatCount[name] > 0) {
	          id += '__ec__' + nameRepeatCount[name];
	        }

	        nameRepeatCount[name]++;
	      }

	      id != null && (idList[idx] = id);
	    }
	  }

	  if (!rawData.persistent && rawData.clean) {
	    // Clean unused data if data source is typed array.
	    rawData.clean();
	  }

	  this._rawCount = this._count = end; // Reset data extent

	  this._extent = {};
	  prepareInvertedIndex(this);
	};

	function prepareInvertedIndex(list) {
	  var invertedIndicesMap = list._invertedIndicesMap;
	  zrUtil.each(invertedIndicesMap, function (invertedIndices, dim) {
	    var dimInfo = list._dimensionInfos[dim]; // Currently, only dimensions that has ordinalMeta can create inverted indices.

	    var ordinalMeta = dimInfo.ordinalMeta;

	    if (ordinalMeta) {
	      invertedIndices = invertedIndicesMap[dim] = new CtorUint32Array(ordinalMeta.categories.length); // The default value of TypedArray is 0. To avoid miss
	      // mapping to 0, we should set it as NaN.

	      for (var i = 0; i < invertedIndices.length; i++) {
	        invertedIndices[i] = NaN;
	      }

	      for (var i = 0; i < list._count; i++) {
	        // Only support the case that all values are distinct.
	        invertedIndices[list.get(dim, i)] = i;
	      }
	    }
	  });
	}

	function getRawValueFromStore(list, dimIndex, rawIndex) {
	  var val;

	  if (dimIndex != null) {
	    var chunkSize = list._chunkSize;
	    var chunkIndex = Math.floor(rawIndex / chunkSize);
	    var chunkOffset = rawIndex % chunkSize;
	    var dim = list.dimensions[dimIndex];
	    var chunk = list._storage[dim][chunkIndex];

	    if (chunk) {
	      val = chunk[chunkOffset];
	      var ordinalMeta = list._dimensionInfos[dim].ordinalMeta;

	      if (ordinalMeta && ordinalMeta.categories.length) {
	        val = ordinalMeta.categories[val];
	      }
	    }
	  }

	  return val;
	}
	/**
	 * @return {number}
	 */


	listProto.count = function () {
	  return this._count;
	};

	listProto.getIndices = function () {
	  var newIndices;
	  var indices = this._indices;

	  if (indices) {
	    var Ctor = indices.constructor;
	    var thisCount = this._count; // `new Array(a, b, c)` is different from `new Uint32Array(a, b, c)`.

	    if (Ctor === Array) {
	      newIndices = new Ctor(thisCount);

	      for (var i = 0; i < thisCount; i++) {
	        newIndices[i] = indices[i];
	      }
	    } else {
	      newIndices = new Ctor(indices.buffer, 0, thisCount);
	    }
	  } else {
	    var Ctor = getIndicesCtor(this);
	    var newIndices = new Ctor(this.count());

	    for (var i = 0; i < newIndices.length; i++) {
	      newIndices[i] = i;
	    }
	  }

	  return newIndices;
	};
	/**
	 * Get value. Return NaN if idx is out of range.
	 * @param {string} dim Dim must be concrete name.
	 * @param {number} idx
	 * @param {boolean} stack
	 * @return {number}
	 */


	listProto.get = function (dim, idx
	/*, stack */
	) {
	  if (!(idx >= 0 && idx < this._count)) {
	    return NaN;
	  }

	  var storage = this._storage;

	  if (!storage[dim]) {
	    // TODO Warn ?
	    return NaN;
	  }

	  idx = this.getRawIndex(idx);
	  var chunkIndex = Math.floor(idx / this._chunkSize);
	  var chunkOffset = idx % this._chunkSize;
	  var chunkStore = storage[dim][chunkIndex];
	  var value = chunkStore[chunkOffset]; // FIXME ordinal data type is not stackable
	  // if (stack) {
	  //     var dimensionInfo = this._dimensionInfos[dim];
	  //     if (dimensionInfo && dimensionInfo.stackable) {
	  //         var stackedOn = this.stackedOn;
	  //         while (stackedOn) {
	  //             // Get no stacked data of stacked on
	  //             var stackedValue = stackedOn.get(dim, idx);
	  //             // Considering positive stack, negative stack and empty data
	  //             if ((value >= 0 && stackedValue > 0)  // Positive stack
	  //                 || (value <= 0 && stackedValue < 0) // Negative stack
	  //             ) {
	  //                 value += stackedValue;
	  //             }
	  //             stackedOn = stackedOn.stackedOn;
	  //         }
	  //     }
	  // }

	  return value;
	};
	/**
	 * @param {string} dim concrete dim
	 * @param {number} rawIndex
	 * @return {number|string}
	 */


	listProto.getByRawIndex = function (dim, rawIdx) {
	  if (!(rawIdx >= 0 && rawIdx < this._rawCount)) {
	    return NaN;
	  }

	  var dimStore = this._storage[dim];

	  if (!dimStore) {
	    // TODO Warn ?
	    return NaN;
	  }

	  var chunkIndex = Math.floor(rawIdx / this._chunkSize);
	  var chunkOffset = rawIdx % this._chunkSize;
	  var chunkStore = dimStore[chunkIndex];
	  return chunkStore[chunkOffset];
	};
	/**
	 * FIXME Use `get` on chrome maybe slow(in filterSelf and selectRange).
	 * Hack a much simpler _getFast
	 * @private
	 */


	listProto._getFast = function (dim, rawIdx) {
	  var chunkIndex = Math.floor(rawIdx / this._chunkSize);
	  var chunkOffset = rawIdx % this._chunkSize;
	  var chunkStore = this._storage[dim][chunkIndex];
	  return chunkStore[chunkOffset];
	};
	/**
	 * Get value for multi dimensions.
	 * @param {Array.<string>} [dimensions] If ignored, using all dimensions.
	 * @param {number} idx
	 * @return {number}
	 */


	listProto.getValues = function (dimensions, idx
	/*, stack */
	) {
	  var values = [];

	  if (!zrUtil.isArray(dimensions)) {
	    // stack = idx;
	    idx = dimensions;
	    dimensions = this.dimensions;
	  }

	  for (var i = 0, len = dimensions.length; i < len; i++) {
	    values.push(this.get(dimensions[i], idx
	    /*, stack */
	    ));
	  }

	  return values;
	};
	/**
	 * If value is NaN. Inlcuding '-'
	 * Only check the coord dimensions.
	 * @param {string} dim
	 * @param {number} idx
	 * @return {number}
	 */


	listProto.hasValue = function (idx) {
	  var dataDimsOnCoord = this._dimensionsSummary.dataDimsOnCoord;
	  var dimensionInfos = this._dimensionInfos;

	  for (var i = 0, len = dataDimsOnCoord.length; i < len; i++) {
	    if ( // Ordinal type can be string or number
	    dimensionInfos[dataDimsOnCoord[i]].type !== 'ordinal' // FIXME check ordinal when using index?
	    && isNaN(this.get(dataDimsOnCoord[i], idx))) {
	      return false;
	    }
	  }

	  return true;
	};
	/**
	 * Get extent of data in one dimension
	 * @param {string} dim
	 * @param {boolean} stack
	 */


	listProto.getDataExtent = function (dim
	/*, stack */
	) {
	  // Make sure use concrete dim as cache name.
	  dim = this.getDimension(dim);
	  var dimData = this._storage[dim];
	  var initialExtent = getInitialExtent(); // stack = !!((stack || false) && this.getCalculationInfo(dim));

	  if (!dimData) {
	    return initialExtent;
	  } // Make more strict checkings to ensure hitting cache.


	  var currEnd = this.count(); // var cacheName = [dim, !!stack].join('_');
	  // var cacheName = dim;
	  // Consider the most cases when using data zoom, `getDataExtent`
	  // happened before filtering. We cache raw extent, which is not
	  // necessary to be cleared and recalculated when restore data.

	  var useRaw = !this._indices; // && !stack;

	  var dimExtent;

	  if (useRaw) {
	    return this._rawExtent[dim].slice();
	  }

	  dimExtent = this._extent[dim];

	  if (dimExtent) {
	    return dimExtent.slice();
	  }

	  dimExtent = initialExtent;
	  var min = dimExtent[0];
	  var max = dimExtent[1];

	  for (var i = 0; i < currEnd; i++) {
	    // var value = stack ? this.get(dim, i, true) : this._getFast(dim, this.getRawIndex(i));
	    var value = this._getFast(dim, this.getRawIndex(i));

	    value < min && (min = value);
	    value > max && (max = value);
	  }

	  dimExtent = [min, max];
	  this._extent[dim] = dimExtent;
	  return dimExtent;
	};
	/**
	 * Optimize for the scenario that data is filtered by a given extent.
	 * Consider that if data amount is more than hundreds of thousand,
	 * extent calculation will cost more than 10ms and the cache will
	 * be erased because of the filtering.
	 */


	listProto.getApproximateExtent = function (dim
	/*, stack */
	) {
	  dim = this.getDimension(dim);
	  return this._approximateExtent[dim] || this.getDataExtent(dim
	  /*, stack */
	  );
	};

	listProto.setApproximateExtent = function (extent, dim
	/*, stack */
	) {
	  dim = this.getDimension(dim);
	  this._approximateExtent[dim] = extent.slice();
	};
	/**
	 * @param {string} key
	 * @return {*}
	 */


	listProto.getCalculationInfo = function (key) {
	  return this._calculationInfo[key];
	};
	/**
	 * @param {string|Object} key or k-v object
	 * @param {*} [value]
	 */


	listProto.setCalculationInfo = function (key, value) {
	  isObject(key) ? zrUtil.extend(this._calculationInfo, key) : this._calculationInfo[key] = value;
	};
	/**
	 * Get sum of data in one dimension
	 * @param {string} dim
	 */


	listProto.getSum = function (dim
	/*, stack */
	) {
	  var dimData = this._storage[dim];
	  var sum = 0;

	  if (dimData) {
	    for (var i = 0, len = this.count(); i < len; i++) {
	      var value = this.get(dim, i
	      /*, stack */
	      );

	      if (!isNaN(value)) {
	        sum += value;
	      }
	    }
	  }

	  return sum;
	};
	/**
	 * Get median of data in one dimension
	 * @param {string} dim
	 */


	listProto.getMedian = function (dim
	/*, stack */
	) {
	  var dimDataArray = []; // map all data of one dimension

	  this.each(dim, function (val, idx) {
	    if (!isNaN(val)) {
	      dimDataArray.push(val);
	    }
	  }); // TODO
	  // Use quick select?
	  // immutability & sort

	  var sortedDimDataArray = [].concat(dimDataArray).sort(function (a, b) {
	    return a - b;
	  });
	  var len = this.count(); // calculate median

	  return len === 0 ? 0 : len % 2 === 1 ? sortedDimDataArray[(len - 1) / 2] : (sortedDimDataArray[len / 2] + sortedDimDataArray[len / 2 - 1]) / 2;
	}; // /**
	//  * Retreive the index with given value
	//  * @param {string} dim Concrete dimension.
	//  * @param {number} value
	//  * @return {number}
	//  */
	// Currently incorrect: should return dataIndex but not rawIndex.
	// Do not fix it until this method is to be used somewhere.
	// FIXME Precision of float value
	// listProto.indexOf = function (dim, value) {
	//     var storage = this._storage;
	//     var dimData = storage[dim];
	//     var chunkSize = this._chunkSize;
	//     if (dimData) {
	//         for (var i = 0, len = this.count(); i < len; i++) {
	//             var chunkIndex = Math.floor(i / chunkSize);
	//             var chunkOffset = i % chunkSize;
	//             if (dimData[chunkIndex][chunkOffset] === value) {
	//                 return i;
	//             }
	//         }
	//     }
	//     return -1;
	// };

	/**
	 * Only support the dimension which inverted index created.
	 * Do not support other cases until required.
	 * @param {string} concrete dim
	 * @param {number|string} value
	 * @return {number} rawIndex
	 */


	listProto.rawIndexOf = function (dim, value) {
	  var invertedIndices = dim && this._invertedIndicesMap[dim];
	  var rawIndex = invertedIndices[value];

	  if (rawIndex == null || isNaN(rawIndex)) {
	    return -1;
	  }

	  return rawIndex;
	};
	/**
	 * Retreive the index with given name
	 * @param {number} idx
	 * @param {number} name
	 * @return {number}
	 */


	listProto.indexOfName = function (name) {
	  for (var i = 0, len = this.count(); i < len; i++) {
	    if (this.getName(i) === name) {
	      return i;
	    }
	  }

	  return -1;
	};
	/**
	 * Retreive the index with given raw data index
	 * @param {number} idx
	 * @param {number} name
	 * @return {number}
	 */


	listProto.indexOfRawIndex = function (rawIndex) {
	  if (!this._indices) {
	    return rawIndex;
	  }

	  if (rawIndex >= this._rawCount || rawIndex < 0) {
	    return -1;
	  } // Indices are ascending


	  var indices = this._indices; // If rawIndex === dataIndex

	  var rawDataIndex = indices[rawIndex];

	  if (rawDataIndex != null && rawDataIndex < this._count && rawDataIndex === rawIndex) {
	    return rawIndex;
	  }

	  var left = 0;
	  var right = this._count - 1;

	  while (left <= right) {
	    var mid = (left + right) / 2 | 0;

	    if (indices[mid] < rawIndex) {
	      left = mid + 1;
	    } else if (indices[mid] > rawIndex) {
	      right = mid - 1;
	    } else {
	      return mid;
	    }
	  }

	  return -1;
	};
	/**
	 * Retreive the index of nearest value
	 * @param {string} dim
	 * @param {number} value
	 * @param {number} [maxDistance=Infinity]
	 * @return {Array.<number>} Considere multiple points has the same value.
	 */


	listProto.indicesOfNearest = function (dim, value, maxDistance) {
	  var storage = this._storage;
	  var dimData = storage[dim];
	  var nearestIndices = [];

	  if (!dimData) {
	    return nearestIndices;
	  }

	  if (maxDistance == null) {
	    maxDistance = Infinity;
	  }

	  var minDist = Number.MAX_VALUE;
	  var minDiff = -1;

	  for (var i = 0, len = this.count(); i < len; i++) {
	    var diff = value - this.get(dim, i
	    /*, stack */
	    );
	    var dist = Math.abs(diff);

	    if (diff <= maxDistance && dist <= minDist) {
	      // For the case of two data are same on xAxis, which has sequence data.
	      // Show the nearest index
	      // https://github.com/ecomfe/echarts/issues/2869
	      if (dist < minDist || diff >= 0 && minDiff < 0) {
	        minDist = dist;
	        minDiff = diff;
	        nearestIndices.length = 0;
	      }

	      nearestIndices.push(i);
	    }
	  }

	  return nearestIndices;
	};
	/**
	 * Get raw data index
	 * @param {number} idx
	 * @return {number}
	 */


	listProto.getRawIndex = getRawIndexWithoutIndices;

	function getRawIndexWithoutIndices(idx) {
	  return idx;
	}

	function getRawIndexWithIndices(idx) {
	  if (idx < this._count && idx >= 0) {
	    return this._indices[idx];
	  }

	  return -1;
	}
	/**
	 * Get raw data item
	 * @param {number} idx
	 * @return {number}
	 */


	listProto.getRawDataItem = function (idx) {
	  if (!this._rawData.persistent) {
	    var val = [];

	    for (var i = 0; i < this.dimensions.length; i++) {
	      var dim = this.dimensions[i];
	      val.push(this.get(dim, idx));
	    }

	    return val;
	  } else {
	    return this._rawData.getItem(this.getRawIndex(idx));
	  }
	};
	/**
	 * @param {number} idx
	 * @param {boolean} [notDefaultIdx=false]
	 * @return {string}
	 */


	listProto.getName = function (idx) {
	  var rawIndex = this.getRawIndex(idx);
	  return this._nameList[rawIndex] || getRawValueFromStore(this, this._nameDimIdx, rawIndex) || '';
	};
	/**
	 * @param {number} idx
	 * @param {boolean} [notDefaultIdx=false]
	 * @return {string}
	 */


	listProto.getId = function (idx) {
	  return getId(this, this.getRawIndex(idx));
	};

	function getId(list, rawIndex) {
	  var id = list._idList[rawIndex];

	  if (id == null) {
	    id = getRawValueFromStore(list, list._idDimIdx, rawIndex);
	  }

	  if (id == null) {
	    // FIXME Check the usage in graph, should not use prefix.
	    id = ID_PREFIX + rawIndex;
	  }

	  return id;
	}

	function normalizeDimensions(dimensions) {
	  if (!zrUtil.isArray(dimensions)) {
	    dimensions = [dimensions];
	  }

	  return dimensions;
	}

	function validateDimensions(list, dims) {
	  for (var i = 0; i < dims.length; i++) {
	    // stroage may be empty when no data, so use
	    // dimensionInfos to check.
	    if (!list._dimensionInfos[dims[i]]) {
	      console.error('Unkown dimension ' + dims[i]);
	    }
	  }
	}
	/**
	 * Data iteration
	 * @param {string|Array.<string>}
	 * @param {Function} cb
	 * @param {*} [context=this]
	 *
	 * @example
	 *  list.each('x', function (x, idx) {});
	 *  list.each(['x', 'y'], function (x, y, idx) {});
	 *  list.each(function (idx) {})
	 */


	listProto.each = function (dims, cb, context, contextCompat) {
	  'use strict';

	  if (!this._count) {
	    return;
	  }

	  if (typeof dims === 'function') {
	    contextCompat = context;
	    context = cb;
	    cb = dims;
	    dims = [];
	  } // contextCompat just for compat echarts3


	  context = context || contextCompat || this;
	  dims = zrUtil.map(normalizeDimensions(dims), this.getDimension, this);
	  var dimSize = dims.length;

	  for (var i = 0; i < this.count(); i++) {
	    // Simple optimization
	    switch (dimSize) {
	      case 0:
	        cb.call(context, i);
	        break;

	      case 1:
	        cb.call(context, this.get(dims[0], i), i);
	        break;

	      case 2:
	        cb.call(context, this.get(dims[0], i), this.get(dims[1], i), i);
	        break;

	      default:
	        var k = 0;
	        var value = [];

	        for (; k < dimSize; k++) {
	          value[k] = this.get(dims[k], i);
	        } // Index


	        value[k] = i;
	        cb.apply(context, value);
	    }
	  }
	};
	/**
	 * Data filter
	 * @param {string|Array.<string>}
	 * @param {Function} cb
	 * @param {*} [context=this]
	 */


	listProto.filterSelf = function (dimensions, cb, context, contextCompat) {
	  'use strict';

	  if (!this._count) {
	    return;
	  }

	  if (typeof dimensions === 'function') {
	    contextCompat = context;
	    context = cb;
	    cb = dimensions;
	    dimensions = [];
	  } // contextCompat just for compat echarts3


	  context = context || contextCompat || this;
	  dimensions = zrUtil.map(normalizeDimensions(dimensions), this.getDimension, this);
	  var count = this.count();
	  var Ctor = getIndicesCtor(this);
	  var newIndices = new Ctor(count);
	  var value = [];
	  var dimSize = dimensions.length;
	  var offset = 0;
	  var dim0 = dimensions[0];

	  for (var i = 0; i < count; i++) {
	    var keep;
	    var rawIdx = this.getRawIndex(i); // Simple optimization

	    if (dimSize === 0) {
	      keep = cb.call(context, i);
	    } else if (dimSize === 1) {
	      var val = this._getFast(dim0, rawIdx);

	      keep = cb.call(context, val, i);
	    } else {
	      for (var k = 0; k < dimSize; k++) {
	        value[k] = this._getFast(dim0, rawIdx);
	      }

	      value[k] = i;
	      keep = cb.apply(context, value);
	    }

	    if (keep) {
	      newIndices[offset++] = rawIdx;
	    }
	  } // Set indices after filtered.


	  if (offset < count) {
	    this._indices = newIndices;
	  }

	  this._count = offset; // Reset data extent

	  this._extent = {};
	  this.getRawIndex = this._indices ? getRawIndexWithIndices : getRawIndexWithoutIndices;
	  return this;
	};
	/**
	 * Select data in range. (For optimization of filter)
	 * (Manually inline code, support 5 million data filtering in data zoom.)
	 */


	listProto.selectRange = function (range) {
	  'use strict';

	  if (!this._count) {
	    return;
	  }

	  var dimensions = [];

	  for (var dim in range) {
	    if (range.hasOwnProperty(dim)) {
	      dimensions.push(dim);
	    }
	  }

	  var dimSize = dimensions.length;

	  if (!dimSize) {
	    return;
	  }

	  var originalCount = this.count();
	  var Ctor = getIndicesCtor(this);
	  var newIndices = new Ctor(originalCount);
	  var offset = 0;
	  var dim0 = dimensions[0];
	  var min = range[dim0][0];
	  var max = range[dim0][1];
	  var quickFinished = false;

	  if (!this._indices) {
	    // Extreme optimization for common case. About 2x faster in chrome.
	    var idx = 0;

	    if (dimSize === 1) {
	      var dimStorage = this._storage[dimensions[0]];

	      for (var k = 0; k < this._chunkCount; k++) {
	        var chunkStorage = dimStorage[k];
	        var len = Math.min(this._count - k * this._chunkSize, this._chunkSize);

	        for (var i = 0; i < len; i++) {
	          var val = chunkStorage[i]; // NaN will not be filtered. Consider the case, in line chart, empty
	          // value indicates the line should be broken. But for the case like
	          // scatter plot, a data item with empty value will not be rendered,
	          // but the axis extent may be effected if some other dim of the data
	          // item has value. Fortunately it is not a significant negative effect.

	          if (val >= min && val <= max || isNaN(val)) {
	            newIndices[offset++] = idx;
	          }

	          idx++;
	        }
	      }

	      quickFinished = true;
	    } else if (dimSize === 2) {
	      var dimStorage = this._storage[dim0];
	      var dimStorage2 = this._storage[dimensions[1]];
	      var min2 = range[dimensions[1]][0];
	      var max2 = range[dimensions[1]][1];

	      for (var k = 0; k < this._chunkCount; k++) {
	        var chunkStorage = dimStorage[k];
	        var chunkStorage2 = dimStorage2[k];
	        var len = Math.min(this._count - k * this._chunkSize, this._chunkSize);

	        for (var i = 0; i < len; i++) {
	          var val = chunkStorage[i];
	          var val2 = chunkStorage2[i]; // Do not filter NaN, see comment above.

	          if ((val >= min && val <= max || isNaN(val)) && (val2 >= min2 && val2 <= max2 || isNaN(val2))) {
	            newIndices[offset++] = idx;
	          }

	          idx++;
	        }
	      }

	      quickFinished = true;
	    }
	  }

	  if (!quickFinished) {
	    if (dimSize === 1) {
	      for (var i = 0; i < originalCount; i++) {
	        var rawIndex = this.getRawIndex(i);

	        var val = this._getFast(dim0, rawIndex); // Do not filter NaN, see comment above.


	        if (val >= min && val <= max || isNaN(val)) {
	          newIndices[offset++] = rawIndex;
	        }
	      }
	    } else {
	      for (var i = 0; i < originalCount; i++) {
	        var keep = true;
	        var rawIndex = this.getRawIndex(i);

	        for (var k = 0; k < dimSize; k++) {
	          var dimk = dimensions[k];

	          var val = this._getFast(dim, rawIndex); // Do not filter NaN, see comment above.


	          if (val < range[dimk][0] || val > range[dimk][1]) {
	            keep = false;
	          }
	        }

	        if (keep) {
	          newIndices[offset++] = this.getRawIndex(i);
	        }
	      }
	    }
	  } // Set indices after filtered.


	  if (offset < originalCount) {
	    this._indices = newIndices;
	  }

	  this._count = offset; // Reset data extent

	  this._extent = {};
	  this.getRawIndex = this._indices ? getRawIndexWithIndices : getRawIndexWithoutIndices;
	  return this;
	};
	/**
	 * Data mapping to a plain array
	 * @param {string|Array.<string>} [dimensions]
	 * @param {Function} cb
	 * @param {*} [context=this]
	 * @return {Array}
	 */


	listProto.mapArray = function (dimensions, cb, context, contextCompat) {
	  'use strict';

	  if (typeof dimensions === 'function') {
	    contextCompat = context;
	    context = cb;
	    cb = dimensions;
	    dimensions = [];
	  } // contextCompat just for compat echarts3


	  context = context || contextCompat || this;
	  var result = [];
	  this.each(dimensions, function () {
	    result.push(cb && cb.apply(this, arguments));
	  }, context);
	  return result;
	}; // Data in excludeDimensions is copied, otherwise transfered.


	function cloneListForMapAndSample(original, excludeDimensions) {
	  var allDimensions = original.dimensions;
	  var list = new List(zrUtil.map(allDimensions, original.getDimensionInfo, original), original.hostModel); // FIXME If needs stackedOn, value may already been stacked

	  transferProperties(list, original);
	  var storage = list._storage = {};
	  var originalStorage = original._storage; // Init storage

	  for (var i = 0; i < allDimensions.length; i++) {
	    var dim = allDimensions[i];

	    if (originalStorage[dim]) {
	      // Notice that we do not reset invertedIndicesMap here, becuase
	      // there is no scenario of mapping or sampling ordinal dimension.
	      if (zrUtil.indexOf(excludeDimensions, dim) >= 0) {
	        storage[dim] = cloneDimStore(originalStorage[dim]);
	        list._rawExtent[dim] = getInitialExtent();
	        list._extent[dim] = null;
	      } else {
	        // Direct reference for other dimensions
	        storage[dim] = originalStorage[dim];
	      }
	    }
	  }

	  return list;
	}

	function cloneDimStore(originalDimStore) {
	  var newDimStore = new Array(originalDimStore.length);

	  for (var j = 0; j < originalDimStore.length; j++) {
	    newDimStore[j] = cloneChunk(originalDimStore[j]);
	  }

	  return newDimStore;
	}

	function getInitialExtent() {
	  return [Infinity, -Infinity];
	}
	/**
	 * Data mapping to a new List with given dimensions
	 * @param {string|Array.<string>} dimensions
	 * @param {Function} cb
	 * @param {*} [context=this]
	 * @return {Array}
	 */


	listProto.map = function (dimensions, cb, context, contextCompat) {
	  'use strict'; // contextCompat just for compat echarts3

	  context = context || contextCompat || this;
	  dimensions = zrUtil.map(normalizeDimensions(dimensions), this.getDimension, this);
	  var list = cloneListForMapAndSample(this, dimensions); // Following properties are all immutable.
	  // So we can reference to the same value

	  list._indices = this._indices;
	  list.getRawIndex = list._indices ? getRawIndexWithIndices : getRawIndexWithoutIndices;
	  var storage = list._storage;
	  var tmpRetValue = [];
	  var chunkSize = this._chunkSize;
	  var dimSize = dimensions.length;
	  var dataCount = this.count();
	  var values = [];
	  var rawExtent = list._rawExtent;

	  for (var dataIndex = 0; dataIndex < dataCount; dataIndex++) {
	    for (var dimIndex = 0; dimIndex < dimSize; dimIndex++) {
	      values[dimIndex] = this.get(dimensions[dimIndex], dataIndex
	      /*, stack */
	      );
	    }

	    values[dimSize] = dataIndex;
	    var retValue = cb && cb.apply(context, values);

	    if (retValue != null) {
	      // a number or string (in oridinal dimension)?
	      if (typeof retValue !== 'object') {
	        tmpRetValue[0] = retValue;
	        retValue = tmpRetValue;
	      }

	      var rawIndex = this.getRawIndex(dataIndex);
	      var chunkIndex = Math.floor(rawIndex / chunkSize);
	      var chunkOffset = rawIndex % chunkSize;

	      for (var i = 0; i < retValue.length; i++) {
	        var dim = dimensions[i];
	        var val = retValue[i];
	        var rawExtentOnDim = rawExtent[dim];
	        var dimStore = storage[dim];

	        if (dimStore) {
	          dimStore[chunkIndex][chunkOffset] = val;
	        }

	        if (val < rawExtentOnDim[0]) {
	          rawExtentOnDim[0] = val;
	        }

	        if (val > rawExtentOnDim[1]) {
	          rawExtentOnDim[1] = val;
	        }
	      }
	    }
	  }

	  return list;
	};
	/**
	 * Large data down sampling on given dimension
	 * @param {string} dimension
	 * @param {number} rate
	 * @param {Function} sampleValue
	 * @param {Function} sampleIndex Sample index for name and id
	 */


	listProto.downSample = function (dimension, rate, sampleValue, sampleIndex) {
	  var list = cloneListForMapAndSample(this, [dimension]);
	  var targetStorage = list._storage;
	  var frameValues = [];
	  var frameSize = Math.floor(1 / rate);
	  var dimStore = targetStorage[dimension];
	  var len = this.count();
	  var chunkSize = this._chunkSize;
	  var rawExtentOnDim = list._rawExtent[dimension];
	  var newIndices = new (getIndicesCtor(this))(len);
	  var offset = 0;

	  for (var i = 0; i < len; i += frameSize) {
	    // Last frame
	    if (frameSize > len - i) {
	      frameSize = len - i;
	      frameValues.length = frameSize;
	    }

	    for (var k = 0; k < frameSize; k++) {
	      var dataIdx = this.getRawIndex(i + k);
	      var originalChunkIndex = Math.floor(dataIdx / chunkSize);
	      var originalChunkOffset = dataIdx % chunkSize;
	      frameValues[k] = dimStore[originalChunkIndex][originalChunkOffset];
	    }

	    var value = sampleValue(frameValues);
	    var sampleFrameIdx = this.getRawIndex(Math.min(i + sampleIndex(frameValues, value) || 0, len - 1));
	    var sampleChunkIndex = Math.floor(sampleFrameIdx / chunkSize);
	    var sampleChunkOffset = sampleFrameIdx % chunkSize; // Only write value on the filtered data

	    dimStore[sampleChunkIndex][sampleChunkOffset] = value;

	    if (value < rawExtentOnDim[0]) {
	      rawExtentOnDim[0] = value;
	    }

	    if (value > rawExtentOnDim[1]) {
	      rawExtentOnDim[1] = value;
	    }

	    newIndices[offset++] = sampleFrameIdx;
	  }

	  list._count = offset;
	  list._indices = newIndices;
	  list.getRawIndex = getRawIndexWithIndices;
	  return list;
	};
	/**
	 * Get model of one data item.
	 *
	 * @param {number} idx
	 */
	// FIXME Model proxy ?


	listProto.getItemModel = function (idx) {
	  var hostModel = this.hostModel;
	  return new Model(this.getRawDataItem(idx), hostModel, hostModel && hostModel.ecModel);
	};
	/**
	 * Create a data differ
	 * @param {module:echarts/data/List} otherList
	 * @return {module:echarts/data/DataDiffer}
	 */


	listProto.diff = function (otherList) {
	  var thisList = this;
	  return new DataDiffer(otherList ? otherList.getIndices() : [], this.getIndices(), function (idx) {
	    return getId(otherList, idx);
	  }, function (idx) {
	    return getId(thisList, idx);
	  });
	};
	/**
	 * Get visual property.
	 * @param {string} key
	 */


	listProto.getVisual = function (key) {
	  var visual = this._visual;
	  return visual && visual[key];
	};
	/**
	 * Set visual property
	 * @param {string|Object} key
	 * @param {*} [value]
	 *
	 * @example
	 *  setVisual('color', color);
	 *  setVisual({
	 *      'color': color
	 *  });
	 */


	listProto.setVisual = function (key, val) {
	  if (isObject(key)) {
	    for (var name in key) {
	      if (key.hasOwnProperty(name)) {
	        this.setVisual(name, key[name]);
	      }
	    }

	    return;
	  }

	  this._visual = this._visual || {};
	  this._visual[key] = val;
	};
	/**
	 * Set layout property.
	 * @param {string|Object} key
	 * @param {*} [val]
	 */


	listProto.setLayout = function (key, val) {
	  if (isObject(key)) {
	    for (var name in key) {
	      if (key.hasOwnProperty(name)) {
	        this.setLayout(name, key[name]);
	      }
	    }

	    return;
	  }

	  this._layout[key] = val;
	};
	/**
	 * Get layout property.
	 * @param  {string} key.
	 * @return {*}
	 */


	listProto.getLayout = function (key) {
	  return this._layout[key];
	};
	/**
	 * Get layout of single data item
	 * @param {number} idx
	 */


	listProto.getItemLayout = function (idx) {
	  return this._itemLayouts[idx];
	};
	/**
	 * Set layout of single data item
	 * @param {number} idx
	 * @param {Object} layout
	 * @param {boolean=} [merge=false]
	 */


	listProto.setItemLayout = function (idx, layout, merge) {
	  this._itemLayouts[idx] = merge ? zrUtil.extend(this._itemLayouts[idx] || {}, layout) : layout;
	};
	/**
	 * Clear all layout of single data item
	 */


	listProto.clearItemLayouts = function () {
	  this._itemLayouts.length = 0;
	};
	/**
	 * Get visual property of single data item
	 * @param {number} idx
	 * @param {string} key
	 * @param {boolean} [ignoreParent=false]
	 */


	listProto.getItemVisual = function (idx, key, ignoreParent) {
	  var itemVisual = this._itemVisuals[idx];
	  var val = itemVisual && itemVisual[key];

	  if (val == null && !ignoreParent) {
	    // Use global visual property
	    return this.getVisual(key);
	  }

	  return val;
	};
	/**
	 * Set visual property of single data item
	 *
	 * @param {number} idx
	 * @param {string|Object} key
	 * @param {*} [value]
	 *
	 * @example
	 *  setItemVisual(0, 'color', color);
	 *  setItemVisual(0, {
	 *      'color': color
	 *  });
	 */


	listProto.setItemVisual = function (idx, key, value) {
	  var itemVisual = this._itemVisuals[idx] || {};
	  var hasItemVisual = this.hasItemVisual;
	  this._itemVisuals[idx] = itemVisual;

	  if (isObject(key)) {
	    for (var name in key) {
	      if (key.hasOwnProperty(name)) {
	        itemVisual[name] = key[name];
	        hasItemVisual[name] = true;
	      }
	    }

	    return;
	  }

	  itemVisual[key] = value;
	  hasItemVisual[key] = true;
	};
	/**
	 * Clear itemVisuals and list visual.
	 */


	listProto.clearAllVisual = function () {
	  this._visual = {};
	  this._itemVisuals = [];
	  this.hasItemVisual = {};
	};

	var setItemDataAndSeriesIndex = function (child) {
	  child.seriesIndex = this.seriesIndex;
	  child.dataIndex = this.dataIndex;
	  child.dataType = this.dataType;
	};
	/**
	 * Set graphic element relative to data. It can be set as null
	 * @param {number} idx
	 * @param {module:zrender/Element} [el]
	 */


	listProto.setItemGraphicEl = function (idx, el) {
	  var hostModel = this.hostModel;

	  if (el) {
	    // Add data index and series index for indexing the data by element
	    // Useful in tooltip
	    el.dataIndex = idx;
	    el.dataType = this.dataType;
	    el.seriesIndex = hostModel && hostModel.seriesIndex;

	    if (el.type === 'group') {
	      el.traverse(setItemDataAndSeriesIndex, el);
	    }
	  }

	  this._graphicEls[idx] = el;
	};
	/**
	 * @param {number} idx
	 * @return {module:zrender/Element}
	 */


	listProto.getItemGraphicEl = function (idx) {
	  return this._graphicEls[idx];
	};
	/**
	 * @param {Function} cb
	 * @param {*} context
	 */


	listProto.eachItemGraphicEl = function (cb, context) {
	  zrUtil.each(this._graphicEls, function (el, idx) {
	    if (el) {
	      cb && cb.call(context, el, idx);
	    }
	  });
	};
	/**
	 * Shallow clone a new list except visual and layout properties, and graph elements.
	 * New list only change the indices.
	 */


	listProto.cloneShallow = function (list) {
	  if (!list) {
	    var dimensionInfoList = zrUtil.map(this.dimensions, this.getDimensionInfo, this);
	    list = new List(dimensionInfoList, this.hostModel);
	  } // FIXME


	  list._storage = this._storage;
	  transferProperties(list, this); // Clone will not change the data extent and indices

	  if (this._indices) {
	    var Ctor = this._indices.constructor;
	    list._indices = new Ctor(this._indices);
	  } else {
	    list._indices = null;
	  }

	  list.getRawIndex = list._indices ? getRawIndexWithIndices : getRawIndexWithoutIndices;
	  return list;
	};
	/**
	 * Wrap some method to add more feature
	 * @param {string} methodName
	 * @param {Function} injectFunction
	 */


	listProto.wrapMethod = function (methodName, injectFunction) {
	  var originalMethod = this[methodName];

	  if (typeof originalMethod !== 'function') {
	    return;
	  }

	  this.__wrappedMethods = this.__wrappedMethods || [];

	  this.__wrappedMethods.push(methodName);

	  this[methodName] = function () {
	    var res = originalMethod.apply(this, arguments);
	    return injectFunction.apply(this, [res].concat(zrUtil.slice(arguments)));
	  };
	}; // Methods that create a new list based on this list should be listed here.
	// Notice that those method should `RETURN` the new list.


	listProto.TRANSFERABLE_METHODS = ['cloneShallow', 'downSample', 'map']; // Methods that change indices of this list should be listed here.

	listProto.CHANGABLE_METHODS = ['filterSelf', 'selectRange'];
	var _default = List;
	module.exports = _default;

/***/ }),
/* 298 */
/***/ (function(module, exports) {

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	function defaultKeyGetter(item) {
	  return item;
	}
	/**
	 * @param {Array} oldArr
	 * @param {Array} newArr
	 * @param {Function} oldKeyGetter
	 * @param {Function} newKeyGetter
	 * @param {Object} [context] Can be visited by this.context in callback.
	 */


	function DataDiffer(oldArr, newArr, oldKeyGetter, newKeyGetter, context) {
	  this._old = oldArr;
	  this._new = newArr;
	  this._oldKeyGetter = oldKeyGetter || defaultKeyGetter;
	  this._newKeyGetter = newKeyGetter || defaultKeyGetter;
	  this.context = context;
	}

	DataDiffer.prototype = {
	  constructor: DataDiffer,

	  /**
	   * Callback function when add a data
	   */
	  add: function (func) {
	    this._add = func;
	    return this;
	  },

	  /**
	   * Callback function when update a data
	   */
	  update: function (func) {
	    this._update = func;
	    return this;
	  },

	  /**
	   * Callback function when remove a data
	   */
	  remove: function (func) {
	    this._remove = func;
	    return this;
	  },
	  execute: function () {
	    var oldArr = this._old;
	    var newArr = this._new;
	    var oldDataIndexMap = {};
	    var newDataIndexMap = {};
	    var oldDataKeyArr = [];
	    var newDataKeyArr = [];
	    var i;
	    initIndexMap(oldArr, oldDataIndexMap, oldDataKeyArr, '_oldKeyGetter', this);
	    initIndexMap(newArr, newDataIndexMap, newDataKeyArr, '_newKeyGetter', this); // Travel by inverted order to make sure order consistency
	    // when duplicate keys exists (consider newDataIndex.pop() below).
	    // For performance consideration, these code below do not look neat.

	    for (i = 0; i < oldArr.length; i++) {
	      var key = oldDataKeyArr[i];
	      var idx = newDataIndexMap[key]; // idx can never be empty array here. see 'set null' logic below.

	      if (idx != null) {
	        // Consider there is duplicate key (for example, use dataItem.name as key).
	        // We should make sure every item in newArr and oldArr can be visited.
	        var len = idx.length;

	        if (len) {
	          len === 1 && (newDataIndexMap[key] = null);
	          idx = idx.unshift();
	        } else {
	          newDataIndexMap[key] = null;
	        }

	        this._update && this._update(idx, i);
	      } else {
	        this._remove && this._remove(i);
	      }
	    }

	    for (var i = 0; i < newDataKeyArr.length; i++) {
	      var key = newDataKeyArr[i];

	      if (newDataIndexMap.hasOwnProperty(key)) {
	        var idx = newDataIndexMap[key];

	        if (idx == null) {
	          continue;
	        } // idx can never be empty array here. see 'set null' logic above.


	        if (!idx.length) {
	          this._add && this._add(idx);
	        } else {
	          for (var j = 0, len = idx.length; j < len; j++) {
	            this._add && this._add(idx[j]);
	          }
	        }
	      }
	    }
	  }
	};

	function initIndexMap(arr, map, keyArr, keyGetterName, dataDiffer) {
	  for (var i = 0; i < arr.length; i++) {
	    // Add prefix to avoid conflict with Object.prototype.
	    var key = '_ec_' + dataDiffer[keyGetterName](arr[i], i);
	    var existence = map[key];

	    if (existence == null) {
	      keyArr.push(key);
	      map[key] = i;
	    } else {
	      if (!existence.length) {
	        map[key] = existence = [existence];
	      }

	      existence.push(i);
	    }
	  }
	}

	var _default = DataDiffer;
	module.exports = _default;

/***/ }),
/* 299 */
/***/ (function(module, exports, __webpack_require__) {

	var _util = __webpack_require__(181);

	var each = _util.each;
	var createHashMap = _util.createHashMap;
	var assert = _util.assert;

	var _config = __webpack_require__(177);

	var __DEV__ = _config.__DEV__;

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var OTHER_DIMENSIONS = createHashMap(['tooltip', 'label', 'itemName', 'itemId', 'seriesName']);

	function summarizeDimensions(data) {
	  var summary = {};
	  var encode = summary.encode = {};
	  var notExtraCoordDimMap = createHashMap();
	  var defaultedLabel = [];
	  var defaultedTooltip = [];
	  each(data.dimensions, function (dimName) {
	    var dimItem = data.getDimensionInfo(dimName);
	    var coordDim = dimItem.coordDim;

	    if (coordDim) {
	      var coordDimArr = encode[coordDim];

	      if (!encode.hasOwnProperty(coordDim)) {
	        coordDimArr = encode[coordDim] = [];
	      }

	      coordDimArr[dimItem.coordDimIndex] = dimName;

	      if (!dimItem.isExtraCoord) {
	        notExtraCoordDimMap.set(coordDim, 1); // Use the last coord dim (and label friendly) as default label,
	        // because when dataset is used, it is hard to guess which dimension
	        // can be value dimension. If both show x, y on label is not look good,
	        // and conventionally y axis is focused more.

	        if (mayLabelDimType(dimItem.type)) {
	          defaultedLabel[0] = dimName;
	        }
	      }

	      if (dimItem.defaultTooltip) {
	        defaultedTooltip.push(dimName);
	      }
	    }

	    OTHER_DIMENSIONS.each(function (v, otherDim) {
	      var otherDimArr = encode[otherDim];

	      if (!encode.hasOwnProperty(otherDim)) {
	        otherDimArr = encode[otherDim] = [];
	      }

	      var dimIndex = dimItem.otherDims[otherDim];

	      if (dimIndex != null && dimIndex !== false) {
	        otherDimArr[dimIndex] = dimItem.name;
	      }
	    });
	  });
	  var dataDimsOnCoord = [];
	  var encodeFirstDimNotExtra = {};
	  notExtraCoordDimMap.each(function (v, coordDim) {
	    var dimArr = encode[coordDim]; // ??? FIXME extra coord should not be set in dataDimsOnCoord.
	    // But should fix the case that radar axes: simplify the logic
	    // of `completeDimension`, remove `extraPrefix`.

	    encodeFirstDimNotExtra[coordDim] = dimArr[0]; // Not necessary to remove duplicate, because a data
	    // dim canot on more than one coordDim.

	    dataDimsOnCoord = dataDimsOnCoord.concat(dimArr);
	  });
	  summary.dataDimsOnCoord = dataDimsOnCoord;
	  summary.encodeFirstDimNotExtra = encodeFirstDimNotExtra;
	  var encodeLabel = encode.label; // FIXME `encode.label` is not recommanded, because formatter can not be set
	  // in this way. Use label.formatter instead. May be remove this approach someday.

	  if (encodeLabel && encodeLabel.length) {
	    defaultedLabel = encodeLabel.slice();
	  }

	  var encodeTooltip = encode.tooltip;

	  if (encodeTooltip && encodeTooltip.length) {
	    defaultedTooltip = encodeTooltip.slice();
	  } else if (!defaultedTooltip.length) {
	    defaultedTooltip = defaultedLabel.slice();
	  }

	  encode.defaultedLabel = defaultedLabel;
	  encode.defaultedTooltip = defaultedTooltip;
	  return summary;
	}

	function getDimensionTypeByAxis(axisType) {
	  return axisType === 'category' ? 'ordinal' : axisType === 'time' ? 'time' : 'float';
	}

	function mayLabelDimType(dimType) {
	  // In most cases, ordinal and time do not suitable for label.
	  // Ordinal info can be displayed on axis. Time is too long.
	  return !(dimType === 'ordinal' || dimType === 'time');
	} // function findTheLastDimMayLabel(data) {
	//     // Get last value dim
	//     var dimensions = data.dimensions.slice();
	//     var valueType;
	//     var valueDim;
	//     while (dimensions.length && (
	//         valueDim = dimensions.pop(),
	//         valueType = data.getDimensionInfo(valueDim).type,
	//         valueType === 'ordinal' || valueType === 'time'
	//     )) {} // jshint ignore:line
	//     return valueDim;
	// }


	exports.OTHER_DIMENSIONS = OTHER_DIMENSIONS;
	exports.summarizeDimensions = summarizeDimensions;
	exports.getDimensionTypeByAxis = getDimensionTypeByAxis;

/***/ }),
/* 300 */
/***/ (function(module, exports, __webpack_require__) {

	var completeDimensions = __webpack_require__(301);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/

	/**
	 * Substitute `completeDimensions`.
	 * `completeDimensions` is to be deprecated.
	 */

	/**
	 * @param {module:echarts/data/Source|module:echarts/data/List} source or data.
	 * @param {Object|Array} [opt]
	 * @param {Array.<string|Object>} [opt.coordDimensions=[]]
	 * @param {number} [opt.dimensionsCount]
	 * @param {string} [opt.generateCoord]
	 * @param {string} [opt.generateCoordCount]
	 * @param {Array.<string|Object>} [opt.dimensionsDefine=source.dimensionsDefine] Overwrite source define.
	 * @param {Object|HashMap} [opt.encodeDefine=source.encodeDefine] Overwrite source define.
	 * @return {Array.<Object>} dimensionsInfo
	 */
	function _default(source, opt) {
	  opt = opt || {};
	  return completeDimensions(opt.coordDimensions || [], source, {
	    dimsDef: opt.dimensionsDefine || source.dimensionsDefine,
	    encodeDef: opt.encodeDefine || source.encodeDefine,
	    dimCount: opt.dimensionsCount,
	    generateCoord: opt.generateCoord,
	    generateCoordCount: opt.generateCoordCount
	  });
	}

	module.exports = _default;

/***/ }),
/* 301 */
/***/ (function(module, exports, __webpack_require__) {

	var _util = __webpack_require__(181);

	var createHashMap = _util.createHashMap;
	var each = _util.each;
	var isString = _util.isString;
	var defaults = _util.defaults;
	var extend = _util.extend;
	var isObject = _util.isObject;
	var clone = _util.clone;

	var _model = __webpack_require__(219);

	var normalizeToArray = _model.normalizeToArray;

	var _sourceHelper = __webpack_require__(268);

	var guessOrdinal = _sourceHelper.guessOrdinal;

	var Source = __webpack_require__(270);

	var _dimensionHelper = __webpack_require__(299);

	var OTHER_DIMENSIONS = _dimensionHelper.OTHER_DIMENSIONS;

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/

	/**
	 * @deprecated
	 * Use `echarts/data/helper/createDimensions` instead.
	 */

	/**
	 * @see {module:echarts/test/ut/spec/data/completeDimensions}
	 *
	 * Complete the dimensions array, by user defined `dimension` and `encode`,
	 * and guessing from the data structure.
	 * If no 'value' dimension specified, the first no-named dimension will be
	 * named as 'value'.
	 *
	 * @param {Array.<string>} sysDims Necessary dimensions, like ['x', 'y'], which
	 *      provides not only dim template, but also default order.
	 *      properties: 'name', 'type', 'displayName'.
	 *      `name` of each item provides default coord name.
	 *      [{dimsDef: [string|Object, ...]}, ...] dimsDef of sysDim item provides default dim name, and
	 *                                    provide dims count that the sysDim required.
	 *      [{ordinalMeta}] can be specified.
	 * @param {module:echarts/data/Source|Array|Object} source or data (for compatibal with pervious)
	 * @param {Object} [opt]
	 * @param {Array.<Object|string>} [opt.dimsDef] option.series.dimensions User defined dimensions
	 *      For example: ['asdf', {name, type}, ...].
	 * @param {Object|HashMap} [opt.encodeDef] option.series.encode {x: 2, y: [3, 1], tooltip: [1, 2], label: 3}
	 * @param {string} [opt.generateCoord] Generate coord dim with the given name.
	 *                 If not specified, extra dim names will be:
	 *                 'value', 'value0', 'value1', ...
	 * @param {number} [opt.generateCoordCount] By default, the generated dim name is `generateCoord`.
	 *                 If `generateCoordCount` specified, the generated dim names will be:
	 *                 `generateCoord` + 0, `generateCoord` + 1, ...
	 *                 can be Infinity, indicate that use all of the remain columns.
	 * @param {number} [opt.dimCount] If not specified, guess by the first data item.
	 * @param {number} [opt.encodeDefaulter] If not specified, auto find the next available data dim.
	 * @return {Array.<Object>} [{
	 *      name: string mandatory,
	 *      displayName: string, the origin name in dimsDef, see source helper.
	 *                 If displayName given, the tooltip will displayed vertically.
	 *      coordDim: string mandatory,
	 *      coordDimIndex: number mandatory,
	 *      type: string optional,
	 *      otherDims: { never null/undefined
	 *          tooltip: number optional,
	 *          label: number optional,
	 *          itemName: number optional,
	 *          seriesName: number optional,
	 *      },
	 *      isExtraCoord: boolean true if coord is generated
	 *          (not specified in encode and not series specified)
	 *      other props ...
	 * }]
	 */
	function completeDimensions(sysDims, source, opt) {
	  if (!Source.isInstance(source)) {
	    source = Source.seriesDataToSource(source);
	  }

	  opt = opt || {};
	  sysDims = (sysDims || []).slice();
	  var dimsDef = (opt.dimsDef || []).slice();
	  var encodeDef = createHashMap(opt.encodeDef);
	  var dataDimNameMap = createHashMap();
	  var coordDimNameMap = createHashMap(); // var valueCandidate;

	  var result = [];
	  var dimCount = getDimCount(source, sysDims, dimsDef, opt.dimCount); // Apply user defined dims (`name` and `type`) and init result.

	  for (var i = 0; i < dimCount; i++) {
	    var dimDefItem = dimsDef[i] = extend({}, isObject(dimsDef[i]) ? dimsDef[i] : {
	      name: dimsDef[i]
	    });
	    var userDimName = dimDefItem.name;
	    var resultItem = result[i] = {
	      otherDims: {}
	    }; // Name will be applied later for avoiding duplication.

	    if (userDimName != null && dataDimNameMap.get(userDimName) == null) {
	      // Only if `series.dimensions` is defined in option
	      // displayName, will be set, and dimension will be diplayed vertically in
	      // tooltip by default.
	      resultItem.name = resultItem.displayName = userDimName;
	      dataDimNameMap.set(userDimName, i);
	    }

	    dimDefItem.type != null && (resultItem.type = dimDefItem.type);
	    dimDefItem.displayName != null && (resultItem.displayName = dimDefItem.displayName);
	  } // Set `coordDim` and `coordDimIndex` by `encodeDef` and normalize `encodeDef`.


	  encodeDef.each(function (dataDims, coordDim) {
	    dataDims = normalizeToArray(dataDims).slice();
	    var validDataDims = encodeDef.set(coordDim, []);
	    each(dataDims, function (resultDimIdx, idx) {
	      // The input resultDimIdx can be dim name or index.
	      isString(resultDimIdx) && (resultDimIdx = dataDimNameMap.get(resultDimIdx));

	      if (resultDimIdx != null && resultDimIdx < dimCount) {
	        validDataDims[idx] = resultDimIdx;
	        applyDim(result[resultDimIdx], coordDim, idx);
	      }
	    });
	  }); // Apply templetes and default order from `sysDims`.

	  var availDimIdx = 0;
	  each(sysDims, function (sysDimItem, sysDimIndex) {
	    var coordDim;
	    var sysDimItem;
	    var sysDimItemDimsDef;
	    var sysDimItemOtherDims;

	    if (isString(sysDimItem)) {
	      coordDim = sysDimItem;
	      sysDimItem = {};
	    } else {
	      coordDim = sysDimItem.name;
	      var ordinalMeta = sysDimItem.ordinalMeta;
	      sysDimItem.ordinalMeta = null;
	      sysDimItem = clone(sysDimItem);
	      sysDimItem.ordinalMeta = ordinalMeta; // `coordDimIndex` should not be set directly.

	      sysDimItemDimsDef = sysDimItem.dimsDef;
	      sysDimItemOtherDims = sysDimItem.otherDims;
	      sysDimItem.name = sysDimItem.coordDim = sysDimItem.coordDimIndex = sysDimItem.dimsDef = sysDimItem.otherDims = null;
	    }

	    var dataDims = normalizeToArray(encodeDef.get(coordDim)); // dimensions provides default dim sequences.

	    if (!dataDims.length) {
	      for (var i = 0; i < (sysDimItemDimsDef && sysDimItemDimsDef.length || 1); i++) {
	        while (availDimIdx < result.length && result[availDimIdx].coordDim != null) {
	          availDimIdx++;
	        }

	        availDimIdx < result.length && dataDims.push(availDimIdx++);
	      }
	    } // Apply templates.


	    each(dataDims, function (resultDimIdx, coordDimIndex) {
	      var resultItem = result[resultDimIdx];
	      applyDim(defaults(resultItem, sysDimItem), coordDim, coordDimIndex);

	      if (resultItem.name == null && sysDimItemDimsDef) {
	        var sysDimItemDimsDefItem = sysDimItemDimsDef[coordDimIndex];
	        !isObject(sysDimItemDimsDefItem) && (sysDimItemDimsDefItem = {
	          name: sysDimItemDimsDefItem
	        });
	        resultItem.name = resultItem.displayName = sysDimItemDimsDefItem.name;
	        resultItem.defaultTooltip = sysDimItemDimsDefItem.defaultTooltip;
	      } // FIXME refactor, currently only used in case: {otherDims: {tooltip: false}}


	      sysDimItemOtherDims && defaults(resultItem.otherDims, sysDimItemOtherDims);
	    });
	  });

	  function applyDim(resultItem, coordDim, coordDimIndex) {
	    if (OTHER_DIMENSIONS.get(coordDim) != null) {
	      resultItem.otherDims[coordDim] = coordDimIndex;
	    } else {
	      resultItem.coordDim = coordDim;
	      resultItem.coordDimIndex = coordDimIndex;
	      coordDimNameMap.set(coordDim, true);
	    }
	  } // Make sure the first extra dim is 'value'.


	  var generateCoord = opt.generateCoord;
	  var generateCoordCount = opt.generateCoordCount;
	  var fromZero = generateCoordCount != null;
	  generateCoordCount = generateCoord ? generateCoordCount || 1 : 0;
	  var extra = generateCoord || 'value'; // Set dim `name` and other `coordDim` and other props.

	  for (var resultDimIdx = 0; resultDimIdx < dimCount; resultDimIdx++) {
	    var resultItem = result[resultDimIdx] = result[resultDimIdx] || {};
	    var coordDim = resultItem.coordDim;

	    if (coordDim == null) {
	      resultItem.coordDim = genName(extra, coordDimNameMap, fromZero);
	      resultItem.coordDimIndex = 0;

	      if (!generateCoord || generateCoordCount <= 0) {
	        resultItem.isExtraCoord = true;
	      }

	      generateCoordCount--;
	    }

	    resultItem.name == null && (resultItem.name = genName(resultItem.coordDim, dataDimNameMap));

	    if (resultItem.type == null && guessOrdinal(source, resultDimIdx, resultItem.name)) {
	      resultItem.type = 'ordinal';
	    }
	  }

	  return result;
	} // ??? TODO
	// Originally detect dimCount by data[0]. Should we
	// optimize it to only by sysDims and dimensions and encode.
	// So only necessary dims will be initialized.
	// But
	// (1) custom series should be considered. where other dims
	// may be visited.
	// (2) sometimes user need to calcualte bubble size or use visualMap
	// on other dimensions besides coordSys needed.
	// So, dims that is not used by system, should be shared in storage?


	function getDimCount(source, sysDims, dimsDef, optDimCount) {
	  // Note that the result dimCount should not small than columns count
	  // of data, otherwise `dataDimNameMap` checking will be incorrect.
	  var dimCount = Math.max(source.dimensionsDetectCount || 1, sysDims.length, dimsDef.length, optDimCount || 0);
	  each(sysDims, function (sysDimItem) {
	    var sysDimItemDimsDef = sysDimItem.dimsDef;
	    sysDimItemDimsDef && (dimCount = Math.max(dimCount, sysDimItemDimsDef.length));
	  });
	  return dimCount;
	}

	function genName(name, map, fromZero) {
	  if (fromZero || map.get(name) != null) {
	    var i = 0;

	    while (map.get(name + i) != null) {
	      i++;
	    }

	    name += i;
	  }

	  map.set(name, true);
	  return name;
	}

	var _default = completeDimensions;
	module.exports = _default;

/***/ }),
/* 302 */
/***/ (function(module, exports, __webpack_require__) {

	var _util = __webpack_require__(181);

	var each = _util.each;
	var isString = _util.isString;

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/

	/**
	 * Note that it is too complicated to support 3d stack by value
	 * (have to create two-dimension inverted index), so in 3d case
	 * we just support that stacked by index.
	 *
	 * @param {module:echarts/model/Series} seriesModel
	 * @param {Array.<string|Object>} dimensionInfoList The same as the input of <module:echarts/data/List>.
	 *        The input dimensionInfoList will be modified.
	 * @param {Object} [opt]
	 * @param {boolean} [opt.stackedCoordDimension=''] Specify a coord dimension if needed.
	 * @param {boolean} [opt.byIndex=false]
	 * @return {Object} calculationInfo
	 * {
	 *     stackedDimension: string
	 *     stackedByDimension: string
	 *     isStackedByIndex: boolean
	 *     stackedOverDimension: string
	 *     stackResultDimension: string
	 * }
	 */
	function enableDataStack(seriesModel, dimensionInfoList, opt) {
	  opt = opt || {};
	  var byIndex = opt.byIndex;
	  var stackedCoordDimension = opt.stackedCoordDimension; // Compatibal: when `stack` is set as '', do not stack.

	  var mayStack = !!(seriesModel && seriesModel.get('stack'));
	  var stackedByDimInfo;
	  var stackedDimInfo;
	  var stackResultDimension;
	  var stackedOverDimension;
	  each(dimensionInfoList, function (dimensionInfo, index) {
	    if (isString(dimensionInfo)) {
	      dimensionInfoList[index] = dimensionInfo = {
	        name: dimensionInfo
	      };
	    }

	    if (mayStack && !dimensionInfo.isExtraCoord) {
	      // Find the first ordinal dimension as the stackedByDimInfo.
	      if (!byIndex && !stackedByDimInfo && dimensionInfo.ordinalMeta) {
	        stackedByDimInfo = dimensionInfo;
	      } // Find the first stackable dimension as the stackedDimInfo.


	      if (!stackedDimInfo && dimensionInfo.type !== 'ordinal' && dimensionInfo.type !== 'time' && (!stackedCoordDimension || stackedCoordDimension === dimensionInfo.coordDim)) {
	        stackedDimInfo = dimensionInfo;
	      }
	    }
	  });

	  if (stackedDimInfo && !byIndex && !stackedByDimInfo) {
	    // Compatible with previous design, value axis (time axis) only stack by index.
	    // It may make sense if the user provides elaborately constructed data.
	    byIndex = true;
	  } // Add stack dimension, they can be both calculated by coordinate system in `unionExtent`.
	  // That put stack logic in List is for using conveniently in echarts extensions, but it
	  // might not be a good way.


	  if (stackedDimInfo) {
	    // Use a weird name that not duplicated with other names.
	    stackResultDimension = '__\0ecstackresult';
	    stackedOverDimension = '__\0ecstackedover'; // Create inverted index to fast query index by value.

	    if (stackedByDimInfo) {
	      stackedByDimInfo.createInvertedIndices = true;
	    }

	    var stackedDimCoordDim = stackedDimInfo.coordDim;
	    var stackedDimType = stackedDimInfo.type;
	    var stackedDimCoordIndex = 0;
	    each(dimensionInfoList, function (dimensionInfo) {
	      if (dimensionInfo.coordDim === stackedDimCoordDim) {
	        stackedDimCoordIndex++;
	      }
	    });
	    dimensionInfoList.push({
	      name: stackResultDimension,
	      coordDim: stackedDimCoordDim,
	      coordDimIndex: stackedDimCoordIndex,
	      type: stackedDimType,
	      isExtraCoord: true,
	      isCalculationCoord: true
	    });
	    stackedDimCoordIndex++;
	    dimensionInfoList.push({
	      name: stackedOverDimension,
	      // This dimension contains stack base (generally, 0), so do not set it as
	      // `stackedDimCoordDim` to avoid extent calculation, consider log scale.
	      coordDim: stackedOverDimension,
	      coordDimIndex: stackedDimCoordIndex,
	      type: stackedDimType,
	      isExtraCoord: true,
	      isCalculationCoord: true
	    });
	  }

	  return {
	    stackedDimension: stackedDimInfo && stackedDimInfo.name,
	    stackedByDimension: stackedByDimInfo && stackedByDimInfo.name,
	    isStackedByIndex: byIndex,
	    stackedOverDimension: stackedOverDimension,
	    stackResultDimension: stackResultDimension
	  };
	}
	/**
	 * @param {module:echarts/data/List} data
	 * @param {string} stackedDim
	 */


	function isDimensionStacked(data, stackedDim
	/*, stackedByDim*/
	) {
	  // Each single series only maps to one pair of axis. So we do not need to
	  // check stackByDim, whatever stacked by a dimension or stacked by index.
	  return !!stackedDim && stackedDim === data.getCalculationInfo('stackedDimension'); // && (
	  //     stackedByDim != null
	  //         ? stackedByDim === data.getCalculationInfo('stackedByDimension')
	  //         : data.getCalculationInfo('isStackedByIndex')
	  // );
	}
	/**
	 * @param {module:echarts/data/List} data
	 * @param {string} targetDim
	 * @param {string} [stackedByDim] If not input this parameter, check whether
	 *                                stacked by index.
	 * @return {string} dimension
	 */


	function getStackedDimension(data, targetDim) {
	  return isDimensionStacked(data, targetDim) ? data.getCalculationInfo('stackResultDimension') : targetDim;
	}

	exports.enableDataStack = enableDataStack;
	exports.isDimensionStacked = isDimensionStacked;
	exports.getStackedDimension = getStackedDimension;

/***/ }),
/* 303 */
/***/ (function(module, exports, __webpack_require__) {

	var _config = __webpack_require__(177);

	var __DEV__ = _config.__DEV__;

	var zrUtil = __webpack_require__(181);

	var OrdinalScale = __webpack_require__(304);

	var IntervalScale = __webpack_require__(307);

	var Scale = __webpack_require__(305);

	var numberUtil = __webpack_require__(263);

	var _barGrid = __webpack_require__(309);

	var prepareLayoutBarSeries = _barGrid.prepareLayoutBarSeries;
	var makeColumnLayout = _barGrid.makeColumnLayout;
	var retrieveColumnLayout = _barGrid.retrieveColumnLayout;

	var BoundingRect = __webpack_require__(199);

	__webpack_require__(310);

	__webpack_require__(311);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/

	/**
	 * Get axis scale extent before niced.
	 * Item of returned array can only be number (including Infinity and NaN).
	 */
	function getScaleExtent(scale, model) {
	  var scaleType = scale.type;
	  var min = model.getMin();
	  var max = model.getMax();
	  var fixMin = min != null;
	  var fixMax = max != null;
	  var originalExtent = scale.getExtent();
	  var axisDataLen;
	  var boundaryGap;
	  var span;

	  if (scaleType === 'ordinal') {
	    axisDataLen = model.getCategories().length;
	  } else {
	    boundaryGap = model.get('boundaryGap');

	    if (!zrUtil.isArray(boundaryGap)) {
	      boundaryGap = [boundaryGap || 0, boundaryGap || 0];
	    }

	    if (typeof boundaryGap[0] === 'boolean') {
	      boundaryGap = [0, 0];
	    }

	    boundaryGap[0] = numberUtil.parsePercent(boundaryGap[0], 1);
	    boundaryGap[1] = numberUtil.parsePercent(boundaryGap[1], 1);
	    span = originalExtent[1] - originalExtent[0] || Math.abs(originalExtent[0]);
	  } // Notice: When min/max is not set (that is, when there are null/undefined,
	  // which is the most common case), these cases should be ensured:
	  // (1) For 'ordinal', show all axis.data.
	  // (2) For others:
	  //      + `boundaryGap` is applied (if min/max set, boundaryGap is
	  //      disabled).
	  //      + If `needCrossZero`, min/max should be zero, otherwise, min/max should
	  //      be the result that originalExtent enlarged by boundaryGap.
	  // (3) If no data, it should be ensured that `scale.setBlank` is set.
	  // FIXME
	  // (1) When min/max is 'dataMin' or 'dataMax', should boundaryGap be able to used?
	  // (2) When `needCrossZero` and all data is positive/negative, should it be ensured
	  // that the results processed by boundaryGap are positive/negative?


	  if (min == null) {
	    min = scaleType === 'ordinal' ? axisDataLen ? 0 : NaN : originalExtent[0] - boundaryGap[0] * span;
	  }

	  if (max == null) {
	    max = scaleType === 'ordinal' ? axisDataLen ? axisDataLen - 1 : NaN : originalExtent[1] + boundaryGap[1] * span;
	  }

	  if (min === 'dataMin') {
	    min = originalExtent[0];
	  } else if (typeof min === 'function') {
	    min = min({
	      min: originalExtent[0],
	      max: originalExtent[1]
	    });
	  }

	  if (max === 'dataMax') {
	    max = originalExtent[1];
	  } else if (typeof max === 'function') {
	    max = max({
	      min: originalExtent[0],
	      max: originalExtent[1]
	    });
	  }

	  (min == null || !isFinite(min)) && (min = NaN);
	  (max == null || !isFinite(max)) && (max = NaN);
	  scale.setBlank(zrUtil.eqNaN(min) || zrUtil.eqNaN(max) || scaleType === 'ordinal' && !scale.getOrdinalMeta().categories.length); // Evaluate if axis needs cross zero

	  if (model.getNeedCrossZero()) {
	    // Axis is over zero and min is not set
	    if (min > 0 && max > 0 && !fixMin) {
	      min = 0;
	    } // Axis is under zero and max is not set


	    if (min < 0 && max < 0 && !fixMax) {
	      max = 0;
	    }
	  } // If bars are placed on a base axis of type time or interval account for axis boundary overflow and current axis
	  // is base axis
	  // FIXME
	  // (1) Consider support value axis, where below zero and axis `onZero` should be handled properly.
	  // (2) Refactor the logic with `barGrid`. Is it not need to `makeBarWidthAndOffsetInfo` twice with different extent?
	  //     Should not depend on series type `bar`?
	  // (3) Fix that might overlap when using dataZoom.
	  // (4) Consider other chart types using `barGrid`?
	  // See #6728, #4862, `test/bar-overflow-time-plot.html`


	  var ecModel = model.ecModel;

	  if (ecModel && scaleType === 'time'
	  /*|| scaleType === 'interval' */
	  ) {
	    var barSeriesModels = prepareLayoutBarSeries('bar', ecModel);
	    var isBaseAxisAndHasBarSeries;
	    zrUtil.each(barSeriesModels, function (seriesModel) {
	      isBaseAxisAndHasBarSeries |= seriesModel.getBaseAxis() === model.axis;
	    });

	    if (isBaseAxisAndHasBarSeries) {
	      // Calculate placement of bars on axis
	      var barWidthAndOffset = makeColumnLayout(barSeriesModels); // Adjust axis min and max to account for overflow

	      var adjustedScale = adjustScaleForOverflow(min, max, model, barWidthAndOffset);
	      min = adjustedScale.min;
	      max = adjustedScale.max;
	    }
	  }

	  return [min, max];
	}

	function adjustScaleForOverflow(min, max, model, barWidthAndOffset) {
	  // Get Axis Length
	  var axisExtent = model.axis.getExtent();
	  var axisLength = axisExtent[1] - axisExtent[0]; // Get bars on current base axis and calculate min and max overflow

	  var barsOnCurrentAxis = retrieveColumnLayout(barWidthAndOffset, model.axis);

	  if (barsOnCurrentAxis === undefined) {
	    return {
	      min: min,
	      max: max
	    };
	  }

	  var minOverflow = Infinity;
	  zrUtil.each(barsOnCurrentAxis, function (item) {
	    minOverflow = Math.min(item.offset, minOverflow);
	  });
	  var maxOverflow = -Infinity;
	  zrUtil.each(barsOnCurrentAxis, function (item) {
	    maxOverflow = Math.max(item.offset + item.width, maxOverflow);
	  });
	  minOverflow = Math.abs(minOverflow);
	  maxOverflow = Math.abs(maxOverflow);
	  var totalOverFlow = minOverflow + maxOverflow; // Calulate required buffer based on old range and overflow

	  var oldRange = max - min;
	  var oldRangePercentOfNew = 1 - (minOverflow + maxOverflow) / axisLength;
	  var overflowBuffer = oldRange / oldRangePercentOfNew - oldRange;
	  max += overflowBuffer * (maxOverflow / totalOverFlow);
	  min -= overflowBuffer * (minOverflow / totalOverFlow);
	  return {
	    min: min,
	    max: max
	  };
	}

	function niceScaleExtent(scale, model) {
	  var extent = getScaleExtent(scale, model);
	  var fixMin = model.getMin() != null;
	  var fixMax = model.getMax() != null;
	  var splitNumber = model.get('splitNumber');

	  if (scale.type === 'log') {
	    scale.base = model.get('logBase');
	  }

	  var scaleType = scale.type;
	  scale.setExtent(extent[0], extent[1]);
	  scale.niceExtent({
	    splitNumber: splitNumber,
	    fixMin: fixMin,
	    fixMax: fixMax,
	    minInterval: scaleType === 'interval' || scaleType === 'time' ? model.get('minInterval') : null,
	    maxInterval: scaleType === 'interval' || scaleType === 'time' ? model.get('maxInterval') : null
	  }); // If some one specified the min, max. And the default calculated interval
	  // is not good enough. He can specify the interval. It is often appeared
	  // in angle axis with angle 0 - 360. Interval calculated in interval scale is hard
	  // to be 60.
	  // FIXME

	  var interval = model.get('interval');

	  if (interval != null) {
	    scale.setInterval && scale.setInterval(interval);
	  }
	}
	/**
	 * @param {module:echarts/model/Model} model
	 * @param {string} [axisType] Default retrieve from model.type
	 * @return {module:echarts/scale/*}
	 */


	function createScaleByModel(model, axisType) {
	  axisType = axisType || model.get('type');

	  if (axisType) {
	    switch (axisType) {
	      // Buildin scale
	      case 'category':
	        return new OrdinalScale(model.getOrdinalMeta ? model.getOrdinalMeta() : model.getCategories(), [Infinity, -Infinity]);

	      case 'value':
	        return new IntervalScale();
	      // Extended scale, like time and log

	      default:
	        return (Scale.getClass(axisType) || IntervalScale).create(model);
	    }
	  }
	}
	/**
	 * Check if the axis corss 0
	 */


	function ifAxisCrossZero(axis) {
	  var dataExtent = axis.scale.getExtent();
	  var min = dataExtent[0];
	  var max = dataExtent[1];
	  return !(min > 0 && max > 0 || min < 0 && max < 0);
	}
	/**
	 * @param {module:echarts/coord/Axis} axis
	 * @return {Function} Label formatter function.
	 *         param: {number} tickValue,
	 *         param: {number} idx, the index in all ticks.
	 *                         If category axis, this param is not requied.
	 *         return: {string} label string.
	 */


	function makeLabelFormatter(axis) {
	  var labelFormatter = axis.getLabelModel().get('formatter');
	  var categoryTickStart = axis.type === 'category' ? axis.scale.getExtent()[0] : null;

	  if (typeof labelFormatter === 'string') {
	    labelFormatter = function (tpl) {
	      return function (val) {
	        return tpl.replace('{value}', val != null ? val : '');
	      };
	    }(labelFormatter); // Consider empty array


	    return labelFormatter;
	  } else if (typeof labelFormatter === 'function') {
	    return function (tickValue, idx) {
	      // The original intention of `idx` is "the index of the tick in all ticks".
	      // But the previous implementation of category axis do not consider the
	      // `axisLabel.interval`, which cause that, for example, the `interval` is
	      // `1`, then the ticks "name5", "name7", "name9" are displayed, where the
	      // corresponding `idx` are `0`, `2`, `4`, but not `0`, `1`, `2`. So we keep
	      // the definition here for back compatibility.
	      if (categoryTickStart != null) {
	        idx = tickValue - categoryTickStart;
	      }

	      return labelFormatter(getAxisRawValue(axis, tickValue), idx);
	    };
	  } else {
	    return function (tick) {
	      return axis.scale.getLabel(tick);
	    };
	  }
	}

	function getAxisRawValue(axis, value) {
	  // In category axis with data zoom, tick is not the original
	  // index of axis.data. So tick should not be exposed to user
	  // in category axis.
	  return axis.type === 'category' ? axis.scale.getLabel(value) : value;
	}
	/**
	 * @param {module:echarts/coord/Axis} axis
	 * @return {module:zrender/core/BoundingRect} Be null/undefined if no labels.
	 */


	function estimateLabelUnionRect(axis) {
	  var axisModel = axis.model;
	  var scale = axis.scale;

	  if (!axisModel.get('axisLabel.show') || scale.isBlank()) {
	    return;
	  }

	  var isCategory = axis.type === 'category';
	  var realNumberScaleTicks;
	  var tickCount;
	  var categoryScaleExtent = scale.getExtent(); // Optimize for large category data, avoid call `getTicks()`.

	  if (isCategory) {
	    tickCount = scale.count();
	  } else {
	    realNumberScaleTicks = scale.getTicks();
	    tickCount = realNumberScaleTicks.length;
	  }

	  var axisLabelModel = axis.getLabelModel();
	  var labelFormatter = makeLabelFormatter(axis);
	  var rect;
	  var step = 1; // Simple optimization for large amount of labels

	  if (tickCount > 40) {
	    step = Math.ceil(tickCount / 40);
	  }

	  for (var i = 0; i < tickCount; i += step) {
	    var tickValue = realNumberScaleTicks ? realNumberScaleTicks[i] : categoryScaleExtent[0] + i;
	    var label = labelFormatter(tickValue);
	    var unrotatedSingleRect = axisLabelModel.getTextRect(label);
	    var singleRect = rotateTextRect(unrotatedSingleRect, axisLabelModel.get('rotate') || 0);
	    rect ? rect.union(singleRect) : rect = singleRect;
	  }

	  return rect;
	}

	function rotateTextRect(textRect, rotate) {
	  var rotateRadians = rotate * Math.PI / 180;
	  var boundingBox = textRect.plain();
	  var beforeWidth = boundingBox.width;
	  var beforeHeight = boundingBox.height;
	  var afterWidth = beforeWidth * Math.cos(rotateRadians) + beforeHeight * Math.sin(rotateRadians);
	  var afterHeight = beforeWidth * Math.sin(rotateRadians) + beforeHeight * Math.cos(rotateRadians);
	  var rotatedRect = new BoundingRect(boundingBox.x, boundingBox.y, afterWidth, afterHeight);
	  return rotatedRect;
	}

	exports.getScaleExtent = getScaleExtent;
	exports.niceScaleExtent = niceScaleExtent;
	exports.createScaleByModel = createScaleByModel;
	exports.ifAxisCrossZero = ifAxisCrossZero;
	exports.makeLabelFormatter = makeLabelFormatter;
	exports.getAxisRawValue = getAxisRawValue;
	exports.estimateLabelUnionRect = estimateLabelUnionRect;

/***/ }),
/* 304 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(181);

	var Scale = __webpack_require__(305);

	var OrdinalMeta = __webpack_require__(306);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/

	/**
	 * Linear continuous scale
	 * @module echarts/coord/scale/Ordinal
	 *
	 * http://en.wikipedia.org/wiki/Level_of_measurement
	 */
	// FIXME only one data
	var scaleProto = Scale.prototype;
	var OrdinalScale = Scale.extend({
	  type: 'ordinal',

	  /**
	   * @param {module:echarts/data/OrdianlMeta|Array.<string>} ordinalMeta
	   */
	  init: function (ordinalMeta, extent) {
	    // Caution: Should not use instanceof, consider ec-extensions using
	    // import approach to get OrdinalMeta class.
	    if (!ordinalMeta || zrUtil.isArray(ordinalMeta)) {
	      ordinalMeta = new OrdinalMeta({
	        categories: ordinalMeta
	      });
	    }

	    this._ordinalMeta = ordinalMeta;
	    this._extent = extent || [0, ordinalMeta.categories.length - 1];
	  },
	  parse: function (val) {
	    return typeof val === 'string' ? this._ordinalMeta.getOrdinal(val) // val might be float.
	    : Math.round(val);
	  },
	  contain: function (rank) {
	    rank = this.parse(rank);
	    return scaleProto.contain.call(this, rank) && this._ordinalMeta.categories[rank] != null;
	  },

	  /**
	   * Normalize given rank or name to linear [0, 1]
	   * @param {number|string} [val]
	   * @return {number}
	   */
	  normalize: function (val) {
	    return scaleProto.normalize.call(this, this.parse(val));
	  },
	  scale: function (val) {
	    return Math.round(scaleProto.scale.call(this, val));
	  },

	  /**
	   * @return {Array}
	   */
	  getTicks: function () {
	    var ticks = [];
	    var extent = this._extent;
	    var rank = extent[0];

	    while (rank <= extent[1]) {
	      ticks.push(rank);
	      rank++;
	    }

	    return ticks;
	  },

	  /**
	   * Get item on rank n
	   * @param {number} n
	   * @return {string}
	   */
	  getLabel: function (n) {
	    if (!this.isBlank()) {
	      // Note that if no data, ordinalMeta.categories is an empty array.
	      return this._ordinalMeta.categories[n];
	    }
	  },

	  /**
	   * @return {number}
	   */
	  count: function () {
	    return this._extent[1] - this._extent[0] + 1;
	  },

	  /**
	   * @override
	   */
	  unionExtentFromData: function (data, dim) {
	    this.unionExtent(data.getApproximateExtent(dim));
	  },
	  getOrdinalMeta: function () {
	    return this._ordinalMeta;
	  },
	  niceTicks: zrUtil.noop,
	  niceExtent: zrUtil.noop
	});
	/**
	 * @return {module:echarts/scale/Time}
	 */

	OrdinalScale.create = function () {
	  return new OrdinalScale();
	};

	var _default = OrdinalScale;
	module.exports = _default;

/***/ }),
/* 305 */
/***/ (function(module, exports, __webpack_require__) {

	var clazzUtil = __webpack_require__(221);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/

	/**
	 * // Scale class management
	 * @module echarts/scale/Scale
	 */

	/**
	 * @param {Object} [setting]
	 */
	function Scale(setting) {
	  this._setting = setting || {};
	  /**
	   * Extent
	   * @type {Array.<number>}
	   * @protected
	   */

	  this._extent = [Infinity, -Infinity];
	  /**
	   * Step is calculated in adjustExtent
	   * @type {Array.<number>}
	   * @protected
	   */

	  this._interval = 0;
	  this.init && this.init.apply(this, arguments);
	}
	/**
	 * Parse input val to valid inner number.
	 * @param {*} val
	 * @return {number}
	 */


	Scale.prototype.parse = function (val) {
	  // Notice: This would be a trap here, If the implementation
	  // of this method depends on extent, and this method is used
	  // before extent set (like in dataZoom), it would be wrong.
	  // Nevertheless, parse does not depend on extent generally.
	  return val;
	};

	Scale.prototype.getSetting = function (name) {
	  return this._setting[name];
	};

	Scale.prototype.contain = function (val) {
	  var extent = this._extent;
	  return val >= extent[0] && val <= extent[1];
	};
	/**
	 * Normalize value to linear [0, 1], return 0.5 if extent span is 0
	 * @param {number} val
	 * @return {number}
	 */


	Scale.prototype.normalize = function (val) {
	  var extent = this._extent;

	  if (extent[1] === extent[0]) {
	    return 0.5;
	  }

	  return (val - extent[0]) / (extent[1] - extent[0]);
	};
	/**
	 * Scale normalized value
	 * @param {number} val
	 * @return {number}
	 */


	Scale.prototype.scale = function (val) {
	  var extent = this._extent;
	  return val * (extent[1] - extent[0]) + extent[0];
	};
	/**
	 * Set extent from data
	 * @param {Array.<number>} other
	 */


	Scale.prototype.unionExtent = function (other) {
	  var extent = this._extent;
	  other[0] < extent[0] && (extent[0] = other[0]);
	  other[1] > extent[1] && (extent[1] = other[1]); // not setExtent because in log axis it may transformed to power
	  // this.setExtent(extent[0], extent[1]);
	};
	/**
	 * Set extent from data
	 * @param {module:echarts/data/List} data
	 * @param {string} dim
	 */


	Scale.prototype.unionExtentFromData = function (data, dim) {
	  this.unionExtent(data.getApproximateExtent(dim));
	};
	/**
	 * Get extent
	 * @return {Array.<number>}
	 */


	Scale.prototype.getExtent = function () {
	  return this._extent.slice();
	};
	/**
	 * Set extent
	 * @param {number} start
	 * @param {number} end
	 */


	Scale.prototype.setExtent = function (start, end) {
	  var thisExtent = this._extent;

	  if (!isNaN(start)) {
	    thisExtent[0] = start;
	  }

	  if (!isNaN(end)) {
	    thisExtent[1] = end;
	  }
	};
	/**
	 * When axis extent depends on data and no data exists,
	 * axis ticks should not be drawn, which is named 'blank'.
	 */


	Scale.prototype.isBlank = function () {
	  return this._isBlank;
	},
	/**
	 * When axis extent depends on data and no data exists,
	 * axis ticks should not be drawn, which is named 'blank'.
	 */
	Scale.prototype.setBlank = function (isBlank) {
	  this._isBlank = isBlank;
	};
	/**
	 * @abstract
	 * @param {*} tick
	 * @return {string} label of the tick.
	 */

	Scale.prototype.getLabel = null;
	clazzUtil.enableClassExtend(Scale);
	clazzUtil.enableClassManagement(Scale, {
	  registerWhenExtend: true
	});
	var _default = Scale;
	module.exports = _default;

/***/ }),
/* 306 */
/***/ (function(module, exports, __webpack_require__) {

	var _util = __webpack_require__(181);

	var createHashMap = _util.createHashMap;
	var isObject = _util.isObject;
	var map = _util.map;

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/

	/**
	 * @constructor
	 * @param {Object} [opt]
	 * @param {Object} [opt.categories=[]]
	 * @param {Object} [opt.needCollect=false]
	 * @param {Object} [opt.deduplication=false]
	 */
	function OrdinalMeta(opt) {
	  /**
	   * @readOnly
	   * @type {Array.<string>}
	   */
	  this.categories = opt.categories || [];
	  /**
	   * @private
	   * @type {boolean}
	   */

	  this._needCollect = opt.needCollect;
	  /**
	   * @private
	   * @type {boolean}
	   */

	  this._deduplication = opt.deduplication;
	  /**
	   * @private
	   * @type {boolean}
	   */

	  this._map;
	}
	/**
	 * @param {module:echarts/model/Model} axisModel
	 * @return {module:echarts/data/OrdinalMeta}
	 */


	OrdinalMeta.createByAxisModel = function (axisModel) {
	  var option = axisModel.option;
	  var data = option.data;
	  var categories = data && map(data, getName);
	  return new OrdinalMeta({
	    categories: categories,
	    needCollect: !categories,
	    // deduplication is default in axis.
	    deduplication: option.dedplication !== false
	  });
	};

	var proto = OrdinalMeta.prototype;
	/**
	 * @param {string} category
	 * @return {number} ordinal
	 */

	proto.getOrdinal = function (category) {
	  return getOrCreateMap(this).get(category);
	};
	/**
	 * @param {*} category
	 * @return {number} The ordinal. If not found, return NaN.
	 */


	proto.parseAndCollect = function (category) {
	  var index;
	  var needCollect = this._needCollect; // The value of category dim can be the index of the given category set.
	  // This feature is only supported when !needCollect, because we should
	  // consider a common case: a value is 2017, which is a number but is
	  // expected to be tread as a category. This case usually happen in dataset,
	  // where it happent to be no need of the index feature.

	  if (typeof category !== 'string' && !needCollect) {
	    return category;
	  } // Optimize for the scenario:
	  // category is ['2012-01-01', '2012-01-02', ...], where the input
	  // data has been ensured not duplicate and is large data.
	  // Notice, if a dataset dimension provide categroies, usually echarts
	  // should remove duplication except user tell echarts dont do that
	  // (set axis.deduplication = false), because echarts do not know whether
	  // the values in the category dimension has duplication (consider the
	  // parallel-aqi example)


	  if (needCollect && !this._deduplication) {
	    index = this.categories.length;
	    this.categories[index] = category;
	    return index;
	  }

	  var map = getOrCreateMap(this);
	  index = map.get(category);

	  if (index == null) {
	    if (needCollect) {
	      index = this.categories.length;
	      this.categories[index] = category;
	      map.set(category, index);
	    } else {
	      index = NaN;
	    }
	  }

	  return index;
	}; // Consider big data, do not create map until needed.


	function getOrCreateMap(ordinalMeta) {
	  return ordinalMeta._map || (ordinalMeta._map = createHashMap(ordinalMeta.categories));
	}

	function getName(obj) {
	  if (isObject(obj) && obj.value != null) {
	    return obj.value;
	  } else {
	    return obj + '';
	  }
	}

	var _default = OrdinalMeta;
	module.exports = _default;

/***/ }),
/* 307 */
/***/ (function(module, exports, __webpack_require__) {

	var numberUtil = __webpack_require__(263);

	var formatUtil = __webpack_require__(264);

	var Scale = __webpack_require__(305);

	var helper = __webpack_require__(308);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/

	/**
	 * Interval scale
	 * @module echarts/scale/Interval
	 */
	var roundNumber = numberUtil.round;
	/**
	 * @alias module:echarts/coord/scale/Interval
	 * @constructor
	 */

	var IntervalScale = Scale.extend({
	  type: 'interval',
	  _interval: 0,
	  _intervalPrecision: 2,
	  setExtent: function (start, end) {
	    var thisExtent = this._extent; //start,end may be a Number like '25',so...

	    if (!isNaN(start)) {
	      thisExtent[0] = parseFloat(start);
	    }

	    if (!isNaN(end)) {
	      thisExtent[1] = parseFloat(end);
	    }
	  },
	  unionExtent: function (other) {
	    var extent = this._extent;
	    other[0] < extent[0] && (extent[0] = other[0]);
	    other[1] > extent[1] && (extent[1] = other[1]); // unionExtent may called by it's sub classes

	    IntervalScale.prototype.setExtent.call(this, extent[0], extent[1]);
	  },

	  /**
	   * Get interval
	   */
	  getInterval: function () {
	    return this._interval;
	  },

	  /**
	   * Set interval
	   */
	  setInterval: function (interval) {
	    this._interval = interval; // Dropped auto calculated niceExtent and use user setted extent
	    // We assume user wan't to set both interval, min, max to get a better result

	    this._niceExtent = this._extent.slice();
	    this._intervalPrecision = helper.getIntervalPrecision(interval);
	  },

	  /**
	   * @return {Array.<number>}
	   */
	  getTicks: function () {
	    return helper.intervalScaleGetTicks(this._interval, this._extent, this._niceExtent, this._intervalPrecision);
	  },

	  /**
	   * @param {number} data
	   * @param {Object} [opt]
	   * @param {number|string} [opt.precision] If 'auto', use nice presision.
	   * @param {boolean} [opt.pad] returns 1.50 but not 1.5 if precision is 2.
	   * @return {string}
	   */
	  getLabel: function (data, opt) {
	    if (data == null) {
	      return '';
	    }

	    var precision = opt && opt.precision;

	    if (precision == null) {
	      precision = numberUtil.getPrecisionSafe(data) || 0;
	    } else if (precision === 'auto') {
	      // Should be more precise then tick.
	      precision = this._intervalPrecision;
	    } // (1) If `precision` is set, 12.005 should be display as '12.00500'.
	    // (2) Use roundNumber (toFixed) to avoid scientific notation like '3.5e-7'.


	    data = roundNumber(data, precision, true);
	    return formatUtil.addCommas(data);
	  },

	  /**
	   * Update interval and extent of intervals for nice ticks
	   *
	   * @param {number} [splitNumber = 5] Desired number of ticks
	   * @param {number} [minInterval]
	   * @param {number} [maxInterval]
	   */
	  niceTicks: function (splitNumber, minInterval, maxInterval) {
	    splitNumber = splitNumber || 5;
	    var extent = this._extent;
	    var span = extent[1] - extent[0];

	    if (!isFinite(span)) {
	      return;
	    } // User may set axis min 0 and data are all negative
	    // FIXME If it needs to reverse ?


	    if (span < 0) {
	      span = -span;
	      extent.reverse();
	    }

	    var result = helper.intervalScaleNiceTicks(extent, splitNumber, minInterval, maxInterval);
	    this._intervalPrecision = result.intervalPrecision;
	    this._interval = result.interval;
	    this._niceExtent = result.niceTickExtent;
	  },

	  /**
	   * Nice extent.
	   * @param {Object} opt
	   * @param {number} [opt.splitNumber = 5] Given approx tick number
	   * @param {boolean} [opt.fixMin=false]
	   * @param {boolean} [opt.fixMax=false]
	   * @param {boolean} [opt.minInterval]
	   * @param {boolean} [opt.maxInterval]
	   */
	  niceExtent: function (opt) {
	    var extent = this._extent; // If extent start and end are same, expand them

	    if (extent[0] === extent[1]) {
	      if (extent[0] !== 0) {
	        // Expand extent
	        var expandSize = extent[0]; // In the fowllowing case
	        //      Axis has been fixed max 100
	        //      Plus data are all 100 and axis extent are [100, 100].
	        // Extend to the both side will cause expanded max is larger than fixed max.
	        // So only expand to the smaller side.

	        if (!opt.fixMax) {
	          extent[1] += expandSize / 2;
	          extent[0] -= expandSize / 2;
	        } else {
	          extent[0] -= expandSize / 2;
	        }
	      } else {
	        extent[1] = 1;
	      }
	    }

	    var span = extent[1] - extent[0]; // If there are no data and extent are [Infinity, -Infinity]

	    if (!isFinite(span)) {
	      extent[0] = 0;
	      extent[1] = 1;
	    }

	    this.niceTicks(opt.splitNumber, opt.minInterval, opt.maxInterval); // var extent = this._extent;

	    var interval = this._interval;

	    if (!opt.fixMin) {
	      extent[0] = roundNumber(Math.floor(extent[0] / interval) * interval);
	    }

	    if (!opt.fixMax) {
	      extent[1] = roundNumber(Math.ceil(extent[1] / interval) * interval);
	    }
	  }
	});
	/**
	 * @return {module:echarts/scale/Time}
	 */

	IntervalScale.create = function () {
	  return new IntervalScale();
	};

	var _default = IntervalScale;
	module.exports = _default;

/***/ }),
/* 308 */
/***/ (function(module, exports, __webpack_require__) {

	var numberUtil = __webpack_require__(263);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/

	/**
	 * For testable.
	 */
	var roundNumber = numberUtil.round;
	/**
	 * @param {Array.<number>} extent Both extent[0] and extent[1] should be valid number.
	 *                                Should be extent[0] < extent[1].
	 * @param {number} splitNumber splitNumber should be >= 1.
	 * @param {number} [minInterval]
	 * @param {number} [maxInterval]
	 * @return {Object} {interval, intervalPrecision, niceTickExtent}
	 */

	function intervalScaleNiceTicks(extent, splitNumber, minInterval, maxInterval) {
	  var result = {};
	  var span = extent[1] - extent[0];
	  var interval = result.interval = numberUtil.nice(span / splitNumber, true);

	  if (minInterval != null && interval < minInterval) {
	    interval = result.interval = minInterval;
	  }

	  if (maxInterval != null && interval > maxInterval) {
	    interval = result.interval = maxInterval;
	  } // Tow more digital for tick.


	  var precision = result.intervalPrecision = getIntervalPrecision(interval); // Niced extent inside original extent

	  var niceTickExtent = result.niceTickExtent = [roundNumber(Math.ceil(extent[0] / interval) * interval, precision), roundNumber(Math.floor(extent[1] / interval) * interval, precision)];
	  fixExtent(niceTickExtent, extent);
	  return result;
	}
	/**
	 * @param {number} interval
	 * @return {number} interval precision
	 */


	function getIntervalPrecision(interval) {
	  // Tow more digital for tick.
	  return numberUtil.getPrecisionSafe(interval) + 2;
	}

	function clamp(niceTickExtent, idx, extent) {
	  niceTickExtent[idx] = Math.max(Math.min(niceTickExtent[idx], extent[1]), extent[0]);
	} // In some cases (e.g., splitNumber is 1), niceTickExtent may be out of extent.


	function fixExtent(niceTickExtent, extent) {
	  !isFinite(niceTickExtent[0]) && (niceTickExtent[0] = extent[0]);
	  !isFinite(niceTickExtent[1]) && (niceTickExtent[1] = extent[1]);
	  clamp(niceTickExtent, 0, extent);
	  clamp(niceTickExtent, 1, extent);

	  if (niceTickExtent[0] > niceTickExtent[1]) {
	    niceTickExtent[0] = niceTickExtent[1];
	  }
	}

	function intervalScaleGetTicks(interval, extent, niceTickExtent, intervalPrecision) {
	  var ticks = []; // If interval is 0, return [];

	  if (!interval) {
	    return ticks;
	  } // Consider this case: using dataZoom toolbox, zoom and zoom.


	  var safeLimit = 10000;

	  if (extent[0] < niceTickExtent[0]) {
	    ticks.push(extent[0]);
	  }

	  var tick = niceTickExtent[0];

	  while (tick <= niceTickExtent[1]) {
	    ticks.push(tick); // Avoid rounding error

	    tick = roundNumber(tick + interval, intervalPrecision);

	    if (tick === ticks[ticks.length - 1]) {
	      // Consider out of safe float point, e.g.,
	      // -3711126.9907707 + 2e-10 === -3711126.9907707
	      break;
	    }

	    if (ticks.length > safeLimit) {
	      return [];
	    }
	  } // Consider this case: the last item of ticks is smaller
	  // than niceTickExtent[1] and niceTickExtent[1] === extent[1].


	  if (extent[1] > (ticks.length ? ticks[ticks.length - 1] : niceTickExtent[1])) {
	    ticks.push(extent[1]);
	  }

	  return ticks;
	}

	exports.intervalScaleNiceTicks = intervalScaleNiceTicks;
	exports.getIntervalPrecision = getIntervalPrecision;
	exports.fixExtent = fixExtent;
	exports.intervalScaleGetTicks = intervalScaleGetTicks;

/***/ }),
/* 309 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(181);

	var _number = __webpack_require__(263);

	var parsePercent = _number.parsePercent;

	var _dataStackHelper = __webpack_require__(302);

	var isDimensionStacked = _dataStackHelper.isDimensionStacked;

	var createRenderPlanner = __webpack_require__(284);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var STACK_PREFIX = '__ec_stack_';
	var LARGE_BAR_MIN_WIDTH = 0.5;
	var LargeArr = typeof Float32Array !== 'undefined' ? Float32Array : Array;

	function getSeriesStackId(seriesModel) {
	  return seriesModel.get('stack') || STACK_PREFIX + seriesModel.seriesIndex;
	}

	function getAxisKey(axis) {
	  return axis.dim + axis.index;
	}
	/**
	 * @param {Object} opt
	 * @param {module:echarts/coord/Axis} opt.axis Only support category axis currently.
	 * @param {number} opt.count Positive interger.
	 * @param {number} [opt.barWidth]
	 * @param {number} [opt.barMaxWidth]
	 * @param {number} [opt.barGap]
	 * @param {number} [opt.barCategoryGap]
	 * @return {Object} {width, offset, offsetCenter} If axis.type is not 'category', return undefined.
	 */


	function getLayoutOnAxis(opt) {
	  var params = [];
	  var baseAxis = opt.axis;
	  var axisKey = 'axis0';

	  if (baseAxis.type !== 'category') {
	    return;
	  }

	  var bandWidth = baseAxis.getBandWidth();

	  for (var i = 0; i < opt.count || 0; i++) {
	    params.push(zrUtil.defaults({
	      bandWidth: bandWidth,
	      axisKey: axisKey,
	      stackId: STACK_PREFIX + i
	    }, opt));
	  }

	  var widthAndOffsets = doCalBarWidthAndOffset(params);
	  var result = [];

	  for (var i = 0; i < opt.count; i++) {
	    var item = widthAndOffsets[axisKey][STACK_PREFIX + i];
	    item.offsetCenter = item.offset + item.width / 2;
	    result.push(item);
	  }

	  return result;
	}

	function prepareLayoutBarSeries(seriesType, ecModel) {
	  var seriesModels = [];
	  ecModel.eachSeriesByType(seriesType, function (seriesModel) {
	    // Check series coordinate, do layout for cartesian2d only
	    if (isOnCartesian(seriesModel) && !isInLargeMode(seriesModel)) {
	      seriesModels.push(seriesModel);
	    }
	  });
	  return seriesModels;
	}

	function makeColumnLayout(barSeries) {
	  var seriesInfoList = [];
	  zrUtil.each(barSeries, function (seriesModel) {
	    var data = seriesModel.getData();
	    var cartesian = seriesModel.coordinateSystem;
	    var baseAxis = cartesian.getBaseAxis();
	    var axisExtent = baseAxis.getExtent();
	    var bandWidth = baseAxis.type === 'category' ? baseAxis.getBandWidth() : Math.abs(axisExtent[1] - axisExtent[0]) / data.count();
	    var barWidth = parsePercent(seriesModel.get('barWidth'), bandWidth);
	    var barMaxWidth = parsePercent(seriesModel.get('barMaxWidth'), bandWidth);
	    var barGap = seriesModel.get('barGap');
	    var barCategoryGap = seriesModel.get('barCategoryGap');
	    seriesInfoList.push({
	      bandWidth: bandWidth,
	      barWidth: barWidth,
	      barMaxWidth: barMaxWidth,
	      barGap: barGap,
	      barCategoryGap: barCategoryGap,
	      axisKey: getAxisKey(baseAxis),
	      stackId: getSeriesStackId(seriesModel)
	    });
	  });
	  return doCalBarWidthAndOffset(seriesInfoList);
	}

	function doCalBarWidthAndOffset(seriesInfoList) {
	  // Columns info on each category axis. Key is cartesian name
	  var columnsMap = {};
	  zrUtil.each(seriesInfoList, function (seriesInfo, idx) {
	    var axisKey = seriesInfo.axisKey;
	    var bandWidth = seriesInfo.bandWidth;
	    var columnsOnAxis = columnsMap[axisKey] || {
	      bandWidth: bandWidth,
	      remainedWidth: bandWidth,
	      autoWidthCount: 0,
	      categoryGap: '20%',
	      gap: '30%',
	      stacks: {}
	    };
	    var stacks = columnsOnAxis.stacks;
	    columnsMap[axisKey] = columnsOnAxis;
	    var stackId = seriesInfo.stackId;

	    if (!stacks[stackId]) {
	      columnsOnAxis.autoWidthCount++;
	    }

	    stacks[stackId] = stacks[stackId] || {
	      width: 0,
	      maxWidth: 0
	    }; // Caution: In a single coordinate system, these barGrid attributes
	    // will be shared by series. Consider that they have default values,
	    // only the attributes set on the last series will work.
	    // Do not change this fact unless there will be a break change.
	    // TODO

	    var barWidth = seriesInfo.barWidth;

	    if (barWidth && !stacks[stackId].width) {
	      // See #6312, do not restrict width.
	      stacks[stackId].width = barWidth;
	      barWidth = Math.min(columnsOnAxis.remainedWidth, barWidth);
	      columnsOnAxis.remainedWidth -= barWidth;
	    }

	    var barMaxWidth = seriesInfo.barMaxWidth;
	    barMaxWidth && (stacks[stackId].maxWidth = barMaxWidth);
	    var barGap = seriesInfo.barGap;
	    barGap != null && (columnsOnAxis.gap = barGap);
	    var barCategoryGap = seriesInfo.barCategoryGap;
	    barCategoryGap != null && (columnsOnAxis.categoryGap = barCategoryGap);
	  });
	  var result = {};
	  zrUtil.each(columnsMap, function (columnsOnAxis, coordSysName) {
	    result[coordSysName] = {};
	    var stacks = columnsOnAxis.stacks;
	    var bandWidth = columnsOnAxis.bandWidth;
	    var categoryGap = parsePercent(columnsOnAxis.categoryGap, bandWidth);
	    var barGapPercent = parsePercent(columnsOnAxis.gap, 1);
	    var remainedWidth = columnsOnAxis.remainedWidth;
	    var autoWidthCount = columnsOnAxis.autoWidthCount;
	    var autoWidth = (remainedWidth - categoryGap) / (autoWidthCount + (autoWidthCount - 1) * barGapPercent);
	    autoWidth = Math.max(autoWidth, 0); // Find if any auto calculated bar exceeded maxBarWidth

	    zrUtil.each(stacks, function (column, stack) {
	      var maxWidth = column.maxWidth;

	      if (maxWidth && maxWidth < autoWidth) {
	        maxWidth = Math.min(maxWidth, remainedWidth);

	        if (column.width) {
	          maxWidth = Math.min(maxWidth, column.width);
	        }

	        remainedWidth -= maxWidth;
	        column.width = maxWidth;
	        autoWidthCount--;
	      }
	    }); // Recalculate width again

	    autoWidth = (remainedWidth - categoryGap) / (autoWidthCount + (autoWidthCount - 1) * barGapPercent);
	    autoWidth = Math.max(autoWidth, 0);
	    var widthSum = 0;
	    var lastColumn;
	    zrUtil.each(stacks, function (column, idx) {
	      if (!column.width) {
	        column.width = autoWidth;
	      }

	      lastColumn = column;
	      widthSum += column.width * (1 + barGapPercent);
	    });

	    if (lastColumn) {
	      widthSum -= lastColumn.width * barGapPercent;
	    }

	    var offset = -widthSum / 2;
	    zrUtil.each(stacks, function (column, stackId) {
	      result[coordSysName][stackId] = result[coordSysName][stackId] || {
	        offset: offset,
	        width: column.width
	      };
	      offset += column.width * (1 + barGapPercent);
	    });
	  });
	  return result;
	}
	/**
	 * @param {Object} barWidthAndOffset The result of makeColumnLayout
	 * @param {module:echarts/coord/Axis} axis
	 * @param {module:echarts/model/Series} [seriesModel] If not provided, return all.
	 * @return {Object} {stackId: {offset, width}} or {offset, width} if seriesModel provided.
	 */


	function retrieveColumnLayout(barWidthAndOffset, axis, seriesModel) {
	  if (barWidthAndOffset && axis) {
	    var result = barWidthAndOffset[getAxisKey(axis)];

	    if (result != null && seriesModel != null) {
	      result = result[getSeriesStackId(seriesModel)];
	    }

	    return result;
	  }
	}
	/**
	 * @param {string} seriesType
	 * @param {module:echarts/model/Global} ecModel
	 */


	function layout(seriesType, ecModel) {
	  var seriesModels = prepareLayoutBarSeries(seriesType, ecModel);
	  var barWidthAndOffset = makeColumnLayout(seriesModels);
	  var lastStackCoords = {};
	  var lastStackCoordsOrigin = {};
	  zrUtil.each(seriesModels, function (seriesModel) {
	    var data = seriesModel.getData();
	    var cartesian = seriesModel.coordinateSystem;
	    var baseAxis = cartesian.getBaseAxis();
	    var stackId = getSeriesStackId(seriesModel);
	    var columnLayoutInfo = barWidthAndOffset[getAxisKey(baseAxis)][stackId];
	    var columnOffset = columnLayoutInfo.offset;
	    var columnWidth = columnLayoutInfo.width;
	    var valueAxis = cartesian.getOtherAxis(baseAxis);
	    var barMinHeight = seriesModel.get('barMinHeight') || 0;
	    lastStackCoords[stackId] = lastStackCoords[stackId] || [];
	    lastStackCoordsOrigin[stackId] = lastStackCoordsOrigin[stackId] || []; // Fix #4243

	    data.setLayout({
	      offset: columnOffset,
	      size: columnWidth
	    });
	    var valueDim = data.mapDimension(valueAxis.dim);
	    var baseDim = data.mapDimension(baseAxis.dim);
	    var stacked = isDimensionStacked(data, valueDim
	    /*, baseDim*/
	    );
	    var isValueAxisH = valueAxis.isHorizontal();
	    var valueAxisStart = getValueAxisStart(baseAxis, valueAxis, stacked);

	    for (var idx = 0, len = data.count(); idx < len; idx++) {
	      var value = data.get(valueDim, idx);
	      var baseValue = data.get(baseDim, idx);

	      if (isNaN(value)) {
	        continue;
	      }

	      var sign = value >= 0 ? 'p' : 'n';
	      var baseCoord = valueAxisStart; // Because of the barMinHeight, we can not use the value in
	      // stackResultDimension directly.

	      if (stacked) {
	        // Only ordinal axis can be stacked.
	        if (!lastStackCoords[stackId][baseValue]) {
	          lastStackCoords[stackId][baseValue] = {
	            p: valueAxisStart,
	            // Positive stack
	            n: valueAxisStart // Negative stack

	          };
	        } // Should also consider #4243


	        baseCoord = lastStackCoords[stackId][baseValue][sign];
	      }

	      var x;
	      var y;
	      var width;
	      var height;

	      if (isValueAxisH) {
	        var coord = cartesian.dataToPoint([value, baseValue]);
	        x = baseCoord;
	        y = coord[1] + columnOffset;
	        width = coord[0] - valueAxisStart;
	        height = columnWidth;

	        if (Math.abs(width) < barMinHeight) {
	          width = (width < 0 ? -1 : 1) * barMinHeight;
	        }

	        stacked && (lastStackCoords[stackId][baseValue][sign] += width);
	      } else {
	        var coord = cartesian.dataToPoint([baseValue, value]);
	        x = coord[0] + columnOffset;
	        y = baseCoord;
	        width = columnWidth;
	        height = coord[1] - valueAxisStart;

	        if (Math.abs(height) < barMinHeight) {
	          // Include zero to has a positive bar
	          height = (height <= 0 ? -1 : 1) * barMinHeight;
	        }

	        stacked && (lastStackCoords[stackId][baseValue][sign] += height);
	      }

	      data.setItemLayout(idx, {
	        x: x,
	        y: y,
	        width: width,
	        height: height
	      });
	    }
	  }, this);
	} // TODO: Do not support stack in large mode yet.


	var largeLayout = {
	  seriesType: 'bar',
	  plan: createRenderPlanner(),
	  reset: function (seriesModel) {
	    if (!isOnCartesian(seriesModel) || !isInLargeMode(seriesModel)) {
	      return;
	    }

	    var data = seriesModel.getData();
	    var cartesian = seriesModel.coordinateSystem;
	    var baseAxis = cartesian.getBaseAxis();
	    var valueAxis = cartesian.getOtherAxis(baseAxis);
	    var valueDim = data.mapDimension(valueAxis.dim);
	    var baseDim = data.mapDimension(baseAxis.dim);
	    var valueAxisHorizontal = valueAxis.isHorizontal();
	    var valueDimIdx = valueAxisHorizontal ? 0 : 1;
	    var barWidth = retrieveColumnLayout(makeColumnLayout([seriesModel]), baseAxis, seriesModel).width;

	    if (!(barWidth > LARGE_BAR_MIN_WIDTH)) {
	      // jshint ignore:line
	      barWidth = LARGE_BAR_MIN_WIDTH;
	    }

	    return {
	      progress: progress
	    };

	    function progress(params, data) {
	      var largePoints = new LargeArr(params.count * 2);
	      var dataIndex;
	      var coord = [];
	      var valuePair = [];
	      var offset = 0;

	      while ((dataIndex = params.next()) != null) {
	        valuePair[valueDimIdx] = data.get(valueDim, dataIndex);
	        valuePair[1 - valueDimIdx] = data.get(baseDim, dataIndex);
	        coord = cartesian.dataToPoint(valuePair, null, coord);
	        largePoints[offset++] = coord[0];
	        largePoints[offset++] = coord[1];
	      }

	      data.setLayout({
	        largePoints: largePoints,
	        barWidth: barWidth,
	        valueAxisStart: getValueAxisStart(baseAxis, valueAxis, false),
	        valueAxisHorizontal: valueAxisHorizontal
	      });
	    }
	  }
	};

	function isOnCartesian(seriesModel) {
	  return seriesModel.coordinateSystem && seriesModel.coordinateSystem.type === 'cartesian2d';
	}

	function isInLargeMode(seriesModel) {
	  return seriesModel.pipelineContext && seriesModel.pipelineContext.large;
	}

	function getValueAxisStart(baseAxis, valueAxis, stacked) {
	  return zrUtil.indexOf(baseAxis.getAxesOnZeroOf(), valueAxis) >= 0 || stacked ? valueAxis.toGlobalCoord(valueAxis.dataToCoord(0)) : valueAxis.getGlobalExtent()[0];
	}

	exports.getLayoutOnAxis = getLayoutOnAxis;
	exports.prepareLayoutBarSeries = prepareLayoutBarSeries;
	exports.makeColumnLayout = makeColumnLayout;
	exports.retrieveColumnLayout = retrieveColumnLayout;
	exports.layout = layout;
	exports.largeLayout = largeLayout;

/***/ }),
/* 310 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(181);

	var numberUtil = __webpack_require__(263);

	var formatUtil = __webpack_require__(264);

	var scaleHelper = __webpack_require__(308);

	var IntervalScale = __webpack_require__(307);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	// [About UTC and local time zone]:
	// In most cases, `number.parseDate` will treat input data string as local time
	// (except time zone is specified in time string). And `format.formateTime` returns
	// local time by default. option.useUTC is false by default. This design have
	// concidered these common case:
	// (1) Time that is persistent in server is in UTC, but it is needed to be diplayed
	// in local time by default.
	// (2) By default, the input data string (e.g., '2011-01-02') should be displayed
	// as its original time, without any time difference.
	var intervalScaleProto = IntervalScale.prototype;
	var mathCeil = Math.ceil;
	var mathFloor = Math.floor;
	var ONE_SECOND = 1000;
	var ONE_MINUTE = ONE_SECOND * 60;
	var ONE_HOUR = ONE_MINUTE * 60;
	var ONE_DAY = ONE_HOUR * 24; // FIXME 公用？

	var bisect = function (a, x, lo, hi) {
	  while (lo < hi) {
	    var mid = lo + hi >>> 1;

	    if (a[mid][1] < x) {
	      lo = mid + 1;
	    } else {
	      hi = mid;
	    }
	  }

	  return lo;
	};
	/**
	 * @alias module:echarts/coord/scale/Time
	 * @constructor
	 */


	var TimeScale = IntervalScale.extend({
	  type: 'time',

	  /**
	   * @override
	   */
	  getLabel: function (val) {
	    var stepLvl = this._stepLvl;
	    var date = new Date(val);
	    return formatUtil.formatTime(stepLvl[0], date, this.getSetting('useUTC'));
	  },

	  /**
	   * @override
	   */
	  niceExtent: function (opt) {
	    var extent = this._extent; // If extent start and end are same, expand them

	    if (extent[0] === extent[1]) {
	      // Expand extent
	      extent[0] -= ONE_DAY;
	      extent[1] += ONE_DAY;
	    } // If there are no data and extent are [Infinity, -Infinity]


	    if (extent[1] === -Infinity && extent[0] === Infinity) {
	      var d = new Date();
	      extent[1] = +new Date(d.getFullYear(), d.getMonth(), d.getDate());
	      extent[0] = extent[1] - ONE_DAY;
	    }

	    this.niceTicks(opt.splitNumber, opt.minInterval, opt.maxInterval); // var extent = this._extent;

	    var interval = this._interval;

	    if (!opt.fixMin) {
	      extent[0] = numberUtil.round(mathFloor(extent[0] / interval) * interval);
	    }

	    if (!opt.fixMax) {
	      extent[1] = numberUtil.round(mathCeil(extent[1] / interval) * interval);
	    }
	  },

	  /**
	   * @override
	   */
	  niceTicks: function (approxTickNum, minInterval, maxInterval) {
	    approxTickNum = approxTickNum || 10;
	    var extent = this._extent;
	    var span = extent[1] - extent[0];
	    var approxInterval = span / approxTickNum;

	    if (minInterval != null && approxInterval < minInterval) {
	      approxInterval = minInterval;
	    }

	    if (maxInterval != null && approxInterval > maxInterval) {
	      approxInterval = maxInterval;
	    }

	    var scaleLevelsLen = scaleLevels.length;
	    var idx = bisect(scaleLevels, approxInterval, 0, scaleLevelsLen);
	    var level = scaleLevels[Math.min(idx, scaleLevelsLen - 1)];
	    var interval = level[1]; // Same with interval scale if span is much larger than 1 year

	    if (level[0] === 'year') {
	      var yearSpan = span / interval; // From "Nice Numbers for Graph Labels" of Graphic Gems
	      // var niceYearSpan = numberUtil.nice(yearSpan, false);

	      var yearStep = numberUtil.nice(yearSpan / approxTickNum, true);
	      interval *= yearStep;
	    }

	    var timezoneOffset = this.getSetting('useUTC') ? 0 : new Date(+extent[0] || +extent[1]).getTimezoneOffset() * 60 * 1000;
	    var niceExtent = [Math.round(mathCeil((extent[0] - timezoneOffset) / interval) * interval + timezoneOffset), Math.round(mathFloor((extent[1] - timezoneOffset) / interval) * interval + timezoneOffset)];
	    scaleHelper.fixExtent(niceExtent, extent);
	    this._stepLvl = level; // Interval will be used in getTicks

	    this._interval = interval;
	    this._niceExtent = niceExtent;
	  },
	  parse: function (val) {
	    // val might be float.
	    return +numberUtil.parseDate(val);
	  }
	});
	zrUtil.each(['contain', 'normalize'], function (methodName) {
	  TimeScale.prototype[methodName] = function (val) {
	    return intervalScaleProto[methodName].call(this, this.parse(val));
	  };
	}); // Steps from d3

	var scaleLevels = [// Format              interval
	['hh:mm:ss', ONE_SECOND], // 1s
	['hh:mm:ss', ONE_SECOND * 5], // 5s
	['hh:mm:ss', ONE_SECOND * 10], // 10s
	['hh:mm:ss', ONE_SECOND * 15], // 15s
	['hh:mm:ss', ONE_SECOND * 30], // 30s
	['hh:mm\nMM-dd', ONE_MINUTE], // 1m
	['hh:mm\nMM-dd', ONE_MINUTE * 5], // 5m
	['hh:mm\nMM-dd', ONE_MINUTE * 10], // 10m
	['hh:mm\nMM-dd', ONE_MINUTE * 15], // 15m
	['hh:mm\nMM-dd', ONE_MINUTE * 30], // 30m
	['hh:mm\nMM-dd', ONE_HOUR], // 1h
	['hh:mm\nMM-dd', ONE_HOUR * 2], // 2h
	['hh:mm\nMM-dd', ONE_HOUR * 6], // 6h
	['hh:mm\nMM-dd', ONE_HOUR * 12], // 12h
	['MM-dd\nyyyy', ONE_DAY], // 1d
	['MM-dd\nyyyy', ONE_DAY * 2], // 2d
	['MM-dd\nyyyy', ONE_DAY * 3], // 3d
	['MM-dd\nyyyy', ONE_DAY * 4], // 4d
	['MM-dd\nyyyy', ONE_DAY * 5], // 5d
	['MM-dd\nyyyy', ONE_DAY * 6], // 6d
	['week', ONE_DAY * 7], // 7d
	['MM-dd\nyyyy', ONE_DAY * 10], // 10d
	['week', ONE_DAY * 14], // 2w
	['week', ONE_DAY * 21], // 3w
	['month', ONE_DAY * 31], // 1M
	['week', ONE_DAY * 42], // 6w
	['month', ONE_DAY * 62], // 2M
	['week', ONE_DAY * 42], // 10w
	['quarter', ONE_DAY * 380 / 4], // 3M
	['month', ONE_DAY * 31 * 4], // 4M
	['month', ONE_DAY * 31 * 5], // 5M
	['half-year', ONE_DAY * 380 / 2], // 6M
	['month', ONE_DAY * 31 * 8], // 8M
	['month', ONE_DAY * 31 * 10], // 10M
	['year', ONE_DAY * 380] // 1Y
	];
	/**
	 * @param {module:echarts/model/Model}
	 * @return {module:echarts/scale/Time}
	 */

	TimeScale.create = function (model) {
	  return new TimeScale({
	    useUTC: model.ecModel.get('useUTC')
	  });
	};

	var _default = TimeScale;
	module.exports = _default;

/***/ }),
/* 311 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(181);

	var Scale = __webpack_require__(305);

	var numberUtil = __webpack_require__(263);

	var IntervalScale = __webpack_require__(307);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/

	/**
	 * Log scale
	 * @module echarts/scale/Log
	 */
	// Use some method of IntervalScale
	var scaleProto = Scale.prototype;
	var intervalScaleProto = IntervalScale.prototype;
	var getPrecisionSafe = numberUtil.getPrecisionSafe;
	var roundingErrorFix = numberUtil.round;
	var mathFloor = Math.floor;
	var mathCeil = Math.ceil;
	var mathPow = Math.pow;
	var mathLog = Math.log;
	var LogScale = Scale.extend({
	  type: 'log',
	  base: 10,
	  $constructor: function () {
	    Scale.apply(this, arguments);
	    this._originalScale = new IntervalScale();
	  },

	  /**
	   * @return {Array.<number>}
	   */
	  getTicks: function () {
	    var originalScale = this._originalScale;
	    var extent = this._extent;
	    var originalExtent = originalScale.getExtent();
	    return zrUtil.map(intervalScaleProto.getTicks.call(this), function (val) {
	      var powVal = numberUtil.round(mathPow(this.base, val)); // Fix #4158

	      powVal = val === extent[0] && originalScale.__fixMin ? fixRoundingError(powVal, originalExtent[0]) : powVal;
	      powVal = val === extent[1] && originalScale.__fixMax ? fixRoundingError(powVal, originalExtent[1]) : powVal;
	      return powVal;
	    }, this);
	  },

	  /**
	   * @param {number} val
	   * @return {string}
	   */
	  getLabel: intervalScaleProto.getLabel,

	  /**
	   * @param  {number} val
	   * @return {number}
	   */
	  scale: function (val) {
	    val = scaleProto.scale.call(this, val);
	    return mathPow(this.base, val);
	  },

	  /**
	   * @param {number} start
	   * @param {number} end
	   */
	  setExtent: function (start, end) {
	    var base = this.base;
	    start = mathLog(start) / mathLog(base);
	    end = mathLog(end) / mathLog(base);
	    intervalScaleProto.setExtent.call(this, start, end);
	  },

	  /**
	   * @return {number} end
	   */
	  getExtent: function () {
	    var base = this.base;
	    var extent = scaleProto.getExtent.call(this);
	    extent[0] = mathPow(base, extent[0]);
	    extent[1] = mathPow(base, extent[1]); // Fix #4158

	    var originalScale = this._originalScale;
	    var originalExtent = originalScale.getExtent();
	    originalScale.__fixMin && (extent[0] = fixRoundingError(extent[0], originalExtent[0]));
	    originalScale.__fixMax && (extent[1] = fixRoundingError(extent[1], originalExtent[1]));
	    return extent;
	  },

	  /**
	   * @param  {Array.<number>} extent
	   */
	  unionExtent: function (extent) {
	    this._originalScale.unionExtent(extent);

	    var base = this.base;
	    extent[0] = mathLog(extent[0]) / mathLog(base);
	    extent[1] = mathLog(extent[1]) / mathLog(base);
	    scaleProto.unionExtent.call(this, extent);
	  },

	  /**
	   * @override
	   */
	  unionExtentFromData: function (data, dim) {
	    // TODO
	    // filter value that <= 0
	    this.unionExtent(data.getApproximateExtent(dim));
	  },

	  /**
	   * Update interval and extent of intervals for nice ticks
	   * @param  {number} [approxTickNum = 10] Given approx tick number
	   */
	  niceTicks: function (approxTickNum) {
	    approxTickNum = approxTickNum || 10;
	    var extent = this._extent;
	    var span = extent[1] - extent[0];

	    if (span === Infinity || span <= 0) {
	      return;
	    }

	    var interval = numberUtil.quantity(span);
	    var err = approxTickNum / span * interval; // Filter ticks to get closer to the desired count.

	    if (err <= 0.5) {
	      interval *= 10;
	    } // Interval should be integer


	    while (!isNaN(interval) && Math.abs(interval) < 1 && Math.abs(interval) > 0) {
	      interval *= 10;
	    }

	    var niceExtent = [numberUtil.round(mathCeil(extent[0] / interval) * interval), numberUtil.round(mathFloor(extent[1] / interval) * interval)];
	    this._interval = interval;
	    this._niceExtent = niceExtent;
	  },

	  /**
	   * Nice extent.
	   * @override
	   */
	  niceExtent: function (opt) {
	    intervalScaleProto.niceExtent.call(this, opt);
	    var originalScale = this._originalScale;
	    originalScale.__fixMin = opt.fixMin;
	    originalScale.__fixMax = opt.fixMax;
	  }
	});
	zrUtil.each(['contain', 'normalize'], function (methodName) {
	  LogScale.prototype[methodName] = function (val) {
	    val = mathLog(val) / mathLog(this.base);
	    return scaleProto[methodName].call(this, val);
	  };
	});

	LogScale.create = function () {
	  return new LogScale();
	};

	function fixRoundingError(val, originalVal) {
	  return roundingErrorFix(val, getPrecisionSafe(originalVal));
	}

	var _default = LogScale;
	module.exports = _default;

/***/ }),
/* 312 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(181);

	var axisHelper = __webpack_require__(303);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var _default = {
	  /**
	   * @param {boolean} origin
	   * @return {number|string} min value or 'dataMin' or null/undefined (means auto) or NaN
	   */
	  getMin: function (origin) {
	    var option = this.option;
	    var min = !origin && option.rangeStart != null ? option.rangeStart : option.min;

	    if (this.axis && min != null && min !== 'dataMin' && typeof min !== 'function' && !zrUtil.eqNaN(min)) {
	      min = this.axis.scale.parse(min);
	    }

	    return min;
	  },

	  /**
	   * @param {boolean} origin
	   * @return {number|string} max value or 'dataMax' or null/undefined (means auto) or NaN
	   */
	  getMax: function (origin) {
	    var option = this.option;
	    var max = !origin && option.rangeEnd != null ? option.rangeEnd : option.max;

	    if (this.axis && max != null && max !== 'dataMax' && typeof max !== 'function' && !zrUtil.eqNaN(max)) {
	      max = this.axis.scale.parse(max);
	    }

	    return max;
	  },

	  /**
	   * @return {boolean}
	   */
	  getNeedCrossZero: function () {
	    var option = this.option;
	    return option.rangeStart != null || option.rangeEnd != null ? false : !option.scale;
	  },

	  /**
	   * Should be implemented by each axis model if necessary.
	   * @return {module:echarts/model/Component} coordinate system model
	   */
	  getCoordSysModel: zrUtil.noop,

	  /**
	   * @param {number} rangeStart Can only be finite number or null/undefined or NaN.
	   * @param {number} rangeEnd Can only be finite number or null/undefined or NaN.
	   */
	  setRange: function (rangeStart, rangeEnd) {
	    this.option.rangeStart = rangeStart;
	    this.option.rangeEnd = rangeEnd;
	  },

	  /**
	   * Reset range
	   */
	  resetRange: function () {
	    // rangeStart and rangeEnd is readonly.
	    this.option.rangeStart = this.option.rangeEnd = null;
	  }
	};
	module.exports = _default;

/***/ }),
/* 313 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(181);

	var graphic = __webpack_require__(226);

	var BoundingRect = __webpack_require__(199);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	// Symbol factory

	/**
	 * Triangle shape
	 * @inner
	 */
	var Triangle = graphic.extendShape({
	  type: 'triangle',
	  shape: {
	    cx: 0,
	    cy: 0,
	    width: 0,
	    height: 0
	  },
	  buildPath: function (path, shape) {
	    var cx = shape.cx;
	    var cy = shape.cy;
	    var width = shape.width / 2;
	    var height = shape.height / 2;
	    path.moveTo(cx, cy - height);
	    path.lineTo(cx + width, cy + height);
	    path.lineTo(cx - width, cy + height);
	    path.closePath();
	  }
	});
	/**
	 * Diamond shape
	 * @inner
	 */

	var Diamond = graphic.extendShape({
	  type: 'diamond',
	  shape: {
	    cx: 0,
	    cy: 0,
	    width: 0,
	    height: 0
	  },
	  buildPath: function (path, shape) {
	    var cx = shape.cx;
	    var cy = shape.cy;
	    var width = shape.width / 2;
	    var height = shape.height / 2;
	    path.moveTo(cx, cy - height);
	    path.lineTo(cx + width, cy);
	    path.lineTo(cx, cy + height);
	    path.lineTo(cx - width, cy);
	    path.closePath();
	  }
	});
	/**
	 * Pin shape
	 * @inner
	 */

	var Pin = graphic.extendShape({
	  type: 'pin',
	  shape: {
	    // x, y on the cusp
	    x: 0,
	    y: 0,
	    width: 0,
	    height: 0
	  },
	  buildPath: function (path, shape) {
	    var x = shape.x;
	    var y = shape.y;
	    var w = shape.width / 5 * 3; // Height must be larger than width

	    var h = Math.max(w, shape.height);
	    var r = w / 2; // Dist on y with tangent point and circle center

	    var dy = r * r / (h - r);
	    var cy = y - h + r + dy;
	    var angle = Math.asin(dy / r); // Dist on x with tangent point and circle center

	    var dx = Math.cos(angle) * r;
	    var tanX = Math.sin(angle);
	    var tanY = Math.cos(angle);
	    var cpLen = r * 0.6;
	    var cpLen2 = r * 0.7;
	    path.moveTo(x - dx, cy + dy);
	    path.arc(x, cy, r, Math.PI - angle, Math.PI * 2 + angle);
	    path.bezierCurveTo(x + dx - tanX * cpLen, cy + dy + tanY * cpLen, x, y - cpLen2, x, y);
	    path.bezierCurveTo(x, y - cpLen2, x - dx + tanX * cpLen, cy + dy + tanY * cpLen, x - dx, cy + dy);
	    path.closePath();
	  }
	});
	/**
	 * Arrow shape
	 * @inner
	 */

	var Arrow = graphic.extendShape({
	  type: 'arrow',
	  shape: {
	    x: 0,
	    y: 0,
	    width: 0,
	    height: 0
	  },
	  buildPath: function (ctx, shape) {
	    var height = shape.height;
	    var width = shape.width;
	    var x = shape.x;
	    var y = shape.y;
	    var dx = width / 3 * 2;
	    ctx.moveTo(x, y);
	    ctx.lineTo(x + dx, y + height);
	    ctx.lineTo(x, y + height / 4 * 3);
	    ctx.lineTo(x - dx, y + height);
	    ctx.lineTo(x, y);
	    ctx.closePath();
	  }
	});
	/**
	 * Map of path contructors
	 * @type {Object.<string, module:zrender/graphic/Path>}
	 */

	var symbolCtors = {
	  line: graphic.Line,
	  rect: graphic.Rect,
	  roundRect: graphic.Rect,
	  square: graphic.Rect,
	  circle: graphic.Circle,
	  diamond: Diamond,
	  pin: Pin,
	  arrow: Arrow,
	  triangle: Triangle
	};
	var symbolShapeMakers = {
	  line: function (x, y, w, h, shape) {
	    // FIXME
	    shape.x1 = x;
	    shape.y1 = y + h / 2;
	    shape.x2 = x + w;
	    shape.y2 = y + h / 2;
	  },
	  rect: function (x, y, w, h, shape) {
	    shape.x = x;
	    shape.y = y;
	    shape.width = w;
	    shape.height = h;
	  },
	  roundRect: function (x, y, w, h, shape) {
	    shape.x = x;
	    shape.y = y;
	    shape.width = w;
	    shape.height = h;
	    shape.r = Math.min(w, h) / 4;
	  },
	  square: function (x, y, w, h, shape) {
	    var size = Math.min(w, h);
	    shape.x = x;
	    shape.y = y;
	    shape.width = size;
	    shape.height = size;
	  },
	  circle: function (x, y, w, h, shape) {
	    // Put circle in the center of square
	    shape.cx = x + w / 2;
	    shape.cy = y + h / 2;
	    shape.r = Math.min(w, h) / 2;
	  },
	  diamond: function (x, y, w, h, shape) {
	    shape.cx = x + w / 2;
	    shape.cy = y + h / 2;
	    shape.width = w;
	    shape.height = h;
	  },
	  pin: function (x, y, w, h, shape) {
	    shape.x = x + w / 2;
	    shape.y = y + h / 2;
	    shape.width = w;
	    shape.height = h;
	  },
	  arrow: function (x, y, w, h, shape) {
	    shape.x = x + w / 2;
	    shape.y = y + h / 2;
	    shape.width = w;
	    shape.height = h;
	  },
	  triangle: function (x, y, w, h, shape) {
	    shape.cx = x + w / 2;
	    shape.cy = y + h / 2;
	    shape.width = w;
	    shape.height = h;
	  }
	};
	var symbolBuildProxies = {};
	zrUtil.each(symbolCtors, function (Ctor, name) {
	  symbolBuildProxies[name] = new Ctor();
	});
	var SymbolClz = graphic.extendShape({
	  type: 'symbol',
	  shape: {
	    symbolType: '',
	    x: 0,
	    y: 0,
	    width: 0,
	    height: 0
	  },
	  beforeBrush: function () {
	    var style = this.style;
	    var shape = this.shape; // FIXME

	    if (shape.symbolType === 'pin' && style.textPosition === 'inside') {
	      style.textPosition = ['50%', '40%'];
	      style.textAlign = 'center';
	      style.textVerticalAlign = 'middle';
	    }
	  },
	  buildPath: function (ctx, shape, inBundle) {
	    var symbolType = shape.symbolType;
	    var proxySymbol = symbolBuildProxies[symbolType];

	    if (shape.symbolType !== 'none') {
	      if (!proxySymbol) {
	        // Default rect
	        symbolType = 'rect';
	        proxySymbol = symbolBuildProxies[symbolType];
	      }

	      symbolShapeMakers[symbolType](shape.x, shape.y, shape.width, shape.height, proxySymbol.shape);
	      proxySymbol.buildPath(ctx, proxySymbol.shape, inBundle);
	    }
	  }
	}); // Provide setColor helper method to avoid determine if set the fill or stroke outside

	function symbolPathSetColor(color, innerColor) {
	  if (this.type !== 'image') {
	    var symbolStyle = this.style;
	    var symbolShape = this.shape;

	    if (symbolShape && symbolShape.symbolType === 'line') {
	      symbolStyle.stroke = color;
	    } else if (this.__isEmptyBrush) {
	      symbolStyle.stroke = color;
	      symbolStyle.fill = innerColor || '#fff';
	    } else {
	      // FIXME 判断图形默认是填充还是描边，使用 onlyStroke ?
	      symbolStyle.fill && (symbolStyle.fill = color);
	      symbolStyle.stroke && (symbolStyle.stroke = color);
	    }

	    this.dirty(false);
	  }
	}
	/**
	 * Create a symbol element with given symbol configuration: shape, x, y, width, height, color
	 * @param {string} symbolType
	 * @param {number} x
	 * @param {number} y
	 * @param {number} w
	 * @param {number} h
	 * @param {string} color
	 * @param {boolean} [keepAspect=false] whether to keep the ratio of w/h,
	 *                            for path and image only.
	 */


	function createSymbol(symbolType, x, y, w, h, color, keepAspect) {
	  // TODO Support image object, DynamicImage.
	  var isEmpty = symbolType.indexOf('empty') === 0;

	  if (isEmpty) {
	    symbolType = symbolType.substr(5, 1).toLowerCase() + symbolType.substr(6);
	  }

	  var symbolPath;

	  if (symbolType.indexOf('image://') === 0) {
	    symbolPath = graphic.makeImage(symbolType.slice(8), new BoundingRect(x, y, w, h), keepAspect ? 'center' : 'cover');
	  } else if (symbolType.indexOf('path://') === 0) {
	    symbolPath = graphic.makePath(symbolType.slice(7), {}, new BoundingRect(x, y, w, h), keepAspect ? 'center' : 'cover');
	  } else {
	    symbolPath = new SymbolClz({
	      shape: {
	        symbolType: symbolType,
	        x: x,
	        y: y,
	        width: w,
	        height: h
	      }
	    });
	  }

	  symbolPath.__isEmptyBrush = isEmpty;
	  symbolPath.setColor = symbolPathSetColor;
	  symbolPath.setColor(color);
	  return symbolPath;
	}

	exports.createSymbol = createSymbol;

/***/ }),
/* 314 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(181);

	var Region = __webpack_require__(315);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/

	/**
	 * Parse and decode geo json
	 * @module echarts/coord/geo/parseGeoJson
	 */
	function decode(json) {
	  if (!json.UTF8Encoding) {
	    return json;
	  }

	  var encodeScale = json.UTF8Scale;

	  if (encodeScale == null) {
	    encodeScale = 1024;
	  }

	  var features = json.features;

	  for (var f = 0; f < features.length; f++) {
	    var feature = features[f];
	    var geometry = feature.geometry;
	    var coordinates = geometry.coordinates;
	    var encodeOffsets = geometry.encodeOffsets;

	    for (var c = 0; c < coordinates.length; c++) {
	      var coordinate = coordinates[c];

	      if (geometry.type === 'Polygon') {
	        coordinates[c] = decodePolygon(coordinate, encodeOffsets[c], encodeScale);
	      } else if (geometry.type === 'MultiPolygon') {
	        for (var c2 = 0; c2 < coordinate.length; c2++) {
	          var polygon = coordinate[c2];
	          coordinate[c2] = decodePolygon(polygon, encodeOffsets[c][c2], encodeScale);
	        }
	      }
	    }
	  } // Has been decoded


	  json.UTF8Encoding = false;
	  return json;
	}

	function decodePolygon(coordinate, encodeOffsets, encodeScale) {
	  var result = [];
	  var prevX = encodeOffsets[0];
	  var prevY = encodeOffsets[1];

	  for (var i = 0; i < coordinate.length; i += 2) {
	    var x = coordinate.charCodeAt(i) - 64;
	    var y = coordinate.charCodeAt(i + 1) - 64; // ZigZag decoding

	    x = x >> 1 ^ -(x & 1);
	    y = y >> 1 ^ -(y & 1); // Delta deocding

	    x += prevX;
	    y += prevY;
	    prevX = x;
	    prevY = y; // Dequantize

	    result.push([x / encodeScale, y / encodeScale]);
	  }

	  return result;
	}
	/**
	 * @alias module:echarts/coord/geo/parseGeoJson
	 * @param {Object} geoJson
	 * @return {module:zrender/container/Group}
	 */


	function _default(geoJson) {
	  decode(geoJson);
	  return zrUtil.map(zrUtil.filter(geoJson.features, function (featureObj) {
	    // Output of mapshaper may have geometry null
	    return featureObj.geometry && featureObj.properties && featureObj.geometry.coordinates.length > 0;
	  }), function (featureObj) {
	    var properties = featureObj.properties;
	    var geo = featureObj.geometry;
	    var coordinates = geo.coordinates;
	    var geometries = [];

	    if (geo.type === 'Polygon') {
	      geometries.push({
	        type: 'polygon',
	        // According to the GeoJSON specification.
	        // First must be exterior, and the rest are all interior(holes).
	        exterior: coordinates[0],
	        interiors: coordinates.slice(1)
	      });
	    }

	    if (geo.type === 'MultiPolygon') {
	      zrUtil.each(coordinates, function (item) {
	        if (item[0]) {
	          geometries.push({
	            type: 'polygon',
	            exterior: item[0],
	            interiors: item.slice(1)
	          });
	        }
	      });
	    }

	    var region = new Region(properties.name, geometries, properties.cp);
	    region.properties = properties;
	    return region;
	  });
	}

	module.exports = _default;

/***/ }),
/* 315 */
/***/ (function(module, exports, __webpack_require__) {

	var BoundingRect = __webpack_require__(199);

	var bbox = __webpack_require__(231);

	var vec2 = __webpack_require__(183);

	var polygonContain = __webpack_require__(316);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/

	/**
	 * @module echarts/coord/geo/Region
	 */

	/**
	 * @param {string} name
	 * @param {Array} geometries
	 * @param {Array.<number>} cp
	 */
	function Region(name, geometries, cp) {
	  /**
	   * @type {string}
	   * @readOnly
	   */
	  this.name = name;
	  /**
	   * @type {Array.<Array>}
	   * @readOnly
	   */

	  this.geometries = geometries;

	  if (!cp) {
	    var rect = this.getBoundingRect();
	    cp = [rect.x + rect.width / 2, rect.y + rect.height / 2];
	  } else {
	    cp = [cp[0], cp[1]];
	  }
	  /**
	   * @type {Array.<number>}
	   */


	  this.center = cp;
	}

	Region.prototype = {
	  constructor: Region,
	  properties: null,

	  /**
	   * @return {module:zrender/core/BoundingRect}
	   */
	  getBoundingRect: function () {
	    var rect = this._rect;

	    if (rect) {
	      return rect;
	    }

	    var MAX_NUMBER = Number.MAX_VALUE;
	    var min = [MAX_NUMBER, MAX_NUMBER];
	    var max = [-MAX_NUMBER, -MAX_NUMBER];
	    var min2 = [];
	    var max2 = [];
	    var geometries = this.geometries;

	    for (var i = 0; i < geometries.length; i++) {
	      // Only support polygon
	      if (geometries[i].type !== 'polygon') {
	        continue;
	      } // Doesn't consider hole


	      var exterior = geometries[i].exterior;
	      bbox.fromPoints(exterior, min2, max2);
	      vec2.min(min, min, min2);
	      vec2.max(max, max, max2);
	    } // No data


	    if (i === 0) {
	      min[0] = min[1] = max[0] = max[1] = 0;
	    }

	    return this._rect = new BoundingRect(min[0], min[1], max[0] - min[0], max[1] - min[1]);
	  },

	  /**
	   * @param {<Array.<number>} coord
	   * @return {boolean}
	   */
	  contain: function (coord) {
	    var rect = this.getBoundingRect();
	    var geometries = this.geometries;

	    if (!rect.contain(coord[0], coord[1])) {
	      return false;
	    }

	    loopGeo: for (var i = 0, len = geometries.length; i < len; i++) {
	      // Only support polygon.
	      if (geometries[i].type !== 'polygon') {
	        continue;
	      }

	      var exterior = geometries[i].exterior;
	      var interiors = geometries[i].interiors;

	      if (polygonContain.contain(exterior, coord[0], coord[1])) {
	        // Not in the region if point is in the hole.
	        for (var k = 0; k < (interiors ? interiors.length : 0); k++) {
	          if (polygonContain.contain(interiors[k])) {
	            continue loopGeo;
	          }
	        }

	        return true;
	      }
	    }

	    return false;
	  },
	  transformTo: function (x, y, width, height) {
	    var rect = this.getBoundingRect();
	    var aspect = rect.width / rect.height;

	    if (!width) {
	      width = aspect * height;
	    } else if (!height) {
	      height = width / aspect;
	    }

	    var target = new BoundingRect(x, y, width, height);
	    var transform = rect.calculateTransform(target);
	    var geometries = this.geometries;

	    for (var i = 0; i < geometries.length; i++) {
	      // Only support polygon.
	      if (geometries[i].type !== 'polygon') {
	        continue;
	      }

	      var exterior = geometries[i].exterior;
	      var interiors = geometries[i].interiors;

	      for (var p = 0; p < exterior.length; p++) {
	        vec2.applyTransform(exterior[p], exterior[p], transform);
	      }

	      for (var h = 0; h < (interiors ? interiors.length : 0); h++) {
	        for (var p = 0; p < interiors[h].length; p++) {
	          vec2.applyTransform(interiors[h][p], interiors[h][p], transform);
	        }
	      }
	    }

	    rect = this._rect;
	    rect.copy(target); // Update center

	    this.center = [rect.x + rect.width / 2, rect.y + rect.height / 2];
	  }
	};
	var _default = Region;
	module.exports = _default;

/***/ }),
/* 316 */
/***/ (function(module, exports, __webpack_require__) {

	var windingLine = __webpack_require__(238);

	var EPSILON = 1e-8;

	function isAroundEqual(a, b) {
	  return Math.abs(a - b) < EPSILON;
	}

	function contain(points, x, y) {
	  var w = 0;
	  var p = points[0];

	  if (!p) {
	    return false;
	  }

	  for (var i = 1; i < points.length; i++) {
	    var p2 = points[i];
	    w += windingLine(p[0], p[1], p2[0], p2[1], x, y);
	    p = p2;
	  } // Close polygon


	  var p0 = points[0];

	  if (!isAroundEqual(p[0], p0[0]) || !isAroundEqual(p[1], p0[1])) {
	    w += windingLine(p[0], p[1], p0[0], p0[1], x, y);
	  }

	  return w !== 0;
	}

	exports.contain = contain;

/***/ }),
/* 317 */
/***/ (function(module, exports, __webpack_require__) {

	var _util = __webpack_require__(181);

	var each = _util.each;
	var map = _util.map;

	var _number = __webpack_require__(263);

	var linearMap = _number.linearMap;
	var getPixelPrecision = _number.getPixelPrecision;

	var _axisTickLabelBuilder = __webpack_require__(318);

	var createAxisTicks = _axisTickLabelBuilder.createAxisTicks;
	var createAxisLabels = _axisTickLabelBuilder.createAxisLabels;
	var calculateCategoryInterval = _axisTickLabelBuilder.calculateCategoryInterval;

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var NORMALIZED_EXTENT = [0, 1];
	/**
	 * Base class of Axis.
	 * @constructor
	 */

	var Axis = function (dim, scale, extent) {
	  /**
	   * Axis dimension. Such as 'x', 'y', 'z', 'angle', 'radius'.
	   * @type {string}
	   */
	  this.dim = dim;
	  /**
	   * Axis scale
	   * @type {module:echarts/coord/scale/*}
	   */

	  this.scale = scale;
	  /**
	   * @type {Array.<number>}
	   * @private
	   */

	  this._extent = extent || [0, 0];
	  /**
	   * @type {boolean}
	   */

	  this.inverse = false;
	  /**
	   * Usually true when axis has a ordinal scale
	   * @type {boolean}
	   */

	  this.onBand = false;
	};

	Axis.prototype = {
	  constructor: Axis,

	  /**
	   * If axis extent contain given coord
	   * @param {number} coord
	   * @return {boolean}
	   */
	  contain: function (coord) {
	    var extent = this._extent;
	    var min = Math.min(extent[0], extent[1]);
	    var max = Math.max(extent[0], extent[1]);
	    return coord >= min && coord <= max;
	  },

	  /**
	   * If axis extent contain given data
	   * @param {number} data
	   * @return {boolean}
	   */
	  containData: function (data) {
	    return this.contain(this.dataToCoord(data));
	  },

	  /**
	   * Get coord extent.
	   * @return {Array.<number>}
	   */
	  getExtent: function () {
	    return this._extent.slice();
	  },

	  /**
	   * Get precision used for formatting
	   * @param {Array.<number>} [dataExtent]
	   * @return {number}
	   */
	  getPixelPrecision: function (dataExtent) {
	    return getPixelPrecision(dataExtent || this.scale.getExtent(), this._extent);
	  },

	  /**
	   * Set coord extent
	   * @param {number} start
	   * @param {number} end
	   */
	  setExtent: function (start, end) {
	    var extent = this._extent;
	    extent[0] = start;
	    extent[1] = end;
	  },

	  /**
	   * Convert data to coord. Data is the rank if it has an ordinal scale
	   * @param {number} data
	   * @param  {boolean} clamp
	   * @return {number}
	   */
	  dataToCoord: function (data, clamp) {
	    var extent = this._extent;
	    var scale = this.scale;
	    data = scale.normalize(data);

	    if (this.onBand && scale.type === 'ordinal') {
	      extent = extent.slice();
	      fixExtentWithBands(extent, scale.count());
	    }

	    return linearMap(data, NORMALIZED_EXTENT, extent, clamp);
	  },

	  /**
	   * Convert coord to data. Data is the rank if it has an ordinal scale
	   * @param {number} coord
	   * @param  {boolean} clamp
	   * @return {number}
	   */
	  coordToData: function (coord, clamp) {
	    var extent = this._extent;
	    var scale = this.scale;

	    if (this.onBand && scale.type === 'ordinal') {
	      extent = extent.slice();
	      fixExtentWithBands(extent, scale.count());
	    }

	    var t = linearMap(coord, extent, NORMALIZED_EXTENT, clamp);
	    return this.scale.scale(t);
	  },

	  /**
	   * Convert pixel point to data in axis
	   * @param {Array.<number>} point
	   * @param  {boolean} clamp
	   * @return {number} data
	   */
	  pointToData: function (point, clamp) {// Should be implemented in derived class if necessary.
	  },

	  /**
	   * Different from `zrUtil.map(axis.getTicks(), axis.dataToCoord, axis)`,
	   * `axis.getTicksCoords` considers `onBand`, which is used by
	   * `boundaryGap:true` of category axis and splitLine and splitArea.
	   * @param {Object} [opt]
	   * @param {number} [opt.tickModel=axis.model.getModel('axisTick')]
	   * @param {boolean} [opt.clamp] If `true`, the first and the last
	   *        tick must be at the axis end points. Otherwise, clip ticks
	   *        that outside the axis extent.
	   * @return {Array.<Object>} [{
	   *     coord: ...,
	   *     tickValue: ...
	   * }, ...]
	   */
	  getTicksCoords: function (opt) {
	    opt = opt || {};
	    var tickModel = opt.tickModel || this.getTickModel();
	    var result = createAxisTicks(this, tickModel);
	    var ticks = result.ticks;
	    var ticksCoords = map(ticks, function (tickValue) {
	      return {
	        coord: this.dataToCoord(tickValue),
	        tickValue: tickValue
	      };
	    }, this);
	    var alignWithLabel = tickModel.get('alignWithLabel');
	    fixOnBandTicksCoords(this, ticksCoords, result.tickCategoryInterval, alignWithLabel, opt.clamp);
	    return ticksCoords;
	  },

	  /**
	   * @return {Array.<Object>} [{
	   *     formattedLabel: string,
	   *     rawLabel: axis.scale.getLabel(tickValue)
	   *     tickValue: number
	   * }, ...]
	   */
	  getViewLabels: function () {
	    return createAxisLabels(this).labels;
	  },

	  /**
	   * @return {module:echarts/coord/model/Model}
	   */
	  getLabelModel: function () {
	    return this.model.getModel('axisLabel');
	  },

	  /**
	   * Notice here we only get the default tick model. For splitLine
	   * or splitArea, we should pass the splitLineModel or splitAreaModel
	   * manually when calling `getTicksCoords`.
	   * In GL, this method may be overrided to:
	   * `axisModel.getModel('axisTick', grid3DModel.getModel('axisTick'));`
	   * @return {module:echarts/coord/model/Model}
	   */
	  getTickModel: function () {
	    return this.model.getModel('axisTick');
	  },

	  /**
	   * Get width of band
	   * @return {number}
	   */
	  getBandWidth: function () {
	    var axisExtent = this._extent;
	    var dataExtent = this.scale.getExtent();
	    var len = dataExtent[1] - dataExtent[0] + (this.onBand ? 1 : 0); // Fix #2728, avoid NaN when only one data.

	    len === 0 && (len = 1);
	    var size = Math.abs(axisExtent[1] - axisExtent[0]);
	    return Math.abs(size) / len;
	  },

	  /**
	   * @abstract
	   * @return {boolean} Is horizontal
	   */
	  isHorizontal: null,

	  /**
	   * @abstract
	   * @return {number} Get axis rotate, by degree.
	   */
	  getRotate: null,

	  /**
	   * Only be called in category axis.
	   * Can be overrided, consider other axes like in 3D.
	   * @return {number} Auto interval for cateogry axis tick and label
	   */
	  calculateCategoryInterval: function () {
	    return calculateCategoryInterval(this);
	  }
	};

	function fixExtentWithBands(extent, nTick) {
	  var size = extent[1] - extent[0];
	  var len = nTick;
	  var margin = size / len / 2;
	  extent[0] += margin;
	  extent[1] -= margin;
	} // If axis has labels [1, 2, 3, 4]. Bands on the axis are
	// |---1---|---2---|---3---|---4---|.
	// So the displayed ticks and splitLine/splitArea should between
	// each data item, otherwise cause misleading (e.g., split tow bars
	// of a single data item when there are two bar series).
	// Also consider if tickCategoryInterval > 0 and onBand, ticks and
	// splitLine/spliteArea should layout appropriately corresponding
	// to displayed labels. (So we should not use `getBandWidth` in this
	// case).


	function fixOnBandTicksCoords(axis, ticksCoords, tickCategoryInterval, alignWithLabel, clamp) {
	  var ticksLen = ticksCoords.length;

	  if (!axis.onBand || alignWithLabel || !ticksLen) {
	    return;
	  }

	  var axisExtent = axis.getExtent();
	  var last;

	  if (ticksLen === 1) {
	    ticksCoords[0].coord = axisExtent[0];
	    last = ticksCoords[1] = {
	      coord: axisExtent[0]
	    };
	  } else {
	    var shift = ticksCoords[1].coord - ticksCoords[0].coord;
	    each(ticksCoords, function (ticksItem) {
	      ticksItem.coord -= shift / 2;
	      var tickCategoryInterval = tickCategoryInterval || 0; // Avoid split a single data item when odd interval.

	      if (tickCategoryInterval % 2 > 0) {
	        ticksItem.coord -= shift / ((tickCategoryInterval + 1) * 2);
	      }
	    });
	    last = {
	      coord: ticksCoords[ticksLen - 1].coord + shift
	    };
	    ticksCoords.push(last);
	  }

	  var inverse = axisExtent[0] > axisExtent[1];

	  if (littleThan(ticksCoords[0].coord, axisExtent[0])) {
	    clamp ? ticksCoords[0].coord = axisExtent[0] : ticksCoords.shift();
	  }

	  if (clamp && littleThan(axisExtent[0], ticksCoords[0].coord)) {
	    ticksCoords.unshift({
	      coord: axisExtent[0]
	    });
	  }

	  if (littleThan(axisExtent[1], last.coord)) {
	    clamp ? last.coord = axisExtent[1] : ticksCoords.pop();
	  }

	  if (clamp && littleThan(last.coord, axisExtent[1])) {
	    ticksCoords.push({
	      coord: axisExtent[1]
	    });
	  }

	  function littleThan(a, b) {
	    return inverse ? a > b : a < b;
	  }
	}

	var _default = Axis;
	module.exports = _default;

/***/ }),
/* 318 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(181);

	var textContain = __webpack_require__(211);

	var _model = __webpack_require__(219);

	var makeInner = _model.makeInner;

	var _axisHelper = __webpack_require__(303);

	var makeLabelFormatter = _axisHelper.makeLabelFormatter;

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var inner = makeInner();
	/**
	 * @param {module:echats/coord/Axis} axis
	 * @return {Object} {
	 *     labels: [{
	 *         formattedLabel: string,
	 *         rawLabel: string,
	 *         tickValue: number
	 *     }, ...],
	 *     labelCategoryInterval: number
	 * }
	 */

	function createAxisLabels(axis) {
	  // Only ordinal scale support tick interval
	  return axis.type === 'category' ? makeCategoryLabels(axis) : makeRealNumberLabels(axis);
	}
	/**
	 * @param {module:echats/coord/Axis} axis
	 * @param {module:echarts/model/Model} tickModel For example, can be axisTick, splitLine, splitArea.
	 * @return {Object} {
	 *     ticks: Array.<number>
	 *     tickCategoryInterval: number
	 * }
	 */


	function createAxisTicks(axis, tickModel) {
	  // Only ordinal scale support tick interval
	  return axis.type === 'category' ? makeCategoryTicks(axis, tickModel) : {
	    ticks: axis.scale.getTicks()
	  };
	}

	function makeCategoryLabels(axis) {
	  var labelModel = axis.getLabelModel();
	  var result = makeCategoryLabelsActually(axis, labelModel);
	  return !labelModel.get('show') || axis.scale.isBlank() ? {
	    labels: [],
	    labelCategoryInterval: result.labelCategoryInterval
	  } : result;
	}

	function makeCategoryLabelsActually(axis, labelModel) {
	  var labelsCache = getListCache(axis, 'labels');
	  var optionLabelInterval = getOptionCategoryInterval(labelModel);
	  var result = listCacheGet(labelsCache, optionLabelInterval);

	  if (result) {
	    return result;
	  }

	  var labels;
	  var numericLabelInterval;

	  if (zrUtil.isFunction(optionLabelInterval)) {
	    labels = makeLabelsByCustomizedCategoryInterval(axis, optionLabelInterval);
	  } else {
	    numericLabelInterval = optionLabelInterval === 'auto' ? makeAutoCategoryInterval(axis) : optionLabelInterval;
	    labels = makeLabelsByNumericCategoryInterval(axis, numericLabelInterval);
	  } // Cache to avoid calling interval function repeatly.


	  return listCacheSet(labelsCache, optionLabelInterval, {
	    labels: labels,
	    labelCategoryInterval: numericLabelInterval
	  });
	}

	function makeCategoryTicks(axis, tickModel) {
	  var ticksCache = getListCache(axis, 'ticks');
	  var optionTickInterval = getOptionCategoryInterval(tickModel);
	  var result = listCacheGet(ticksCache, optionTickInterval);

	  if (result) {
	    return result;
	  }

	  var ticks;
	  var tickCategoryInterval; // Optimize for the case that large category data and no label displayed,
	  // we should not return all ticks.

	  if (!tickModel.get('show') || axis.scale.isBlank()) {
	    ticks = [];
	  }

	  if (zrUtil.isFunction(optionTickInterval)) {
	    ticks = makeLabelsByCustomizedCategoryInterval(axis, optionTickInterval, true);
	  } // Always use label interval by default despite label show. Consider this
	  // scenario, Use multiple grid with the xAxis sync, and only one xAxis shows
	  // labels. `splitLine` and `axisTick` should be consistent in this case.
	  else if (optionTickInterval === 'auto') {
	      var labelsResult = makeCategoryLabelsActually(axis, axis.getLabelModel());
	      tickCategoryInterval = labelsResult.labelCategoryInterval;
	      ticks = zrUtil.map(labelsResult.labels, function (labelItem) {
	        return labelItem.tickValue;
	      });
	    } else {
	      tickCategoryInterval = optionTickInterval;
	      ticks = makeLabelsByNumericCategoryInterval(axis, tickCategoryInterval, true);
	    } // Cache to avoid calling interval function repeatly.


	  return listCacheSet(ticksCache, optionTickInterval, {
	    ticks: ticks,
	    tickCategoryInterval: tickCategoryInterval
	  });
	}

	function makeRealNumberLabels(axis) {
	  var ticks = axis.scale.getTicks();
	  var labelFormatter = makeLabelFormatter(axis);
	  return {
	    labels: zrUtil.map(ticks, function (tickValue, idx) {
	      return {
	        formattedLabel: labelFormatter(tickValue, idx),
	        rawLabel: axis.scale.getLabel(tickValue),
	        tickValue: tickValue
	      };
	    })
	  };
	} // Large category data calculation is performence sensitive, and ticks and label
	// probably be fetched by multiple times. So we cache the result.
	// axis is created each time during a ec process, so we do not need to clear cache.


	function getListCache(axis, prop) {
	  // Because key can be funciton, and cache size always be small, we use array cache.
	  return inner(axis)[prop] || (inner(axis)[prop] = []);
	}

	function listCacheGet(cache, key) {
	  for (var i = 0; i < cache.length; i++) {
	    if (cache[i].key === key) {
	      return cache[i].value;
	    }
	  }
	}

	function listCacheSet(cache, key, value) {
	  cache.push({
	    key: key,
	    value: value
	  });
	  return value;
	}

	function makeAutoCategoryInterval(axis) {
	  var result = inner(axis).autoInterval;
	  return result != null ? result : inner(axis).autoInterval = axis.calculateCategoryInterval();
	}
	/**
	 * Calculate interval for category axis ticks and labels.
	 * To get precise result, at least one of `getRotate` and `isHorizontal`
	 * should be implemented in axis.
	 */


	function calculateCategoryInterval(axis) {
	  var params = fetchAutoCategoryIntervalCalculationParams(axis);
	  var labelFormatter = makeLabelFormatter(axis);
	  var rotation = (params.axisRotate - params.labelRotate) / 180 * Math.PI;
	  var ordinalScale = axis.scale;
	  var ordinalExtent = ordinalScale.getExtent(); // Providing this method is for optimization:
	  // avoid generating a long array by `getTicks`
	  // in large category data case.

	  var tickCount = ordinalScale.count();

	  if (ordinalExtent[1] - ordinalExtent[0] < 1) {
	    return 0;
	  }

	  var step = 1; // Simple optimization. Empirical value: tick count should less than 40.

	  if (tickCount > 40) {
	    step = Math.max(1, Math.floor(tickCount / 40));
	  }

	  var tickValue = ordinalExtent[0];
	  var unitSpan = axis.dataToCoord(tickValue + 1) - axis.dataToCoord(tickValue);
	  var unitW = Math.abs(unitSpan * Math.cos(rotation));
	  var unitH = Math.abs(unitSpan * Math.sin(rotation));
	  var maxW = 0;
	  var maxH = 0; // Caution: Performance sensitive for large category data.
	  // Consider dataZoom, we should make appropriate step to avoid O(n) loop.

	  for (; tickValue <= ordinalExtent[1]; tickValue += step) {
	    var width = 0;
	    var height = 0; // Polar is also calculated in assumptive linear layout here.
	    // Not precise, do not consider align and vertical align
	    // and each distance from axis line yet.

	    var rect = textContain.getBoundingRect(labelFormatter(tickValue), params.font, 'center', 'top'); // Magic number

	    width = rect.width * 1.3;
	    height = rect.height * 1.3; // Min size, void long loop.

	    maxW = Math.max(maxW, width, 7);
	    maxH = Math.max(maxH, height, 7);
	  }

	  var dw = maxW / unitW;
	  var dh = maxH / unitH; // 0/0 is NaN, 1/0 is Infinity.

	  isNaN(dw) && (dw = Infinity);
	  isNaN(dh) && (dh = Infinity);
	  var interval = Math.max(0, Math.floor(Math.min(dw, dh)));
	  var cache = inner(axis.model);
	  var lastAutoInterval = cache.lastAutoInterval;
	  var lastTickCount = cache.lastTickCount; // Use cache to keep interval stable while moving zoom window,
	  // otherwise the calculated interval might jitter when the zoom
	  // window size is close to the interval-changing size.

	  if (lastAutoInterval != null && lastTickCount != null && Math.abs(lastAutoInterval - interval) <= 1 && Math.abs(lastTickCount - tickCount) <= 1 // Always choose the bigger one, otherwise the critical
	  // point is not the same when zooming in or zooming out.
	  && lastAutoInterval > interval) {
	    interval = lastAutoInterval;
	  } // Only update cache if cache not used, otherwise the
	  // changing of interval is too insensitive.
	  else {
	      cache.lastTickCount = tickCount;
	      cache.lastAutoInterval = interval;
	    }

	  return interval;
	}

	function fetchAutoCategoryIntervalCalculationParams(axis) {
	  var labelModel = axis.getLabelModel();
	  return {
	    axisRotate: axis.getRotate ? axis.getRotate() : axis.isHorizontal && !axis.isHorizontal() ? 90 : 0,
	    labelRotate: labelModel.get('rotate') || 0,
	    font: labelModel.getFont()
	  };
	}

	function makeLabelsByNumericCategoryInterval(axis, categoryInterval, onlyTick) {
	  var labelFormatter = makeLabelFormatter(axis);
	  var ordinalScale = axis.scale;
	  var ordinalExtent = ordinalScale.getExtent();
	  var labelModel = axis.getLabelModel();
	  var result = []; // TODO: axisType: ordinalTime, pick the tick from each month/day/year/...

	  var step = Math.max((categoryInterval || 0) + 1, 1);
	  var startTick = ordinalExtent[0];
	  var tickCount = ordinalScale.count(); // Calculate start tick based on zero if possible to keep label consistent
	  // while zooming and moving while interval > 0. Otherwise the selection
	  // of displayable ticks and symbols probably keep changing.
	  // 3 is empirical value.

	  if (startTick !== 0 && step > 1 && tickCount / step > 2) {
	    startTick = Math.round(Math.ceil(startTick / step) * step);
	  } // (1) Only add min max label here but leave overlap checking
	  // to render stage, which also ensure the returned list
	  // suitable for splitLine and splitArea rendering.
	  // (2) Scales except category always contain min max label so
	  // do not need to perform this process.


	  var showMinMax = {
	    min: labelModel.get('showMinLabel'),
	    max: labelModel.get('showMaxLabel')
	  };

	  if (showMinMax.min && startTick !== ordinalExtent[0]) {
	    addItem(ordinalExtent[0]);
	  } // Optimize: avoid generating large array by `ordinalScale.getTicks()`.


	  var tickValue = startTick;

	  for (; tickValue <= ordinalExtent[1]; tickValue += step) {
	    addItem(tickValue);
	  }

	  if (showMinMax.max && tickValue !== ordinalExtent[1]) {
	    addItem(ordinalExtent[1]);
	  }

	  function addItem(tVal) {
	    result.push(onlyTick ? tVal : {
	      formattedLabel: labelFormatter(tVal),
	      rawLabel: ordinalScale.getLabel(tVal),
	      tickValue: tVal
	    });
	  }

	  return result;
	} // When interval is function, the result `false` means ignore the tick.
	// It is time consuming for large category data.


	function makeLabelsByCustomizedCategoryInterval(axis, categoryInterval, onlyTick) {
	  var ordinalScale = axis.scale;
	  var labelFormatter = makeLabelFormatter(axis);
	  var result = [];
	  zrUtil.each(ordinalScale.getTicks(), function (tickValue) {
	    var rawLabel = ordinalScale.getLabel(tickValue);

	    if (categoryInterval(tickValue, rawLabel)) {
	      result.push(onlyTick ? tickValue : {
	        formattedLabel: labelFormatter(tickValue),
	        rawLabel: rawLabel,
	        tickValue: tickValue
	      });
	    }
	  });
	  return result;
	} // Can be null|'auto'|number|function


	function getOptionCategoryInterval(model) {
	  var interval = model.get('interval');
	  return interval == null ? 'auto' : interval;
	}

	exports.createAxisLabels = createAxisLabels;
	exports.createAxisTicks = createAxisTicks;
	exports.calculateCategoryInterval = calculateCategoryInterval;

/***/ }),
/* 319 */
/***/ (function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(176);

	var zrUtil = __webpack_require__(181);

	__webpack_require__(320);

	__webpack_require__(323);

	var createDataSelectAction = __webpack_require__(324);

	var dataColor = __webpack_require__(325);

	var pieLayout = __webpack_require__(326);

	var dataFilter = __webpack_require__(328);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	createDataSelectAction('pie', [{
	  type: 'pieToggleSelect',
	  event: 'pieselectchanged',
	  method: 'toggleSelected'
	}, {
	  type: 'pieSelect',
	  event: 'pieselected',
	  method: 'select'
	}, {
	  type: 'pieUnSelect',
	  event: 'pieunselected',
	  method: 'unSelect'
	}]);
	echarts.registerVisual(dataColor('pie'));
	echarts.registerLayout(zrUtil.curry(pieLayout, 'pie'));
	echarts.registerProcessor(dataFilter('pie'));

/***/ }),
/* 320 */
/***/ (function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(176);

	var createListSimply = __webpack_require__(321);

	var zrUtil = __webpack_require__(181);

	var modelUtil = __webpack_require__(219);

	var _number = __webpack_require__(263);

	var getPercentWithPrecision = _number.getPercentWithPrecision;

	var dataSelectableMixin = __webpack_require__(322);

	var _dataProvider = __webpack_require__(280);

	var retrieveRawAttr = _dataProvider.retrieveRawAttr;

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var PieSeries = echarts.extendSeriesModel({
	  type: 'series.pie',
	  // Overwrite
	  init: function (option) {
	    PieSeries.superApply(this, 'init', arguments); // Enable legend selection for each data item
	    // Use a function instead of direct access because data reference may changed

	    this.legendDataProvider = function () {
	      return this.getRawData();
	    };

	    this.updateSelectedMap(this._createSelectableList());

	    this._defaultLabelLine(option);
	  },
	  // Overwrite
	  mergeOption: function (newOption) {
	    PieSeries.superCall(this, 'mergeOption', newOption);
	    this.updateSelectedMap(this._createSelectableList());
	  },
	  getInitialData: function (option, ecModel) {
	    return createListSimply(this, ['value']);
	  },
	  _createSelectableList: function () {
	    var data = this.getRawData();
	    var valueDim = data.mapDimension('value');
	    var targetList = [];

	    for (var i = 0, len = data.count(); i < len; i++) {
	      targetList.push({
	        name: data.getName(i),
	        value: data.get(valueDim, i),
	        selected: retrieveRawAttr(data, i, 'selected')
	      });
	    }

	    return targetList;
	  },
	  // Overwrite
	  getDataParams: function (dataIndex) {
	    var data = this.getData();
	    var params = PieSeries.superCall(this, 'getDataParams', dataIndex); // FIXME toFixed?

	    var valueList = [];
	    data.each(data.mapDimension('value'), function (value) {
	      valueList.push(value);
	    });
	    params.percent = getPercentWithPrecision(valueList, dataIndex, data.hostModel.get('percentPrecision'));
	    params.$vars.push('percent');
	    return params;
	  },
	  _defaultLabelLine: function (option) {
	    // Extend labelLine emphasis
	    modelUtil.defaultEmphasis(option, 'labelLine', ['show']);
	    var labelLineNormalOpt = option.labelLine;
	    var labelLineEmphasisOpt = option.emphasis.labelLine; // Not show label line if `label.normal.show = false`

	    labelLineNormalOpt.show = labelLineNormalOpt.show && option.label.show;
	    labelLineEmphasisOpt.show = labelLineEmphasisOpt.show && option.emphasis.label.show;
	  },
	  defaultOption: {
	    zlevel: 0,
	    z: 2,
	    legendHoverLink: true,
	    hoverAnimation: true,
	    // 默认全局居中
	    center: ['50%', '50%'],
	    radius: [0, '75%'],
	    // 默认顺时针
	    clockwise: true,
	    startAngle: 90,
	    // 最小角度改为0
	    minAngle: 0,
	    // 选中时扇区偏移量
	    selectedOffset: 10,
	    // 高亮扇区偏移量
	    hoverOffset: 10,
	    // If use strategy to avoid label overlapping
	    avoidLabelOverlap: true,
	    // 选择模式，默认关闭，可选single，multiple
	    // selectedMode: false,
	    // 南丁格尔玫瑰图模式，'radius'（半径） | 'area'（面积）
	    // roseType: null,
	    percentPrecision: 2,
	    // If still show when all data zero.
	    stillShowZeroSum: true,
	    // cursor: null,
	    label: {
	      // If rotate around circle
	      rotate: false,
	      show: true,
	      // 'outer', 'inside', 'center'
	      position: 'outer' // formatter: 标签文本格式器，同Tooltip.formatter，不支持异步回调
	      // 默认使用全局文本样式，详见TEXTSTYLE
	      // distance: 当position为inner时有效，为label位置到圆心的距离与圆半径(环状图为内外半径和)的比例系数

	    },
	    // Enabled when label.normal.position is 'outer'
	    labelLine: {
	      show: true,
	      // 引导线两段中的第一段长度
	      length: 15,
	      // 引导线两段中的第二段长度
	      length2: 15,
	      smooth: false,
	      lineStyle: {
	        // color: 各异,
	        width: 1,
	        type: 'solid'
	      }
	    },
	    itemStyle: {
	      borderWidth: 1
	    },
	    // Animation type canbe expansion, scale
	    animationType: 'expansion',
	    animationEasing: 'cubicOut'
	  }
	});
	zrUtil.mixin(PieSeries, dataSelectableMixin);
	var _default = PieSeries;
	module.exports = _default;

/***/ }),
/* 321 */
/***/ (function(module, exports, __webpack_require__) {

	var createDimensions = __webpack_require__(300);

	var List = __webpack_require__(297);

	var _util = __webpack_require__(181);

	var extend = _util.extend;
	var isArray = _util.isArray;

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/

	/**
	 * [Usage]:
	 * (1)
	 * createListSimply(seriesModel, ['value']);
	 * (2)
	 * createListSimply(seriesModel, {
	 *     coordDimensions: ['value'],
	 *     dimensionsCount: 5
	 * });
	 *
	 * @param {module:echarts/model/Series} seriesModel
	 * @param {Object|Array.<string|Object>} opt opt or coordDimensions
	 *        The options in opt, see `echarts/data/helper/createDimensions`
	 * @param {Array.<string>} [nameList]
	 * @return {module:echarts/data/List}
	 */
	function _default(seriesModel, opt, nameList) {
	  opt = isArray(opt) && {
	    coordDimensions: opt
	  } || extend({}, opt);
	  var source = seriesModel.getSource();
	  var dimensionsInfo = createDimensions(source, opt);
	  var list = new List(dimensionsInfo, seriesModel);
	  list.initData(source, nameList);
	  return list;
	}

	module.exports = _default;

/***/ }),
/* 322 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(181);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/

	/**
	 * Data selectable mixin for chart series.
	 * To eanble data select, option of series must have `selectedMode`.
	 * And each data item will use `selected` to toggle itself selected status
	 */
	var _default = {
	  /**
	   * @param {Array.<Object>} targetList [{name, value, selected}, ...]
	   *        If targetList is an array, it should like [{name: ..., value: ...}, ...].
	   *        If targetList is a "List", it must have coordDim: 'value' dimension and name.
	   */
	  updateSelectedMap: function (targetList) {
	    this._targetList = zrUtil.isArray(targetList) ? targetList.slice() : [];
	    this._selectTargetMap = zrUtil.reduce(targetList || [], function (targetMap, target) {
	      targetMap.set(target.name, target);
	      return targetMap;
	    }, zrUtil.createHashMap());
	  },

	  /**
	   * Either name or id should be passed as input here.
	   * If both of them are defined, id is used.
	   *
	   * @param {string|undefined} name name of data
	   * @param {number|undefined} id dataIndex of data
	   */
	  // PENGING If selectedMode is null ?
	  select: function (name, id) {
	    var target = id != null ? this._targetList[id] : this._selectTargetMap.get(name);
	    var selectedMode = this.get('selectedMode');

	    if (selectedMode === 'single') {
	      this._selectTargetMap.each(function (target) {
	        target.selected = false;
	      });
	    }

	    target && (target.selected = true);
	  },

	  /**
	   * Either name or id should be passed as input here.
	   * If both of them are defined, id is used.
	   *
	   * @param {string|undefined} name name of data
	   * @param {number|undefined} id dataIndex of data
	   */
	  unSelect: function (name, id) {
	    var target = id != null ? this._targetList[id] : this._selectTargetMap.get(name); // var selectedMode = this.get('selectedMode');
	    // selectedMode !== 'single' && target && (target.selected = false);

	    target && (target.selected = false);
	  },

	  /**
	   * Either name or id should be passed as input here.
	   * If both of them are defined, id is used.
	   *
	   * @param {string|undefined} name name of data
	   * @param {number|undefined} id dataIndex of data
	   */
	  toggleSelected: function (name, id) {
	    var target = id != null ? this._targetList[id] : this._selectTargetMap.get(name);

	    if (target != null) {
	      this[target.selected ? 'unSelect' : 'select'](name, id);
	      return target.selected;
	    }
	  },

	  /**
	   * Either name or id should be passed as input here.
	   * If both of them are defined, id is used.
	   *
	   * @param {string|undefined} name name of data
	   * @param {number|undefined} id dataIndex of data
	   */
	  isSelected: function (name, id) {
	    var target = id != null ? this._targetList[id] : this._selectTargetMap.get(name);
	    return target && target.selected;
	  }
	};
	module.exports = _default;

/***/ }),
/* 323 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(181);

	var graphic = __webpack_require__(226);

	var ChartView = __webpack_require__(283);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/

	/**
	 * @param {module:echarts/model/Series} seriesModel
	 * @param {boolean} hasAnimation
	 * @inner
	 */
	function updateDataSelected(uid, seriesModel, hasAnimation, api) {
	  var data = seriesModel.getData();
	  var dataIndex = this.dataIndex;
	  var name = data.getName(dataIndex);
	  var selectedOffset = seriesModel.get('selectedOffset');
	  api.dispatchAction({
	    type: 'pieToggleSelect',
	    from: uid,
	    name: name,
	    seriesId: seriesModel.id
	  });
	  data.each(function (idx) {
	    toggleItemSelected(data.getItemGraphicEl(idx), data.getItemLayout(idx), seriesModel.isSelected(data.getName(idx)), selectedOffset, hasAnimation);
	  });
	}
	/**
	 * @param {module:zrender/graphic/Sector} el
	 * @param {Object} layout
	 * @param {boolean} isSelected
	 * @param {number} selectedOffset
	 * @param {boolean} hasAnimation
	 * @inner
	 */


	function toggleItemSelected(el, layout, isSelected, selectedOffset, hasAnimation) {
	  var midAngle = (layout.startAngle + layout.endAngle) / 2;
	  var dx = Math.cos(midAngle);
	  var dy = Math.sin(midAngle);
	  var offset = isSelected ? selectedOffset : 0;
	  var position = [dx * offset, dy * offset];
	  hasAnimation // animateTo will stop revious animation like update transition
	  ? el.animate().when(200, {
	    position: position
	  }).start('bounceOut') : el.attr('position', position);
	}
	/**
	 * Piece of pie including Sector, Label, LabelLine
	 * @constructor
	 * @extends {module:zrender/graphic/Group}
	 */


	function PiePiece(data, idx) {
	  graphic.Group.call(this);
	  var sector = new graphic.Sector({
	    z2: 2
	  });
	  var polyline = new graphic.Polyline();
	  var text = new graphic.Text();
	  this.add(sector);
	  this.add(polyline);
	  this.add(text);
	  this.updateData(data, idx, true); // Hover to change label and labelLine

	  function onEmphasis() {
	    polyline.ignore = polyline.hoverIgnore;
	    text.ignore = text.hoverIgnore;
	  }

	  function onNormal() {
	    polyline.ignore = polyline.normalIgnore;
	    text.ignore = text.normalIgnore;
	  }

	  this.on('emphasis', onEmphasis).on('normal', onNormal).on('mouseover', onEmphasis).on('mouseout', onNormal);
	}

	var piePieceProto = PiePiece.prototype;

	piePieceProto.updateData = function (data, idx, firstCreate) {
	  var sector = this.childAt(0);
	  var seriesModel = data.hostModel;
	  var itemModel = data.getItemModel(idx);
	  var layout = data.getItemLayout(idx);
	  var sectorShape = zrUtil.extend({}, layout);
	  sectorShape.label = null;

	  if (firstCreate) {
	    sector.setShape(sectorShape);
	    var animationType = seriesModel.getShallow('animationType');

	    if (animationType === 'scale') {
	      sector.shape.r = layout.r0;
	      graphic.initProps(sector, {
	        shape: {
	          r: layout.r
	        }
	      }, seriesModel, idx);
	    } // Expansion
	    else {
	        sector.shape.endAngle = layout.startAngle;
	        graphic.updateProps(sector, {
	          shape: {
	            endAngle: layout.endAngle
	          }
	        }, seriesModel, idx);
	      }
	  } else {
	    graphic.updateProps(sector, {
	      shape: sectorShape
	    }, seriesModel, idx);
	  } // Update common style


	  var visualColor = data.getItemVisual(idx, 'color');
	  sector.useStyle(zrUtil.defaults({
	    lineJoin: 'bevel',
	    fill: visualColor
	  }, itemModel.getModel('itemStyle').getItemStyle()));
	  sector.hoverStyle = itemModel.getModel('emphasis.itemStyle').getItemStyle();
	  var cursorStyle = itemModel.getShallow('cursor');
	  cursorStyle && sector.attr('cursor', cursorStyle); // Toggle selected

	  toggleItemSelected(this, data.getItemLayout(idx), seriesModel.isSelected(null, idx), seriesModel.get('selectedOffset'), seriesModel.get('animation'));

	  function onEmphasis() {
	    // Sector may has animation of updating data. Force to move to the last frame
	    // Or it may stopped on the wrong shape
	    sector.stopAnimation(true);
	    sector.animateTo({
	      shape: {
	        r: layout.r + seriesModel.get('hoverOffset')
	      }
	    }, 300, 'elasticOut');
	  }

	  function onNormal() {
	    sector.stopAnimation(true);
	    sector.animateTo({
	      shape: {
	        r: layout.r
	      }
	    }, 300, 'elasticOut');
	  }

	  sector.off('mouseover').off('mouseout').off('emphasis').off('normal');

	  if (itemModel.get('hoverAnimation') && seriesModel.isAnimationEnabled()) {
	    sector.on('mouseover', onEmphasis).on('mouseout', onNormal).on('emphasis', onEmphasis).on('normal', onNormal);
	  }

	  this._updateLabel(data, idx);

	  graphic.setHoverStyle(this);
	};

	piePieceProto._updateLabel = function (data, idx) {
	  var labelLine = this.childAt(1);
	  var labelText = this.childAt(2);
	  var seriesModel = data.hostModel;
	  var itemModel = data.getItemModel(idx);
	  var layout = data.getItemLayout(idx);
	  var labelLayout = layout.label;
	  var visualColor = data.getItemVisual(idx, 'color');
	  graphic.updateProps(labelLine, {
	    shape: {
	      points: labelLayout.linePoints || [[labelLayout.x, labelLayout.y], [labelLayout.x, labelLayout.y], [labelLayout.x, labelLayout.y]]
	    }
	  }, seriesModel, idx);
	  graphic.updateProps(labelText, {
	    style: {
	      x: labelLayout.x,
	      y: labelLayout.y
	    }
	  }, seriesModel, idx);
	  labelText.attr({
	    rotation: labelLayout.rotation,
	    origin: [labelLayout.x, labelLayout.y],
	    z2: 10
	  });
	  var labelModel = itemModel.getModel('label');
	  var labelHoverModel = itemModel.getModel('emphasis.label');
	  var labelLineModel = itemModel.getModel('labelLine');
	  var labelLineHoverModel = itemModel.getModel('emphasis.labelLine');
	  var visualColor = data.getItemVisual(idx, 'color');
	  graphic.setLabelStyle(labelText.style, labelText.hoverStyle = {}, labelModel, labelHoverModel, {
	    labelFetcher: data.hostModel,
	    labelDataIndex: idx,
	    defaultText: data.getName(idx),
	    autoColor: visualColor,
	    useInsideStyle: !!labelLayout.inside
	  }, {
	    textAlign: labelLayout.textAlign,
	    textVerticalAlign: labelLayout.verticalAlign,
	    opacity: data.getItemVisual(idx, 'opacity')
	  });
	  labelText.ignore = labelText.normalIgnore = !labelModel.get('show');
	  labelText.hoverIgnore = !labelHoverModel.get('show');
	  labelLine.ignore = labelLine.normalIgnore = !labelLineModel.get('show');
	  labelLine.hoverIgnore = !labelLineHoverModel.get('show'); // Default use item visual color

	  labelLine.setStyle({
	    stroke: visualColor,
	    opacity: data.getItemVisual(idx, 'opacity')
	  });
	  labelLine.setStyle(labelLineModel.getModel('lineStyle').getLineStyle());
	  labelLine.hoverStyle = labelLineHoverModel.getModel('lineStyle').getLineStyle();
	  var smooth = labelLineModel.get('smooth');

	  if (smooth && smooth === true) {
	    smooth = 0.4;
	  }

	  labelLine.setShape({
	    smooth: smooth
	  });
	};

	zrUtil.inherits(PiePiece, graphic.Group); // Pie view

	var PieView = ChartView.extend({
	  type: 'pie',
	  init: function () {
	    var sectorGroup = new graphic.Group();
	    this._sectorGroup = sectorGroup;
	  },
	  render: function (seriesModel, ecModel, api, payload) {
	    if (payload && payload.from === this.uid) {
	      return;
	    }

	    var data = seriesModel.getData();
	    var oldData = this._data;
	    var group = this.group;
	    var hasAnimation = ecModel.get('animation');
	    var isFirstRender = !oldData;
	    var animationType = seriesModel.get('animationType');
	    var onSectorClick = zrUtil.curry(updateDataSelected, this.uid, seriesModel, hasAnimation, api);
	    var selectedMode = seriesModel.get('selectedMode');
	    data.diff(oldData).add(function (idx) {
	      var piePiece = new PiePiece(data, idx); // Default expansion animation

	      if (isFirstRender && animationType !== 'scale') {
	        piePiece.eachChild(function (child) {
	          child.stopAnimation(true);
	        });
	      }

	      selectedMode && piePiece.on('click', onSectorClick);
	      data.setItemGraphicEl(idx, piePiece);
	      group.add(piePiece);
	    }).update(function (newIdx, oldIdx) {
	      var piePiece = oldData.getItemGraphicEl(oldIdx);
	      piePiece.updateData(data, newIdx);
	      piePiece.off('click');
	      selectedMode && piePiece.on('click', onSectorClick);
	      group.add(piePiece);
	      data.setItemGraphicEl(newIdx, piePiece);
	    }).remove(function (idx) {
	      var piePiece = oldData.getItemGraphicEl(idx);
	      group.remove(piePiece);
	    }).execute();

	    if (hasAnimation && isFirstRender && data.count() > 0 // Default expansion animation
	    && animationType !== 'scale') {
	      var shape = data.getItemLayout(0);
	      var r = Math.max(api.getWidth(), api.getHeight()) / 2;
	      var removeClipPath = zrUtil.bind(group.removeClipPath, group);
	      group.setClipPath(this._createClipPath(shape.cx, shape.cy, r, shape.startAngle, shape.clockwise, removeClipPath, seriesModel));
	    }

	    this._data = data;
	  },
	  dispose: function () {},
	  _createClipPath: function (cx, cy, r, startAngle, clockwise, cb, seriesModel) {
	    var clipPath = new graphic.Sector({
	      shape: {
	        cx: cx,
	        cy: cy,
	        r0: 0,
	        r: r,
	        startAngle: startAngle,
	        endAngle: startAngle,
	        clockwise: clockwise
	      }
	    });
	    graphic.initProps(clipPath, {
	      shape: {
	        endAngle: startAngle + (clockwise ? 1 : -1) * Math.PI * 2
	      }
	    }, seriesModel, cb);
	    return clipPath;
	  },

	  /**
	   * @implement
	   */
	  containPoint: function (point, seriesModel) {
	    var data = seriesModel.getData();
	    var itemLayout = data.getItemLayout(0);

	    if (itemLayout) {
	      var dx = point[0] - itemLayout.cx;
	      var dy = point[1] - itemLayout.cy;
	      var radius = Math.sqrt(dx * dx + dy * dy);
	      return radius <= itemLayout.r && radius >= itemLayout.r0;
	    }
	  }
	});
	var _default = PieView;
	module.exports = _default;

/***/ }),
/* 324 */
/***/ (function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(176);

	var zrUtil = __webpack_require__(181);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	function _default(seriesType, actionInfos) {
	  zrUtil.each(actionInfos, function (actionInfo) {
	    actionInfo.update = 'updateView';
	    /**
	     * @payload
	     * @property {string} seriesName
	     * @property {string} name
	     */

	    echarts.registerAction(actionInfo, function (payload, ecModel) {
	      var selected = {};
	      ecModel.eachComponent({
	        mainType: 'series',
	        subType: seriesType,
	        query: payload
	      }, function (seriesModel) {
	        if (seriesModel[actionInfo.method]) {
	          seriesModel[actionInfo.method](payload.name, payload.dataIndex);
	        }

	        var data = seriesModel.getData(); // Create selected map

	        data.each(function (idx) {
	          var name = data.getName(idx);
	          selected[name] = seriesModel.isSelected(name) || false;
	        });
	      });
	      return {
	        name: payload.name,
	        selected: selected
	      };
	    });
	  });
	}

	module.exports = _default;

/***/ }),
/* 325 */
/***/ (function(module, exports, __webpack_require__) {

	var _util = __webpack_require__(181);

	var createHashMap = _util.createHashMap;

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	// Pick color from palette for each data item.
	// Applicable for charts that require applying color palette
	// in data level (like pie, funnel, chord).
	function _default(seriesType) {
	  return {
	    getTargetSeries: function (ecModel) {
	      // Pie and funnel may use diferrent scope
	      var paletteScope = {};
	      var seiresModelMap = createHashMap();
	      ecModel.eachSeriesByType(seriesType, function (seriesModel) {
	        seriesModel.__paletteScope = paletteScope;
	        seiresModelMap.set(seriesModel.uid, seriesModel);
	      });
	      return seiresModelMap;
	    },
	    reset: function (seriesModel, ecModel) {
	      var dataAll = seriesModel.getRawData();
	      var idxMap = {};
	      var data = seriesModel.getData();
	      data.each(function (idx) {
	        var rawIdx = data.getRawIndex(idx);
	        idxMap[rawIdx] = idx;
	      });
	      dataAll.each(function (rawIdx) {
	        var filteredIdx = idxMap[rawIdx]; // If series.itemStyle.normal.color is a function. itemVisual may be encoded

	        var singleDataColor = filteredIdx != null && data.getItemVisual(filteredIdx, 'color', true);

	        if (!singleDataColor) {
	          // FIXME Performance
	          var itemModel = dataAll.getItemModel(rawIdx);
	          var color = itemModel.get('itemStyle.color') || seriesModel.getColorFromPalette(dataAll.getName(rawIdx) || rawIdx + '', seriesModel.__paletteScope, dataAll.count()); // Legend may use the visual info in data before processed

	          dataAll.setItemVisual(rawIdx, 'color', color); // Data is not filtered

	          if (filteredIdx != null) {
	            data.setItemVisual(filteredIdx, 'color', color);
	          }
	        } else {
	          // Set data all color for legend
	          dataAll.setItemVisual(rawIdx, 'color', singleDataColor);
	        }
	      });
	    }
	  };
	}

	module.exports = _default;

/***/ }),
/* 326 */
/***/ (function(module, exports, __webpack_require__) {

	var _number = __webpack_require__(263);

	var parsePercent = _number.parsePercent;
	var linearMap = _number.linearMap;

	var labelLayout = __webpack_require__(327);

	var zrUtil = __webpack_require__(181);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var PI2 = Math.PI * 2;
	var RADIAN = Math.PI / 180;

	function _default(seriesType, ecModel, api, payload) {
	  ecModel.eachSeriesByType(seriesType, function (seriesModel) {
	    var data = seriesModel.getData();
	    var valueDim = data.mapDimension('value');
	    var center = seriesModel.get('center');
	    var radius = seriesModel.get('radius');

	    if (!zrUtil.isArray(radius)) {
	      radius = [0, radius];
	    }

	    if (!zrUtil.isArray(center)) {
	      center = [center, center];
	    }

	    var width = api.getWidth();
	    var height = api.getHeight();
	    var size = Math.min(width, height);
	    var cx = parsePercent(center[0], width);
	    var cy = parsePercent(center[1], height);
	    var r0 = parsePercent(radius[0], size / 2);
	    var r = parsePercent(radius[1], size / 2);
	    var startAngle = -seriesModel.get('startAngle') * RADIAN;
	    var minAngle = seriesModel.get('minAngle') * RADIAN;
	    var validDataCount = 0;
	    data.each(valueDim, function (value) {
	      !isNaN(value) && validDataCount++;
	    });
	    var sum = data.getSum(valueDim); // Sum may be 0

	    var unitRadian = Math.PI / (sum || validDataCount) * 2;
	    var clockwise = seriesModel.get('clockwise');
	    var roseType = seriesModel.get('roseType');
	    var stillShowZeroSum = seriesModel.get('stillShowZeroSum'); // [0...max]

	    var extent = data.getDataExtent(valueDim);
	    extent[0] = 0; // In the case some sector angle is smaller than minAngle

	    var restAngle = PI2;
	    var valueSumLargerThanMinAngle = 0;
	    var currentAngle = startAngle;
	    var dir = clockwise ? 1 : -1;
	    data.each(valueDim, function (value, idx) {
	      var angle;

	      if (isNaN(value)) {
	        data.setItemLayout(idx, {
	          angle: NaN,
	          startAngle: NaN,
	          endAngle: NaN,
	          clockwise: clockwise,
	          cx: cx,
	          cy: cy,
	          r0: r0,
	          r: roseType ? NaN : r
	        });
	        return;
	      } // FIXME 兼容 2.0 但是 roseType 是 area 的时候才是这样？


	      if (roseType !== 'area') {
	        angle = sum === 0 && stillShowZeroSum ? unitRadian : value * unitRadian;
	      } else {
	        angle = PI2 / validDataCount;
	      }

	      if (angle < minAngle) {
	        angle = minAngle;
	        restAngle -= minAngle;
	      } else {
	        valueSumLargerThanMinAngle += value;
	      }

	      var endAngle = currentAngle + dir * angle;
	      data.setItemLayout(idx, {
	        angle: angle,
	        startAngle: currentAngle,
	        endAngle: endAngle,
	        clockwise: clockwise,
	        cx: cx,
	        cy: cy,
	        r0: r0,
	        r: roseType ? linearMap(value, extent, [r0, r]) : r
	      });
	      currentAngle = endAngle;
	    }); // Some sector is constrained by minAngle
	    // Rest sectors needs recalculate angle

	    if (restAngle < PI2 && validDataCount) {
	      // Average the angle if rest angle is not enough after all angles is
	      // Constrained by minAngle
	      if (restAngle <= 1e-3) {
	        var angle = PI2 / validDataCount;
	        data.each(valueDim, function (value, idx) {
	          if (!isNaN(value)) {
	            var layout = data.getItemLayout(idx);
	            layout.angle = angle;
	            layout.startAngle = startAngle + dir * idx * angle;
	            layout.endAngle = startAngle + dir * (idx + 1) * angle;
	          }
	        });
	      } else {
	        unitRadian = restAngle / valueSumLargerThanMinAngle;
	        currentAngle = startAngle;
	        data.each(valueDim, function (value, idx) {
	          if (!isNaN(value)) {
	            var layout = data.getItemLayout(idx);
	            var angle = layout.angle === minAngle ? minAngle : value * unitRadian;
	            layout.startAngle = currentAngle;
	            layout.endAngle = currentAngle + dir * angle;
	            currentAngle += dir * angle;
	          }
	        });
	      }
	    }

	    labelLayout(seriesModel, r, width, height);
	  });
	}

	module.exports = _default;

/***/ }),
/* 327 */
/***/ (function(module, exports, __webpack_require__) {

	var textContain = __webpack_require__(211);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	// FIXME emphasis label position is not same with normal label position
	function adjustSingleSide(list, cx, cy, r, dir, viewWidth, viewHeight) {
	  list.sort(function (a, b) {
	    return a.y - b.y;
	  }); // 压

	  function shiftDown(start, end, delta, dir) {
	    for (var j = start; j < end; j++) {
	      list[j].y += delta;

	      if (j > start && j + 1 < end && list[j + 1].y > list[j].y + list[j].height) {
	        shiftUp(j, delta / 2);
	        return;
	      }
	    }

	    shiftUp(end - 1, delta / 2);
	  } // 弹


	  function shiftUp(end, delta) {
	    for (var j = end; j >= 0; j--) {
	      list[j].y -= delta;

	      if (j > 0 && list[j].y > list[j - 1].y + list[j - 1].height) {
	        break;
	      }
	    }
	  }

	  function changeX(list, isDownList, cx, cy, r, dir) {
	    var lastDeltaX = dir > 0 ? isDownList // 右侧
	    ? Number.MAX_VALUE // 下
	    : 0 // 上
	    : isDownList // 左侧
	    ? Number.MAX_VALUE // 下
	    : 0; // 上

	    for (var i = 0, l = list.length; i < l; i++) {
	      // Not change x for center label
	      if (list[i].position === 'center') {
	        continue;
	      }

	      var deltaY = Math.abs(list[i].y - cy);
	      var length = list[i].len;
	      var length2 = list[i].len2;
	      var deltaX = deltaY < r + length ? Math.sqrt((r + length + length2) * (r + length + length2) - deltaY * deltaY) : Math.abs(list[i].x - cx);

	      if (isDownList && deltaX >= lastDeltaX) {
	        // 右下，左下
	        deltaX = lastDeltaX - 10;
	      }

	      if (!isDownList && deltaX <= lastDeltaX) {
	        // 右上，左上
	        deltaX = lastDeltaX + 10;
	      }

	      list[i].x = cx + deltaX * dir;
	      lastDeltaX = deltaX;
	    }
	  }

	  var lastY = 0;
	  var delta;
	  var len = list.length;
	  var upList = [];
	  var downList = [];

	  for (var i = 0; i < len; i++) {
	    delta = list[i].y - lastY;

	    if (delta < 0) {
	      shiftDown(i, len, -delta, dir);
	    }

	    lastY = list[i].y + list[i].height;
	  }

	  if (viewHeight - lastY < 0) {
	    shiftUp(len - 1, lastY - viewHeight);
	  }

	  for (var i = 0; i < len; i++) {
	    if (list[i].y >= cy) {
	      downList.push(list[i]);
	    } else {
	      upList.push(list[i]);
	    }
	  }

	  changeX(upList, false, cx, cy, r, dir);
	  changeX(downList, true, cx, cy, r, dir);
	}

	function avoidOverlap(labelLayoutList, cx, cy, r, viewWidth, viewHeight) {
	  var leftList = [];
	  var rightList = [];

	  for (var i = 0; i < labelLayoutList.length; i++) {
	    if (labelLayoutList[i].x < cx) {
	      leftList.push(labelLayoutList[i]);
	    } else {
	      rightList.push(labelLayoutList[i]);
	    }
	  }

	  adjustSingleSide(rightList, cx, cy, r, 1, viewWidth, viewHeight);
	  adjustSingleSide(leftList, cx, cy, r, -1, viewWidth, viewHeight);

	  for (var i = 0; i < labelLayoutList.length; i++) {
	    var linePoints = labelLayoutList[i].linePoints;

	    if (linePoints) {
	      var dist = linePoints[1][0] - linePoints[2][0];

	      if (labelLayoutList[i].x < cx) {
	        linePoints[2][0] = labelLayoutList[i].x + 3;
	      } else {
	        linePoints[2][0] = labelLayoutList[i].x - 3;
	      }

	      linePoints[1][1] = linePoints[2][1] = labelLayoutList[i].y;
	      linePoints[1][0] = linePoints[2][0] + dist;
	    }
	  }
	}

	function _default(seriesModel, r, viewWidth, viewHeight) {
	  var data = seriesModel.getData();
	  var labelLayoutList = [];
	  var cx;
	  var cy;
	  var hasLabelRotate = false;
	  data.each(function (idx) {
	    var layout = data.getItemLayout(idx);
	    var itemModel = data.getItemModel(idx);
	    var labelModel = itemModel.getModel('label'); // Use position in normal or emphasis

	    var labelPosition = labelModel.get('position') || itemModel.get('emphasis.label.position');
	    var labelLineModel = itemModel.getModel('labelLine');
	    var labelLineLen = labelLineModel.get('length');
	    var labelLineLen2 = labelLineModel.get('length2');
	    var midAngle = (layout.startAngle + layout.endAngle) / 2;
	    var dx = Math.cos(midAngle);
	    var dy = Math.sin(midAngle);
	    var textX;
	    var textY;
	    var linePoints;
	    var textAlign;
	    cx = layout.cx;
	    cy = layout.cy;
	    var isLabelInside = labelPosition === 'inside' || labelPosition === 'inner';

	    if (labelPosition === 'center') {
	      textX = layout.cx;
	      textY = layout.cy;
	      textAlign = 'center';
	    } else {
	      var x1 = (isLabelInside ? (layout.r + layout.r0) / 2 * dx : layout.r * dx) + cx;
	      var y1 = (isLabelInside ? (layout.r + layout.r0) / 2 * dy : layout.r * dy) + cy;
	      textX = x1 + dx * 3;
	      textY = y1 + dy * 3;

	      if (!isLabelInside) {
	        // For roseType
	        var x2 = x1 + dx * (labelLineLen + r - layout.r);
	        var y2 = y1 + dy * (labelLineLen + r - layout.r);
	        var x3 = x2 + (dx < 0 ? -1 : 1) * labelLineLen2;
	        var y3 = y2;
	        textX = x3 + (dx < 0 ? -5 : 5);
	        textY = y3;
	        linePoints = [[x1, y1], [x2, y2], [x3, y3]];
	      }

	      textAlign = isLabelInside ? 'center' : dx > 0 ? 'left' : 'right';
	    }

	    var font = labelModel.getFont();
	    var labelRotate = labelModel.get('rotate') ? dx < 0 ? -midAngle + Math.PI : -midAngle : 0;
	    var text = seriesModel.getFormattedLabel(idx, 'normal') || data.getName(idx);
	    var textRect = textContain.getBoundingRect(text, font, textAlign, 'top');
	    hasLabelRotate = !!labelRotate;
	    layout.label = {
	      x: textX,
	      y: textY,
	      position: labelPosition,
	      height: textRect.height,
	      len: labelLineLen,
	      len2: labelLineLen2,
	      linePoints: linePoints,
	      textAlign: textAlign,
	      verticalAlign: 'middle',
	      rotation: labelRotate,
	      inside: isLabelInside
	    }; // Not layout the inside label

	    if (!isLabelInside) {
	      labelLayoutList.push(layout.label);
	    }
	  });

	  if (!hasLabelRotate && seriesModel.get('avoidLabelOverlap')) {
	    avoidOverlap(labelLayoutList, cx, cy, r, viewWidth, viewHeight);
	  }
	}

	module.exports = _default;

/***/ }),
/* 328 */
/***/ (function(module, exports) {

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	function _default(seriesType) {
	  return {
	    seriesType: seriesType,
	    reset: function (seriesModel, ecModel) {
	      var legendModels = ecModel.findComponents({
	        mainType: 'legend'
	      });

	      if (!legendModels || !legendModels.length) {
	        return;
	      }

	      var data = seriesModel.getData();
	      data.filterSelf(function (idx) {
	        var name = data.getName(idx); // If in any legend component the status is not selected.

	        for (var i = 0; i < legendModels.length; i++) {
	          if (!legendModels[i].isSelected(name)) {
	            return false;
	          }
	        }

	        return true;
	      });
	    }
	  };
	}

	module.exports = _default;

/***/ }),
/* 329 */
/***/ (function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(176);

	var zrUtil = __webpack_require__(181);

	var _barGrid = __webpack_require__(309);

	var layout = _barGrid.layout;
	var largeLayout = _barGrid.largeLayout;

	__webpack_require__(330);

	__webpack_require__(338);

	__webpack_require__(340);

	__webpack_require__(344);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	// In case developer forget to include grid component
	echarts.registerLayout(zrUtil.curry(layout, 'bar')); // Should after normal bar layout, otherwise it is blocked by normal bar layout.

	echarts.registerLayout(largeLayout);
	echarts.registerVisual({
	  seriesType: 'bar',
	  reset: function (seriesModel) {
	    // Visual coding for legend
	    seriesModel.getData().setVisual('legendSymbol', 'roundRect');
	  }
	});

/***/ }),
/* 330 */
/***/ (function(module, exports, __webpack_require__) {

	var _config = __webpack_require__(177);

	var __DEV__ = _config.__DEV__;

	var _util = __webpack_require__(181);

	var isObject = _util.isObject;
	var each = _util.each;
	var map = _util.map;
	var indexOf = _util.indexOf;
	var retrieve = _util.retrieve;

	var _layout = __webpack_require__(262);

	var getLayoutRect = _layout.getLayoutRect;

	var _axisHelper = __webpack_require__(303);

	var createScaleByModel = _axisHelper.createScaleByModel;
	var ifAxisCrossZero = _axisHelper.ifAxisCrossZero;
	var niceScaleExtent = _axisHelper.niceScaleExtent;
	var estimateLabelUnionRect = _axisHelper.estimateLabelUnionRect;

	var Cartesian2D = __webpack_require__(331);

	var Axis2D = __webpack_require__(333);

	var CoordinateSystem = __webpack_require__(273);

	var _dataStackHelper = __webpack_require__(302);

	var getStackedDimension = _dataStackHelper.getStackedDimension;

	__webpack_require__(334);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/

	/**
	 * Grid is a region which contains at most 4 cartesian systems
	 *
	 * TODO Default cartesian
	 */
	// Depends on GridModel, AxisModel, which performs preprocess.

	/**
	 * Check if the axis is used in the specified grid
	 * @inner
	 */
	function isAxisUsedInTheGrid(axisModel, gridModel, ecModel) {
	  return axisModel.getCoordSysModel() === gridModel;
	}

	function Grid(gridModel, ecModel, api) {
	  /**
	   * @type {Object.<string, module:echarts/coord/cartesian/Cartesian2D>}
	   * @private
	   */
	  this._coordsMap = {};
	  /**
	   * @type {Array.<module:echarts/coord/cartesian/Cartesian>}
	   * @private
	   */

	  this._coordsList = [];
	  /**
	   * @type {Object.<string, module:echarts/coord/cartesian/Axis2D>}
	   * @private
	   */

	  this._axesMap = {};
	  /**
	   * @type {Array.<module:echarts/coord/cartesian/Axis2D>}
	   * @private
	   */

	  this._axesList = [];

	  this._initCartesian(gridModel, ecModel, api);

	  this.model = gridModel;
	}

	var gridProto = Grid.prototype;
	gridProto.type = 'grid';
	gridProto.axisPointerEnabled = true;

	gridProto.getRect = function () {
	  return this._rect;
	};

	gridProto.update = function (ecModel, api) {
	  var axesMap = this._axesMap;

	  this._updateScale(ecModel, this.model);

	  each(axesMap.x, function (xAxis) {
	    niceScaleExtent(xAxis.scale, xAxis.model);
	  });
	  each(axesMap.y, function (yAxis) {
	    niceScaleExtent(yAxis.scale, yAxis.model);
	  });
	  each(axesMap.x, function (xAxis) {
	    fixAxisOnZero(axesMap, 'y', xAxis);
	  });
	  each(axesMap.y, function (yAxis) {
	    fixAxisOnZero(axesMap, 'x', yAxis);
	  }); // Resize again if containLabel is enabled
	  // FIXME It may cause getting wrong grid size in data processing stage

	  this.resize(this.model, api);
	};

	function fixAxisOnZero(axesMap, otherAxisDim, axis) {
	  axis.getAxesOnZeroOf = function () {
	    // TODO: onZero of multiple axes.
	    return otherAxis ? [otherAxis] : [];
	  }; // onZero can not be enabled in these two situations:
	  // 1. When any other axis is a category axis.
	  // 2. When no axis is cross 0 point.


	  var otherAxes = axesMap[otherAxisDim];
	  var otherAxis;
	  var axisModel = axis.model;
	  var onZero = axisModel.get('axisLine.onZero');
	  var onZeroAxisIndex = axisModel.get('axisLine.onZeroAxisIndex');

	  if (!onZero) {
	    return;
	  } // If target axis is specified.


	  if (onZeroAxisIndex != null) {
	    if (canOnZeroToAxis(otherAxes[onZeroAxisIndex])) {
	      otherAxis = otherAxes[onZeroAxisIndex];
	    }

	    return;
	  } // Find the first available other axis.


	  for (var idx in otherAxes) {
	    if (otherAxes.hasOwnProperty(idx) && canOnZeroToAxis(otherAxes[idx])) {
	      otherAxis = otherAxes[idx];
	      break;
	    }
	  }
	}

	function canOnZeroToAxis(axis) {
	  return axis && axis.type !== 'category' && axis.type !== 'time' && ifAxisCrossZero(axis);
	}
	/**
	 * Resize the grid
	 * @param {module:echarts/coord/cartesian/GridModel} gridModel
	 * @param {module:echarts/ExtensionAPI} api
	 */


	gridProto.resize = function (gridModel, api, ignoreContainLabel) {
	  var gridRect = getLayoutRect(gridModel.getBoxLayoutParams(), {
	    width: api.getWidth(),
	    height: api.getHeight()
	  });
	  this._rect = gridRect;
	  var axesList = this._axesList;
	  adjustAxes(); // Minus label size

	  if (!ignoreContainLabel && gridModel.get('containLabel')) {
	    each(axesList, function (axis) {
	      if (!axis.model.get('axisLabel.inside')) {
	        var labelUnionRect = estimateLabelUnionRect(axis);

	        if (labelUnionRect) {
	          var dim = axis.isHorizontal() ? 'height' : 'width';
	          var margin = axis.model.get('axisLabel.margin');
	          gridRect[dim] -= labelUnionRect[dim] + margin;

	          if (axis.position === 'top') {
	            gridRect.y += labelUnionRect.height + margin;
	          } else if (axis.position === 'left') {
	            gridRect.x += labelUnionRect.width + margin;
	          }
	        }
	      }
	    });
	    adjustAxes();
	  }

	  function adjustAxes() {
	    each(axesList, function (axis) {
	      var isHorizontal = axis.isHorizontal();
	      var extent = isHorizontal ? [0, gridRect.width] : [0, gridRect.height];
	      var idx = axis.inverse ? 1 : 0;
	      axis.setExtent(extent[idx], extent[1 - idx]);
	      updateAxisTransform(axis, isHorizontal ? gridRect.x : gridRect.y);
	    });
	  }
	};
	/**
	 * @param {string} axisType
	 * @param {number} [axisIndex]
	 */


	gridProto.getAxis = function (axisType, axisIndex) {
	  var axesMapOnDim = this._axesMap[axisType];

	  if (axesMapOnDim != null) {
	    if (axisIndex == null) {
	      // Find first axis
	      for (var name in axesMapOnDim) {
	        if (axesMapOnDim.hasOwnProperty(name)) {
	          return axesMapOnDim[name];
	        }
	      }
	    }

	    return axesMapOnDim[axisIndex];
	  }
	};
	/**
	 * @return {Array.<module:echarts/coord/Axis>}
	 */


	gridProto.getAxes = function () {
	  return this._axesList.slice();
	};
	/**
	 * Usage:
	 *      grid.getCartesian(xAxisIndex, yAxisIndex);
	 *      grid.getCartesian(xAxisIndex);
	 *      grid.getCartesian(null, yAxisIndex);
	 *      grid.getCartesian({xAxisIndex: ..., yAxisIndex: ...});
	 *
	 * @param {number|Object} [xAxisIndex]
	 * @param {number} [yAxisIndex]
	 */


	gridProto.getCartesian = function (xAxisIndex, yAxisIndex) {
	  if (xAxisIndex != null && yAxisIndex != null) {
	    var key = 'x' + xAxisIndex + 'y' + yAxisIndex;
	    return this._coordsMap[key];
	  }

	  if (isObject(xAxisIndex)) {
	    yAxisIndex = xAxisIndex.yAxisIndex;
	    xAxisIndex = xAxisIndex.xAxisIndex;
	  } // When only xAxisIndex or yAxisIndex given, find its first cartesian.


	  for (var i = 0, coordList = this._coordsList; i < coordList.length; i++) {
	    if (coordList[i].getAxis('x').index === xAxisIndex || coordList[i].getAxis('y').index === yAxisIndex) {
	      return coordList[i];
	    }
	  }
	};

	gridProto.getCartesians = function () {
	  return this._coordsList.slice();
	};
	/**
	 * @implements
	 * see {module:echarts/CoodinateSystem}
	 */


	gridProto.convertToPixel = function (ecModel, finder, value) {
	  var target = this._findConvertTarget(ecModel, finder);

	  return target.cartesian ? target.cartesian.dataToPoint(value) : target.axis ? target.axis.toGlobalCoord(target.axis.dataToCoord(value)) : null;
	};
	/**
	 * @implements
	 * see {module:echarts/CoodinateSystem}
	 */


	gridProto.convertFromPixel = function (ecModel, finder, value) {
	  var target = this._findConvertTarget(ecModel, finder);

	  return target.cartesian ? target.cartesian.pointToData(value) : target.axis ? target.axis.coordToData(target.axis.toLocalCoord(value)) : null;
	};
	/**
	 * @inner
	 */


	gridProto._findConvertTarget = function (ecModel, finder) {
	  var seriesModel = finder.seriesModel;
	  var xAxisModel = finder.xAxisModel || seriesModel && seriesModel.getReferringComponents('xAxis')[0];
	  var yAxisModel = finder.yAxisModel || seriesModel && seriesModel.getReferringComponents('yAxis')[0];
	  var gridModel = finder.gridModel;
	  var coordsList = this._coordsList;
	  var cartesian;
	  var axis;

	  if (seriesModel) {
	    cartesian = seriesModel.coordinateSystem;
	    indexOf(coordsList, cartesian) < 0 && (cartesian = null);
	  } else if (xAxisModel && yAxisModel) {
	    cartesian = this.getCartesian(xAxisModel.componentIndex, yAxisModel.componentIndex);
	  } else if (xAxisModel) {
	    axis = this.getAxis('x', xAxisModel.componentIndex);
	  } else if (yAxisModel) {
	    axis = this.getAxis('y', yAxisModel.componentIndex);
	  } // Lowest priority.
	  else if (gridModel) {
	      var grid = gridModel.coordinateSystem;

	      if (grid === this) {
	        cartesian = this._coordsList[0];
	      }
	    }

	  return {
	    cartesian: cartesian,
	    axis: axis
	  };
	};
	/**
	 * @implements
	 * see {module:echarts/CoodinateSystem}
	 */


	gridProto.containPoint = function (point) {
	  var coord = this._coordsList[0];

	  if (coord) {
	    return coord.containPoint(point);
	  }
	};
	/**
	 * Initialize cartesian coordinate systems
	 * @private
	 */


	gridProto._initCartesian = function (gridModel, ecModel, api) {
	  var axisPositionUsed = {
	    left: false,
	    right: false,
	    top: false,
	    bottom: false
	  };
	  var axesMap = {
	    x: {},
	    y: {}
	  };
	  var axesCount = {
	    x: 0,
	    y: 0
	  }; /// Create axis

	  ecModel.eachComponent('xAxis', createAxisCreator('x'), this);
	  ecModel.eachComponent('yAxis', createAxisCreator('y'), this);

	  if (!axesCount.x || !axesCount.y) {
	    // Roll back when there no either x or y axis
	    this._axesMap = {};
	    this._axesList = [];
	    return;
	  }

	  this._axesMap = axesMap; /// Create cartesian2d

	  each(axesMap.x, function (xAxis, xAxisIndex) {
	    each(axesMap.y, function (yAxis, yAxisIndex) {
	      var key = 'x' + xAxisIndex + 'y' + yAxisIndex;
	      var cartesian = new Cartesian2D(key);
	      cartesian.grid = this;
	      cartesian.model = gridModel;
	      this._coordsMap[key] = cartesian;

	      this._coordsList.push(cartesian);

	      cartesian.addAxis(xAxis);
	      cartesian.addAxis(yAxis);
	    }, this);
	  }, this);

	  function createAxisCreator(axisType) {
	    return function (axisModel, idx) {
	      if (!isAxisUsedInTheGrid(axisModel, gridModel, ecModel)) {
	        return;
	      }

	      var axisPosition = axisModel.get('position');

	      if (axisType === 'x') {
	        // Fix position
	        if (axisPosition !== 'top' && axisPosition !== 'bottom') {
	          // Default bottom of X
	          axisPosition = 'bottom';

	          if (axisPositionUsed[axisPosition]) {
	            axisPosition = axisPosition === 'top' ? 'bottom' : 'top';
	          }
	        }
	      } else {
	        // Fix position
	        if (axisPosition !== 'left' && axisPosition !== 'right') {
	          // Default left of Y
	          axisPosition = 'left';

	          if (axisPositionUsed[axisPosition]) {
	            axisPosition = axisPosition === 'left' ? 'right' : 'left';
	          }
	        }
	      }

	      axisPositionUsed[axisPosition] = true;
	      var axis = new Axis2D(axisType, createScaleByModel(axisModel), [0, 0], axisModel.get('type'), axisPosition);
	      var isCategory = axis.type === 'category';
	      axis.onBand = isCategory && axisModel.get('boundaryGap');
	      axis.inverse = axisModel.get('inverse'); // Inject axis into axisModel

	      axisModel.axis = axis; // Inject axisModel into axis

	      axis.model = axisModel; // Inject grid info axis

	      axis.grid = this; // Index of axis, can be used as key

	      axis.index = idx;

	      this._axesList.push(axis);

	      axesMap[axisType][idx] = axis;
	      axesCount[axisType]++;
	    };
	  }
	};
	/**
	 * Update cartesian properties from series
	 * @param  {module:echarts/model/Option} option
	 * @private
	 */


	gridProto._updateScale = function (ecModel, gridModel) {
	  // Reset scale
	  each(this._axesList, function (axis) {
	    axis.scale.setExtent(Infinity, -Infinity);
	  });
	  ecModel.eachSeries(function (seriesModel) {
	    if (isCartesian2D(seriesModel)) {
	      var axesModels = findAxesModels(seriesModel, ecModel);
	      var xAxisModel = axesModels[0];
	      var yAxisModel = axesModels[1];

	      if (!isAxisUsedInTheGrid(xAxisModel, gridModel, ecModel) || !isAxisUsedInTheGrid(yAxisModel, gridModel, ecModel)) {
	        return;
	      }

	      var cartesian = this.getCartesian(xAxisModel.componentIndex, yAxisModel.componentIndex);
	      var data = seriesModel.getData();
	      var xAxis = cartesian.getAxis('x');
	      var yAxis = cartesian.getAxis('y');

	      if (data.type === 'list') {
	        unionExtent(data, xAxis, seriesModel);
	        unionExtent(data, yAxis, seriesModel);
	      }
	    }
	  }, this);

	  function unionExtent(data, axis, seriesModel) {
	    each(data.mapDimension(axis.dim, true), function (dim) {
	      axis.scale.unionExtentFromData( // For example, the extent of the orginal dimension
	      // is [0.1, 0.5], the extent of the `stackResultDimension`
	      // is [7, 9], the final extent should not include [0.1, 0.5].
	      data, getStackedDimension(data, dim));
	    });
	  }
	};
	/**
	 * @param {string} [dim] 'x' or 'y' or 'auto' or null/undefined
	 * @return {Object} {baseAxes: [], otherAxes: []}
	 */


	gridProto.getTooltipAxes = function (dim) {
	  var baseAxes = [];
	  var otherAxes = [];
	  each(this.getCartesians(), function (cartesian) {
	    var baseAxis = dim != null && dim !== 'auto' ? cartesian.getAxis(dim) : cartesian.getBaseAxis();
	    var otherAxis = cartesian.getOtherAxis(baseAxis);
	    indexOf(baseAxes, baseAxis) < 0 && baseAxes.push(baseAxis);
	    indexOf(otherAxes, otherAxis) < 0 && otherAxes.push(otherAxis);
	  });
	  return {
	    baseAxes: baseAxes,
	    otherAxes: otherAxes
	  };
	};
	/**
	 * @inner
	 */


	function updateAxisTransform(axis, coordBase) {
	  var axisExtent = axis.getExtent();
	  var axisExtentSum = axisExtent[0] + axisExtent[1]; // Fast transform

	  axis.toGlobalCoord = axis.dim === 'x' ? function (coord) {
	    return coord + coordBase;
	  } : function (coord) {
	    return axisExtentSum - coord + coordBase;
	  };
	  axis.toLocalCoord = axis.dim === 'x' ? function (coord) {
	    return coord - coordBase;
	  } : function (coord) {
	    return axisExtentSum - coord + coordBase;
	  };
	}

	var axesTypes = ['xAxis', 'yAxis'];
	/**
	 * @inner
	 */

	function findAxesModels(seriesModel, ecModel) {
	  return map(axesTypes, function (axisType) {
	    var axisModel = seriesModel.getReferringComponents(axisType)[0];
	    return axisModel;
	  });
	}
	/**
	 * @inner
	 */


	function isCartesian2D(seriesModel) {
	  return seriesModel.get('coordinateSystem') === 'cartesian2d';
	}

	Grid.create = function (ecModel, api) {
	  var grids = [];
	  ecModel.eachComponent('grid', function (gridModel, idx) {
	    var grid = new Grid(gridModel, ecModel, api);
	    grid.name = 'grid_' + idx; // dataSampling requires axis extent, so resize
	    // should be performed in create stage.

	    grid.resize(gridModel, api, true);
	    gridModel.coordinateSystem = grid;
	    grids.push(grid);
	  }); // Inject the coordinateSystems into seriesModel

	  ecModel.eachSeries(function (seriesModel) {
	    if (!isCartesian2D(seriesModel)) {
	      return;
	    }

	    var axesModels = findAxesModels(seriesModel, ecModel);
	    var xAxisModel = axesModels[0];
	    var yAxisModel = axesModels[1];
	    var gridModel = xAxisModel.getCoordSysModel();
	    var grid = gridModel.coordinateSystem;
	    seriesModel.coordinateSystem = grid.getCartesian(xAxisModel.componentIndex, yAxisModel.componentIndex);
	  });
	  return grids;
	}; // For deciding which dimensions to use when creating list data


	Grid.dimensions = Grid.prototype.dimensions = Cartesian2D.prototype.dimensions;
	CoordinateSystem.register('cartesian2d', Grid);
	var _default = Grid;
	module.exports = _default;

/***/ }),
/* 331 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(181);

	var Cartesian = __webpack_require__(332);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	function Cartesian2D(name) {
	  Cartesian.call(this, name);
	}

	Cartesian2D.prototype = {
	  constructor: Cartesian2D,
	  type: 'cartesian2d',

	  /**
	   * @type {Array.<string>}
	   * @readOnly
	   */
	  dimensions: ['x', 'y'],

	  /**
	   * Base axis will be used on stacking.
	   *
	   * @return {module:echarts/coord/cartesian/Axis2D}
	   */
	  getBaseAxis: function () {
	    return this.getAxesByScale('ordinal')[0] || this.getAxesByScale('time')[0] || this.getAxis('x');
	  },

	  /**
	   * If contain point
	   * @param {Array.<number>} point
	   * @return {boolean}
	   */
	  containPoint: function (point) {
	    var axisX = this.getAxis('x');
	    var axisY = this.getAxis('y');
	    return axisX.contain(axisX.toLocalCoord(point[0])) && axisY.contain(axisY.toLocalCoord(point[1]));
	  },

	  /**
	   * If contain data
	   * @param {Array.<number>} data
	   * @return {boolean}
	   */
	  containData: function (data) {
	    return this.getAxis('x').containData(data[0]) && this.getAxis('y').containData(data[1]);
	  },

	  /**
	   * @param {Array.<number>} data
	   * @param {Array.<number>} out
	   * @return {Array.<number>}
	   */
	  dataToPoint: function (data, reserved, out) {
	    var xAxis = this.getAxis('x');
	    var yAxis = this.getAxis('y');
	    out = out || [];
	    out[0] = xAxis.toGlobalCoord(xAxis.dataToCoord(data[0]));
	    out[1] = yAxis.toGlobalCoord(yAxis.dataToCoord(data[1]));
	    return out;
	  },

	  /**
	   * @param {Array.<number>} data
	   * @param {Array.<number>} out
	   * @return {Array.<number>}
	   */
	  clampData: function (data, out) {
	    var xScale = this.getAxis('x').scale;
	    var yScale = this.getAxis('y').scale;
	    var xAxisExtent = xScale.getExtent();
	    var yAxisExtent = yScale.getExtent();
	    var x = xScale.parse(data[0]);
	    var y = yScale.parse(data[1]);
	    out = out || [];
	    out[0] = Math.min(Math.max(Math.min(xAxisExtent[0], xAxisExtent[1]), x), Math.max(xAxisExtent[0], xAxisExtent[1]));
	    out[1] = Math.min(Math.max(Math.min(yAxisExtent[0], yAxisExtent[1]), y), Math.max(yAxisExtent[0], yAxisExtent[1]));
	    return out;
	  },

	  /**
	   * @param {Array.<number>} point
	   * @param {Array.<number>} out
	   * @return {Array.<number>}
	   */
	  pointToData: function (point, out) {
	    var xAxis = this.getAxis('x');
	    var yAxis = this.getAxis('y');
	    out = out || [];
	    out[0] = xAxis.coordToData(xAxis.toLocalCoord(point[0]));
	    out[1] = yAxis.coordToData(yAxis.toLocalCoord(point[1]));
	    return out;
	  },

	  /**
	   * Get other axis
	   * @param {module:echarts/coord/cartesian/Axis2D} axis
	   */
	  getOtherAxis: function (axis) {
	    return this.getAxis(axis.dim === 'x' ? 'y' : 'x');
	  }
	};
	zrUtil.inherits(Cartesian2D, Cartesian);
	var _default = Cartesian2D;
	module.exports = _default;

/***/ }),
/* 332 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(181);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/

	/**
	 * Cartesian coordinate system
	 * @module  echarts/coord/Cartesian
	 *
	 */
	function dimAxisMapper(dim) {
	  return this._axes[dim];
	}
	/**
	 * @alias module:echarts/coord/Cartesian
	 * @constructor
	 */


	var Cartesian = function (name) {
	  this._axes = {};
	  this._dimList = [];
	  /**
	   * @type {string}
	   */

	  this.name = name || '';
	};

	Cartesian.prototype = {
	  constructor: Cartesian,
	  type: 'cartesian',

	  /**
	   * Get axis
	   * @param  {number|string} dim
	   * @return {module:echarts/coord/Cartesian~Axis}
	   */
	  getAxis: function (dim) {
	    return this._axes[dim];
	  },

	  /**
	   * Get axes list
	   * @return {Array.<module:echarts/coord/Cartesian~Axis>}
	   */
	  getAxes: function () {
	    return zrUtil.map(this._dimList, dimAxisMapper, this);
	  },

	  /**
	   * Get axes list by given scale type
	   */
	  getAxesByScale: function (scaleType) {
	    scaleType = scaleType.toLowerCase();
	    return zrUtil.filter(this.getAxes(), function (axis) {
	      return axis.scale.type === scaleType;
	    });
	  },

	  /**
	   * Add axis
	   * @param {module:echarts/coord/Cartesian.Axis}
	   */
	  addAxis: function (axis) {
	    var dim = axis.dim;
	    this._axes[dim] = axis;

	    this._dimList.push(dim);
	  },

	  /**
	   * Convert data to coord in nd space
	   * @param {Array.<number>|Object.<string, number>} val
	   * @return {Array.<number>|Object.<string, number>}
	   */
	  dataToCoord: function (val) {
	    return this._dataCoordConvert(val, 'dataToCoord');
	  },

	  /**
	   * Convert coord in nd space to data
	   * @param  {Array.<number>|Object.<string, number>} val
	   * @return {Array.<number>|Object.<string, number>}
	   */
	  coordToData: function (val) {
	    return this._dataCoordConvert(val, 'coordToData');
	  },
	  _dataCoordConvert: function (input, method) {
	    var dimList = this._dimList;
	    var output = input instanceof Array ? [] : {};

	    for (var i = 0; i < dimList.length; i++) {
	      var dim = dimList[i];
	      var axis = this._axes[dim];
	      output[dim] = axis[method](input[dim]);
	    }

	    return output;
	  }
	};
	var _default = Cartesian;
	module.exports = _default;

/***/ }),
/* 333 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(181);

	var Axis = __webpack_require__(317);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/

	/**
	 * Extend axis 2d
	 * @constructor module:echarts/coord/cartesian/Axis2D
	 * @extends {module:echarts/coord/cartesian/Axis}
	 * @param {string} dim
	 * @param {*} scale
	 * @param {Array.<number>} coordExtent
	 * @param {string} axisType
	 * @param {string} position
	 */
	var Axis2D = function (dim, scale, coordExtent, axisType, position) {
	  Axis.call(this, dim, scale, coordExtent);
	  /**
	   * Axis type
	   *  - 'category'
	   *  - 'value'
	   *  - 'time'
	   *  - 'log'
	   * @type {string}
	   */

	  this.type = axisType || 'value';
	  /**
	   * Axis position
	   *  - 'top'
	   *  - 'bottom'
	   *  - 'left'
	   *  - 'right'
	   */

	  this.position = position || 'bottom';
	};

	Axis2D.prototype = {
	  constructor: Axis2D,

	  /**
	   * Index of axis, can be used as key
	   */
	  index: 0,

	  /**
	   * Implemented in <module:echarts/coord/cartesian/Grid>.
	   * @return {Array.<module:echarts/coord/cartesian/Axis2D>}
	   *         If not on zero of other axis, return null/undefined.
	   *         If no axes, return an empty array.
	   */
	  getAxesOnZeroOf: null,

	  /**
	   * Axis model
	   * @param {module:echarts/coord/cartesian/AxisModel}
	   */
	  model: null,
	  isHorizontal: function () {
	    var position = this.position;
	    return position === 'top' || position === 'bottom';
	  },

	  /**
	   * Each item cooresponds to this.getExtent(), which
	   * means globalExtent[0] may greater than globalExtent[1],
	   * unless `asc` is input.
	   *
	   * @param {boolean} [asc]
	   * @return {Array.<number>}
	   */
	  getGlobalExtent: function (asc) {
	    var ret = this.getExtent();
	    ret[0] = this.toGlobalCoord(ret[0]);
	    ret[1] = this.toGlobalCoord(ret[1]);
	    asc && ret[0] > ret[1] && ret.reverse();
	    return ret;
	  },
	  getOtherAxis: function () {
	    this.grid.getOtherAxis();
	  },

	  /**
	   * @override
	   */
	  pointToData: function (point, clamp) {
	    return this.coordToData(this.toLocalCoord(point[this.dim === 'x' ? 0 : 1]), clamp);
	  },

	  /**
	   * Transform global coord to local coord,
	   * i.e. var localCoord = axis.toLocalCoord(80);
	   * designate by module:echarts/coord/cartesian/Grid.
	   * @type {Function}
	   */
	  toLocalCoord: null,

	  /**
	   * Transform global coord to local coord,
	   * i.e. var globalCoord = axis.toLocalCoord(40);
	   * designate by module:echarts/coord/cartesian/Grid.
	   * @type {Function}
	   */
	  toGlobalCoord: null
	};
	zrUtil.inherits(Axis2D, Axis);
	var _default = Axis2D;
	module.exports = _default;

/***/ }),
/* 334 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(335);

	var ComponentModel = __webpack_require__(260);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	// Grid 是在有直角坐标系的时候必须要存在的
	// 所以这里也要被 Cartesian2D 依赖
	var _default = ComponentModel.extend({
	  type: 'grid',
	  dependencies: ['xAxis', 'yAxis'],
	  layoutMode: 'box',

	  /**
	   * @type {module:echarts/coord/cartesian/Grid}
	   */
	  coordinateSystem: null,
	  defaultOption: {
	    show: false,
	    zlevel: 0,
	    z: 0,
	    left: '10%',
	    top: 60,
	    right: '10%',
	    bottom: 60,
	    // If grid size contain label
	    containLabel: false,
	    // width: {totalWidth} - left - right,
	    // height: {totalHeight} - top - bottom,
	    backgroundColor: 'rgba(0,0,0,0)',
	    borderWidth: 1,
	    borderColor: '#ccc'
	  }
	});

	module.exports = _default;

/***/ }),
/* 335 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(181);

	var ComponentModel = __webpack_require__(260);

	var axisModelCreator = __webpack_require__(336);

	var axisModelCommonMixin = __webpack_require__(312);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var AxisModel = ComponentModel.extend({
	  type: 'cartesian2dAxis',

	  /**
	   * @type {module:echarts/coord/cartesian/Axis2D}
	   */
	  axis: null,

	  /**
	   * @override
	   */
	  init: function () {
	    AxisModel.superApply(this, 'init', arguments);
	    this.resetRange();
	  },

	  /**
	   * @override
	   */
	  mergeOption: function () {
	    AxisModel.superApply(this, 'mergeOption', arguments);
	    this.resetRange();
	  },

	  /**
	   * @override
	   */
	  restoreData: function () {
	    AxisModel.superApply(this, 'restoreData', arguments);
	    this.resetRange();
	  },

	  /**
	   * @override
	   * @return {module:echarts/model/Component}
	   */
	  getCoordSysModel: function () {
	    return this.ecModel.queryComponents({
	      mainType: 'grid',
	      index: this.option.gridIndex,
	      id: this.option.gridId
	    })[0];
	  }
	});

	function getAxisType(axisDim, option) {
	  // Default axis with data is category axis
	  return option.type || (option.data ? 'category' : 'value');
	}

	zrUtil.merge(AxisModel.prototype, axisModelCommonMixin);
	var extraOption = {
	  // gridIndex: 0,
	  // gridId: '',
	  // Offset is for multiple axis on the same position
	  offset: 0
	};
	axisModelCreator('x', AxisModel, getAxisType, extraOption);
	axisModelCreator('y', AxisModel, getAxisType, extraOption);
	var _default = AxisModel;
	module.exports = _default;

/***/ }),
/* 336 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(181);

	var axisDefault = __webpack_require__(337);

	var ComponentModel = __webpack_require__(260);

	var _layout = __webpack_require__(262);

	var getLayoutParams = _layout.getLayoutParams;
	var mergeLayoutParam = _layout.mergeLayoutParam;

	var OrdinalMeta = __webpack_require__(306);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	// FIXME axisType is fixed ?
	var AXIS_TYPES = ['value', 'category', 'time', 'log'];
	/**
	 * Generate sub axis model class
	 * @param {string} axisName 'x' 'y' 'radius' 'angle' 'parallel'
	 * @param {module:echarts/model/Component} BaseAxisModelClass
	 * @param {Function} axisTypeDefaulter
	 * @param {Object} [extraDefaultOption]
	 */

	function _default(axisName, BaseAxisModelClass, axisTypeDefaulter, extraDefaultOption) {
	  zrUtil.each(AXIS_TYPES, function (axisType) {
	    BaseAxisModelClass.extend({
	      /**
	       * @readOnly
	       */
	      type: axisName + 'Axis.' + axisType,
	      mergeDefaultAndTheme: function (option, ecModel) {
	        var layoutMode = this.layoutMode;
	        var inputPositionParams = layoutMode ? getLayoutParams(option) : {};
	        var themeModel = ecModel.getTheme();
	        zrUtil.merge(option, themeModel.get(axisType + 'Axis'));
	        zrUtil.merge(option, this.getDefaultOption());
	        option.type = axisTypeDefaulter(axisName, option);

	        if (layoutMode) {
	          mergeLayoutParam(option, inputPositionParams, layoutMode);
	        }
	      },

	      /**
	       * @override
	       */
	      optionUpdated: function () {
	        var thisOption = this.option;

	        if (thisOption.type === 'category') {
	          this.__ordinalMeta = OrdinalMeta.createByAxisModel(this);
	        }
	      },

	      /**
	       * Should not be called before all of 'getInitailData' finished.
	       * Because categories are collected during initializing data.
	       */
	      getCategories: function (rawData) {
	        var option = this.option; // FIXME
	        // warning if called before all of 'getInitailData' finished.

	        if (option.type === 'category') {
	          if (rawData) {
	            return option.data;
	          }

	          return this.__ordinalMeta.categories;
	        }
	      },
	      getOrdinalMeta: function () {
	        return this.__ordinalMeta;
	      },
	      defaultOption: zrUtil.mergeAll([{}, axisDefault[axisType + 'Axis'], extraDefaultOption], true)
	    });
	  });
	  ComponentModel.registerSubTypeDefaulter(axisName + 'Axis', zrUtil.curry(axisTypeDefaulter, axisName));
	}

	module.exports = _default;

/***/ }),
/* 337 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(181);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var defaultOption = {
	  show: true,
	  zlevel: 0,
	  z: 0,
	  // Inverse the axis.
	  inverse: false,
	  // Axis name displayed.
	  name: '',
	  // 'start' | 'middle' | 'end'
	  nameLocation: 'end',
	  // By degree. By defualt auto rotate by nameLocation.
	  nameRotate: null,
	  nameTruncate: {
	    maxWidth: null,
	    ellipsis: '...',
	    placeholder: '.'
	  },
	  // Use global text style by default.
	  nameTextStyle: {},
	  // The gap between axisName and axisLine.
	  nameGap: 15,
	  // Default `false` to support tooltip.
	  silent: false,
	  // Default `false` to avoid legacy user event listener fail.
	  triggerEvent: false,
	  tooltip: {
	    show: false
	  },
	  axisPointer: {},
	  axisLine: {
	    show: true,
	    onZero: true,
	    onZeroAxisIndex: null,
	    lineStyle: {
	      color: '#333',
	      width: 1,
	      type: 'solid'
	    },
	    // The arrow at both ends the the axis.
	    symbol: ['none', 'none'],
	    symbolSize: [10, 15]
	  },
	  axisTick: {
	    show: true,
	    // Whether axisTick is inside the grid or outside the grid.
	    inside: false,
	    // The length of axisTick.
	    length: 5,
	    lineStyle: {
	      width: 1
	    }
	  },
	  axisLabel: {
	    show: true,
	    // Whether axisLabel is inside the grid or outside the grid.
	    inside: false,
	    rotate: 0,
	    // true | false | null/undefined (auto)
	    showMinLabel: null,
	    // true | false | null/undefined (auto)
	    showMaxLabel: null,
	    margin: 8,
	    // formatter: null,
	    fontSize: 12
	  },
	  splitLine: {
	    show: true,
	    lineStyle: {
	      color: ['#ccc'],
	      width: 1,
	      type: 'solid'
	    }
	  },
	  splitArea: {
	    show: false,
	    areaStyle: {
	      color: ['rgba(250,250,250,0.3)', 'rgba(2002002000.3)']
	    }
	  }
	};
	var axisDefault = {};
	axisDefault.categoryAxis = zrUtil.merge({
	  // The gap at both ends of the axis. For categoryAxis, boolean.
	  boundaryGap: true,
	  // Set false to faster category collection.
	  // Only usefull in the case like: category is
	  // ['2012-01-01', '2012-01-02', ...], where the input
	  // data has been ensured not duplicate and is large data.
	  // null means "auto":
	  // if axis.data provided, do not deduplication,
	  // else do deduplication.
	  deduplication: null,
	  // splitArea: {
	  // show: false
	  // },
	  splitLine: {
	    show: false
	  },
	  axisTick: {
	    // If tick is align with label when boundaryGap is true
	    alignWithLabel: false,
	    interval: 'auto'
	  },
	  axisLabel: {
	    interval: 'auto'
	  }
	}, defaultOption);
	axisDefault.valueAxis = zrUtil.merge({
	  // The gap at both ends of the axis. For value axis, [GAP, GAP], where
	  // `GAP` can be an absolute pixel number (like `35`), or percent (like `'30%'`)
	  boundaryGap: [0, 0],
	  // TODO
	  // min/max: [30, datamin, 60] or [20, datamin] or [datamin, 60]
	  // Min value of the axis. can be:
	  // + a number
	  // + 'dataMin': use the min value in data.
	  // + null/undefined: auto decide min value (consider pretty look and boundaryGap).
	  // min: null,
	  // Max value of the axis. can be:
	  // + a number
	  // + 'dataMax': use the max value in data.
	  // + null/undefined: auto decide max value (consider pretty look and boundaryGap).
	  // max: null,
	  // Readonly prop, specifies start value of the range when using data zoom.
	  // rangeStart: null
	  // Readonly prop, specifies end value of the range when using data zoom.
	  // rangeEnd: null
	  // Optional value can be:
	  // + `false`: always include value 0.
	  // + `true`: the extent do not consider value 0.
	  // scale: false,
	  // AxisTick and axisLabel and splitLine are caculated based on splitNumber.
	  splitNumber: 5 // Interval specifies the span of the ticks is mandatorily.
	  // interval: null
	  // Specify min interval when auto calculate tick interval.
	  // minInterval: null
	  // Specify max interval when auto calculate tick interval.
	  // maxInterval: null

	}, defaultOption);
	axisDefault.timeAxis = zrUtil.defaults({
	  scale: true,
	  min: 'dataMin',
	  max: 'dataMax'
	}, axisDefault.valueAxis);
	axisDefault.logAxis = zrUtil.defaults({
	  scale: true,
	  logBase: 10
	}, axisDefault.valueAxis);
	var _default = axisDefault;
	module.exports = _default;

/***/ }),
/* 338 */
/***/ (function(module, exports, __webpack_require__) {

	var BaseBarSeries = __webpack_require__(339);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var _default = BaseBarSeries.extend({
	  type: 'series.bar',
	  dependencies: ['grid', 'polar'],
	  brushSelector: 'rect',

	  /**
	   * @override
	   */
	  getProgressive: function () {
	    // Do not support progressive in normal mode.
	    return this.get('large') ? this.get('progressive') : false;
	  },

	  /**
	   * @override
	   */
	  getProgressiveThreshold: function () {
	    // Do not support progressive in normal mode.
	    var progressiveThreshold = this.get('progressiveThreshold');
	    var largeThreshold = this.get('largeThreshold');

	    if (largeThreshold > progressiveThreshold) {
	      progressiveThreshold = largeThreshold;
	    }

	    return progressiveThreshold;
	  }
	});

	module.exports = _default;

/***/ }),
/* 339 */
/***/ (function(module, exports, __webpack_require__) {

	var SeriesModel = __webpack_require__(278);

	var createListFromArray = __webpack_require__(296);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var _default = SeriesModel.extend({
	  type: 'series.__base_bar__',
	  getInitialData: function (option, ecModel) {
	    return createListFromArray(this.getSource(), this);
	  },
	  getMarkerPosition: function (value) {
	    var coordSys = this.coordinateSystem;

	    if (coordSys) {
	      // PENDING if clamp ?
	      var pt = coordSys.dataToPoint(coordSys.clampData(value));
	      var data = this.getData();
	      var offset = data.getLayout('offset');
	      var size = data.getLayout('size');
	      var offsetIndex = coordSys.getBaseAxis().isHorizontal() ? 0 : 1;
	      pt[offsetIndex] += offset + size / 2;
	      return pt;
	    }

	    return [NaN, NaN];
	  },
	  defaultOption: {
	    zlevel: 0,
	    // 一级层叠
	    z: 2,
	    // 二级层叠
	    coordinateSystem: 'cartesian2d',
	    legendHoverLink: true,
	    // stack: null
	    // Cartesian coordinate system
	    // xAxisIndex: 0,
	    // yAxisIndex: 0,
	    // 最小高度改为0
	    barMinHeight: 0,
	    // 最小角度为0，仅对极坐标系下的柱状图有效
	    barMinAngle: 0,
	    // cursor: null,
	    large: false,
	    largeThreshold: 400,
	    progressive: 5e3,
	    progressiveChunkMode: 'mod',
	    // barMaxWidth: null,
	    // 默认自适应
	    // barWidth: null,
	    // 柱间距离，默认为柱形宽度的30%，可设固定值
	    // barGap: '30%',
	    // 类目间柱形距离，默认为类目间距的20%，可设固定值
	    // barCategoryGap: '20%',
	    // label: {
	    //      show: false
	    // },
	    itemStyle: {},
	    emphasis: {}
	  }
	});

	module.exports = _default;

/***/ }),
/* 340 */
/***/ (function(module, exports, __webpack_require__) {

	var _config = __webpack_require__(177);

	var __DEV__ = _config.__DEV__;

	var echarts = __webpack_require__(176);

	var zrUtil = __webpack_require__(181);

	var graphic = __webpack_require__(226);

	var _helper = __webpack_require__(341);

	var setLabel = _helper.setLabel;

	var Model = __webpack_require__(220);

	var barItemStyle = __webpack_require__(343);

	var Path = __webpack_require__(228);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var BAR_BORDER_WIDTH_QUERY = ['itemStyle', 'barBorderWidth']; // FIXME
	// Just for compatible with ec2.

	zrUtil.extend(Model.prototype, barItemStyle);

	var _default = echarts.extendChartView({
	  type: 'bar',
	  render: function (seriesModel, ecModel, api) {
	    this._updateDrawMode(seriesModel);

	    var coordinateSystemType = seriesModel.get('coordinateSystem');

	    if (coordinateSystemType === 'cartesian2d' || coordinateSystemType === 'polar') {
	      this._isLargeDraw ? this._renderLarge(seriesModel, ecModel, api) : this._renderNormal(seriesModel, ecModel, api);
	    } else {}

	    return this.group;
	  },
	  incrementalPrepareRender: function (seriesModel, ecModel, api) {
	    this._clear();

	    this._updateDrawMode(seriesModel);
	  },
	  incrementalRender: function (params, seriesModel, ecModel, api) {
	    // Do not support progressive in normal mode.
	    this._incrementalRenderLarge(params, seriesModel);
	  },
	  _updateDrawMode: function (seriesModel) {
	    var isLargeDraw = seriesModel.pipelineContext.large;

	    if (this._isLargeDraw == null || isLargeDraw ^ this._isLargeDraw) {
	      this._isLargeDraw = isLargeDraw;

	      this._clear();
	    }
	  },
	  _renderNormal: function (seriesModel, ecModel, api) {
	    var group = this.group;
	    var data = seriesModel.getData();
	    var oldData = this._data;
	    var coord = seriesModel.coordinateSystem;
	    var baseAxis = coord.getBaseAxis();
	    var isHorizontalOrRadial;

	    if (coord.type === 'cartesian2d') {
	      isHorizontalOrRadial = baseAxis.isHorizontal();
	    } else if (coord.type === 'polar') {
	      isHorizontalOrRadial = baseAxis.dim === 'angle';
	    }

	    var animationModel = seriesModel.isAnimationEnabled() ? seriesModel : null;
	    data.diff(oldData).add(function (dataIndex) {
	      if (!data.hasValue(dataIndex)) {
	        return;
	      }

	      var itemModel = data.getItemModel(dataIndex);
	      var layout = getLayout[coord.type](data, dataIndex, itemModel);
	      var el = elementCreator[coord.type](data, dataIndex, itemModel, layout, isHorizontalOrRadial, animationModel);
	      data.setItemGraphicEl(dataIndex, el);
	      group.add(el);
	      updateStyle(el, data, dataIndex, itemModel, layout, seriesModel, isHorizontalOrRadial, coord.type === 'polar');
	    }).update(function (newIndex, oldIndex) {
	      var el = oldData.getItemGraphicEl(oldIndex);

	      if (!data.hasValue(newIndex)) {
	        group.remove(el);
	        return;
	      }

	      var itemModel = data.getItemModel(newIndex);
	      var layout = getLayout[coord.type](data, newIndex, itemModel);

	      if (el) {
	        graphic.updateProps(el, {
	          shape: layout
	        }, animationModel, newIndex);
	      } else {
	        el = elementCreator[coord.type](data, newIndex, itemModel, layout, isHorizontalOrRadial, animationModel, true);
	      }

	      data.setItemGraphicEl(newIndex, el); // Add back

	      group.add(el);
	      updateStyle(el, data, newIndex, itemModel, layout, seriesModel, isHorizontalOrRadial, coord.type === 'polar');
	    }).remove(function (dataIndex) {
	      var el = oldData.getItemGraphicEl(dataIndex);

	      if (coord.type === 'cartesian2d') {
	        el && removeRect(dataIndex, animationModel, el);
	      } else {
	        el && removeSector(dataIndex, animationModel, el);
	      }
	    }).execute();
	    this._data = data;
	  },
	  _renderLarge: function (seriesModel, ecModel, api) {
	    this._clear();

	    createLarge(seriesModel, this.group);
	  },
	  _incrementalRenderLarge: function (params, seriesModel) {
	    createLarge(seriesModel, this.group, true);
	  },
	  dispose: zrUtil.noop,
	  remove: function (ecModel) {
	    this._clear(ecModel);
	  },
	  _clear: function (ecModel) {
	    var group = this.group;
	    var data = this._data;

	    if (ecModel && ecModel.get('animation') && data && !this._isLargeDraw) {
	      data.eachItemGraphicEl(function (el) {
	        if (el.type === 'sector') {
	          removeSector(el.dataIndex, ecModel, el);
	        } else {
	          removeRect(el.dataIndex, ecModel, el);
	        }
	      });
	    } else {
	      group.removeAll();
	    }

	    this._data = null;
	  }
	});

	var elementCreator = {
	  cartesian2d: function (data, dataIndex, itemModel, layout, isHorizontal, animationModel, isUpdate) {
	    var rect = new graphic.Rect({
	      shape: zrUtil.extend({}, layout)
	    }); // Animation

	    if (animationModel) {
	      var rectShape = rect.shape;
	      var animateProperty = isHorizontal ? 'height' : 'width';
	      var animateTarget = {};
	      rectShape[animateProperty] = 0;
	      animateTarget[animateProperty] = layout[animateProperty];
	      graphic[isUpdate ? 'updateProps' : 'initProps'](rect, {
	        shape: animateTarget
	      }, animationModel, dataIndex);
	    }

	    return rect;
	  },
	  polar: function (data, dataIndex, itemModel, layout, isRadial, animationModel, isUpdate) {
	    // Keep the same logic with bar in catesion: use end value to control
	    // direction. Notice that if clockwise is true (by default), the sector
	    // will always draw clockwisely, no matter whether endAngle is greater
	    // or less than startAngle.
	    var clockwise = layout.startAngle < layout.endAngle;
	    var sector = new graphic.Sector({
	      shape: zrUtil.defaults({
	        clockwise: clockwise
	      }, layout)
	    }); // Animation

	    if (animationModel) {
	      var sectorShape = sector.shape;
	      var animateProperty = isRadial ? 'r' : 'endAngle';
	      var animateTarget = {};
	      sectorShape[animateProperty] = isRadial ? 0 : layout.startAngle;
	      animateTarget[animateProperty] = layout[animateProperty];
	      graphic[isUpdate ? 'updateProps' : 'initProps'](sector, {
	        shape: animateTarget
	      }, animationModel, dataIndex);
	    }

	    return sector;
	  }
	};

	function removeRect(dataIndex, animationModel, el) {
	  // Not show text when animating
	  el.style.text = null;
	  graphic.updateProps(el, {
	    shape: {
	      width: 0
	    }
	  }, animationModel, dataIndex, function () {
	    el.parent && el.parent.remove(el);
	  });
	}

	function removeSector(dataIndex, animationModel, el) {
	  // Not show text when animating
	  el.style.text = null;
	  graphic.updateProps(el, {
	    shape: {
	      r: el.shape.r0
	    }
	  }, animationModel, dataIndex, function () {
	    el.parent && el.parent.remove(el);
	  });
	}

	var getLayout = {
	  cartesian2d: function (data, dataIndex, itemModel) {
	    var layout = data.getItemLayout(dataIndex);
	    var fixedLineWidth = getLineWidth(itemModel, layout); // fix layout with lineWidth

	    var signX = layout.width > 0 ? 1 : -1;
	    var signY = layout.height > 0 ? 1 : -1;
	    return {
	      x: layout.x + signX * fixedLineWidth / 2,
	      y: layout.y + signY * fixedLineWidth / 2,
	      width: layout.width - signX * fixedLineWidth,
	      height: layout.height - signY * fixedLineWidth
	    };
	  },
	  polar: function (data, dataIndex, itemModel) {
	    var layout = data.getItemLayout(dataIndex);
	    return {
	      cx: layout.cx,
	      cy: layout.cy,
	      r0: layout.r0,
	      r: layout.r,
	      startAngle: layout.startAngle,
	      endAngle: layout.endAngle
	    };
	  }
	};

	function updateStyle(el, data, dataIndex, itemModel, layout, seriesModel, isHorizontal, isPolar) {
	  var color = data.getItemVisual(dataIndex, 'color');
	  var opacity = data.getItemVisual(dataIndex, 'opacity');
	  var itemStyleModel = itemModel.getModel('itemStyle');
	  var hoverStyle = itemModel.getModel('emphasis.itemStyle').getBarItemStyle();

	  if (!isPolar) {
	    el.setShape('r', itemStyleModel.get('barBorderRadius') || 0);
	  }

	  el.useStyle(zrUtil.defaults({
	    fill: color,
	    opacity: opacity
	  }, itemStyleModel.getBarItemStyle()));
	  var cursorStyle = itemModel.getShallow('cursor');
	  cursorStyle && el.attr('cursor', cursorStyle);
	  var labelPositionOutside = isHorizontal ? layout.height > 0 ? 'bottom' : 'top' : layout.width > 0 ? 'left' : 'right';

	  if (!isPolar) {
	    setLabel(el.style, hoverStyle, itemModel, color, seriesModel, dataIndex, labelPositionOutside);
	  }

	  graphic.setHoverStyle(el, hoverStyle);
	} // In case width or height are too small.


	function getLineWidth(itemModel, rawLayout) {
	  var lineWidth = itemModel.get(BAR_BORDER_WIDTH_QUERY) || 0;
	  return Math.min(lineWidth, Math.abs(rawLayout.width), Math.abs(rawLayout.height));
	}

	var LargePath = Path.extend({
	  type: 'largeBar',
	  shape: {
	    points: []
	  },
	  buildPath: function (ctx, shape) {
	    // Drawing lines is more efficient than drawing
	    // a whole line or drawing rects.
	    var points = shape.points;
	    var startPoint = this.__startPoint;
	    var valueIdx = this.__valueIdx;

	    for (var i = 0; i < points.length; i += 2) {
	      startPoint[this.__valueIdx] = points[i + valueIdx];
	      ctx.moveTo(startPoint[0], startPoint[1]);
	      ctx.lineTo(points[i], points[i + 1]);
	    }
	  }
	});

	function createLarge(seriesModel, group, incremental) {
	  // TODO support polar
	  var data = seriesModel.getData();
	  var startPoint = [];
	  var valueIdx = data.getLayout('valueAxisHorizontal') ? 1 : 0;
	  startPoint[1 - valueIdx] = data.getLayout('valueAxisStart');
	  var el = new LargePath({
	    shape: {
	      points: data.getLayout('largePoints')
	    },
	    incremental: !!incremental,
	    __startPoint: startPoint,
	    __valueIdx: valueIdx
	  });
	  group.add(el);
	  setLargeStyle(el, seriesModel, data);
	}

	function setLargeStyle(el, seriesModel, data) {
	  var borderColor = data.getVisual('borderColor') || data.getVisual('color');
	  var itemStyle = seriesModel.getModel('itemStyle').getItemStyle(['color', 'borderColor']);
	  el.useStyle(itemStyle);
	  el.style.fill = null;
	  el.style.stroke = borderColor;
	  el.style.lineWidth = data.getLayout('barWidth');
	}

	module.exports = _default;

/***/ }),
/* 341 */
/***/ (function(module, exports, __webpack_require__) {

	var graphic = __webpack_require__(226);

	var _labelHelper = __webpack_require__(342);

	var getDefaultLabel = _labelHelper.getDefaultLabel;

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	function setLabel(normalStyle, hoverStyle, itemModel, color, seriesModel, dataIndex, labelPositionOutside) {
	  var labelModel = itemModel.getModel('label');
	  var hoverLabelModel = itemModel.getModel('emphasis.label');
	  graphic.setLabelStyle(normalStyle, hoverStyle, labelModel, hoverLabelModel, {
	    labelFetcher: seriesModel,
	    labelDataIndex: dataIndex,
	    defaultText: getDefaultLabel(seriesModel.getData(), dataIndex),
	    isRectText: true,
	    autoColor: color
	  });
	  fixPosition(normalStyle);
	  fixPosition(hoverStyle);
	}

	function fixPosition(style, labelPositionOutside) {
	  if (style.textPosition === 'outside') {
	    style.textPosition = labelPositionOutside;
	  }
	}

	exports.setLabel = setLabel;

/***/ }),
/* 342 */
/***/ (function(module, exports, __webpack_require__) {

	var _dataProvider = __webpack_require__(280);

	var retrieveRawValue = _dataProvider.retrieveRawValue;

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/

	/**
	 * @param {module:echarts/data/List} data
	 * @param {number} dataIndex
	 * @return {string} label string. Not null/undefined
	 */
	function getDefaultLabel(data, dataIndex) {
	  var labelDims = data.mapDimension('defaultedLabel', true);
	  var len = labelDims.length; // Simple optimization (in lots of cases, label dims length is 1)

	  if (len === 1) {
	    return retrieveRawValue(data, dataIndex, labelDims[0]);
	  } else if (len) {
	    var vals = [];

	    for (var i = 0; i < labelDims.length; i++) {
	      var val = retrieveRawValue(data, dataIndex, labelDims[i]);
	      vals.push(val);
	    }

	    return vals.join(' ');
	  }
	}

	exports.getDefaultLabel = getDefaultLabel;

/***/ }),
/* 343 */
/***/ (function(module, exports, __webpack_require__) {

	var makeStyleMapper = __webpack_require__(223);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var getBarItemStyle = makeStyleMapper([['fill', 'color'], ['stroke', 'borderColor'], ['lineWidth', 'borderWidth'], // Compatitable with 2
	['stroke', 'barBorderColor'], ['lineWidth', 'barBorderWidth'], ['opacity'], ['shadowBlur'], ['shadowOffsetX'], ['shadowOffsetY'], ['shadowColor']]);
	var _default = {
	  getBarItemStyle: function (excludes) {
	    var style = getBarItemStyle(this, excludes);

	    if (this.getBorderLineDash) {
	      var lineDash = this.getBorderLineDash();
	      lineDash && (style.lineDash = lineDash);
	    }

	    return style;
	  }
	};
	module.exports = _default;

/***/ }),
/* 344 */
/***/ (function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(176);

	var zrUtil = __webpack_require__(181);

	var graphic = __webpack_require__(226);

	__webpack_require__(330);

	__webpack_require__(345);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	// Grid view
	echarts.extendComponentView({
	  type: 'grid',
	  render: function (gridModel, ecModel) {
	    this.group.removeAll();

	    if (gridModel.get('show')) {
	      this.group.add(new graphic.Rect({
	        shape: gridModel.coordinateSystem.getRect(),
	        style: zrUtil.defaults({
	          fill: gridModel.get('backgroundColor')
	        }, gridModel.getItemStyle()),
	        silent: true,
	        z2: -1
	      }));
	    }
	  }
	});
	echarts.registerPreprocessor(function (option) {
	  // Only create grid when need
	  if (option.xAxis && option.yAxis && !option.grid) {
	    option.grid = {};
	  }
	});

/***/ }),
/* 345 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(335);

	__webpack_require__(346);

/***/ }),
/* 346 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(181);

	var graphic = __webpack_require__(226);

	var AxisBuilder = __webpack_require__(347);

	var AxisView = __webpack_require__(348);

	var cartesianAxisHelper = __webpack_require__(350);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var axisBuilderAttrs = ['axisLine', 'axisTickLabel', 'axisName'];
	var selfBuilderAttrs = ['splitArea', 'splitLine']; // function getAlignWithLabel(model, axisModel) {
	//     var alignWithLabel = model.get('alignWithLabel');
	//     if (alignWithLabel === 'auto') {
	//         alignWithLabel = axisModel.get('axisTick.alignWithLabel');
	//     }
	//     return alignWithLabel;
	// }

	var CartesianAxisView = AxisView.extend({
	  type: 'cartesianAxis',
	  axisPointerClass: 'CartesianAxisPointer',

	  /**
	   * @override
	   */
	  render: function (axisModel, ecModel, api, payload) {
	    this.group.removeAll();
	    var oldAxisGroup = this._axisGroup;
	    this._axisGroup = new graphic.Group();
	    this.group.add(this._axisGroup);

	    if (!axisModel.get('show')) {
	      return;
	    }

	    var gridModel = axisModel.getCoordSysModel();
	    var layout = cartesianAxisHelper.layout(gridModel, axisModel);
	    var axisBuilder = new AxisBuilder(axisModel, layout);
	    zrUtil.each(axisBuilderAttrs, axisBuilder.add, axisBuilder);

	    this._axisGroup.add(axisBuilder.getGroup());

	    zrUtil.each(selfBuilderAttrs, function (name) {
	      if (axisModel.get(name + '.show')) {
	        this['_' + name](axisModel, gridModel);
	      }
	    }, this);
	    graphic.groupTransition(oldAxisGroup, this._axisGroup, axisModel);
	    CartesianAxisView.superCall(this, 'render', axisModel, ecModel, api, payload);
	  },
	  remove: function () {
	    this._splitAreaColors = null;
	  },

	  /**
	   * @param {module:echarts/coord/cartesian/AxisModel} axisModel
	   * @param {module:echarts/coord/cartesian/GridModel} gridModel
	   * @private
	   */
	  _splitLine: function (axisModel, gridModel) {
	    var axis = axisModel.axis;

	    if (axis.scale.isBlank()) {
	      return;
	    }

	    var splitLineModel = axisModel.getModel('splitLine');
	    var lineStyleModel = splitLineModel.getModel('lineStyle');
	    var lineColors = lineStyleModel.get('color');
	    lineColors = zrUtil.isArray(lineColors) ? lineColors : [lineColors];
	    var gridRect = gridModel.coordinateSystem.getRect();
	    var isHorizontal = axis.isHorizontal();
	    var lineCount = 0;
	    var ticksCoords = axis.getTicksCoords({
	      tickModel: splitLineModel
	    });
	    var p1 = [];
	    var p2 = []; // Simple optimization
	    // Batching the lines if color are the same

	    var lineStyle = lineStyleModel.getLineStyle();

	    for (var i = 0; i < ticksCoords.length; i++) {
	      var tickCoord = axis.toGlobalCoord(ticksCoords[i].coord);

	      if (isHorizontal) {
	        p1[0] = tickCoord;
	        p1[1] = gridRect.y;
	        p2[0] = tickCoord;
	        p2[1] = gridRect.y + gridRect.height;
	      } else {
	        p1[0] = gridRect.x;
	        p1[1] = tickCoord;
	        p2[0] = gridRect.x + gridRect.width;
	        p2[1] = tickCoord;
	      }

	      var colorIndex = lineCount++ % lineColors.length;
	      var tickValue = ticksCoords[i].tickValue;

	      this._axisGroup.add(new graphic.Line(graphic.subPixelOptimizeLine({
	        anid: tickValue != null ? 'line_' + ticksCoords[i].tickValue : null,
	        shape: {
	          x1: p1[0],
	          y1: p1[1],
	          x2: p2[0],
	          y2: p2[1]
	        },
	        style: zrUtil.defaults({
	          stroke: lineColors[colorIndex]
	        }, lineStyle),
	        silent: true
	      })));
	    }
	  },

	  /**
	   * @param {module:echarts/coord/cartesian/AxisModel} axisModel
	   * @param {module:echarts/coord/cartesian/GridModel} gridModel
	   * @private
	   */
	  _splitArea: function (axisModel, gridModel) {
	    var axis = axisModel.axis;

	    if (axis.scale.isBlank()) {
	      return;
	    }

	    var splitAreaModel = axisModel.getModel('splitArea');
	    var areaStyleModel = splitAreaModel.getModel('areaStyle');
	    var areaColors = areaStyleModel.get('color');
	    var gridRect = gridModel.coordinateSystem.getRect();
	    var ticksCoords = axis.getTicksCoords({
	      tickModel: splitAreaModel,
	      clamp: true
	    });

	    if (!ticksCoords.length) {
	      return;
	    } // For Making appropriate splitArea animation, the color and anid
	    // should be corresponding to previous one if possible.


	    var areaColorsLen = areaColors.length;
	    var lastSplitAreaColors = this._splitAreaColors;
	    var newSplitAreaColors = zrUtil.createHashMap();
	    var colorIndex = 0;

	    if (lastSplitAreaColors) {
	      for (var i = 0; i < ticksCoords.length; i++) {
	        var cIndex = lastSplitAreaColors.get(ticksCoords[i].tickValue);

	        if (cIndex != null) {
	          colorIndex = (cIndex + (areaColorsLen - 1) * i) % areaColorsLen;
	          break;
	        }
	      }
	    }

	    var prev = axis.toGlobalCoord(ticksCoords[0].coord);
	    var areaStyle = areaStyleModel.getAreaStyle();
	    areaColors = zrUtil.isArray(areaColors) ? areaColors : [areaColors];

	    for (var i = 1; i < ticksCoords.length; i++) {
	      var tickCoord = axis.toGlobalCoord(ticksCoords[i].coord);
	      var x;
	      var y;
	      var width;
	      var height;

	      if (axis.isHorizontal()) {
	        x = prev;
	        y = gridRect.y;
	        width = tickCoord - x;
	        height = gridRect.height;
	        prev = x + width;
	      } else {
	        x = gridRect.x;
	        y = prev;
	        width = gridRect.width;
	        height = tickCoord - y;
	        prev = y + height;
	      }

	      var tickValue = ticksCoords[i - 1].tickValue;
	      tickValue != null && newSplitAreaColors.set(tickValue, colorIndex);

	      this._axisGroup.add(new graphic.Rect({
	        anid: tickValue != null ? 'area_' + tickValue : null,
	        shape: {
	          x: x,
	          y: y,
	          width: width,
	          height: height
	        },
	        style: zrUtil.defaults({
	          fill: areaColors[colorIndex]
	        }, areaStyle),
	        silent: true
	      }));

	      colorIndex = (colorIndex + 1) % areaColorsLen;
	    }

	    this._splitAreaColors = newSplitAreaColors;
	  }
	});
	CartesianAxisView.extend({
	  type: 'xAxis'
	});
	CartesianAxisView.extend({
	  type: 'yAxis'
	});

/***/ }),
/* 347 */
/***/ (function(module, exports, __webpack_require__) {

	var _util = __webpack_require__(181);

	var retrieve = _util.retrieve;
	var defaults = _util.defaults;
	var extend = _util.extend;
	var each = _util.each;

	var formatUtil = __webpack_require__(264);

	var graphic = __webpack_require__(226);

	var Model = __webpack_require__(220);

	var _number = __webpack_require__(263);

	var isRadianAroundZero = _number.isRadianAroundZero;
	var remRadian = _number.remRadian;

	var _symbol = __webpack_require__(313);

	var createSymbol = _symbol.createSymbol;

	var matrixUtil = __webpack_require__(190);

	var _vector = __webpack_require__(183);

	var v2ApplyTransform = _vector.applyTransform;

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var PI = Math.PI;

	function makeAxisEventDataBase(axisModel) {
	  var eventData = {
	    componentType: axisModel.mainType
	  };
	  eventData[axisModel.mainType + 'Index'] = axisModel.componentIndex;
	  return eventData;
	}
	/**
	 * A final axis is translated and rotated from a "standard axis".
	 * So opt.position and opt.rotation is required.
	 *
	 * A standard axis is and axis from [0, 0] to [0, axisExtent[1]],
	 * for example: (0, 0) ------------> (0, 50)
	 *
	 * nameDirection or tickDirection or labelDirection is 1 means tick
	 * or label is below the standard axis, whereas is -1 means above
	 * the standard axis. labelOffset means offset between label and axis,
	 * which is useful when 'onZero', where axisLabel is in the grid and
	 * label in outside grid.
	 *
	 * Tips: like always,
	 * positive rotation represents anticlockwise, and negative rotation
	 * represents clockwise.
	 * The direction of position coordinate is the same as the direction
	 * of screen coordinate.
	 *
	 * Do not need to consider axis 'inverse', which is auto processed by
	 * axis extent.
	 *
	 * @param {module:zrender/container/Group} group
	 * @param {Object} axisModel
	 * @param {Object} opt Standard axis parameters.
	 * @param {Array.<number>} opt.position [x, y]
	 * @param {number} opt.rotation by radian
	 * @param {number} [opt.nameDirection=1] 1 or -1 Used when nameLocation is 'middle' or 'center'.
	 * @param {number} [opt.tickDirection=1] 1 or -1
	 * @param {number} [opt.labelDirection=1] 1 or -1
	 * @param {number} [opt.labelOffset=0] Usefull when onZero.
	 * @param {string} [opt.axisLabelShow] default get from axisModel.
	 * @param {string} [opt.axisName] default get from axisModel.
	 * @param {number} [opt.axisNameAvailableWidth]
	 * @param {number} [opt.labelRotate] by degree, default get from axisModel.
	 * @param {number} [opt.strokeContainThreshold] Default label interval when label
	 * @param {number} [opt.nameTruncateMaxWidth]
	 */


	var AxisBuilder = function (axisModel, opt) {
	  /**
	   * @readOnly
	   */
	  this.opt = opt;
	  /**
	   * @readOnly
	   */

	  this.axisModel = axisModel; // Default value

	  defaults(opt, {
	    labelOffset: 0,
	    nameDirection: 1,
	    tickDirection: 1,
	    labelDirection: 1,
	    silent: true
	  });
	  /**
	   * @readOnly
	   */

	  this.group = new graphic.Group(); // FIXME Not use a seperate text group?

	  var dumbGroup = new graphic.Group({
	    position: opt.position.slice(),
	    rotation: opt.rotation
	  }); // this.group.add(dumbGroup);
	  // this._dumbGroup = dumbGroup;

	  dumbGroup.updateTransform();
	  this._transform = dumbGroup.transform;
	  this._dumbGroup = dumbGroup;
	};

	AxisBuilder.prototype = {
	  constructor: AxisBuilder,
	  hasBuilder: function (name) {
	    return !!builders[name];
	  },
	  add: function (name) {
	    builders[name].call(this);
	  },
	  getGroup: function () {
	    return this.group;
	  }
	};
	var builders = {
	  /**
	   * @private
	   */
	  axisLine: function () {
	    var opt = this.opt;
	    var axisModel = this.axisModel;

	    if (!axisModel.get('axisLine.show')) {
	      return;
	    }

	    var extent = this.axisModel.axis.getExtent();
	    var matrix = this._transform;
	    var pt1 = [extent[0], 0];
	    var pt2 = [extent[1], 0];

	    if (matrix) {
	      v2ApplyTransform(pt1, pt1, matrix);
	      v2ApplyTransform(pt2, pt2, matrix);
	    }

	    var lineStyle = extend({
	      lineCap: 'round'
	    }, axisModel.getModel('axisLine.lineStyle').getLineStyle());
	    this.group.add(new graphic.Line(graphic.subPixelOptimizeLine({
	      // Id for animation
	      anid: 'line',
	      shape: {
	        x1: pt1[0],
	        y1: pt1[1],
	        x2: pt2[0],
	        y2: pt2[1]
	      },
	      style: lineStyle,
	      strokeContainThreshold: opt.strokeContainThreshold || 5,
	      silent: true,
	      z2: 1
	    })));
	    var arrows = axisModel.get('axisLine.symbol');
	    var arrowSize = axisModel.get('axisLine.symbolSize');
	    var arrowOffset = axisModel.get('axisLine.symbolOffset') || 0;

	    if (typeof arrowOffset === 'number') {
	      arrowOffset = [arrowOffset, arrowOffset];
	    }

	    if (arrows != null) {
	      if (typeof arrows === 'string') {
	        // Use the same arrow for start and end point
	        arrows = [arrows, arrows];
	      }

	      if (typeof arrowSize === 'string' || typeof arrowSize === 'number') {
	        // Use the same size for width and height
	        arrowSize = [arrowSize, arrowSize];
	      }

	      var symbolWidth = arrowSize[0];
	      var symbolHeight = arrowSize[1];
	      each([{
	        rotate: opt.rotation + Math.PI / 2,
	        offset: arrowOffset[0],
	        r: 0
	      }, {
	        rotate: opt.rotation - Math.PI / 2,
	        offset: arrowOffset[1],
	        r: Math.sqrt((pt1[0] - pt2[0]) * (pt1[0] - pt2[0]) + (pt1[1] - pt2[1]) * (pt1[1] - pt2[1]))
	      }], function (point, index) {
	        if (arrows[index] !== 'none' && arrows[index] != null) {
	          var symbol = createSymbol(arrows[index], -symbolWidth / 2, -symbolHeight / 2, symbolWidth, symbolHeight, lineStyle.stroke, true); // Calculate arrow position with offset

	          var r = point.r + point.offset;
	          var pos = [pt1[0] + r * Math.cos(opt.rotation), pt1[1] - r * Math.sin(opt.rotation)];
	          symbol.attr({
	            rotation: point.rotate,
	            position: pos,
	            silent: true
	          });
	          this.group.add(symbol);
	        }
	      }, this);
	    }
	  },

	  /**
	   * @private
	   */
	  axisTickLabel: function () {
	    var axisModel = this.axisModel;
	    var opt = this.opt;
	    var tickEls = buildAxisTick(this, axisModel, opt);
	    var labelEls = buildAxisLabel(this, axisModel, opt);
	    fixMinMaxLabelShow(axisModel, labelEls, tickEls);
	  },

	  /**
	   * @private
	   */
	  axisName: function () {
	    var opt = this.opt;
	    var axisModel = this.axisModel;
	    var name = retrieve(opt.axisName, axisModel.get('name'));

	    if (!name) {
	      return;
	    }

	    var nameLocation = axisModel.get('nameLocation');
	    var nameDirection = opt.nameDirection;
	    var textStyleModel = axisModel.getModel('nameTextStyle');
	    var gap = axisModel.get('nameGap') || 0;
	    var extent = this.axisModel.axis.getExtent();
	    var gapSignal = extent[0] > extent[1] ? -1 : 1;
	    var pos = [nameLocation === 'start' ? extent[0] - gapSignal * gap : nameLocation === 'end' ? extent[1] + gapSignal * gap : (extent[0] + extent[1]) / 2, // 'middle'
	    // Reuse labelOffset.
	    isNameLocationCenter(nameLocation) ? opt.labelOffset + nameDirection * gap : 0];
	    var labelLayout;
	    var nameRotation = axisModel.get('nameRotate');

	    if (nameRotation != null) {
	      nameRotation = nameRotation * PI / 180; // To radian.
	    }

	    var axisNameAvailableWidth;

	    if (isNameLocationCenter(nameLocation)) {
	      labelLayout = innerTextLayout(opt.rotation, nameRotation != null ? nameRotation : opt.rotation, // Adapt to axis.
	      nameDirection);
	    } else {
	      labelLayout = endTextLayout(opt, nameLocation, nameRotation || 0, extent);
	      axisNameAvailableWidth = opt.axisNameAvailableWidth;

	      if (axisNameAvailableWidth != null) {
	        axisNameAvailableWidth = Math.abs(axisNameAvailableWidth / Math.sin(labelLayout.rotation));
	        !isFinite(axisNameAvailableWidth) && (axisNameAvailableWidth = null);
	      }
	    }

	    var textFont = textStyleModel.getFont();
	    var truncateOpt = axisModel.get('nameTruncate', true) || {};
	    var ellipsis = truncateOpt.ellipsis;
	    var maxWidth = retrieve(opt.nameTruncateMaxWidth, truncateOpt.maxWidth, axisNameAvailableWidth); // FIXME
	    // truncate rich text? (consider performance)

	    var truncatedText = ellipsis != null && maxWidth != null ? formatUtil.truncateText(name, maxWidth, textFont, ellipsis, {
	      minChar: 2,
	      placeholder: truncateOpt.placeholder
	    }) : name;
	    var tooltipOpt = axisModel.get('tooltip', true);
	    var mainType = axisModel.mainType;
	    var formatterParams = {
	      componentType: mainType,
	      name: name,
	      $vars: ['name']
	    };
	    formatterParams[mainType + 'Index'] = axisModel.componentIndex;
	    var textEl = new graphic.Text({
	      // Id for animation
	      anid: 'name',
	      __fullText: name,
	      __truncatedText: truncatedText,
	      position: pos,
	      rotation: labelLayout.rotation,
	      silent: isSilent(axisModel),
	      z2: 1,
	      tooltip: tooltipOpt && tooltipOpt.show ? extend({
	        content: name,
	        formatter: function () {
	          return name;
	        },
	        formatterParams: formatterParams
	      }, tooltipOpt) : null
	    });
	    graphic.setTextStyle(textEl.style, textStyleModel, {
	      text: truncatedText,
	      textFont: textFont,
	      textFill: textStyleModel.getTextColor() || axisModel.get('axisLine.lineStyle.color'),
	      textAlign: labelLayout.textAlign,
	      textVerticalAlign: labelLayout.textVerticalAlign
	    });

	    if (axisModel.get('triggerEvent')) {
	      textEl.eventData = makeAxisEventDataBase(axisModel);
	      textEl.eventData.targetType = 'axisName';
	      textEl.eventData.name = name;
	    } // FIXME


	    this._dumbGroup.add(textEl);

	    textEl.updateTransform();
	    this.group.add(textEl);
	    textEl.decomposeTransform();
	  }
	};
	/**
	 * @public
	 * @static
	 * @param {Object} opt
	 * @param {number} axisRotation in radian
	 * @param {number} textRotation in radian
	 * @param {number} direction
	 * @return {Object} {
	 *  rotation, // according to axis
	 *  textAlign,
	 *  textVerticalAlign
	 * }
	 */

	var innerTextLayout = AxisBuilder.innerTextLayout = function (axisRotation, textRotation, direction) {
	  var rotationDiff = remRadian(textRotation - axisRotation);
	  var textAlign;
	  var textVerticalAlign;

	  if (isRadianAroundZero(rotationDiff)) {
	    // Label is parallel with axis line.
	    textVerticalAlign = direction > 0 ? 'top' : 'bottom';
	    textAlign = 'center';
	  } else if (isRadianAroundZero(rotationDiff - PI)) {
	    // Label is inverse parallel with axis line.
	    textVerticalAlign = direction > 0 ? 'bottom' : 'top';
	    textAlign = 'center';
	  } else {
	    textVerticalAlign = 'middle';

	    if (rotationDiff > 0 && rotationDiff < PI) {
	      textAlign = direction > 0 ? 'right' : 'left';
	    } else {
	      textAlign = direction > 0 ? 'left' : 'right';
	    }
	  }

	  return {
	    rotation: rotationDiff,
	    textAlign: textAlign,
	    textVerticalAlign: textVerticalAlign
	  };
	};

	function endTextLayout(opt, textPosition, textRotate, extent) {
	  var rotationDiff = remRadian(textRotate - opt.rotation);
	  var textAlign;
	  var textVerticalAlign;
	  var inverse = extent[0] > extent[1];
	  var onLeft = textPosition === 'start' && !inverse || textPosition !== 'start' && inverse;

	  if (isRadianAroundZero(rotationDiff - PI / 2)) {
	    textVerticalAlign = onLeft ? 'bottom' : 'top';
	    textAlign = 'center';
	  } else if (isRadianAroundZero(rotationDiff - PI * 1.5)) {
	    textVerticalAlign = onLeft ? 'top' : 'bottom';
	    textAlign = 'center';
	  } else {
	    textVerticalAlign = 'middle';

	    if (rotationDiff < PI * 1.5 && rotationDiff > PI / 2) {
	      textAlign = onLeft ? 'left' : 'right';
	    } else {
	      textAlign = onLeft ? 'right' : 'left';
	    }
	  }

	  return {
	    rotation: rotationDiff,
	    textAlign: textAlign,
	    textVerticalAlign: textVerticalAlign
	  };
	}

	function isSilent(axisModel) {
	  var tooltipOpt = axisModel.get('tooltip');
	  return axisModel.get('silent') // Consider mouse cursor, add these restrictions.
	  || !(axisModel.get('triggerEvent') || tooltipOpt && tooltipOpt.show);
	}

	function fixMinMaxLabelShow(axisModel, labelEls, tickEls) {
	  // If min or max are user set, we need to check
	  // If the tick on min(max) are overlap on their neighbour tick
	  // If they are overlapped, we need to hide the min(max) tick label
	  var showMinLabel = axisModel.get('axisLabel.showMinLabel');
	  var showMaxLabel = axisModel.get('axisLabel.showMaxLabel'); // FIXME
	  // Have not consider onBand yet, where tick els is more than label els.

	  labelEls = labelEls || [];
	  tickEls = tickEls || [];
	  var firstLabel = labelEls[0];
	  var nextLabel = labelEls[1];
	  var lastLabel = labelEls[labelEls.length - 1];
	  var prevLabel = labelEls[labelEls.length - 2];
	  var firstTick = tickEls[0];
	  var nextTick = tickEls[1];
	  var lastTick = tickEls[tickEls.length - 1];
	  var prevTick = tickEls[tickEls.length - 2];

	  if (showMinLabel === false) {
	    ignoreEl(firstLabel);
	    ignoreEl(firstTick);
	  } else if (isTwoLabelOverlapped(firstLabel, nextLabel)) {
	    if (showMinLabel) {
	      ignoreEl(nextLabel);
	      ignoreEl(nextTick);
	    } else {
	      ignoreEl(firstLabel);
	      ignoreEl(firstTick);
	    }
	  }

	  if (showMaxLabel === false) {
	    ignoreEl(lastLabel);
	    ignoreEl(lastTick);
	  } else if (isTwoLabelOverlapped(prevLabel, lastLabel)) {
	    if (showMaxLabel) {
	      ignoreEl(prevLabel);
	      ignoreEl(prevTick);
	    } else {
	      ignoreEl(lastLabel);
	      ignoreEl(lastTick);
	    }
	  }
	}

	function ignoreEl(el) {
	  el && (el.ignore = true);
	}

	function isTwoLabelOverlapped(current, next, labelLayout) {
	  // current and next has the same rotation.
	  var firstRect = current && current.getBoundingRect().clone();
	  var nextRect = next && next.getBoundingRect().clone();

	  if (!firstRect || !nextRect) {
	    return;
	  } // When checking intersect of two rotated labels, we use mRotationBack
	  // to avoid that boundingRect is enlarge when using `boundingRect.applyTransform`.


	  var mRotationBack = matrixUtil.identity([]);
	  matrixUtil.rotate(mRotationBack, mRotationBack, -current.rotation);
	  firstRect.applyTransform(matrixUtil.mul([], mRotationBack, current.getLocalTransform()));
	  nextRect.applyTransform(matrixUtil.mul([], mRotationBack, next.getLocalTransform()));
	  return firstRect.intersect(nextRect);
	}

	function isNameLocationCenter(nameLocation) {
	  return nameLocation === 'middle' || nameLocation === 'center';
	}

	function buildAxisTick(axisBuilder, axisModel, opt) {
	  var axis = axisModel.axis;

	  if (!axisModel.get('axisTick.show') || axis.scale.isBlank()) {
	    return;
	  }

	  var tickModel = axisModel.getModel('axisTick');
	  var lineStyleModel = tickModel.getModel('lineStyle');
	  var tickLen = tickModel.get('length');
	  var ticksCoords = axis.getTicksCoords();
	  var pt1 = [];
	  var pt2 = [];
	  var matrix = axisBuilder._transform;
	  var tickEls = [];

	  for (var i = 0; i < ticksCoords.length; i++) {
	    var tickCoord = ticksCoords[i].coord;
	    pt1[0] = tickCoord;
	    pt1[1] = 0;
	    pt2[0] = tickCoord;
	    pt2[1] = opt.tickDirection * tickLen;

	    if (matrix) {
	      v2ApplyTransform(pt1, pt1, matrix);
	      v2ApplyTransform(pt2, pt2, matrix);
	    } // Tick line, Not use group transform to have better line draw


	    var tickEl = new graphic.Line(graphic.subPixelOptimizeLine({
	      // Id for animation
	      anid: 'tick_' + ticksCoords[i].tickValue,
	      shape: {
	        x1: pt1[0],
	        y1: pt1[1],
	        x2: pt2[0],
	        y2: pt2[1]
	      },
	      style: defaults(lineStyleModel.getLineStyle(), {
	        stroke: axisModel.get('axisLine.lineStyle.color')
	      }),
	      z2: 2,
	      silent: true
	    }));
	    axisBuilder.group.add(tickEl);
	    tickEls.push(tickEl);
	  }

	  return tickEls;
	}

	function buildAxisLabel(axisBuilder, axisModel, opt) {
	  var axis = axisModel.axis;
	  var show = retrieve(opt.axisLabelShow, axisModel.get('axisLabel.show'));

	  if (!show || axis.scale.isBlank()) {
	    return;
	  }

	  var labelModel = axisModel.getModel('axisLabel');
	  var labelMargin = labelModel.get('margin');
	  var labels = axis.getViewLabels(); // Special label rotate.

	  var labelRotation = (retrieve(opt.labelRotate, labelModel.get('rotate')) || 0) * PI / 180;
	  var labelLayout = innerTextLayout(opt.rotation, labelRotation, opt.labelDirection);
	  var rawCategoryData = axisModel.getCategories(true);
	  var labelEls = [];
	  var silent = isSilent(axisModel);
	  var triggerEvent = axisModel.get('triggerEvent');
	  each(labels, function (labelItem, index) {
	    var tickValue = labelItem.tickValue;
	    var formattedLabel = labelItem.formattedLabel;
	    var rawLabel = labelItem.rawLabel;
	    var itemLabelModel = labelModel;

	    if (rawCategoryData && rawCategoryData[tickValue] && rawCategoryData[tickValue].textStyle) {
	      itemLabelModel = new Model(rawCategoryData[tickValue].textStyle, labelModel, axisModel.ecModel);
	    }

	    var textColor = itemLabelModel.getTextColor() || axisModel.get('axisLine.lineStyle.color');
	    var tickCoord = axis.dataToCoord(tickValue);
	    var pos = [tickCoord, opt.labelOffset + opt.labelDirection * labelMargin];
	    var textEl = new graphic.Text({
	      // Id for animation
	      anid: 'label_' + tickValue,
	      position: pos,
	      rotation: labelLayout.rotation,
	      silent: silent,
	      z2: 10
	    });
	    graphic.setTextStyle(textEl.style, itemLabelModel, {
	      text: formattedLabel,
	      textAlign: itemLabelModel.getShallow('align', true) || labelLayout.textAlign,
	      textVerticalAlign: itemLabelModel.getShallow('verticalAlign', true) || itemLabelModel.getShallow('baseline', true) || labelLayout.textVerticalAlign,
	      textFill: typeof textColor === 'function' ? textColor( // (1) In category axis with data zoom, tick is not the original
	      // index of axis.data. So tick should not be exposed to user
	      // in category axis.
	      // (2) Compatible with previous version, which always use formatted label as
	      // input. But in interval scale the formatted label is like '223,445', which
	      // maked user repalce ','. So we modify it to return original val but remain
	      // it as 'string' to avoid error in replacing.
	      axis.type === 'category' ? rawLabel : axis.type === 'value' ? tickValue + '' : tickValue, index) : textColor
	    }); // Pack data for mouse event

	    if (triggerEvent) {
	      textEl.eventData = makeAxisEventDataBase(axisModel);
	      textEl.eventData.targetType = 'axisLabel';
	      textEl.eventData.value = rawLabel;
	    } // FIXME


	    axisBuilder._dumbGroup.add(textEl);

	    textEl.updateTransform();
	    labelEls.push(textEl);
	    axisBuilder.group.add(textEl);
	    textEl.decomposeTransform();
	  });
	  return labelEls;
	}

	var _default = AxisBuilder;
	module.exports = _default;

/***/ }),
/* 348 */
/***/ (function(module, exports, __webpack_require__) {

	var _config = __webpack_require__(177);

	var __DEV__ = _config.__DEV__;

	var echarts = __webpack_require__(176);

	var axisPointerModelHelper = __webpack_require__(349);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/

	/**
	 * Base class of AxisView.
	 */
	var AxisView = echarts.extendComponentView({
	  type: 'axis',

	  /**
	   * @private
	   */
	  _axisPointer: null,

	  /**
	   * @protected
	   * @type {string}
	   */
	  axisPointerClass: null,

	  /**
	   * @override
	   */
	  render: function (axisModel, ecModel, api, payload) {
	    // FIXME
	    // This process should proformed after coordinate systems updated
	    // (axis scale updated), and should be performed each time update.
	    // So put it here temporarily, although it is not appropriate to
	    // put a model-writing procedure in `view`.
	    this.axisPointerClass && axisPointerModelHelper.fixValue(axisModel);
	    AxisView.superApply(this, 'render', arguments);
	    updateAxisPointer(this, axisModel, ecModel, api, payload, true);
	  },

	  /**
	   * Action handler.
	   * @public
	   * @param {module:echarts/coord/cartesian/AxisModel} axisModel
	   * @param {module:echarts/model/Global} ecModel
	   * @param {module:echarts/ExtensionAPI} api
	   * @param {Object} payload
	   */
	  updateAxisPointer: function (axisModel, ecModel, api, payload, force) {
	    updateAxisPointer(this, axisModel, ecModel, api, payload, false);
	  },

	  /**
	   * @override
	   */
	  remove: function (ecModel, api) {
	    var axisPointer = this._axisPointer;
	    axisPointer && axisPointer.remove(api);
	    AxisView.superApply(this, 'remove', arguments);
	  },

	  /**
	   * @override
	   */
	  dispose: function (ecModel, api) {
	    disposeAxisPointer(this, api);
	    AxisView.superApply(this, 'dispose', arguments);
	  }
	});

	function updateAxisPointer(axisView, axisModel, ecModel, api, payload, forceRender) {
	  var Clazz = AxisView.getAxisPointerClass(axisView.axisPointerClass);

	  if (!Clazz) {
	    return;
	  }

	  var axisPointerModel = axisPointerModelHelper.getAxisPointerModel(axisModel);
	  axisPointerModel ? (axisView._axisPointer || (axisView._axisPointer = new Clazz())).render(axisModel, axisPointerModel, api, forceRender) : disposeAxisPointer(axisView, api);
	}

	function disposeAxisPointer(axisView, ecModel, api) {
	  var axisPointer = axisView._axisPointer;
	  axisPointer && axisPointer.dispose(ecModel, api);
	  axisView._axisPointer = null;
	}

	var axisPointerClazz = [];

	AxisView.registerAxisPointerClass = function (type, clazz) {
	  axisPointerClazz[type] = clazz;
	};

	AxisView.getAxisPointerClass = function (type) {
	  return type && axisPointerClazz[type];
	};

	var _default = AxisView;
	module.exports = _default;

/***/ }),
/* 349 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(181);

	var Model = __webpack_require__(220);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var each = zrUtil.each;
	var curry = zrUtil.curry; // Build axisPointerModel, mergin tooltip.axisPointer model for each axis.
	// allAxesInfo should be updated when setOption performed.

	function collect(ecModel, api) {
	  var result = {
	    /**
	     * key: makeKey(axis.model)
	     * value: {
	     *      axis,
	     *      coordSys,
	     *      axisPointerModel,
	     *      triggerTooltip,
	     *      involveSeries,
	     *      snap,
	     *      seriesModels,
	     *      seriesDataCount
	     * }
	     */
	    axesInfo: {},
	    seriesInvolved: false,

	    /**
	     * key: makeKey(coordSys.model)
	     * value: Object: key makeKey(axis.model), value: axisInfo
	     */
	    coordSysAxesInfo: {},
	    coordSysMap: {}
	  };
	  collectAxesInfo(result, ecModel, api); // Check seriesInvolved for performance, in case too many series in some chart.

	  result.seriesInvolved && collectSeriesInfo(result, ecModel);
	  return result;
	}

	function collectAxesInfo(result, ecModel, api) {
	  var globalTooltipModel = ecModel.getComponent('tooltip');
	  var globalAxisPointerModel = ecModel.getComponent('axisPointer'); // links can only be set on global.

	  var linksOption = globalAxisPointerModel.get('link', true) || [];
	  var linkGroups = []; // Collect axes info.

	  each(api.getCoordinateSystems(), function (coordSys) {
	    // Some coordinate system do not support axes, like geo.
	    if (!coordSys.axisPointerEnabled) {
	      return;
	    }

	    var coordSysKey = makeKey(coordSys.model);
	    var axesInfoInCoordSys = result.coordSysAxesInfo[coordSysKey] = {};
	    result.coordSysMap[coordSysKey] = coordSys; // Set tooltip (like 'cross') is a convienent way to show axisPointer
	    // for user. So we enable seting tooltip on coordSys model.

	    var coordSysModel = coordSys.model;
	    var baseTooltipModel = coordSysModel.getModel('tooltip', globalTooltipModel);
	    each(coordSys.getAxes(), curry(saveTooltipAxisInfo, false, null)); // If axis tooltip used, choose tooltip axis for each coordSys.
	    // Notice this case: coordSys is `grid` but not `cartesian2D` here.

	    if (coordSys.getTooltipAxes && globalTooltipModel // If tooltip.showContent is set as false, tooltip will not
	    // show but axisPointer will show as normal.
	    && baseTooltipModel.get('show')) {
	      // Compatible with previous logic. But series.tooltip.trigger: 'axis'
	      // or series.data[n].tooltip.trigger: 'axis' are not support any more.
	      var triggerAxis = baseTooltipModel.get('trigger') === 'axis';
	      var cross = baseTooltipModel.get('axisPointer.type') === 'cross';
	      var tooltipAxes = coordSys.getTooltipAxes(baseTooltipModel.get('axisPointer.axis'));

	      if (triggerAxis || cross) {
	        each(tooltipAxes.baseAxes, curry(saveTooltipAxisInfo, cross ? 'cross' : true, triggerAxis));
	      }

	      if (cross) {
	        each(tooltipAxes.otherAxes, curry(saveTooltipAxisInfo, 'cross', false));
	      }
	    } // fromTooltip: true | false | 'cross'
	    // triggerTooltip: true | false | null


	    function saveTooltipAxisInfo(fromTooltip, triggerTooltip, axis) {
	      var axisPointerModel = axis.model.getModel('axisPointer', globalAxisPointerModel);
	      var axisPointerShow = axisPointerModel.get('show');

	      if (!axisPointerShow || axisPointerShow === 'auto' && !fromTooltip && !isHandleTrigger(axisPointerModel)) {
	        return;
	      }

	      if (triggerTooltip == null) {
	        triggerTooltip = axisPointerModel.get('triggerTooltip');
	      }

	      axisPointerModel = fromTooltip ? makeAxisPointerModel(axis, baseTooltipModel, globalAxisPointerModel, ecModel, fromTooltip, triggerTooltip) : axisPointerModel;
	      var snap = axisPointerModel.get('snap');
	      var key = makeKey(axis.model);
	      var involveSeries = triggerTooltip || snap || axis.type === 'category'; // If result.axesInfo[key] exist, override it (tooltip has higher priority).

	      var axisInfo = result.axesInfo[key] = {
	        key: key,
	        axis: axis,
	        coordSys: coordSys,
	        axisPointerModel: axisPointerModel,
	        triggerTooltip: triggerTooltip,
	        involveSeries: involveSeries,
	        snap: snap,
	        useHandle: isHandleTrigger(axisPointerModel),
	        seriesModels: []
	      };
	      axesInfoInCoordSys[key] = axisInfo;
	      result.seriesInvolved |= involveSeries;
	      var groupIndex = getLinkGroupIndex(linksOption, axis);

	      if (groupIndex != null) {
	        var linkGroup = linkGroups[groupIndex] || (linkGroups[groupIndex] = {
	          axesInfo: {}
	        });
	        linkGroup.axesInfo[key] = axisInfo;
	        linkGroup.mapper = linksOption[groupIndex].mapper;
	        axisInfo.linkGroup = linkGroup;
	      }
	    }
	  });
	}

	function makeAxisPointerModel(axis, baseTooltipModel, globalAxisPointerModel, ecModel, fromTooltip, triggerTooltip) {
	  var tooltipAxisPointerModel = baseTooltipModel.getModel('axisPointer');
	  var volatileOption = {};
	  each(['type', 'snap', 'lineStyle', 'shadowStyle', 'label', 'animation', 'animationDurationUpdate', 'animationEasingUpdate', 'z'], function (field) {
	    volatileOption[field] = zrUtil.clone(tooltipAxisPointerModel.get(field));
	  }); // category axis do not auto snap, otherwise some tick that do not
	  // has value can not be hovered. value/time/log axis default snap if
	  // triggered from tooltip and trigger tooltip.

	  volatileOption.snap = axis.type !== 'category' && !!triggerTooltip; // Compatibel with previous behavior, tooltip axis do not show label by default.
	  // Only these properties can be overrided from tooltip to axisPointer.

	  if (tooltipAxisPointerModel.get('type') === 'cross') {
	    volatileOption.type = 'line';
	  }

	  var labelOption = volatileOption.label || (volatileOption.label = {}); // Follow the convention, do not show label when triggered by tooltip by default.

	  labelOption.show == null && (labelOption.show = false);

	  if (fromTooltip === 'cross') {
	    // When 'cross', both axes show labels.
	    var tooltipAxisPointerLabelShow = tooltipAxisPointerModel.get('label.show');
	    labelOption.show = tooltipAxisPointerLabelShow != null ? tooltipAxisPointerLabelShow : true; // If triggerTooltip, this is a base axis, which should better not use cross style
	    // (cross style is dashed by default)

	    if (!triggerTooltip) {
	      var crossStyle = volatileOption.lineStyle = tooltipAxisPointerModel.get('crossStyle');
	      crossStyle && zrUtil.defaults(labelOption, crossStyle.textStyle);
	    }
	  }

	  return axis.model.getModel('axisPointer', new Model(volatileOption, globalAxisPointerModel, ecModel));
	}

	function collectSeriesInfo(result, ecModel) {
	  // Prepare data for axis trigger
	  ecModel.eachSeries(function (seriesModel) {
	    // Notice this case: this coordSys is `cartesian2D` but not `grid`.
	    var coordSys = seriesModel.coordinateSystem;
	    var seriesTooltipTrigger = seriesModel.get('tooltip.trigger', true);
	    var seriesTooltipShow = seriesModel.get('tooltip.show', true);

	    if (!coordSys || seriesTooltipTrigger === 'none' || seriesTooltipTrigger === false || seriesTooltipTrigger === 'item' || seriesTooltipShow === false || seriesModel.get('axisPointer.show', true) === false) {
	      return;
	    }

	    each(result.coordSysAxesInfo[makeKey(coordSys.model)], function (axisInfo) {
	      var axis = axisInfo.axis;

	      if (coordSys.getAxis(axis.dim) === axis) {
	        axisInfo.seriesModels.push(seriesModel);
	        axisInfo.seriesDataCount == null && (axisInfo.seriesDataCount = 0);
	        axisInfo.seriesDataCount += seriesModel.getData().count();
	      }
	    });
	  }, this);
	}
	/**
	 * For example:
	 * {
	 *     axisPointer: {
	 *         links: [{
	 *             xAxisIndex: [2, 4],
	 *             yAxisIndex: 'all'
	 *         }, {
	 *             xAxisId: ['a5', 'a7'],
	 *             xAxisName: 'xxx'
	 *         }]
	 *     }
	 * }
	 */


	function getLinkGroupIndex(linksOption, axis) {
	  var axisModel = axis.model;
	  var dim = axis.dim;

	  for (var i = 0; i < linksOption.length; i++) {
	    var linkOption = linksOption[i] || {};

	    if (checkPropInLink(linkOption[dim + 'AxisId'], axisModel.id) || checkPropInLink(linkOption[dim + 'AxisIndex'], axisModel.componentIndex) || checkPropInLink(linkOption[dim + 'AxisName'], axisModel.name)) {
	      return i;
	    }
	  }
	}

	function checkPropInLink(linkPropValue, axisPropValue) {
	  return linkPropValue === 'all' || zrUtil.isArray(linkPropValue) && zrUtil.indexOf(linkPropValue, axisPropValue) >= 0 || linkPropValue === axisPropValue;
	}

	function fixValue(axisModel) {
	  var axisInfo = getAxisInfo(axisModel);

	  if (!axisInfo) {
	    return;
	  }

	  var axisPointerModel = axisInfo.axisPointerModel;
	  var scale = axisInfo.axis.scale;
	  var option = axisPointerModel.option;
	  var status = axisPointerModel.get('status');
	  var value = axisPointerModel.get('value'); // Parse init value for category and time axis.

	  if (value != null) {
	    value = scale.parse(value);
	  }

	  var useHandle = isHandleTrigger(axisPointerModel); // If `handle` used, `axisPointer` will always be displayed, so value
	  // and status should be initialized.

	  if (status == null) {
	    option.status = useHandle ? 'show' : 'hide';
	  }

	  var extent = scale.getExtent().slice();
	  extent[0] > extent[1] && extent.reverse();

	  if ( // Pick a value on axis when initializing.
	  value == null // If both `handle` and `dataZoom` are used, value may be out of axis extent,
	  // where we should re-pick a value to keep `handle` displaying normally.
	  || value > extent[1]) {
	    // Make handle displayed on the end of the axis when init, which looks better.
	    value = extent[1];
	  }

	  if (value < extent[0]) {
	    value = extent[0];
	  }

	  option.value = value;

	  if (useHandle) {
	    option.status = axisInfo.axis.scale.isBlank() ? 'hide' : 'show';
	  }
	}

	function getAxisInfo(axisModel) {
	  var coordSysAxesInfo = (axisModel.ecModel.getComponent('axisPointer') || {}).coordSysAxesInfo;
	  return coordSysAxesInfo && coordSysAxesInfo.axesInfo[makeKey(axisModel)];
	}

	function getAxisPointerModel(axisModel) {
	  var axisInfo = getAxisInfo(axisModel);
	  return axisInfo && axisInfo.axisPointerModel;
	}

	function isHandleTrigger(axisPointerModel) {
	  return !!axisPointerModel.get('handle.show');
	}
	/**
	 * @param {module:echarts/model/Model} model
	 * @return {string} unique key
	 */


	function makeKey(model) {
	  return model.type + '||' + model.id;
	}

	exports.collect = collect;
	exports.fixValue = fixValue;
	exports.getAxisInfo = getAxisInfo;
	exports.getAxisPointerModel = getAxisPointerModel;
	exports.makeKey = makeKey;

/***/ }),
/* 350 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(181);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/

	/**
	 * Can only be called after coordinate system creation stage.
	 * (Can be called before coordinate system update stage).
	 *
	 * @param {Object} opt {labelInside}
	 * @return {Object} {
	 *  position, rotation, labelDirection, labelOffset,
	 *  tickDirection, labelRotate, z2
	 * }
	 */
	function layout(gridModel, axisModel, opt) {
	  opt = opt || {};
	  var grid = gridModel.coordinateSystem;
	  var axis = axisModel.axis;
	  var layout = {};
	  var otherAxisOnZeroOf = axis.getAxesOnZeroOf()[0];
	  var rawAxisPosition = axis.position;
	  var axisPosition = otherAxisOnZeroOf ? 'onZero' : rawAxisPosition;
	  var axisDim = axis.dim;
	  var rect = grid.getRect();
	  var rectBound = [rect.x, rect.x + rect.width, rect.y, rect.y + rect.height];
	  var idx = {
	    left: 0,
	    right: 1,
	    top: 0,
	    bottom: 1,
	    onZero: 2
	  };
	  var axisOffset = axisModel.get('offset') || 0;
	  var posBound = axisDim === 'x' ? [rectBound[2] - axisOffset, rectBound[3] + axisOffset] : [rectBound[0] - axisOffset, rectBound[1] + axisOffset];

	  if (otherAxisOnZeroOf) {
	    var onZeroCoord = otherAxisOnZeroOf.toGlobalCoord(otherAxisOnZeroOf.dataToCoord(0));
	    posBound[idx['onZero']] = Math.max(Math.min(onZeroCoord, posBound[1]), posBound[0]);
	  } // Axis position


	  layout.position = [axisDim === 'y' ? posBound[idx[axisPosition]] : rectBound[0], axisDim === 'x' ? posBound[idx[axisPosition]] : rectBound[3]]; // Axis rotation

	  layout.rotation = Math.PI / 2 * (axisDim === 'x' ? 0 : 1); // Tick and label direction, x y is axisDim

	  var dirMap = {
	    top: -1,
	    bottom: 1,
	    left: -1,
	    right: 1
	  };
	  layout.labelDirection = layout.tickDirection = layout.nameDirection = dirMap[rawAxisPosition];
	  layout.labelOffset = otherAxisOnZeroOf ? posBound[idx[rawAxisPosition]] - posBound[idx['onZero']] : 0;

	  if (axisModel.get('axisTick.inside')) {
	    layout.tickDirection = -layout.tickDirection;
	  }

	  if (zrUtil.retrieve(opt.labelInside, axisModel.get('axisLabel.inside'))) {
	    layout.labelDirection = -layout.labelDirection;
	  } // Special label rotation


	  var labelRotate = axisModel.get('axisLabel.rotate');
	  layout.labelRotate = axisPosition === 'top' ? -labelRotate : labelRotate; // Over splitLine and splitArea

	  layout.z2 = 1;
	  return layout;
	}

	exports.layout = layout;

/***/ }),
/* 351 */
/***/ (function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(176);

	__webpack_require__(352);

	__webpack_require__(361);

	__webpack_require__(362);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	// FIXME Better way to pack data in graphic element

	/**
	 * @action
	 * @property {string} type
	 * @property {number} seriesIndex
	 * @property {number} dataIndex
	 * @property {number} [x]
	 * @property {number} [y]
	 */
	echarts.registerAction({
	  type: 'showTip',
	  event: 'showTip',
	  update: 'tooltip:manuallyShowTip'
	}, // noop
	function () {});
	echarts.registerAction({
	  type: 'hideTip',
	  event: 'hideTip',
	  update: 'tooltip:manuallyHideTip'
	}, // noop
	function () {});

/***/ }),
/* 352 */
/***/ (function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(176);

	var zrUtil = __webpack_require__(181);

	var axisPointerModelHelper = __webpack_require__(349);

	var axisTrigger = __webpack_require__(353);

	__webpack_require__(355);

	__webpack_require__(356);

	__webpack_require__(358);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	// CartesianAxisPointer is not supposed to be required here. But consider
	// echarts.simple.js and online build tooltip, which only require gridSimple,
	// CartesianAxisPointer should be able to required somewhere.
	echarts.registerPreprocessor(function (option) {
	  // Always has a global axisPointerModel for default setting.
	  if (option) {
	    (!option.axisPointer || option.axisPointer.length === 0) && (option.axisPointer = {});
	    var link = option.axisPointer.link; // Normalize to array to avoid object mergin. But if link
	    // is not set, remain null/undefined, otherwise it will
	    // override existent link setting.

	    if (link && !zrUtil.isArray(link)) {
	      option.axisPointer.link = [link];
	    }
	  }
	}); // This process should proformed after coordinate systems created
	// and series data processed. So put it on statistic processing stage.

	echarts.registerProcessor(echarts.PRIORITY.PROCESSOR.STATISTIC, function (ecModel, api) {
	  // Build axisPointerModel, mergin tooltip.axisPointer model for each axis.
	  // allAxesInfo should be updated when setOption performed.
	  ecModel.getComponent('axisPointer').coordSysAxesInfo = axisPointerModelHelper.collect(ecModel, api);
	}); // Broadcast to all views.

	echarts.registerAction({
	  type: 'updateAxisPointer',
	  event: 'updateAxisPointer',
	  update: ':updateAxisPointer'
	}, axisTrigger);

/***/ }),
/* 353 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(181);

	var _model = __webpack_require__(219);

	var makeInner = _model.makeInner;

	var modelHelper = __webpack_require__(349);

	var findPointFromSeries = __webpack_require__(354);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var each = zrUtil.each;
	var curry = zrUtil.curry;
	var inner = makeInner();
	/**
	 * Basic logic: check all axis, if they do not demand show/highlight,
	 * then hide/downplay them.
	 *
	 * @param {Object} coordSysAxesInfo
	 * @param {Object} payload
	 * @param {string} [payload.currTrigger] 'click' | 'mousemove' | 'leave'
	 * @param {Array.<number>} [payload.x] x and y, which are mandatory, specify a point to
	 *              trigger axisPointer and tooltip.
	 * @param {Array.<number>} [payload.y] x and y, which are mandatory, specify a point to
	 *              trigger axisPointer and tooltip.
	 * @param {Object} [payload.seriesIndex] finder, optional, restrict target axes.
	 * @param {Object} [payload.dataIndex] finder, restrict target axes.
	 * @param {Object} [payload.axesInfo] finder, restrict target axes.
	 *        [{
	 *          axisDim: 'x'|'y'|'angle'|...,
	 *          axisIndex: ...,
	 *          value: ...
	 *        }, ...]
	 * @param {Function} [payload.dispatchAction]
	 * @param {Object} [payload.tooltipOption]
	 * @param {Object|Array.<number>|Function} [payload.position] Tooltip position,
	 *        which can be specified in dispatchAction
	 * @param {module:echarts/model/Global} ecModel
	 * @param {module:echarts/ExtensionAPI} api
	 * @return {Object} content of event obj for echarts.connect.
	 */

	function _default(payload, ecModel, api) {
	  var currTrigger = payload.currTrigger;
	  var point = [payload.x, payload.y];
	  var finder = payload;
	  var dispatchAction = payload.dispatchAction || zrUtil.bind(api.dispatchAction, api);
	  var coordSysAxesInfo = ecModel.getComponent('axisPointer').coordSysAxesInfo; // Pending
	  // See #6121. But we are not able to reproduce it yet.

	  if (!coordSysAxesInfo) {
	    return;
	  }

	  if (illegalPoint(point)) {
	    // Used in the default behavior of `connection`: use the sample seriesIndex
	    // and dataIndex. And also used in the tooltipView trigger.
	    point = findPointFromSeries({
	      seriesIndex: finder.seriesIndex,
	      // Do not use dataIndexInside from other ec instance.
	      // FIXME: auto detect it?
	      dataIndex: finder.dataIndex
	    }, ecModel).point;
	  }

	  var isIllegalPoint = illegalPoint(point); // Axis and value can be specified when calling dispatchAction({type: 'updateAxisPointer'}).
	  // Notice: In this case, it is difficult to get the `point` (which is necessary to show
	  // tooltip, so if point is not given, we just use the point found by sample seriesIndex
	  // and dataIndex.

	  var inputAxesInfo = finder.axesInfo;
	  var axesInfo = coordSysAxesInfo.axesInfo;
	  var shouldHide = currTrigger === 'leave' || illegalPoint(point);
	  var outputFinder = {};
	  var showValueMap = {};
	  var dataByCoordSys = {
	    list: [],
	    map: {}
	  };
	  var updaters = {
	    showPointer: curry(showPointer, showValueMap),
	    showTooltip: curry(showTooltip, dataByCoordSys)
	  }; // Process for triggered axes.

	  each(coordSysAxesInfo.coordSysMap, function (coordSys, coordSysKey) {
	    // If a point given, it must be contained by the coordinate system.
	    var coordSysContainsPoint = isIllegalPoint || coordSys.containPoint(point);
	    each(coordSysAxesInfo.coordSysAxesInfo[coordSysKey], function (axisInfo, key) {
	      var axis = axisInfo.axis;
	      var inputAxisInfo = findInputAxisInfo(inputAxesInfo, axisInfo); // If no inputAxesInfo, no axis is restricted.

	      if (!shouldHide && coordSysContainsPoint && (!inputAxesInfo || inputAxisInfo)) {
	        var val = inputAxisInfo && inputAxisInfo.value;

	        if (val == null && !isIllegalPoint) {
	          val = axis.pointToData(point);
	        }

	        val != null && processOnAxis(axisInfo, val, updaters, false, outputFinder);
	      }
	    });
	  }); // Process for linked axes.

	  var linkTriggers = {};
	  each(axesInfo, function (tarAxisInfo, tarKey) {
	    var linkGroup = tarAxisInfo.linkGroup; // If axis has been triggered in the previous stage, it should not be triggered by link.

	    if (linkGroup && !showValueMap[tarKey]) {
	      each(linkGroup.axesInfo, function (srcAxisInfo, srcKey) {
	        var srcValItem = showValueMap[srcKey]; // If srcValItem exist, source axis is triggered, so link to target axis.

	        if (srcAxisInfo !== tarAxisInfo && srcValItem) {
	          var val = srcValItem.value;
	          linkGroup.mapper && (val = tarAxisInfo.axis.scale.parse(linkGroup.mapper(val, makeMapperParam(srcAxisInfo), makeMapperParam(tarAxisInfo))));
	          linkTriggers[tarAxisInfo.key] = val;
	        }
	      });
	    }
	  });
	  each(linkTriggers, function (val, tarKey) {
	    processOnAxis(axesInfo[tarKey], val, updaters, true, outputFinder);
	  });
	  updateModelActually(showValueMap, axesInfo, outputFinder);
	  dispatchTooltipActually(dataByCoordSys, point, payload, dispatchAction);
	  dispatchHighDownActually(axesInfo, dispatchAction, api);
	  return outputFinder;
	}

	function processOnAxis(axisInfo, newValue, updaters, dontSnap, outputFinder) {
	  var axis = axisInfo.axis;

	  if (axis.scale.isBlank() || !axis.containData(newValue)) {
	    return;
	  }

	  if (!axisInfo.involveSeries) {
	    updaters.showPointer(axisInfo, newValue);
	    return;
	  } // Heavy calculation. So put it after axis.containData checking.


	  var payloadInfo = buildPayloadsBySeries(newValue, axisInfo);
	  var payloadBatch = payloadInfo.payloadBatch;
	  var snapToValue = payloadInfo.snapToValue; // Fill content of event obj for echarts.connect.
	  // By defualt use the first involved series data as a sample to connect.

	  if (payloadBatch[0] && outputFinder.seriesIndex == null) {
	    zrUtil.extend(outputFinder, payloadBatch[0]);
	  } // If no linkSource input, this process is for collecting link
	  // target, where snap should not be accepted.


	  if (!dontSnap && axisInfo.snap) {
	    if (axis.containData(snapToValue) && snapToValue != null) {
	      newValue = snapToValue;
	    }
	  }

	  updaters.showPointer(axisInfo, newValue, payloadBatch, outputFinder); // Tooltip should always be snapToValue, otherwise there will be
	  // incorrect "axis value ~ series value" mapping displayed in tooltip.

	  updaters.showTooltip(axisInfo, payloadInfo, snapToValue);
	}

	function buildPayloadsBySeries(value, axisInfo) {
	  var axis = axisInfo.axis;
	  var dim = axis.dim;
	  var snapToValue = value;
	  var payloadBatch = [];
	  var minDist = Number.MAX_VALUE;
	  var minDiff = -1;
	  each(axisInfo.seriesModels, function (series, idx) {
	    var dataDim = series.getData().mapDimension(dim, true);
	    var seriesNestestValue;
	    var dataIndices;

	    if (series.getAxisTooltipData) {
	      var result = series.getAxisTooltipData(dataDim, value, axis);
	      dataIndices = result.dataIndices;
	      seriesNestestValue = result.nestestValue;
	    } else {
	      dataIndices = series.getData().indicesOfNearest(dataDim[0], value, // Add a threshold to avoid find the wrong dataIndex
	      // when data length is not same.
	      // false,
	      axis.type === 'category' ? 0.5 : null);

	      if (!dataIndices.length) {
	        return;
	      }

	      seriesNestestValue = series.getData().get(dataDim[0], dataIndices[0]);
	    }

	    if (seriesNestestValue == null || !isFinite(seriesNestestValue)) {
	      return;
	    }

	    var diff = value - seriesNestestValue;
	    var dist = Math.abs(diff); // Consider category case

	    if (dist <= minDist) {
	      if (dist < minDist || diff >= 0 && minDiff < 0) {
	        minDist = dist;
	        minDiff = diff;
	        snapToValue = seriesNestestValue;
	        payloadBatch.length = 0;
	      }

	      each(dataIndices, function (dataIndex) {
	        payloadBatch.push({
	          seriesIndex: series.seriesIndex,
	          dataIndexInside: dataIndex,
	          dataIndex: series.getData().getRawIndex(dataIndex)
	        });
	      });
	    }
	  });
	  return {
	    payloadBatch: payloadBatch,
	    snapToValue: snapToValue
	  };
	}

	function showPointer(showValueMap, axisInfo, value, payloadBatch) {
	  showValueMap[axisInfo.key] = {
	    value: value,
	    payloadBatch: payloadBatch
	  };
	}

	function showTooltip(dataByCoordSys, axisInfo, payloadInfo, value) {
	  var payloadBatch = payloadInfo.payloadBatch;
	  var axis = axisInfo.axis;
	  var axisModel = axis.model;
	  var axisPointerModel = axisInfo.axisPointerModel; // If no data, do not create anything in dataByCoordSys,
	  // whose length will be used to judge whether dispatch action.

	  if (!axisInfo.triggerTooltip || !payloadBatch.length) {
	    return;
	  }

	  var coordSysModel = axisInfo.coordSys.model;
	  var coordSysKey = modelHelper.makeKey(coordSysModel);
	  var coordSysItem = dataByCoordSys.map[coordSysKey];

	  if (!coordSysItem) {
	    coordSysItem = dataByCoordSys.map[coordSysKey] = {
	      coordSysId: coordSysModel.id,
	      coordSysIndex: coordSysModel.componentIndex,
	      coordSysType: coordSysModel.type,
	      coordSysMainType: coordSysModel.mainType,
	      dataByAxis: []
	    };
	    dataByCoordSys.list.push(coordSysItem);
	  }

	  coordSysItem.dataByAxis.push({
	    axisDim: axis.dim,
	    axisIndex: axisModel.componentIndex,
	    axisType: axisModel.type,
	    axisId: axisModel.id,
	    value: value,
	    // Caustion: viewHelper.getValueLabel is actually on "view stage", which
	    // depends that all models have been updated. So it should not be performed
	    // here. Considering axisPointerModel used here is volatile, which is hard
	    // to be retrieve in TooltipView, we prepare parameters here.
	    valueLabelOpt: {
	      precision: axisPointerModel.get('label.precision'),
	      formatter: axisPointerModel.get('label.formatter')
	    },
	    seriesDataIndices: payloadBatch.slice()
	  });
	}

	function updateModelActually(showValueMap, axesInfo, outputFinder) {
	  var outputAxesInfo = outputFinder.axesInfo = []; // Basic logic: If no 'show' required, 'hide' this axisPointer.

	  each(axesInfo, function (axisInfo, key) {
	    var option = axisInfo.axisPointerModel.option;
	    var valItem = showValueMap[key];

	    if (valItem) {
	      !axisInfo.useHandle && (option.status = 'show');
	      option.value = valItem.value; // For label formatter param and highlight.

	      option.seriesDataIndices = (valItem.payloadBatch || []).slice();
	    } // When always show (e.g., handle used), remain
	    // original value and status.
	    else {
	        // If hide, value still need to be set, consider
	        // click legend to toggle axis blank.
	        !axisInfo.useHandle && (option.status = 'hide');
	      } // If status is 'hide', should be no info in payload.


	    option.status === 'show' && outputAxesInfo.push({
	      axisDim: axisInfo.axis.dim,
	      axisIndex: axisInfo.axis.model.componentIndex,
	      value: option.value
	    });
	  });
	}

	function dispatchTooltipActually(dataByCoordSys, point, payload, dispatchAction) {
	  // Basic logic: If no showTip required, hideTip will be dispatched.
	  if (illegalPoint(point) || !dataByCoordSys.list.length) {
	    dispatchAction({
	      type: 'hideTip'
	    });
	    return;
	  } // In most case only one axis (or event one series is used). It is
	  // convinient to fetch payload.seriesIndex and payload.dataIndex
	  // dirtectly. So put the first seriesIndex and dataIndex of the first
	  // axis on the payload.


	  var sampleItem = ((dataByCoordSys.list[0].dataByAxis[0] || {}).seriesDataIndices || [])[0] || {};
	  dispatchAction({
	    type: 'showTip',
	    escapeConnect: true,
	    x: point[0],
	    y: point[1],
	    tooltipOption: payload.tooltipOption,
	    position: payload.position,
	    dataIndexInside: sampleItem.dataIndexInside,
	    dataIndex: sampleItem.dataIndex,
	    seriesIndex: sampleItem.seriesIndex,
	    dataByCoordSys: dataByCoordSys.list
	  });
	}

	function dispatchHighDownActually(axesInfo, dispatchAction, api) {
	  // FIXME
	  // highlight status modification shoule be a stage of main process?
	  // (Consider confilct (e.g., legend and axisPointer) and setOption)
	  var zr = api.getZr();
	  var highDownKey = 'axisPointerLastHighlights';
	  var lastHighlights = inner(zr)[highDownKey] || {};
	  var newHighlights = inner(zr)[highDownKey] = {}; // Update highlight/downplay status according to axisPointer model.
	  // Build hash map and remove duplicate incidentally.

	  each(axesInfo, function (axisInfo, key) {
	    var option = axisInfo.axisPointerModel.option;
	    option.status === 'show' && each(option.seriesDataIndices, function (batchItem) {
	      var key = batchItem.seriesIndex + ' | ' + batchItem.dataIndex;
	      newHighlights[key] = batchItem;
	    });
	  }); // Diff.

	  var toHighlight = [];
	  var toDownplay = [];
	  zrUtil.each(lastHighlights, function (batchItem, key) {
	    !newHighlights[key] && toDownplay.push(batchItem);
	  });
	  zrUtil.each(newHighlights, function (batchItem, key) {
	    !lastHighlights[key] && toHighlight.push(batchItem);
	  });
	  toDownplay.length && api.dispatchAction({
	    type: 'downplay',
	    escapeConnect: true,
	    batch: toDownplay
	  });
	  toHighlight.length && api.dispatchAction({
	    type: 'highlight',
	    escapeConnect: true,
	    batch: toHighlight
	  });
	}

	function findInputAxisInfo(inputAxesInfo, axisInfo) {
	  for (var i = 0; i < (inputAxesInfo || []).length; i++) {
	    var inputAxisInfo = inputAxesInfo[i];

	    if (axisInfo.axis.dim === inputAxisInfo.axisDim && axisInfo.axis.model.componentIndex === inputAxisInfo.axisIndex) {
	      return inputAxisInfo;
	    }
	  }
	}

	function makeMapperParam(axisInfo) {
	  var axisModel = axisInfo.axis.model;
	  var item = {};
	  var dim = item.axisDim = axisInfo.axis.dim;
	  item.axisIndex = item[dim + 'AxisIndex'] = axisModel.componentIndex;
	  item.axisName = item[dim + 'AxisName'] = axisModel.name;
	  item.axisId = item[dim + 'AxisId'] = axisModel.id;
	  return item;
	}

	function illegalPoint(point) {
	  return !point || point[0] == null || isNaN(point[0]) || point[1] == null || isNaN(point[1]);
	}

	module.exports = _default;

/***/ }),
/* 354 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(181);

	var modelUtil = __webpack_require__(219);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/

	/**
	 * @param {Object} finder contains {seriesIndex, dataIndex, dataIndexInside}
	 * @param {module:echarts/model/Global} ecModel
	 * @return {Object} {point: [x, y], el: ...} point Will not be null.
	 */
	function _default(finder, ecModel) {
	  var point = [];
	  var seriesIndex = finder.seriesIndex;
	  var seriesModel;

	  if (seriesIndex == null || !(seriesModel = ecModel.getSeriesByIndex(seriesIndex))) {
	    return {
	      point: []
	    };
	  }

	  var data = seriesModel.getData();
	  var dataIndex = modelUtil.queryDataIndex(data, finder);

	  if (dataIndex == null || dataIndex < 0 || zrUtil.isArray(dataIndex)) {
	    return {
	      point: []
	    };
	  }

	  var el = data.getItemGraphicEl(dataIndex);
	  var coordSys = seriesModel.coordinateSystem;

	  if (seriesModel.getTooltipPosition) {
	    point = seriesModel.getTooltipPosition(dataIndex) || [];
	  } else if (coordSys && coordSys.dataToPoint) {
	    point = coordSys.dataToPoint(data.getValues(zrUtil.map(coordSys.dimensions, function (dim) {
	      return data.mapDimension(dim);
	    }), dataIndex, true)) || [];
	  } else if (el) {
	    // Use graphic bounding rect
	    var rect = el.getBoundingRect().clone();
	    rect.applyTransform(el.transform);
	    point = [rect.x + rect.width / 2, rect.y + rect.height / 2];
	  }

	  return {
	    point: point,
	    el: el
	  };
	}

	module.exports = _default;

/***/ }),
/* 355 */
/***/ (function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(176);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var AxisPointerModel = echarts.extendComponentModel({
	  type: 'axisPointer',
	  coordSysAxesInfo: null,
	  defaultOption: {
	    // 'auto' means that show when triggered by tooltip or handle.
	    show: 'auto',
	    // 'click' | 'mousemove' | 'none'
	    triggerOn: null,
	    // set default in AxisPonterView.js
	    zlevel: 0,
	    z: 50,
	    type: 'line',
	    // axispointer triggered by tootip determine snap automatically,
	    // see `modelHelper`.
	    snap: false,
	    triggerTooltip: true,
	    value: null,
	    status: null,
	    // Init value depends on whether handle is used.
	    // [group0, group1, ...]
	    // Each group can be: {
	    //      mapper: function () {},
	    //      singleTooltip: 'multiple',  // 'multiple' or 'single'
	    //      xAxisId: ...,
	    //      yAxisName: ...,
	    //      angleAxisIndex: ...
	    // }
	    // mapper: can be ignored.
	    //      input: {axisInfo, value}
	    //      output: {axisInfo, value}
	    link: [],
	    // Do not set 'auto' here, otherwise global animation: false
	    // will not effect at this axispointer.
	    animation: null,
	    animationDurationUpdate: 200,
	    lineStyle: {
	      color: '#aaa',
	      width: 1,
	      type: 'solid'
	    },
	    shadowStyle: {
	      color: 'rgba(150,150,150,0.3)'
	    },
	    label: {
	      show: true,
	      formatter: null,
	      // string | Function
	      precision: 'auto',
	      // Or a number like 0, 1, 2 ...
	      margin: 3,
	      color: '#fff',
	      padding: [5, 7, 5, 7],
	      backgroundColor: 'auto',
	      // default: axis line color
	      borderColor: null,
	      borderWidth: 0,
	      shadowBlur: 3,
	      shadowColor: '#aaa' // Considering applicability, common style should
	      // better not have shadowOffset.
	      // shadowOffsetX: 0,
	      // shadowOffsetY: 2

	    },
	    handle: {
	      show: false,
	      icon: 'M10.7,11.9v-1.3H9.3v1.3c-4.9,0.3-8.8,4.4-8.8,9.4c0,5,3.9,9.1,8.8,9.4h1.3c4.9-0.3,8.8-4.4,8.8-9.4C19.5,16.3,15.6,12.2,10.7,11.9z M13.3,24.4H6.7v-1.2h6.6z M13.3,22H6.7v-1.2h6.6z M13.3,19.6H6.7v-1.2h6.6z',
	      // jshint ignore:line
	      size: 45,
	      // handle margin is from symbol center to axis, which is stable when circular move.
	      margin: 50,
	      // color: '#1b8bbd'
	      // color: '#2f4554'
	      color: '#333',
	      shadowBlur: 3,
	      shadowColor: '#aaa',
	      shadowOffsetX: 0,
	      shadowOffsetY: 2,
	      // For mobile performance
	      throttle: 40
	    }
	  }
	});
	var _default = AxisPointerModel;
	module.exports = _default;

/***/ }),
/* 356 */
/***/ (function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(176);

	var globalListener = __webpack_require__(357);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var AxisPointerView = echarts.extendComponentView({
	  type: 'axisPointer',
	  render: function (globalAxisPointerModel, ecModel, api) {
	    var globalTooltipModel = ecModel.getComponent('tooltip');
	    var triggerOn = globalAxisPointerModel.get('triggerOn') || globalTooltipModel && globalTooltipModel.get('triggerOn') || 'mousemove|click'; // Register global listener in AxisPointerView to enable
	    // AxisPointerView to be independent to Tooltip.

	    globalListener.register('axisPointer', api, function (currTrigger, e, dispatchAction) {
	      // If 'none', it is not controlled by mouse totally.
	      if (triggerOn !== 'none' && (currTrigger === 'leave' || triggerOn.indexOf(currTrigger) >= 0)) {
	        dispatchAction({
	          type: 'updateAxisPointer',
	          currTrigger: currTrigger,
	          x: e && e.offsetX,
	          y: e && e.offsetY
	        });
	      }
	    });
	  },

	  /**
	   * @override
	   */
	  remove: function (ecModel, api) {
	    globalListener.unregister(api.getZr(), 'axisPointer');
	    AxisPointerView.superApply(this._model, 'remove', arguments);
	  },

	  /**
	   * @override
	   */
	  dispose: function (ecModel, api) {
	    globalListener.unregister('axisPointer', api);
	    AxisPointerView.superApply(this._model, 'dispose', arguments);
	  }
	});
	var _default = AxisPointerView;
	module.exports = _default;

/***/ }),
/* 357 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(181);

	var env = __webpack_require__(180);

	var _model = __webpack_require__(219);

	var makeInner = _model.makeInner;

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var inner = makeInner();
	var each = zrUtil.each;
	/**
	 * @param {string} key
	 * @param {module:echarts/ExtensionAPI} api
	 * @param {Function} handler
	 *      param: {string} currTrigger
	 *      param: {Array.<number>} point
	 */

	function register(key, api, handler) {
	  if (env.node) {
	    return;
	  }

	  var zr = api.getZr();
	  inner(zr).records || (inner(zr).records = {});
	  initGlobalListeners(zr, api);
	  var record = inner(zr).records[key] || (inner(zr).records[key] = {});
	  record.handler = handler;
	}

	function initGlobalListeners(zr, api) {
	  if (inner(zr).initialized) {
	    return;
	  }

	  inner(zr).initialized = true;
	  useHandler('click', zrUtil.curry(doEnter, 'click'));
	  useHandler('mousemove', zrUtil.curry(doEnter, 'mousemove')); // useHandler('mouseout', onLeave);

	  useHandler('globalout', onLeave);

	  function useHandler(eventType, cb) {
	    zr.on(eventType, function (e) {
	      var dis = makeDispatchAction(api);
	      each(inner(zr).records, function (record) {
	        record && cb(record, e, dis.dispatchAction);
	      });
	      dispatchTooltipFinally(dis.pendings, api);
	    });
	  }
	}

	function dispatchTooltipFinally(pendings, api) {
	  var showLen = pendings.showTip.length;
	  var hideLen = pendings.hideTip.length;
	  var actuallyPayload;

	  if (showLen) {
	    actuallyPayload = pendings.showTip[showLen - 1];
	  } else if (hideLen) {
	    actuallyPayload = pendings.hideTip[hideLen - 1];
	  }

	  if (actuallyPayload) {
	    actuallyPayload.dispatchAction = null;
	    api.dispatchAction(actuallyPayload);
	  }
	}

	function onLeave(record, e, dispatchAction) {
	  record.handler('leave', null, dispatchAction);
	}

	function doEnter(currTrigger, record, e, dispatchAction) {
	  record.handler(currTrigger, e, dispatchAction);
	}

	function makeDispatchAction(api) {
	  var pendings = {
	    showTip: [],
	    hideTip: []
	  }; // FIXME
	  // better approach?
	  // 'showTip' and 'hideTip' can be triggered by axisPointer and tooltip,
	  // which may be conflict, (axisPointer call showTip but tooltip call hideTip);
	  // So we have to add "final stage" to merge those dispatched actions.

	  var dispatchAction = function (payload) {
	    var pendingList = pendings[payload.type];

	    if (pendingList) {
	      pendingList.push(payload);
	    } else {
	      payload.dispatchAction = dispatchAction;
	      api.dispatchAction(payload);
	    }
	  };

	  return {
	    dispatchAction: dispatchAction,
	    pendings: pendings
	  };
	}
	/**
	 * @param {string} key
	 * @param {module:echarts/ExtensionAPI} api
	 */


	function unregister(key, api) {
	  if (env.node) {
	    return;
	  }

	  var zr = api.getZr();
	  var record = (inner(zr).records || {})[key];

	  if (record) {
	    inner(zr).records[key] = null;
	  }
	}

	exports.register = register;
	exports.unregister = unregister;

/***/ }),
/* 358 */
/***/ (function(module, exports, __webpack_require__) {

	var graphic = __webpack_require__(226);

	var BaseAxisPointer = __webpack_require__(359);

	var viewHelper = __webpack_require__(360);

	var cartesianAxisHelper = __webpack_require__(350);

	var AxisView = __webpack_require__(348);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var CartesianAxisPointer = BaseAxisPointer.extend({
	  /**
	   * @override
	   */
	  makeElOption: function (elOption, value, axisModel, axisPointerModel, api) {
	    var axis = axisModel.axis;
	    var grid = axis.grid;
	    var axisPointerType = axisPointerModel.get('type');
	    var otherExtent = getCartesian(grid, axis).getOtherAxis(axis).getGlobalExtent();
	    var pixelValue = axis.toGlobalCoord(axis.dataToCoord(value, true));

	    if (axisPointerType && axisPointerType !== 'none') {
	      var elStyle = viewHelper.buildElStyle(axisPointerModel);
	      var pointerOption = pointerShapeBuilder[axisPointerType](axis, pixelValue, otherExtent, elStyle);
	      pointerOption.style = elStyle;
	      elOption.graphicKey = pointerOption.type;
	      elOption.pointer = pointerOption;
	    }

	    var layoutInfo = cartesianAxisHelper.layout(grid.model, axisModel);
	    viewHelper.buildCartesianSingleLabelElOption(value, elOption, layoutInfo, axisModel, axisPointerModel, api);
	  },

	  /**
	   * @override
	   */
	  getHandleTransform: function (value, axisModel, axisPointerModel) {
	    var layoutInfo = cartesianAxisHelper.layout(axisModel.axis.grid.model, axisModel, {
	      labelInside: false
	    });
	    layoutInfo.labelMargin = axisPointerModel.get('handle.margin');
	    return {
	      position: viewHelper.getTransformedPosition(axisModel.axis, value, layoutInfo),
	      rotation: layoutInfo.rotation + (layoutInfo.labelDirection < 0 ? Math.PI : 0)
	    };
	  },

	  /**
	   * @override
	   */
	  updateHandleTransform: function (transform, delta, axisModel, axisPointerModel) {
	    var axis = axisModel.axis;
	    var grid = axis.grid;
	    var axisExtent = axis.getGlobalExtent(true);
	    var otherExtent = getCartesian(grid, axis).getOtherAxis(axis).getGlobalExtent();
	    var dimIndex = axis.dim === 'x' ? 0 : 1;
	    var currPosition = transform.position;
	    currPosition[dimIndex] += delta[dimIndex];
	    currPosition[dimIndex] = Math.min(axisExtent[1], currPosition[dimIndex]);
	    currPosition[dimIndex] = Math.max(axisExtent[0], currPosition[dimIndex]);
	    var cursorOtherValue = (otherExtent[1] + otherExtent[0]) / 2;
	    var cursorPoint = [cursorOtherValue, cursorOtherValue];
	    cursorPoint[dimIndex] = currPosition[dimIndex]; // Make tooltip do not overlap axisPointer and in the middle of the grid.

	    var tooltipOptions = [{
	      verticalAlign: 'middle'
	    }, {
	      align: 'center'
	    }];
	    return {
	      position: currPosition,
	      rotation: transform.rotation,
	      cursorPoint: cursorPoint,
	      tooltipOption: tooltipOptions[dimIndex]
	    };
	  }
	});

	function getCartesian(grid, axis) {
	  var opt = {};
	  opt[axis.dim + 'AxisIndex'] = axis.index;
	  return grid.getCartesian(opt);
	}

	var pointerShapeBuilder = {
	  line: function (axis, pixelValue, otherExtent, elStyle) {
	    var targetShape = viewHelper.makeLineShape([pixelValue, otherExtent[0]], [pixelValue, otherExtent[1]], getAxisDimIndex(axis));
	    graphic.subPixelOptimizeLine({
	      shape: targetShape,
	      style: elStyle
	    });
	    return {
	      type: 'Line',
	      shape: targetShape
	    };
	  },
	  shadow: function (axis, pixelValue, otherExtent, elStyle) {
	    var bandWidth = Math.max(1, axis.getBandWidth());
	    var span = otherExtent[1] - otherExtent[0];
	    return {
	      type: 'Rect',
	      shape: viewHelper.makeRectShape([pixelValue - bandWidth / 2, otherExtent[0]], [bandWidth, span], getAxisDimIndex(axis))
	    };
	  }
	};

	function getAxisDimIndex(axis) {
	  return axis.dim === 'x' ? 0 : 1;
	}

	AxisView.registerAxisPointerClass('CartesianAxisPointer', CartesianAxisPointer);
	var _default = CartesianAxisPointer;
	module.exports = _default;

/***/ }),
/* 359 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(181);

	var clazzUtil = __webpack_require__(221);

	var graphic = __webpack_require__(226);

	var axisPointerModelHelper = __webpack_require__(349);

	var eventTool = __webpack_require__(215);

	var throttleUtil = __webpack_require__(285);

	var _model = __webpack_require__(219);

	var makeInner = _model.makeInner;

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var inner = makeInner();
	var clone = zrUtil.clone;
	var bind = zrUtil.bind;
	/**
	 * Base axis pointer class in 2D.
	 * Implemenents {module:echarts/component/axis/IAxisPointer}.
	 */

	function BaseAxisPointer() {}

	BaseAxisPointer.prototype = {
	  /**
	   * @private
	   */
	  _group: null,

	  /**
	   * @private
	   */
	  _lastGraphicKey: null,

	  /**
	   * @private
	   */
	  _handle: null,

	  /**
	   * @private
	   */
	  _dragging: false,

	  /**
	   * @private
	   */
	  _lastValue: null,

	  /**
	   * @private
	   */
	  _lastStatus: null,

	  /**
	   * @private
	   */
	  _payloadInfo: null,

	  /**
	   * In px, arbitrary value. Do not set too small,
	   * no animation is ok for most cases.
	   * @protected
	   */
	  animationThreshold: 15,

	  /**
	   * @implement
	   */
	  render: function (axisModel, axisPointerModel, api, forceRender) {
	    var value = axisPointerModel.get('value');
	    var status = axisPointerModel.get('status'); // Bind them to `this`, not in closure, otherwise they will not
	    // be replaced when user calling setOption in not merge mode.

	    this._axisModel = axisModel;
	    this._axisPointerModel = axisPointerModel;
	    this._api = api; // Optimize: `render` will be called repeatly during mouse move.
	    // So it is power consuming if performing `render` each time,
	    // especially on mobile device.

	    if (!forceRender && this._lastValue === value && this._lastStatus === status) {
	      return;
	    }

	    this._lastValue = value;
	    this._lastStatus = status;
	    var group = this._group;
	    var handle = this._handle;

	    if (!status || status === 'hide') {
	      // Do not clear here, for animation better.
	      group && group.hide();
	      handle && handle.hide();
	      return;
	    }

	    group && group.show();
	    handle && handle.show(); // Otherwise status is 'show'

	    var elOption = {};
	    this.makeElOption(elOption, value, axisModel, axisPointerModel, api); // Enable change axis pointer type.

	    var graphicKey = elOption.graphicKey;

	    if (graphicKey !== this._lastGraphicKey) {
	      this.clear(api);
	    }

	    this._lastGraphicKey = graphicKey;
	    var moveAnimation = this._moveAnimation = this.determineAnimation(axisModel, axisPointerModel);

	    if (!group) {
	      group = this._group = new graphic.Group();
	      this.createPointerEl(group, elOption, axisModel, axisPointerModel);
	      this.createLabelEl(group, elOption, axisModel, axisPointerModel);
	      api.getZr().add(group);
	    } else {
	      var doUpdateProps = zrUtil.curry(updateProps, axisPointerModel, moveAnimation);
	      this.updatePointerEl(group, elOption, doUpdateProps, axisPointerModel);
	      this.updateLabelEl(group, elOption, doUpdateProps, axisPointerModel);
	    }

	    updateMandatoryProps(group, axisPointerModel, true);

	    this._renderHandle(value);
	  },

	  /**
	   * @implement
	   */
	  remove: function (api) {
	    this.clear(api);
	  },

	  /**
	   * @implement
	   */
	  dispose: function (api) {
	    this.clear(api);
	  },

	  /**
	   * @protected
	   */
	  determineAnimation: function (axisModel, axisPointerModel) {
	    var animation = axisPointerModel.get('animation');
	    var axis = axisModel.axis;
	    var isCategoryAxis = axis.type === 'category';
	    var useSnap = axisPointerModel.get('snap'); // Value axis without snap always do not snap.

	    if (!useSnap && !isCategoryAxis) {
	      return false;
	    }

	    if (animation === 'auto' || animation == null) {
	      var animationThreshold = this.animationThreshold;

	      if (isCategoryAxis && axis.getBandWidth() > animationThreshold) {
	        return true;
	      } // It is important to auto animation when snap used. Consider if there is
	      // a dataZoom, animation will be disabled when too many points exist, while
	      // it will be enabled for better visual effect when little points exist.


	      if (useSnap) {
	        var seriesDataCount = axisPointerModelHelper.getAxisInfo(axisModel).seriesDataCount;
	        var axisExtent = axis.getExtent(); // Approximate band width

	        return Math.abs(axisExtent[0] - axisExtent[1]) / seriesDataCount > animationThreshold;
	      }

	      return false;
	    }

	    return animation === true;
	  },

	  /**
	   * add {pointer, label, graphicKey} to elOption
	   * @protected
	   */
	  makeElOption: function (elOption, value, axisModel, axisPointerModel, api) {// Shoule be implemenented by sub-class.
	  },

	  /**
	   * @protected
	   */
	  createPointerEl: function (group, elOption, axisModel, axisPointerModel) {
	    var pointerOption = elOption.pointer;

	    if (pointerOption) {
	      var pointerEl = inner(group).pointerEl = new graphic[pointerOption.type](clone(elOption.pointer));
	      group.add(pointerEl);
	    }
	  },

	  /**
	   * @protected
	   */
	  createLabelEl: function (group, elOption, axisModel, axisPointerModel) {
	    if (elOption.label) {
	      var labelEl = inner(group).labelEl = new graphic.Rect(clone(elOption.label));
	      group.add(labelEl);
	      updateLabelShowHide(labelEl, axisPointerModel);
	    }
	  },

	  /**
	   * @protected
	   */
	  updatePointerEl: function (group, elOption, updateProps) {
	    var pointerEl = inner(group).pointerEl;

	    if (pointerEl) {
	      pointerEl.setStyle(elOption.pointer.style);
	      updateProps(pointerEl, {
	        shape: elOption.pointer.shape
	      });
	    }
	  },

	  /**
	   * @protected
	   */
	  updateLabelEl: function (group, elOption, updateProps, axisPointerModel) {
	    var labelEl = inner(group).labelEl;

	    if (labelEl) {
	      labelEl.setStyle(elOption.label.style);
	      updateProps(labelEl, {
	        // Consider text length change in vertical axis, animation should
	        // be used on shape, otherwise the effect will be weird.
	        shape: elOption.label.shape,
	        position: elOption.label.position
	      });
	      updateLabelShowHide(labelEl, axisPointerModel);
	    }
	  },

	  /**
	   * @private
	   */
	  _renderHandle: function (value) {
	    if (this._dragging || !this.updateHandleTransform) {
	      return;
	    }

	    var axisPointerModel = this._axisPointerModel;

	    var zr = this._api.getZr();

	    var handle = this._handle;
	    var handleModel = axisPointerModel.getModel('handle');
	    var status = axisPointerModel.get('status');

	    if (!handleModel.get('show') || !status || status === 'hide') {
	      handle && zr.remove(handle);
	      this._handle = null;
	      return;
	    }

	    var isInit;

	    if (!this._handle) {
	      isInit = true;
	      handle = this._handle = graphic.createIcon(handleModel.get('icon'), {
	        cursor: 'move',
	        draggable: true,
	        onmousemove: function (e) {
	          // Fot mobile devicem, prevent screen slider on the button.
	          eventTool.stop(e.event);
	        },
	        onmousedown: bind(this._onHandleDragMove, this, 0, 0),
	        drift: bind(this._onHandleDragMove, this),
	        ondragend: bind(this._onHandleDragEnd, this)
	      });
	      zr.add(handle);
	    }

	    updateMandatoryProps(handle, axisPointerModel, false); // update style

	    var includeStyles = ['color', 'borderColor', 'borderWidth', 'opacity', 'shadowColor', 'shadowBlur', 'shadowOffsetX', 'shadowOffsetY'];
	    handle.setStyle(handleModel.getItemStyle(null, includeStyles)); // update position

	    var handleSize = handleModel.get('size');

	    if (!zrUtil.isArray(handleSize)) {
	      handleSize = [handleSize, handleSize];
	    }

	    handle.attr('scale', [handleSize[0] / 2, handleSize[1] / 2]);
	    throttleUtil.createOrUpdate(this, '_doDispatchAxisPointer', handleModel.get('throttle') || 0, 'fixRate');

	    this._moveHandleToValue(value, isInit);
	  },

	  /**
	   * @private
	   */
	  _moveHandleToValue: function (value, isInit) {
	    updateProps(this._axisPointerModel, !isInit && this._moveAnimation, this._handle, getHandleTransProps(this.getHandleTransform(value, this._axisModel, this._axisPointerModel)));
	  },

	  /**
	   * @private
	   */
	  _onHandleDragMove: function (dx, dy) {
	    var handle = this._handle;

	    if (!handle) {
	      return;
	    }

	    this._dragging = true; // Persistent for throttle.

	    var trans = this.updateHandleTransform(getHandleTransProps(handle), [dx, dy], this._axisModel, this._axisPointerModel);
	    this._payloadInfo = trans;
	    handle.stopAnimation();
	    handle.attr(getHandleTransProps(trans));
	    inner(handle).lastProp = null;

	    this._doDispatchAxisPointer();
	  },

	  /**
	   * Throttled method.
	   * @private
	   */
	  _doDispatchAxisPointer: function () {
	    var handle = this._handle;

	    if (!handle) {
	      return;
	    }

	    var payloadInfo = this._payloadInfo;
	    var axisModel = this._axisModel;

	    this._api.dispatchAction({
	      type: 'updateAxisPointer',
	      x: payloadInfo.cursorPoint[0],
	      y: payloadInfo.cursorPoint[1],
	      tooltipOption: payloadInfo.tooltipOption,
	      axesInfo: [{
	        axisDim: axisModel.axis.dim,
	        axisIndex: axisModel.componentIndex
	      }]
	    });
	  },

	  /**
	   * @private
	   */
	  _onHandleDragEnd: function (moveAnimation) {
	    this._dragging = false;
	    var handle = this._handle;

	    if (!handle) {
	      return;
	    }

	    var value = this._axisPointerModel.get('value'); // Consider snap or categroy axis, handle may be not consistent with
	    // axisPointer. So move handle to align the exact value position when
	    // drag ended.


	    this._moveHandleToValue(value); // For the effect: tooltip will be shown when finger holding on handle
	    // button, and will be hidden after finger left handle button.


	    this._api.dispatchAction({
	      type: 'hideTip'
	    });
	  },

	  /**
	   * Should be implemenented by sub-class if support `handle`.
	   * @protected
	   * @param {number} value
	   * @param {module:echarts/model/Model} axisModel
	   * @param {module:echarts/model/Model} axisPointerModel
	   * @return {Object} {position: [x, y], rotation: 0}
	   */
	  getHandleTransform: null,

	  /**
	   * * Should be implemenented by sub-class if support `handle`.
	   * @protected
	   * @param {Object} transform {position, rotation}
	   * @param {Array.<number>} delta [dx, dy]
	   * @param {module:echarts/model/Model} axisModel
	   * @param {module:echarts/model/Model} axisPointerModel
	   * @return {Object} {position: [x, y], rotation: 0, cursorPoint: [x, y]}
	   */
	  updateHandleTransform: null,

	  /**
	   * @private
	   */
	  clear: function (api) {
	    this._lastValue = null;
	    this._lastStatus = null;
	    var zr = api.getZr();
	    var group = this._group;
	    var handle = this._handle;

	    if (zr && group) {
	      this._lastGraphicKey = null;
	      group && zr.remove(group);
	      handle && zr.remove(handle);
	      this._group = null;
	      this._handle = null;
	      this._payloadInfo = null;
	    }
	  },

	  /**
	   * @protected
	   */
	  doClear: function () {// Implemented by sub-class if necessary.
	  },

	  /**
	   * @protected
	   * @param {Array.<number>} xy
	   * @param {Array.<number>} wh
	   * @param {number} [xDimIndex=0] or 1
	   */
	  buildLabel: function (xy, wh, xDimIndex) {
	    xDimIndex = xDimIndex || 0;
	    return {
	      x: xy[xDimIndex],
	      y: xy[1 - xDimIndex],
	      width: wh[xDimIndex],
	      height: wh[1 - xDimIndex]
	    };
	  }
	};
	BaseAxisPointer.prototype.constructor = BaseAxisPointer;

	function updateProps(animationModel, moveAnimation, el, props) {
	  // Animation optimize.
	  if (!propsEqual(inner(el).lastProp, props)) {
	    inner(el).lastProp = props;
	    moveAnimation ? graphic.updateProps(el, props, animationModel) : (el.stopAnimation(), el.attr(props));
	  }
	}

	function propsEqual(lastProps, newProps) {
	  if (zrUtil.isObject(lastProps) && zrUtil.isObject(newProps)) {
	    var equals = true;
	    zrUtil.each(newProps, function (item, key) {
	      equals = equals && propsEqual(lastProps[key], item);
	    });
	    return !!equals;
	  } else {
	    return lastProps === newProps;
	  }
	}

	function updateLabelShowHide(labelEl, axisPointerModel) {
	  labelEl[axisPointerModel.get('label.show') ? 'show' : 'hide']();
	}

	function getHandleTransProps(trans) {
	  return {
	    position: trans.position.slice(),
	    rotation: trans.rotation || 0
	  };
	}

	function updateMandatoryProps(group, axisPointerModel, silent) {
	  var z = axisPointerModel.get('z');
	  var zlevel = axisPointerModel.get('zlevel');
	  group && group.traverse(function (el) {
	    if (el.type !== 'group') {
	      z != null && (el.z = z);
	      zlevel != null && (el.zlevel = zlevel);
	      el.silent = silent;
	    }
	  });
	}

	clazzUtil.enableClassExtend(BaseAxisPointer);
	var _default = BaseAxisPointer;
	module.exports = _default;

/***/ }),
/* 360 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(181);

	var graphic = __webpack_require__(226);

	var textContain = __webpack_require__(211);

	var formatUtil = __webpack_require__(264);

	var matrix = __webpack_require__(190);

	var axisHelper = __webpack_require__(303);

	var AxisBuilder = __webpack_require__(347);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/

	/**
	 * @param {module:echarts/model/Model} axisPointerModel
	 */
	function buildElStyle(axisPointerModel) {
	  var axisPointerType = axisPointerModel.get('type');
	  var styleModel = axisPointerModel.getModel(axisPointerType + 'Style');
	  var style;

	  if (axisPointerType === 'line') {
	    style = styleModel.getLineStyle();
	    style.fill = null;
	  } else if (axisPointerType === 'shadow') {
	    style = styleModel.getAreaStyle();
	    style.stroke = null;
	  }

	  return style;
	}
	/**
	 * @param {Function} labelPos {align, verticalAlign, position}
	 */


	function buildLabelElOption(elOption, axisModel, axisPointerModel, api, labelPos) {
	  var value = axisPointerModel.get('value');
	  var text = getValueLabel(value, axisModel.axis, axisModel.ecModel, axisPointerModel.get('seriesDataIndices'), {
	    precision: axisPointerModel.get('label.precision'),
	    formatter: axisPointerModel.get('label.formatter')
	  });
	  var labelModel = axisPointerModel.getModel('label');
	  var paddings = formatUtil.normalizeCssArray(labelModel.get('padding') || 0);
	  var font = labelModel.getFont();
	  var textRect = textContain.getBoundingRect(text, font);
	  var position = labelPos.position;
	  var width = textRect.width + paddings[1] + paddings[3];
	  var height = textRect.height + paddings[0] + paddings[2]; // Adjust by align.

	  var align = labelPos.align;
	  align === 'right' && (position[0] -= width);
	  align === 'center' && (position[0] -= width / 2);
	  var verticalAlign = labelPos.verticalAlign;
	  verticalAlign === 'bottom' && (position[1] -= height);
	  verticalAlign === 'middle' && (position[1] -= height / 2); // Not overflow ec container

	  confineInContainer(position, width, height, api);
	  var bgColor = labelModel.get('backgroundColor');

	  if (!bgColor || bgColor === 'auto') {
	    bgColor = axisModel.get('axisLine.lineStyle.color');
	  }

	  elOption.label = {
	    shape: {
	      x: 0,
	      y: 0,
	      width: width,
	      height: height,
	      r: labelModel.get('borderRadius')
	    },
	    position: position.slice(),
	    // TODO: rich
	    style: {
	      text: text,
	      textFont: font,
	      textFill: labelModel.getTextColor(),
	      textPosition: 'inside',
	      fill: bgColor,
	      stroke: labelModel.get('borderColor') || 'transparent',
	      lineWidth: labelModel.get('borderWidth') || 0,
	      shadowBlur: labelModel.get('shadowBlur'),
	      shadowColor: labelModel.get('shadowColor'),
	      shadowOffsetX: labelModel.get('shadowOffsetX'),
	      shadowOffsetY: labelModel.get('shadowOffsetY')
	    },
	    // Lable should be over axisPointer.
	    z2: 10
	  };
	} // Do not overflow ec container


	function confineInContainer(position, width, height, api) {
	  var viewWidth = api.getWidth();
	  var viewHeight = api.getHeight();
	  position[0] = Math.min(position[0] + width, viewWidth) - width;
	  position[1] = Math.min(position[1] + height, viewHeight) - height;
	  position[0] = Math.max(position[0], 0);
	  position[1] = Math.max(position[1], 0);
	}
	/**
	 * @param {number} value
	 * @param {module:echarts/coord/Axis} axis
	 * @param {module:echarts/model/Global} ecModel
	 * @param {Object} opt
	 * @param {Array.<Object>} seriesDataIndices
	 * @param {number|string} opt.precision 'auto' or a number
	 * @param {string|Function} opt.formatter label formatter
	 */


	function getValueLabel(value, axis, ecModel, seriesDataIndices, opt) {
	  value = axis.scale.parse(value);
	  var text = axis.scale.getLabel( // If `precision` is set, width can be fixed (like '12.00500'), which
	  // helps to debounce when when moving label.
	  value, {
	    precision: opt.precision
	  });
	  var formatter = opt.formatter;

	  if (formatter) {
	    var params = {
	      value: axisHelper.getAxisRawValue(axis, value),
	      seriesData: []
	    };
	    zrUtil.each(seriesDataIndices, function (idxItem) {
	      var series = ecModel.getSeriesByIndex(idxItem.seriesIndex);
	      var dataIndex = idxItem.dataIndexInside;
	      var dataParams = series && series.getDataParams(dataIndex);
	      dataParams && params.seriesData.push(dataParams);
	    });

	    if (zrUtil.isString(formatter)) {
	      text = formatter.replace('{value}', text);
	    } else if (zrUtil.isFunction(formatter)) {
	      text = formatter(params);
	    }
	  }

	  return text;
	}
	/**
	 * @param {module:echarts/coord/Axis} axis
	 * @param {number} value
	 * @param {Object} layoutInfo {
	 *  rotation, position, labelOffset, labelDirection, labelMargin
	 * }
	 */


	function getTransformedPosition(axis, value, layoutInfo) {
	  var transform = matrix.create();
	  matrix.rotate(transform, transform, layoutInfo.rotation);
	  matrix.translate(transform, transform, layoutInfo.position);
	  return graphic.applyTransform([axis.dataToCoord(value), (layoutInfo.labelOffset || 0) + (layoutInfo.labelDirection || 1) * (layoutInfo.labelMargin || 0)], transform);
	}

	function buildCartesianSingleLabelElOption(value, elOption, layoutInfo, axisModel, axisPointerModel, api) {
	  var textLayout = AxisBuilder.innerTextLayout(layoutInfo.rotation, 0, layoutInfo.labelDirection);
	  layoutInfo.labelMargin = axisPointerModel.get('label.margin');
	  buildLabelElOption(elOption, axisModel, axisPointerModel, api, {
	    position: getTransformedPosition(axisModel.axis, value, layoutInfo),
	    align: textLayout.textAlign,
	    verticalAlign: textLayout.textVerticalAlign
	  });
	}
	/**
	 * @param {Array.<number>} p1
	 * @param {Array.<number>} p2
	 * @param {number} [xDimIndex=0] or 1
	 */


	function makeLineShape(p1, p2, xDimIndex) {
	  xDimIndex = xDimIndex || 0;
	  return {
	    x1: p1[xDimIndex],
	    y1: p1[1 - xDimIndex],
	    x2: p2[xDimIndex],
	    y2: p2[1 - xDimIndex]
	  };
	}
	/**
	 * @param {Array.<number>} xy
	 * @param {Array.<number>} wh
	 * @param {number} [xDimIndex=0] or 1
	 */


	function makeRectShape(xy, wh, xDimIndex) {
	  xDimIndex = xDimIndex || 0;
	  return {
	    x: xy[xDimIndex],
	    y: xy[1 - xDimIndex],
	    width: wh[xDimIndex],
	    height: wh[1 - xDimIndex]
	  };
	}

	function makeSectorShape(cx, cy, r0, r, startAngle, endAngle) {
	  return {
	    cx: cx,
	    cy: cy,
	    r0: r0,
	    r: r,
	    startAngle: startAngle,
	    endAngle: endAngle,
	    clockwise: true
	  };
	}

	exports.buildElStyle = buildElStyle;
	exports.buildLabelElOption = buildLabelElOption;
	exports.getValueLabel = getValueLabel;
	exports.getTransformedPosition = getTransformedPosition;
	exports.buildCartesianSingleLabelElOption = buildCartesianSingleLabelElOption;
	exports.makeLineShape = makeLineShape;
	exports.makeRectShape = makeRectShape;
	exports.makeSectorShape = makeSectorShape;

/***/ }),
/* 361 */
/***/ (function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(176);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var _default = echarts.extendComponentModel({
	  type: 'tooltip',
	  dependencies: ['axisPointer'],
	  defaultOption: {
	    zlevel: 0,
	    z: 8,
	    show: true,
	    // tooltip主体内容
	    showContent: true,
	    // 'trigger' only works on coordinate system.
	    // 'item' | 'axis' | 'none'
	    trigger: 'item',
	    // 'click' | 'mousemove' | 'none'
	    triggerOn: 'mousemove|click',
	    alwaysShowContent: false,
	    displayMode: 'single',
	    // 'single' | 'multipleByCoordSys'
	    // 位置 {Array} | {Function}
	    // position: null
	    // Consider triggered from axisPointer handle, verticalAlign should be 'middle'
	    // align: null,
	    // verticalAlign: null,
	    // 是否约束 content 在 viewRect 中。默认 false 是为了兼容以前版本。
	    confine: false,
	    // 内容格式器：{string}（Template） ¦ {Function}
	    // formatter: null
	    showDelay: 0,
	    // 隐藏延迟，单位ms
	    hideDelay: 100,
	    // 动画变换时间，单位s
	    transitionDuration: 0.4,
	    enterable: false,
	    // 提示背景颜色，默认为透明度为0.7的黑色
	    backgroundColor: 'rgba(50,50,50,0.7)',
	    // 提示边框颜色
	    borderColor: '#333',
	    // 提示边框圆角，单位px，默认为4
	    borderRadius: 4,
	    // 提示边框线宽，单位px，默认为0（无边框）
	    borderWidth: 0,
	    // 提示内边距，单位px，默认各方向内边距为5，
	    // 接受数组分别设定上右下左边距，同css
	    padding: 5,
	    // Extra css text
	    extraCssText: '',
	    // 坐标轴指示器，坐标轴触发有效
	    axisPointer: {
	      // 默认为直线
	      // 可选为：'line' | 'shadow' | 'cross'
	      type: 'line',
	      // type 为 line 的时候有效，指定 tooltip line 所在的轴，可选
	      // 可选 'x' | 'y' | 'angle' | 'radius' | 'auto'
	      // 默认 'auto'，会选择类型为 category 的轴，对于双数值轴，笛卡尔坐标系会默认选择 x 轴
	      // 极坐标系会默认选择 angle 轴
	      axis: 'auto',
	      animation: 'auto',
	      animationDurationUpdate: 200,
	      animationEasingUpdate: 'exponentialOut',
	      crossStyle: {
	        color: '#999',
	        width: 1,
	        type: 'dashed',
	        // TODO formatter
	        textStyle: {} // lineStyle and shadowStyle should not be specified here,
	        // otherwise it will always override those styles on option.axisPointer.

	      }
	    },
	    textStyle: {
	      color: '#fff',
	      fontSize: 14
	    }
	  }
	});

	module.exports = _default;

/***/ }),
/* 362 */
/***/ (function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(176);

	var zrUtil = __webpack_require__(181);

	var env = __webpack_require__(180);

	var TooltipContent = __webpack_require__(363);

	var formatUtil = __webpack_require__(264);

	var numberUtil = __webpack_require__(263);

	var graphic = __webpack_require__(226);

	var findPointFromSeries = __webpack_require__(354);

	var layoutUtil = __webpack_require__(262);

	var Model = __webpack_require__(220);

	var globalListener = __webpack_require__(357);

	var axisHelper = __webpack_require__(303);

	var axisPointerViewHelper = __webpack_require__(360);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var bind = zrUtil.bind;
	var each = zrUtil.each;
	var parsePercent = numberUtil.parsePercent;
	var proxyRect = new graphic.Rect({
	  shape: {
	    x: -1,
	    y: -1,
	    width: 2,
	    height: 2
	  }
	});

	var _default = echarts.extendComponentView({
	  type: 'tooltip',
	  init: function (ecModel, api) {
	    if (env.node) {
	      return;
	    }

	    var tooltipContent = new TooltipContent(api.getDom(), api);
	    this._tooltipContent = tooltipContent;
	  },
	  render: function (tooltipModel, ecModel, api) {
	    if (env.node || env.wxa) {
	      return;
	    } // Reset


	    this.group.removeAll();
	    /**
	     * @private
	     * @type {module:echarts/component/tooltip/TooltipModel}
	     */

	    this._tooltipModel = tooltipModel;
	    /**
	     * @private
	     * @type {module:echarts/model/Global}
	     */

	    this._ecModel = ecModel;
	    /**
	     * @private
	     * @type {module:echarts/ExtensionAPI}
	     */

	    this._api = api;
	    /**
	     * Should be cleaned when render.
	     * @private
	     * @type {Array.<Array.<Object>>}
	     */

	    this._lastDataByCoordSys = null;
	    /**
	     * @private
	     * @type {boolean}
	     */

	    this._alwaysShowContent = tooltipModel.get('alwaysShowContent');
	    var tooltipContent = this._tooltipContent;
	    tooltipContent.update();
	    tooltipContent.setEnterable(tooltipModel.get('enterable'));

	    this._initGlobalListener();

	    this._keepShow();
	  },
	  _initGlobalListener: function () {
	    var tooltipModel = this._tooltipModel;
	    var triggerOn = tooltipModel.get('triggerOn');
	    globalListener.register('itemTooltip', this._api, bind(function (currTrigger, e, dispatchAction) {
	      // If 'none', it is not controlled by mouse totally.
	      if (triggerOn !== 'none') {
	        if (triggerOn.indexOf(currTrigger) >= 0) {
	          this._tryShow(e, dispatchAction);
	        } else if (currTrigger === 'leave') {
	          this._hide(dispatchAction);
	        }
	      }
	    }, this));
	  },
	  _keepShow: function () {
	    var tooltipModel = this._tooltipModel;
	    var ecModel = this._ecModel;
	    var api = this._api; // Try to keep the tooltip show when refreshing

	    if (this._lastX != null && this._lastY != null // When user is willing to control tooltip totally using API,
	    // self.manuallyShowTip({x, y}) might cause tooltip hide,
	    // which is not expected.
	    && tooltipModel.get('triggerOn') !== 'none') {
	      var self = this;
	      clearTimeout(this._refreshUpdateTimeout);
	      this._refreshUpdateTimeout = setTimeout(function () {
	        // Show tip next tick after other charts are rendered
	        // In case highlight action has wrong result
	        // FIXME
	        self.manuallyShowTip(tooltipModel, ecModel, api, {
	          x: self._lastX,
	          y: self._lastY
	        });
	      });
	    }
	  },

	  /**
	   * Show tip manually by
	   * dispatchAction({
	   *     type: 'showTip',
	   *     x: 10,
	   *     y: 10
	   * });
	   * Or
	   * dispatchAction({
	   *      type: 'showTip',
	   *      seriesIndex: 0,
	   *      dataIndex or dataIndexInside or name
	   * });
	   *
	   *  TODO Batch
	   */
	  manuallyShowTip: function (tooltipModel, ecModel, api, payload) {
	    if (payload.from === this.uid || env.node) {
	      return;
	    }

	    var dispatchAction = makeDispatchAction(payload, api); // Reset ticket

	    this._ticket = ''; // When triggered from axisPointer.

	    var dataByCoordSys = payload.dataByCoordSys;

	    if (payload.tooltip && payload.x != null && payload.y != null) {
	      var el = proxyRect;
	      el.position = [payload.x, payload.y];
	      el.update();
	      el.tooltip = payload.tooltip; // Manually show tooltip while view is not using zrender elements.

	      this._tryShow({
	        offsetX: payload.x,
	        offsetY: payload.y,
	        target: el
	      }, dispatchAction);
	    } else if (dataByCoordSys) {
	      this._tryShow({
	        offsetX: payload.x,
	        offsetY: payload.y,
	        position: payload.position,
	        event: {},
	        dataByCoordSys: payload.dataByCoordSys,
	        tooltipOption: payload.tooltipOption
	      }, dispatchAction);
	    } else if (payload.seriesIndex != null) {
	      if (this._manuallyAxisShowTip(tooltipModel, ecModel, api, payload)) {
	        return;
	      }

	      var pointInfo = findPointFromSeries(payload, ecModel);
	      var cx = pointInfo.point[0];
	      var cy = pointInfo.point[1];

	      if (cx != null && cy != null) {
	        this._tryShow({
	          offsetX: cx,
	          offsetY: cy,
	          position: payload.position,
	          target: pointInfo.el,
	          event: {}
	        }, dispatchAction);
	      }
	    } else if (payload.x != null && payload.y != null) {
	      // FIXME
	      // should wrap dispatchAction like `axisPointer/globalListener` ?
	      api.dispatchAction({
	        type: 'updateAxisPointer',
	        x: payload.x,
	        y: payload.y
	      });

	      this._tryShow({
	        offsetX: payload.x,
	        offsetY: payload.y,
	        position: payload.position,
	        target: api.getZr().findHover(payload.x, payload.y).target,
	        event: {}
	      }, dispatchAction);
	    }
	  },
	  manuallyHideTip: function (tooltipModel, ecModel, api, payload) {
	    var tooltipContent = this._tooltipContent;

	    if (!this._alwaysShowContent && this._tooltipModel) {
	      tooltipContent.hideLater(this._tooltipModel.get('hideDelay'));
	    }

	    this._lastX = this._lastY = null;

	    if (payload.from !== this.uid) {
	      this._hide(makeDispatchAction(payload, api));
	    }
	  },
	  // Be compatible with previous design, that is, when tooltip.type is 'axis' and
	  // dispatchAction 'showTip' with seriesIndex and dataIndex will trigger axis pointer
	  // and tooltip.
	  _manuallyAxisShowTip: function (tooltipModel, ecModel, api, payload) {
	    var seriesIndex = payload.seriesIndex;
	    var dataIndex = payload.dataIndex;
	    var coordSysAxesInfo = ecModel.getComponent('axisPointer').coordSysAxesInfo;

	    if (seriesIndex == null || dataIndex == null || coordSysAxesInfo == null) {
	      return;
	    }

	    var seriesModel = ecModel.getSeriesByIndex(seriesIndex);

	    if (!seriesModel) {
	      return;
	    }

	    var data = seriesModel.getData();
	    var tooltipModel = buildTooltipModel([data.getItemModel(dataIndex), seriesModel, (seriesModel.coordinateSystem || {}).model, tooltipModel]);

	    if (tooltipModel.get('trigger') !== 'axis') {
	      return;
	    }

	    api.dispatchAction({
	      type: 'updateAxisPointer',
	      seriesIndex: seriesIndex,
	      dataIndex: dataIndex,
	      position: payload.position
	    });
	    return true;
	  },
	  _tryShow: function (e, dispatchAction) {
	    var el = e.target;
	    var tooltipModel = this._tooltipModel;

	    if (!tooltipModel) {
	      return;
	    } // Save mouse x, mouse y. So we can try to keep showing the tip if chart is refreshed


	    this._lastX = e.offsetX;
	    this._lastY = e.offsetY;
	    var dataByCoordSys = e.dataByCoordSys;

	    if (dataByCoordSys && dataByCoordSys.length) {
	      this._showAxisTooltip(dataByCoordSys, e);
	    } // Always show item tooltip if mouse is on the element with dataIndex
	    else if (el && el.dataIndex != null) {
	        this._lastDataByCoordSys = null;

	        this._showSeriesItemTooltip(e, el, dispatchAction);
	      } // Tooltip provided directly. Like legend.
	      else if (el && el.tooltip) {
	          this._lastDataByCoordSys = null;

	          this._showComponentItemTooltip(e, el, dispatchAction);
	        } else {
	          this._lastDataByCoordSys = null;

	          this._hide(dispatchAction);
	        }
	  },
	  _showOrMove: function (tooltipModel, cb) {
	    // showDelay is used in this case: tooltip.enterable is set
	    // as true. User intent to move mouse into tooltip and click
	    // something. `showDelay` makes it easyer to enter the content
	    // but tooltip do not move immediately.
	    var delay = tooltipModel.get('showDelay');
	    cb = zrUtil.bind(cb, this);
	    clearTimeout(this._showTimout);
	    delay > 0 ? this._showTimout = setTimeout(cb, delay) : cb();
	  },
	  _showAxisTooltip: function (dataByCoordSys, e) {
	    var ecModel = this._ecModel;
	    var globalTooltipModel = this._tooltipModel;
	    var point = [e.offsetX, e.offsetY];
	    var singleDefaultHTML = [];
	    var singleParamsList = [];
	    var singleTooltipModel = buildTooltipModel([e.tooltipOption, globalTooltipModel]);
	    each(dataByCoordSys, function (itemCoordSys) {
	      // var coordParamList = [];
	      // var coordDefaultHTML = [];
	      // var coordTooltipModel = buildTooltipModel([
	      //     e.tooltipOption,
	      //     itemCoordSys.tooltipOption,
	      //     ecModel.getComponent(itemCoordSys.coordSysMainType, itemCoordSys.coordSysIndex),
	      //     globalTooltipModel
	      // ]);
	      // var displayMode = coordTooltipModel.get('displayMode');
	      // var paramsList = displayMode === 'single' ? singleParamsList : [];
	      each(itemCoordSys.dataByAxis, function (item) {
	        var axisModel = ecModel.getComponent(item.axisDim + 'Axis', item.axisIndex);
	        var axisValue = item.value;
	        var seriesDefaultHTML = [];

	        if (!axisModel || axisValue == null) {
	          return;
	        }

	        var valueLabel = axisPointerViewHelper.getValueLabel(axisValue, axisModel.axis, ecModel, item.seriesDataIndices, item.valueLabelOpt);
	        zrUtil.each(item.seriesDataIndices, function (idxItem) {
	          var series = ecModel.getSeriesByIndex(idxItem.seriesIndex);
	          var dataIndex = idxItem.dataIndexInside;
	          var dataParams = series && series.getDataParams(dataIndex);
	          dataParams.axisDim = item.axisDim;
	          dataParams.axisIndex = item.axisIndex;
	          dataParams.axisType = item.axisType;
	          dataParams.axisId = item.axisId;
	          dataParams.axisValue = axisHelper.getAxisRawValue(axisModel.axis, axisValue);
	          dataParams.axisValueLabel = valueLabel;

	          if (dataParams) {
	            singleParamsList.push(dataParams);
	            seriesDefaultHTML.push(series.formatTooltip(dataIndex, true));
	          }
	        }); // Default tooltip content
	        // FIXME
	        // (1) shold be the first data which has name?
	        // (2) themeRiver, firstDataIndex is array, and first line is unnecessary.

	        var firstLine = valueLabel;
	        singleDefaultHTML.push((firstLine ? formatUtil.encodeHTML(firstLine) + '<br />' : '') + seriesDefaultHTML.join('<br />'));
	      });
	    }, this); // In most case, the second axis is shown upper than the first one.

	    singleDefaultHTML.reverse();
	    singleDefaultHTML = singleDefaultHTML.join('<br /><br />');
	    var positionExpr = e.position;

	    this._showOrMove(singleTooltipModel, function () {
	      if (this._updateContentNotChangedOnAxis(dataByCoordSys)) {
	        this._updatePosition(singleTooltipModel, positionExpr, point[0], point[1], this._tooltipContent, singleParamsList);
	      } else {
	        this._showTooltipContent(singleTooltipModel, singleDefaultHTML, singleParamsList, Math.random(), point[0], point[1], positionExpr);
	      }
	    }); // Do not trigger events here, because this branch only be entered
	    // from dispatchAction.

	  },
	  _showSeriesItemTooltip: function (e, el, dispatchAction) {
	    var ecModel = this._ecModel; // Use dataModel in element if possible
	    // Used when mouseover on a element like markPoint or edge
	    // In which case, the data is not main data in series.

	    var seriesIndex = el.seriesIndex;
	    var seriesModel = ecModel.getSeriesByIndex(seriesIndex); // For example, graph link.

	    var dataModel = el.dataModel || seriesModel;
	    var dataIndex = el.dataIndex;
	    var dataType = el.dataType;
	    var data = dataModel.getData();
	    var tooltipModel = buildTooltipModel([data.getItemModel(dataIndex), dataModel, seriesModel && (seriesModel.coordinateSystem || {}).model, this._tooltipModel]);
	    var tooltipTrigger = tooltipModel.get('trigger');

	    if (tooltipTrigger != null && tooltipTrigger !== 'item') {
	      return;
	    }

	    var params = dataModel.getDataParams(dataIndex, dataType);
	    var defaultHtml = dataModel.formatTooltip(dataIndex, false, dataType);
	    var asyncTicket = 'item_' + dataModel.name + '_' + dataIndex;

	    this._showOrMove(tooltipModel, function () {
	      this._showTooltipContent(tooltipModel, defaultHtml, params, asyncTicket, e.offsetX, e.offsetY, e.position, e.target);
	    }); // FIXME
	    // duplicated showtip if manuallyShowTip is called from dispatchAction.


	    dispatchAction({
	      type: 'showTip',
	      dataIndexInside: dataIndex,
	      dataIndex: data.getRawIndex(dataIndex),
	      seriesIndex: seriesIndex,
	      from: this.uid
	    });
	  },
	  _showComponentItemTooltip: function (e, el, dispatchAction) {
	    var tooltipOpt = el.tooltip;

	    if (typeof tooltipOpt === 'string') {
	      var content = tooltipOpt;
	      tooltipOpt = {
	        content: content,
	        // Fixed formatter
	        formatter: content
	      };
	    }

	    var subTooltipModel = new Model(tooltipOpt, this._tooltipModel, this._ecModel);
	    var defaultHtml = subTooltipModel.get('content');
	    var asyncTicket = Math.random(); // Do not check whether `trigger` is 'none' here, because `trigger`
	    // only works on cooridinate system. In fact, we have not found case
	    // that requires setting `trigger` nothing on component yet.

	    this._showOrMove(subTooltipModel, function () {
	      this._showTooltipContent(subTooltipModel, defaultHtml, subTooltipModel.get('formatterParams') || {}, asyncTicket, e.offsetX, e.offsetY, e.position, el);
	    }); // If not dispatch showTip, tip may be hide triggered by axis.


	    dispatchAction({
	      type: 'showTip',
	      from: this.uid
	    });
	  },
	  _showTooltipContent: function (tooltipModel, defaultHtml, params, asyncTicket, x, y, positionExpr, el) {
	    // Reset ticket
	    this._ticket = '';

	    if (!tooltipModel.get('showContent') || !tooltipModel.get('show')) {
	      return;
	    }

	    var tooltipContent = this._tooltipContent;
	    var formatter = tooltipModel.get('formatter');
	    positionExpr = positionExpr || tooltipModel.get('position');
	    var html = defaultHtml;

	    if (formatter && typeof formatter === 'string') {
	      html = formatUtil.formatTpl(formatter, params, true);
	    } else if (typeof formatter === 'function') {
	      var callback = bind(function (cbTicket, html) {
	        if (cbTicket === this._ticket) {
	          tooltipContent.setContent(html);

	          this._updatePosition(tooltipModel, positionExpr, x, y, tooltipContent, params, el);
	        }
	      }, this);
	      this._ticket = asyncTicket;
	      html = formatter(params, asyncTicket, callback);
	    }

	    tooltipContent.setContent(html);
	    tooltipContent.show(tooltipModel);

	    this._updatePosition(tooltipModel, positionExpr, x, y, tooltipContent, params, el);
	  },

	  /**
	   * @param  {string|Function|Array.<number>|Object} positionExpr
	   * @param  {number} x Mouse x
	   * @param  {number} y Mouse y
	   * @param  {boolean} confine Whether confine tooltip content in view rect.
	   * @param  {Object|<Array.<Object>} params
	   * @param  {module:zrender/Element} el target element
	   * @param  {module:echarts/ExtensionAPI} api
	   * @return {Array.<number>}
	   */
	  _updatePosition: function (tooltipModel, positionExpr, x, y, content, params, el) {
	    var viewWidth = this._api.getWidth();

	    var viewHeight = this._api.getHeight();

	    positionExpr = positionExpr || tooltipModel.get('position');
	    var contentSize = content.getSize();
	    var align = tooltipModel.get('align');
	    var vAlign = tooltipModel.get('verticalAlign');
	    var rect = el && el.getBoundingRect().clone();
	    el && rect.applyTransform(el.transform);

	    if (typeof positionExpr === 'function') {
	      // Callback of position can be an array or a string specify the position
	      positionExpr = positionExpr([x, y], params, content.el, rect, {
	        viewSize: [viewWidth, viewHeight],
	        contentSize: contentSize.slice()
	      });
	    }

	    if (zrUtil.isArray(positionExpr)) {
	      x = parsePercent(positionExpr[0], viewWidth);
	      y = parsePercent(positionExpr[1], viewHeight);
	    } else if (zrUtil.isObject(positionExpr)) {
	      positionExpr.width = contentSize[0];
	      positionExpr.height = contentSize[1];
	      var layoutRect = layoutUtil.getLayoutRect(positionExpr, {
	        width: viewWidth,
	        height: viewHeight
	      });
	      x = layoutRect.x;
	      y = layoutRect.y;
	      align = null; // When positionExpr is left/top/right/bottom,
	      // align and verticalAlign will not work.

	      vAlign = null;
	    } // Specify tooltip position by string 'top' 'bottom' 'left' 'right' around graphic element
	    else if (typeof positionExpr === 'string' && el) {
	        var pos = calcTooltipPosition(positionExpr, rect, contentSize);
	        x = pos[0];
	        y = pos[1];
	      } else {
	        var pos = refixTooltipPosition(x, y, content.el, viewWidth, viewHeight, align ? null : 20, vAlign ? null : 20);
	        x = pos[0];
	        y = pos[1];
	      }

	    align && (x -= isCenterAlign(align) ? contentSize[0] / 2 : align === 'right' ? contentSize[0] : 0);
	    vAlign && (y -= isCenterAlign(vAlign) ? contentSize[1] / 2 : vAlign === 'bottom' ? contentSize[1] : 0);

	    if (tooltipModel.get('confine')) {
	      var pos = confineTooltipPosition(x, y, content.el, viewWidth, viewHeight);
	      x = pos[0];
	      y = pos[1];
	    }

	    content.moveTo(x, y);
	  },
	  // FIXME
	  // Should we remove this but leave this to user?
	  _updateContentNotChangedOnAxis: function (dataByCoordSys) {
	    var lastCoordSys = this._lastDataByCoordSys;
	    var contentNotChanged = !!lastCoordSys && lastCoordSys.length === dataByCoordSys.length;
	    contentNotChanged && each(lastCoordSys, function (lastItemCoordSys, indexCoordSys) {
	      var lastDataByAxis = lastItemCoordSys.dataByAxis || {};
	      var thisItemCoordSys = dataByCoordSys[indexCoordSys] || {};
	      var thisDataByAxis = thisItemCoordSys.dataByAxis || [];
	      contentNotChanged &= lastDataByAxis.length === thisDataByAxis.length;
	      contentNotChanged && each(lastDataByAxis, function (lastItem, indexAxis) {
	        var thisItem = thisDataByAxis[indexAxis] || {};
	        var lastIndices = lastItem.seriesDataIndices || [];
	        var newIndices = thisItem.seriesDataIndices || [];
	        contentNotChanged &= lastItem.value === thisItem.value && lastItem.axisType === thisItem.axisType && lastItem.axisId === thisItem.axisId && lastIndices.length === newIndices.length;
	        contentNotChanged && each(lastIndices, function (lastIdxItem, j) {
	          var newIdxItem = newIndices[j];
	          contentNotChanged &= lastIdxItem.seriesIndex === newIdxItem.seriesIndex && lastIdxItem.dataIndex === newIdxItem.dataIndex;
	        });
	      });
	    });
	    this._lastDataByCoordSys = dataByCoordSys;
	    return !!contentNotChanged;
	  },
	  _hide: function (dispatchAction) {
	    // Do not directly hideLater here, because this behavior may be prevented
	    // in dispatchAction when showTip is dispatched.
	    // FIXME
	    // duplicated hideTip if manuallyHideTip is called from dispatchAction.
	    this._lastDataByCoordSys = null;
	    dispatchAction({
	      type: 'hideTip',
	      from: this.uid
	    });
	  },
	  dispose: function (ecModel, api) {
	    if (env.node || env.wxa) {
	      return;
	    }

	    this._tooltipContent.hide();

	    globalListener.unregister('itemTooltip', api);
	  }
	});
	/**
	 * @param {Array.<Object|module:echarts/model/Model>} modelCascade
	 * From top to bottom. (the last one should be globalTooltipModel);
	 */


	function buildTooltipModel(modelCascade) {
	  var resultModel = modelCascade.pop();

	  while (modelCascade.length) {
	    var tooltipOpt = modelCascade.pop();

	    if (tooltipOpt) {
	      if (Model.isInstance(tooltipOpt)) {
	        tooltipOpt = tooltipOpt.get('tooltip', true);
	      } // In each data item tooltip can be simply write:
	      // {
	      //  value: 10,
	      //  tooltip: 'Something you need to know'
	      // }


	      if (typeof tooltipOpt === 'string') {
	        tooltipOpt = {
	          formatter: tooltipOpt
	        };
	      }

	      resultModel = new Model(tooltipOpt, resultModel, resultModel.ecModel);
	    }
	  }

	  return resultModel;
	}

	function makeDispatchAction(payload, api) {
	  return payload.dispatchAction || zrUtil.bind(api.dispatchAction, api);
	}

	function refixTooltipPosition(x, y, el, viewWidth, viewHeight, gapH, gapV) {
	  var size = getOuterSize(el);
	  var width = size.width;
	  var height = size.height;

	  if (gapH != null) {
	    if (x + width + gapH > viewWidth) {
	      x -= width + gapH;
	    } else {
	      x += gapH;
	    }
	  }

	  if (gapV != null) {
	    if (y + height + gapV > viewHeight) {
	      y -= height + gapV;
	    } else {
	      y += gapV;
	    }
	  }

	  return [x, y];
	}

	function confineTooltipPosition(x, y, el, viewWidth, viewHeight) {
	  var size = getOuterSize(el);
	  var width = size.width;
	  var height = size.height;
	  x = Math.min(x + width, viewWidth) - width;
	  y = Math.min(y + height, viewHeight) - height;
	  x = Math.max(x, 0);
	  y = Math.max(y, 0);
	  return [x, y];
	}

	function getOuterSize(el) {
	  var width = el.clientWidth;
	  var height = el.clientHeight; // Consider browser compatibility.
	  // IE8 does not support getComputedStyle.

	  if (document.defaultView && document.defaultView.getComputedStyle) {
	    var stl = document.defaultView.getComputedStyle(el);

	    if (stl) {
	      width += parseInt(stl.paddingLeft, 10) + parseInt(stl.paddingRight, 10) + parseInt(stl.borderLeftWidth, 10) + parseInt(stl.borderRightWidth, 10);
	      height += parseInt(stl.paddingTop, 10) + parseInt(stl.paddingBottom, 10) + parseInt(stl.borderTopWidth, 10) + parseInt(stl.borderBottomWidth, 10);
	    }
	  }

	  return {
	    width: width,
	    height: height
	  };
	}

	function calcTooltipPosition(position, rect, contentSize) {
	  var domWidth = contentSize[0];
	  var domHeight = contentSize[1];
	  var gap = 5;
	  var x = 0;
	  var y = 0;
	  var rectWidth = rect.width;
	  var rectHeight = rect.height;

	  switch (position) {
	    case 'inside':
	      x = rect.x + rectWidth / 2 - domWidth / 2;
	      y = rect.y + rectHeight / 2 - domHeight / 2;
	      break;

	    case 'top':
	      x = rect.x + rectWidth / 2 - domWidth / 2;
	      y = rect.y - domHeight - gap;
	      break;

	    case 'bottom':
	      x = rect.x + rectWidth / 2 - domWidth / 2;
	      y = rect.y + rectHeight + gap;
	      break;

	    case 'left':
	      x = rect.x - domWidth - gap;
	      y = rect.y + rectHeight / 2 - domHeight / 2;
	      break;

	    case 'right':
	      x = rect.x + rectWidth + gap;
	      y = rect.y + rectHeight / 2 - domHeight / 2;
	  }

	  return [x, y];
	}

	function isCenterAlign(align) {
	  return align === 'center' || align === 'middle';
	}

	module.exports = _default;

/***/ }),
/* 363 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(181);

	var zrColor = __webpack_require__(195);

	var eventUtil = __webpack_require__(215);

	var env = __webpack_require__(180);

	var formatUtil = __webpack_require__(264);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var each = zrUtil.each;
	var toCamelCase = formatUtil.toCamelCase;
	var vendors = ['', '-webkit-', '-moz-', '-o-'];
	var gCssText = 'position:absolute;display:block;border-style:solid;white-space:nowrap;z-index:9999999;';
	/**
	 * @param {number} duration
	 * @return {string}
	 * @inner
	 */

	function assembleTransition(duration) {
	  var transitionCurve = 'cubic-bezier(0.23, 1, 0.32, 1)';
	  var transitionText = 'left ' + duration + 's ' + transitionCurve + ',' + 'top ' + duration + 's ' + transitionCurve;
	  return zrUtil.map(vendors, function (vendorPrefix) {
	    return vendorPrefix + 'transition:' + transitionText;
	  }).join(';');
	}
	/**
	 * @param {Object} textStyle
	 * @return {string}
	 * @inner
	 */


	function assembleFont(textStyleModel) {
	  var cssText = [];
	  var fontSize = textStyleModel.get('fontSize');
	  var color = textStyleModel.getTextColor();
	  color && cssText.push('color:' + color);
	  cssText.push('font:' + textStyleModel.getFont());
	  fontSize && cssText.push('line-height:' + Math.round(fontSize * 3 / 2) + 'px');
	  each(['decoration', 'align'], function (name) {
	    var val = textStyleModel.get(name);
	    val && cssText.push('text-' + name + ':' + val);
	  });
	  return cssText.join(';');
	}
	/**
	 * @param {Object} tooltipModel
	 * @return {string}
	 * @inner
	 */


	function assembleCssText(tooltipModel) {
	  var cssText = [];
	  var transitionDuration = tooltipModel.get('transitionDuration');
	  var backgroundColor = tooltipModel.get('backgroundColor');
	  var textStyleModel = tooltipModel.getModel('textStyle');
	  var padding = tooltipModel.get('padding'); // Animation transition. Do not animate when transitionDuration is 0.

	  transitionDuration && cssText.push(assembleTransition(transitionDuration));

	  if (backgroundColor) {
	    if (env.canvasSupported) {
	      cssText.push('background-Color:' + backgroundColor);
	    } else {
	      // for ie
	      cssText.push('background-Color:#' + zrColor.toHex(backgroundColor));
	      cssText.push('filter:alpha(opacity=70)');
	    }
	  } // Border style


	  each(['width', 'color', 'radius'], function (name) {
	    var borderName = 'border-' + name;
	    var camelCase = toCamelCase(borderName);
	    var val = tooltipModel.get(camelCase);
	    val != null && cssText.push(borderName + ':' + val + (name === 'color' ? '' : 'px'));
	  }); // Text style

	  cssText.push(assembleFont(textStyleModel)); // Padding

	  if (padding != null) {
	    cssText.push('padding:' + formatUtil.normalizeCssArray(padding).join('px ') + 'px');
	  }

	  return cssText.join(';') + ';';
	}
	/**
	 * @alias module:echarts/component/tooltip/TooltipContent
	 * @constructor
	 */


	function TooltipContent(container, api) {
	  if (env.wxa) {
	    return null;
	  }

	  var el = document.createElement('div');
	  var zr = this._zr = api.getZr();
	  this.el = el;
	  this._x = api.getWidth() / 2;
	  this._y = api.getHeight() / 2;
	  container.appendChild(el);
	  this._container = container;
	  this._show = false;
	  /**
	   * @private
	   */

	  this._hideTimeout;
	  var self = this;

	  el.onmouseenter = function () {
	    // clear the timeout in hideLater and keep showing tooltip
	    if (self._enterable) {
	      clearTimeout(self._hideTimeout);
	      self._show = true;
	    }

	    self._inContent = true;
	  };

	  el.onmousemove = function (e) {
	    e = e || window.event;

	    if (!self._enterable) {
	      // Try trigger zrender event to avoid mouse
	      // in and out shape too frequently
	      var handler = zr.handler;
	      eventUtil.normalizeEvent(container, e, true);
	      handler.dispatch('mousemove', e);
	    }
	  };

	  el.onmouseleave = function () {
	    if (self._enterable) {
	      if (self._show) {
	        self.hideLater(self._hideDelay);
	      }
	    }

	    self._inContent = false;
	  };
	}

	TooltipContent.prototype = {
	  constructor: TooltipContent,

	  /**
	   * @private
	   * @type {boolean}
	   */
	  _enterable: true,

	  /**
	   * Update when tooltip is rendered
	   */
	  update: function () {
	    // FIXME
	    // Move this logic to ec main?
	    var container = this._container;
	    var stl = container.currentStyle || document.defaultView.getComputedStyle(container);
	    var domStyle = container.style;

	    if (domStyle.position !== 'absolute' && stl.position !== 'absolute') {
	      domStyle.position = 'relative';
	    } // Hide the tooltip
	    // PENDING
	    // this.hide();

	  },
	  show: function (tooltipModel) {
	    clearTimeout(this._hideTimeout);
	    var el = this.el;
	    el.style.cssText = gCssText + assembleCssText(tooltipModel) // http://stackoverflow.com/questions/21125587/css3-transition-not-working-in-chrome-anymore
	    + ';left:' + this._x + 'px;top:' + this._y + 'px;' + (tooltipModel.get('extraCssText') || '');
	    el.style.display = el.innerHTML ? 'block' : 'none';
	    this._show = true;
	  },
	  setContent: function (content) {
	    this.el.innerHTML = content == null ? '' : content;
	  },
	  setEnterable: function (enterable) {
	    this._enterable = enterable;
	  },
	  getSize: function () {
	    var el = this.el;
	    return [el.clientWidth, el.clientHeight];
	  },
	  moveTo: function (x, y) {
	    // xy should be based on canvas root. But tooltipContent is
	    // the sibling of canvas root. So padding of ec container
	    // should be considered here.
	    var zr = this._zr;
	    var viewportRootOffset;

	    if (zr && zr.painter && (viewportRootOffset = zr.painter.getViewportRootOffset())) {
	      x += viewportRootOffset.offsetLeft;
	      y += viewportRootOffset.offsetTop;
	    }

	    var style = this.el.style;
	    style.left = x + 'px';
	    style.top = y + 'px';
	    this._x = x;
	    this._y = y;
	  },
	  hide: function () {
	    this.el.style.display = 'none';
	    this._show = false;
	  },
	  hideLater: function (time) {
	    if (this._show && !(this._inContent && this._enterable)) {
	      if (time) {
	        this._hideDelay = time; // Set show false to avoid invoke hideLater mutiple times

	        this._show = false;
	        this._hideTimeout = setTimeout(zrUtil.bind(this.hide, this), time);
	      } else {
	        this.hide();
	      }
	    }
	  },
	  isShow: function () {
	    return this._show;
	  }
	};
	var _default = TooltipContent;
	module.exports = _default;

/***/ }),
/* 364 */
/***/ (function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(176);

	var graphic = __webpack_require__(226);

	var _layout = __webpack_require__(262);

	var getLayoutRect = _layout.getLayoutRect;

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	// Model
	echarts.extendComponentModel({
	  type: 'title',
	  layoutMode: {
	    type: 'box',
	    ignoreSize: true
	  },
	  defaultOption: {
	    // 一级层叠
	    zlevel: 0,
	    // 二级层叠
	    z: 6,
	    show: true,
	    text: '',
	    // 超链接跳转
	    // link: null,
	    // 仅支持self | blank
	    target: 'blank',
	    subtext: '',
	    // 超链接跳转
	    // sublink: null,
	    // 仅支持self | blank
	    subtarget: 'blank',
	    // 'center' ¦ 'left' ¦ 'right'
	    // ¦ {number}（x坐标，单位px）
	    left: 0,
	    // 'top' ¦ 'bottom' ¦ 'center'
	    // ¦ {number}（y坐标，单位px）
	    top: 0,
	    // 水平对齐
	    // 'auto' | 'left' | 'right' | 'center'
	    // 默认根据 left 的位置判断是左对齐还是右对齐
	    // textAlign: null
	    //
	    // 垂直对齐
	    // 'auto' | 'top' | 'bottom' | 'middle'
	    // 默认根据 top 位置判断是上对齐还是下对齐
	    // textBaseline: null
	    backgroundColor: 'rgba(0,0,0,0)',
	    // 标题边框颜色
	    borderColor: '#ccc',
	    // 标题边框线宽，单位px，默认为0（无边框）
	    borderWidth: 0,
	    // 标题内边距，单位px，默认各方向内边距为5，
	    // 接受数组分别设定上右下左边距，同css
	    padding: 5,
	    // 主副标题纵向间隔，单位px，默认为10，
	    itemGap: 10,
	    textStyle: {
	      fontSize: 18,
	      fontWeight: 'bolder',
	      color: '#333'
	    },
	    subtextStyle: {
	      color: '#aaa'
	    }
	  }
	}); // View

	echarts.extendComponentView({
	  type: 'title',
	  render: function (titleModel, ecModel, api) {
	    this.group.removeAll();

	    if (!titleModel.get('show')) {
	      return;
	    }

	    var group = this.group;
	    var textStyleModel = titleModel.getModel('textStyle');
	    var subtextStyleModel = titleModel.getModel('subtextStyle');
	    var textAlign = titleModel.get('textAlign');
	    var textBaseline = titleModel.get('textBaseline');
	    var textEl = new graphic.Text({
	      style: graphic.setTextStyle({}, textStyleModel, {
	        text: titleModel.get('text'),
	        textFill: textStyleModel.getTextColor()
	      }, {
	        disableBox: true
	      }),
	      z2: 10
	    });
	    var textRect = textEl.getBoundingRect();
	    var subText = titleModel.get('subtext');
	    var subTextEl = new graphic.Text({
	      style: graphic.setTextStyle({}, subtextStyleModel, {
	        text: subText,
	        textFill: subtextStyleModel.getTextColor(),
	        y: textRect.height + titleModel.get('itemGap'),
	        textVerticalAlign: 'top'
	      }, {
	        disableBox: true
	      }),
	      z2: 10
	    });
	    var link = titleModel.get('link');
	    var sublink = titleModel.get('sublink');
	    textEl.silent = !link;
	    subTextEl.silent = !sublink;

	    if (link) {
	      textEl.on('click', function () {
	        window.open(link, '_' + titleModel.get('target'));
	      });
	    }

	    if (sublink) {
	      subTextEl.on('click', function () {
	        window.open(sublink, '_' + titleModel.get('subtarget'));
	      });
	    }

	    group.add(textEl);
	    subText && group.add(subTextEl); // If no subText, but add subTextEl, there will be an empty line.

	    var groupRect = group.getBoundingRect();
	    var layoutOption = titleModel.getBoxLayoutParams();
	    layoutOption.width = groupRect.width;
	    layoutOption.height = groupRect.height;
	    var layoutRect = getLayoutRect(layoutOption, {
	      width: api.getWidth(),
	      height: api.getHeight()
	    }, titleModel.get('padding')); // Adjust text align based on position

	    if (!textAlign) {
	      // Align left if title is on the left. center and right is same
	      textAlign = titleModel.get('left') || titleModel.get('right');

	      if (textAlign === 'middle') {
	        textAlign = 'center';
	      } // Adjust layout by text align


	      if (textAlign === 'right') {
	        layoutRect.x += layoutRect.width;
	      } else if (textAlign === 'center') {
	        layoutRect.x += layoutRect.width / 2;
	      }
	    }

	    if (!textBaseline) {
	      textBaseline = titleModel.get('top') || titleModel.get('bottom');

	      if (textBaseline === 'center') {
	        textBaseline = 'middle';
	      }

	      if (textBaseline === 'bottom') {
	        layoutRect.y += layoutRect.height;
	      } else if (textBaseline === 'middle') {
	        layoutRect.y += layoutRect.height / 2;
	      }

	      textBaseline = textBaseline || 'top';
	    }

	    group.attr('position', [layoutRect.x, layoutRect.y]);
	    var alignStyle = {
	      textAlign: textAlign,
	      textVerticalAlign: textBaseline
	    };
	    textEl.setStyle(alignStyle);
	    subTextEl.setStyle(alignStyle); // Render background
	    // Get groupRect again because textAlign has been changed

	    groupRect = group.getBoundingRect();
	    var padding = layoutRect.margin;
	    var style = titleModel.getItemStyle(['color', 'opacity']);
	    style.fill = titleModel.get('backgroundColor');
	    var rect = new graphic.Rect({
	      shape: {
	        x: groupRect.x - padding[3],
	        y: groupRect.y - padding[0],
	        width: groupRect.width + padding[1] + padding[3],
	        height: groupRect.height + padding[0] + padding[2],
	        r: titleModel.get('borderRadius')
	      },
	      style: style,
	      silent: true
	    });
	    graphic.subPixelOptimizeRect(rect);
	    group.add(rect);
	  }
	});

/***/ }),
/* 365 */
/***/ (function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(176);

	__webpack_require__(366);

	__webpack_require__(367);

	__webpack_require__(368);

	var legendFilter = __webpack_require__(370);

	var Component = __webpack_require__(260);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	// Do not contain scrollable legend, for sake of file size.
	// Series Filter
	echarts.registerProcessor(legendFilter);
	Component.registerSubTypeDefaulter('legend', function () {
	  // Default 'plain' when no type specified.
	  return 'plain';
	});

/***/ }),
/* 366 */
/***/ (function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(176);

	var zrUtil = __webpack_require__(181);

	var Model = __webpack_require__(220);

	var _model = __webpack_require__(219);

	var isNameSpecified = _model.isNameSpecified;

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var LegendModel = echarts.extendComponentModel({
	  type: 'legend.plain',
	  dependencies: ['series'],
	  layoutMode: {
	    type: 'box',
	    // legend.width/height are maxWidth/maxHeight actually,
	    // whereas realy width/height is calculated by its content.
	    // (Setting {left: 10, right: 10} does not make sense).
	    // So consider the case:
	    // `setOption({legend: {left: 10});`
	    // then `setOption({legend: {right: 10});`
	    // The previous `left` should be cleared by setting `ignoreSize`.
	    ignoreSize: true
	  },
	  init: function (option, parentModel, ecModel) {
	    this.mergeDefaultAndTheme(option, ecModel);
	    option.selected = option.selected || {};
	  },
	  mergeOption: function (option) {
	    LegendModel.superCall(this, 'mergeOption', option);
	  },
	  optionUpdated: function () {
	    this._updateData(this.ecModel);

	    var legendData = this._data; // If selectedMode is single, try to select one

	    if (legendData[0] && this.get('selectedMode') === 'single') {
	      var hasSelected = false; // If has any selected in option.selected

	      for (var i = 0; i < legendData.length; i++) {
	        var name = legendData[i].get('name');

	        if (this.isSelected(name)) {
	          // Force to unselect others
	          this.select(name);
	          hasSelected = true;
	          break;
	        }
	      } // Try select the first if selectedMode is single


	      !hasSelected && this.select(legendData[0].get('name'));
	    }
	  },
	  _updateData: function (ecModel) {
	    var potentialData = [];
	    var availableNames = [];
	    ecModel.eachRawSeries(function (seriesModel) {
	      var seriesName = seriesModel.name;
	      availableNames.push(seriesName);
	      var isPotential;

	      if (seriesModel.legendDataProvider) {
	        var data = seriesModel.legendDataProvider();
	        var names = data.mapArray(data.getName);

	        if (!ecModel.isSeriesFiltered(seriesModel)) {
	          availableNames = availableNames.concat(names);
	        }

	        if (names.length) {
	          potentialData = potentialData.concat(names);
	        } else {
	          isPotential = true;
	        }
	      } else {
	        isPotential = true;
	      }

	      if (isPotential && isNameSpecified(seriesModel)) {
	        potentialData.push(seriesModel.name);
	      }
	    });
	    /**
	     * @type {Array.<string>}
	     * @private
	     */

	    this._availableNames = availableNames; // If legend.data not specified in option, use availableNames as data,
	    // which is convinient for user preparing option.

	    var rawData = this.get('data') || potentialData;
	    var legendData = zrUtil.map(rawData, function (dataItem) {
	      // Can be string or number
	      if (typeof dataItem === 'string' || typeof dataItem === 'number') {
	        dataItem = {
	          name: dataItem
	        };
	      }

	      return new Model(dataItem, this, this.ecModel);
	    }, this);
	    /**
	     * @type {Array.<module:echarts/model/Model>}
	     * @private
	     */

	    this._data = legendData;
	  },

	  /**
	   * @return {Array.<module:echarts/model/Model>}
	   */
	  getData: function () {
	    return this._data;
	  },

	  /**
	   * @param {string} name
	   */
	  select: function (name) {
	    var selected = this.option.selected;
	    var selectedMode = this.get('selectedMode');

	    if (selectedMode === 'single') {
	      var data = this._data;
	      zrUtil.each(data, function (dataItem) {
	        selected[dataItem.get('name')] = false;
	      });
	    }

	    selected[name] = true;
	  },

	  /**
	   * @param {string} name
	   */
	  unSelect: function (name) {
	    if (this.get('selectedMode') !== 'single') {
	      this.option.selected[name] = false;
	    }
	  },

	  /**
	   * @param {string} name
	   */
	  toggleSelected: function (name) {
	    var selected = this.option.selected; // Default is true

	    if (!selected.hasOwnProperty(name)) {
	      selected[name] = true;
	    }

	    this[selected[name] ? 'unSelect' : 'select'](name);
	  },

	  /**
	   * @param {string} name
	   */
	  isSelected: function (name) {
	    var selected = this.option.selected;
	    return !(selected.hasOwnProperty(name) && !selected[name]) && zrUtil.indexOf(this._availableNames, name) >= 0;
	  },
	  defaultOption: {
	    // 一级层叠
	    zlevel: 0,
	    // 二级层叠
	    z: 4,
	    show: true,
	    // 布局方式，默认为水平布局，可选为：
	    // 'horizontal' | 'vertical'
	    orient: 'horizontal',
	    left: 'center',
	    // right: 'center',
	    top: 0,
	    // bottom: null,
	    // 水平对齐
	    // 'auto' | 'left' | 'right'
	    // 默认为 'auto', 根据 x 的位置判断是左对齐还是右对齐
	    align: 'auto',
	    backgroundColor: 'rgba(0,0,0,0)',
	    // 图例边框颜色
	    borderColor: '#ccc',
	    borderRadius: 0,
	    // 图例边框线宽，单位px，默认为0（无边框）
	    borderWidth: 0,
	    // 图例内边距，单位px，默认各方向内边距为5，
	    // 接受数组分别设定上右下左边距，同css
	    padding: 5,
	    // 各个item之间的间隔，单位px，默认为10，
	    // 横向布局时为水平间隔，纵向布局时为纵向间隔
	    itemGap: 10,
	    // 图例图形宽度
	    itemWidth: 25,
	    // 图例图形高度
	    itemHeight: 14,
	    // 图例关闭时候的颜色
	    inactiveColor: '#ccc',
	    textStyle: {
	      // 图例文字颜色
	      color: '#333'
	    },
	    // formatter: '',
	    // 选择模式，默认开启图例开关
	    selectedMode: true,
	    // 配置默认选中状态，可配合LEGEND.SELECTED事件做动态数据载入
	    // selected: null,
	    // 图例内容（详见legend.data，数组中每一项代表一个item
	    // data: [],
	    // Tooltip 相关配置
	    tooltip: {
	      show: false
	    }
	  }
	});
	var _default = LegendModel;
	module.exports = _default;

/***/ }),
/* 367 */
/***/ (function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(176);

	var zrUtil = __webpack_require__(181);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	function legendSelectActionHandler(methodName, payload, ecModel) {
	  var selectedMap = {};
	  var isToggleSelect = methodName === 'toggleSelected';
	  var isSelected; // Update all legend components

	  ecModel.eachComponent('legend', function (legendModel) {
	    if (isToggleSelect && isSelected != null) {
	      // Force other legend has same selected status
	      // Or the first is toggled to true and other are toggled to false
	      // In the case one legend has some item unSelected in option. And if other legend
	      // doesn't has the item, they will assume it is selected.
	      legendModel[isSelected ? 'select' : 'unSelect'](payload.name);
	    } else {
	      legendModel[methodName](payload.name);
	      isSelected = legendModel.isSelected(payload.name);
	    }

	    var legendData = legendModel.getData();
	    zrUtil.each(legendData, function (model) {
	      var name = model.get('name'); // Wrap element

	      if (name === '\n' || name === '') {
	        return;
	      }

	      var isItemSelected = legendModel.isSelected(name);

	      if (selectedMap.hasOwnProperty(name)) {
	        // Unselected if any legend is unselected
	        selectedMap[name] = selectedMap[name] && isItemSelected;
	      } else {
	        selectedMap[name] = isItemSelected;
	      }
	    });
	  }); // Return the event explicitly

	  return {
	    name: payload.name,
	    selected: selectedMap
	  };
	}
	/**
	 * @event legendToggleSelect
	 * @type {Object}
	 * @property {string} type 'legendToggleSelect'
	 * @property {string} [from]
	 * @property {string} name Series name or data item name
	 */


	echarts.registerAction('legendToggleSelect', 'legendselectchanged', zrUtil.curry(legendSelectActionHandler, 'toggleSelected'));
	/**
	 * @event legendSelect
	 * @type {Object}
	 * @property {string} type 'legendSelect'
	 * @property {string} name Series name or data item name
	 */

	echarts.registerAction('legendSelect', 'legendselected', zrUtil.curry(legendSelectActionHandler, 'select'));
	/**
	 * @event legendUnSelect
	 * @type {Object}
	 * @property {string} type 'legendUnSelect'
	 * @property {string} name Series name or data item name
	 */

	echarts.registerAction('legendUnSelect', 'legendunselected', zrUtil.curry(legendSelectActionHandler, 'unSelect'));

/***/ }),
/* 368 */
/***/ (function(module, exports, __webpack_require__) {

	var _config = __webpack_require__(177);

	var __DEV__ = _config.__DEV__;

	var echarts = __webpack_require__(176);

	var zrUtil = __webpack_require__(181);

	var _symbol = __webpack_require__(313);

	var createSymbol = _symbol.createSymbol;

	var graphic = __webpack_require__(226);

	var _listComponent = __webpack_require__(369);

	var makeBackground = _listComponent.makeBackground;

	var layoutUtil = __webpack_require__(262);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var curry = zrUtil.curry;
	var each = zrUtil.each;
	var Group = graphic.Group;

	var _default = echarts.extendComponentView({
	  type: 'legend.plain',
	  newlineDisabled: false,

	  /**
	   * @override
	   */
	  init: function () {
	    /**
	     * @private
	     * @type {module:zrender/container/Group}
	     */
	    this.group.add(this._contentGroup = new Group());
	    /**
	     * @private
	     * @type {module:zrender/Element}
	     */

	    this._backgroundEl;
	  },

	  /**
	   * @protected
	   */
	  getContentGroup: function () {
	    return this._contentGroup;
	  },

	  /**
	   * @override
	   */
	  render: function (legendModel, ecModel, api) {
	    this.resetInner();

	    if (!legendModel.get('show', true)) {
	      return;
	    }

	    var itemAlign = legendModel.get('align');

	    if (!itemAlign || itemAlign === 'auto') {
	      itemAlign = legendModel.get('left') === 'right' && legendModel.get('orient') === 'vertical' ? 'right' : 'left';
	    }

	    this.renderInner(itemAlign, legendModel, ecModel, api); // Perform layout.

	    var positionInfo = legendModel.getBoxLayoutParams();
	    var viewportSize = {
	      width: api.getWidth(),
	      height: api.getHeight()
	    };
	    var padding = legendModel.get('padding');
	    var maxSize = layoutUtil.getLayoutRect(positionInfo, viewportSize, padding);
	    var mainRect = this.layoutInner(legendModel, itemAlign, maxSize); // Place mainGroup, based on the calculated `mainRect`.

	    var layoutRect = layoutUtil.getLayoutRect(zrUtil.defaults({
	      width: mainRect.width,
	      height: mainRect.height
	    }, positionInfo), viewportSize, padding);
	    this.group.attr('position', [layoutRect.x - mainRect.x, layoutRect.y - mainRect.y]); // Render background after group is layout.

	    this.group.add(this._backgroundEl = makeBackground(mainRect, legendModel));
	  },

	  /**
	   * @protected
	   */
	  resetInner: function () {
	    this.getContentGroup().removeAll();
	    this._backgroundEl && this.group.remove(this._backgroundEl);
	  },

	  /**
	   * @protected
	   */
	  renderInner: function (itemAlign, legendModel, ecModel, api) {
	    var contentGroup = this.getContentGroup();
	    var legendDrawnMap = zrUtil.createHashMap();
	    var selectMode = legendModel.get('selectedMode');
	    var excludeSeriesId = [];
	    ecModel.eachRawSeries(function (seriesModel) {
	      !seriesModel.get('legendHoverLink') && excludeSeriesId.push(seriesModel.id);
	    });
	    each(legendModel.getData(), function (itemModel, dataIndex) {
	      var name = itemModel.get('name'); // Use empty string or \n as a newline string

	      if (!this.newlineDisabled && (name === '' || name === '\n')) {
	        contentGroup.add(new Group({
	          newline: true
	        }));
	        return;
	      } // Representitive series.


	      var seriesModel = ecModel.getSeriesByName(name)[0];

	      if (legendDrawnMap.get(name)) {
	        // Have been drawed
	        return;
	      } // Series legend


	      if (seriesModel) {
	        var data = seriesModel.getData();
	        var color = data.getVisual('color'); // If color is a callback function

	        if (typeof color === 'function') {
	          // Use the first data
	          color = color(seriesModel.getDataParams(0));
	        } // Using rect symbol defaultly


	        var legendSymbolType = data.getVisual('legendSymbol') || 'roundRect';
	        var symbolType = data.getVisual('symbol');

	        var itemGroup = this._createItem(name, dataIndex, itemModel, legendModel, legendSymbolType, symbolType, itemAlign, color, selectMode);

	        itemGroup.on('click', curry(dispatchSelectAction, name, api)).on('mouseover', curry(dispatchHighlightAction, seriesModel, null, api, excludeSeriesId)).on('mouseout', curry(dispatchDownplayAction, seriesModel, null, api, excludeSeriesId));
	        legendDrawnMap.set(name, true);
	      } else {
	        // Data legend of pie, funnel
	        ecModel.eachRawSeries(function (seriesModel) {
	          // In case multiple series has same data name
	          if (legendDrawnMap.get(name)) {
	            return;
	          }

	          if (seriesModel.legendDataProvider) {
	            var data = seriesModel.legendDataProvider();
	            var idx = data.indexOfName(name);

	            if (idx < 0) {
	              return;
	            }

	            var color = data.getItemVisual(idx, 'color');
	            var legendSymbolType = 'roundRect';

	            var itemGroup = this._createItem(name, dataIndex, itemModel, legendModel, legendSymbolType, null, itemAlign, color, selectMode); // FIXME: consider different series has items with the same name.


	            itemGroup.on('click', curry(dispatchSelectAction, name, api)) // FIXME Should not specify the series name
	            .on('mouseover', curry(dispatchHighlightAction, seriesModel, name, api, excludeSeriesId)).on('mouseout', curry(dispatchDownplayAction, seriesModel, name, api, excludeSeriesId));
	            legendDrawnMap.set(name, true);
	          }
	        }, this);
	      }
	    }, this);
	  },
	  _createItem: function (name, dataIndex, itemModel, legendModel, legendSymbolType, symbolType, itemAlign, color, selectMode) {
	    var itemWidth = legendModel.get('itemWidth');
	    var itemHeight = legendModel.get('itemHeight');
	    var inactiveColor = legendModel.get('inactiveColor');
	    var symbolKeepAspect = legendModel.get('symbolKeepAspect');
	    var isSelected = legendModel.isSelected(name);
	    var itemGroup = new Group();
	    var textStyleModel = itemModel.getModel('textStyle');
	    var itemIcon = itemModel.get('icon');
	    var tooltipModel = itemModel.getModel('tooltip');
	    var legendGlobalTooltipModel = tooltipModel.parentModel; // Use user given icon first

	    legendSymbolType = itemIcon || legendSymbolType;
	    itemGroup.add(createSymbol(legendSymbolType, 0, 0, itemWidth, itemHeight, isSelected ? color : inactiveColor, // symbolKeepAspect default true for legend
	    symbolKeepAspect == null ? true : symbolKeepAspect)); // Compose symbols
	    // PENDING

	    if (!itemIcon && symbolType // At least show one symbol, can't be all none
	    && (symbolType !== legendSymbolType || symbolType == 'none')) {
	      var size = itemHeight * 0.8;

	      if (symbolType === 'none') {
	        symbolType = 'circle';
	      } // Put symbol in the center


	      itemGroup.add(createSymbol(symbolType, (itemWidth - size) / 2, (itemHeight - size) / 2, size, size, isSelected ? color : inactiveColor, // symbolKeepAspect default true for legend
	      symbolKeepAspect == null ? true : symbolKeepAspect));
	    }

	    var textX = itemAlign === 'left' ? itemWidth + 5 : -5;
	    var textAlign = itemAlign;
	    var formatter = legendModel.get('formatter');
	    var content = name;

	    if (typeof formatter === 'string' && formatter) {
	      content = formatter.replace('{name}', name != null ? name : '');
	    } else if (typeof formatter === 'function') {
	      content = formatter(name);
	    }

	    itemGroup.add(new graphic.Text({
	      style: graphic.setTextStyle({}, textStyleModel, {
	        text: content,
	        x: textX,
	        y: itemHeight / 2,
	        textFill: isSelected ? textStyleModel.getTextColor() : inactiveColor,
	        textAlign: textAlign,
	        textVerticalAlign: 'middle'
	      })
	    })); // Add a invisible rect to increase the area of mouse hover

	    var hitRect = new graphic.Rect({
	      shape: itemGroup.getBoundingRect(),
	      invisible: true,
	      tooltip: tooltipModel.get('show') ? zrUtil.extend({
	        content: name,
	        // Defaul formatter
	        formatter: legendGlobalTooltipModel.get('formatter', true) || function () {
	          return name;
	        },
	        formatterParams: {
	          componentType: 'legend',
	          legendIndex: legendModel.componentIndex,
	          name: name,
	          $vars: ['name']
	        }
	      }, tooltipModel.option) : null
	    });
	    itemGroup.add(hitRect);
	    itemGroup.eachChild(function (child) {
	      child.silent = true;
	    });
	    hitRect.silent = !selectMode;
	    this.getContentGroup().add(itemGroup);
	    graphic.setHoverStyle(itemGroup);
	    itemGroup.__legendDataIndex = dataIndex;
	    return itemGroup;
	  },

	  /**
	   * @protected
	   */
	  layoutInner: function (legendModel, itemAlign, maxSize) {
	    var contentGroup = this.getContentGroup(); // Place items in contentGroup.

	    layoutUtil.box(legendModel.get('orient'), contentGroup, legendModel.get('itemGap'), maxSize.width, maxSize.height);
	    var contentRect = contentGroup.getBoundingRect();
	    contentGroup.attr('position', [-contentRect.x, -contentRect.y]);
	    return this.group.getBoundingRect();
	  }
	});

	function dispatchSelectAction(name, api) {
	  api.dispatchAction({
	    type: 'legendToggleSelect',
	    name: name
	  });
	}

	function dispatchHighlightAction(seriesModel, dataName, api, excludeSeriesId) {
	  // If element hover will move to a hoverLayer.
	  var el = api.getZr().storage.getDisplayList()[0];

	  if (!(el && el.useHoverLayer)) {
	    api.dispatchAction({
	      type: 'highlight',
	      seriesName: seriesModel.name,
	      name: dataName,
	      excludeSeriesId: excludeSeriesId
	    });
	  }
	}

	function dispatchDownplayAction(seriesModel, dataName, api, excludeSeriesId) {
	  // If element hover will move to a hoverLayer.
	  var el = api.getZr().storage.getDisplayList()[0];

	  if (!(el && el.useHoverLayer)) {
	    api.dispatchAction({
	      type: 'downplay',
	      seriesName: seriesModel.name,
	      name: dataName,
	      excludeSeriesId: excludeSeriesId
	    });
	  }
	}

	module.exports = _default;

/***/ }),
/* 369 */
/***/ (function(module, exports, __webpack_require__) {

	var _layout = __webpack_require__(262);

	var getLayoutRect = _layout.getLayoutRect;
	var layoutBox = _layout.box;
	var positionElement = _layout.positionElement;

	var formatUtil = __webpack_require__(264);

	var graphic = __webpack_require__(226);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/

	/**
	 * Layout list like component.
	 * It will box layout each items in group of component and then position the whole group in the viewport
	 * @param {module:zrender/group/Group} group
	 * @param {module:echarts/model/Component} componentModel
	 * @param {module:echarts/ExtensionAPI}
	 */
	function layout(group, componentModel, api) {
	  var boxLayoutParams = componentModel.getBoxLayoutParams();
	  var padding = componentModel.get('padding');
	  var viewportSize = {
	    width: api.getWidth(),
	    height: api.getHeight()
	  };
	  var rect = getLayoutRect(boxLayoutParams, viewportSize, padding);
	  layoutBox(componentModel.get('orient'), group, componentModel.get('itemGap'), rect.width, rect.height);
	  positionElement(group, boxLayoutParams, viewportSize, padding);
	}

	function makeBackground(rect, componentModel) {
	  var padding = formatUtil.normalizeCssArray(componentModel.get('padding'));
	  var style = componentModel.getItemStyle(['color', 'opacity']);
	  style.fill = componentModel.get('backgroundColor');
	  var rect = new graphic.Rect({
	    shape: {
	      x: rect.x - padding[3],
	      y: rect.y - padding[0],
	      width: rect.width + padding[1] + padding[3],
	      height: rect.height + padding[0] + padding[2],
	      r: componentModel.get('borderRadius')
	    },
	    style: style,
	    silent: true,
	    z2: -1
	  }); // FIXME
	  // `subPixelOptimizeRect` may bring some gap between edge of viewpart
	  // and background rect when setting like `left: 0`, `top: 0`.
	  // graphic.subPixelOptimizeRect(rect);

	  return rect;
	}

	exports.layout = layout;
	exports.makeBackground = makeBackground;

/***/ }),
/* 370 */
/***/ (function(module, exports) {

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	function _default(ecModel) {
	  var legendModels = ecModel.findComponents({
	    mainType: 'legend'
	  });

	  if (legendModels && legendModels.length) {
	    ecModel.filterSeries(function (series) {
	      // If in any legend component the status is not selected.
	      // Because in legend series is assumed selected when it is not in the legend data.
	      for (var i = 0; i < legendModels.length; i++) {
	        if (!legendModels[i].isSelected(series.name)) {
	          return false;
	        }
	      }

	      return true;
	    });
	  }
	}

	module.exports = _default;

/***/ }),
/* 371 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(372);

	__webpack_require__(386);

/***/ }),
/* 372 */
/***/ (function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(176);

	var preprocessor = __webpack_require__(373);

	__webpack_require__(374);

	__webpack_require__(375);

	__webpack_require__(378);

	__webpack_require__(381);

	__webpack_require__(385);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/

	/**
	 * DataZoom component entry
	 */
	echarts.registerPreprocessor(preprocessor);

/***/ }),
/* 373 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(181);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var each = zrUtil.each;

	function _default(option) {
	  var visualMap = option && option.visualMap;

	  if (!zrUtil.isArray(visualMap)) {
	    visualMap = visualMap ? [visualMap] : [];
	  }

	  each(visualMap, function (opt) {
	    if (!opt) {
	      return;
	    } // rename splitList to pieces


	    if (has(opt, 'splitList') && !has(opt, 'pieces')) {
	      opt.pieces = opt.splitList;
	      delete opt.splitList;
	    }

	    var pieces = opt.pieces;

	    if (pieces && zrUtil.isArray(pieces)) {
	      each(pieces, function (piece) {
	        if (zrUtil.isObject(piece)) {
	          if (has(piece, 'start') && !has(piece, 'min')) {
	            piece.min = piece.start;
	          }

	          if (has(piece, 'end') && !has(piece, 'max')) {
	            piece.max = piece.end;
	          }
	        }
	      });
	    }
	  });
	}

	function has(obj, name) {
	  return obj && obj.hasOwnProperty && obj.hasOwnProperty(name);
	}

	module.exports = _default;

/***/ }),
/* 374 */
/***/ (function(module, exports, __webpack_require__) {

	var Component = __webpack_require__(260);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	Component.registerSubTypeDefaulter('visualMap', function (option) {
	  // Compatible with ec2, when splitNumber === 0, continuous visualMap will be used.
	  return !option.categories && (!(option.pieces ? option.pieces.length > 0 : option.splitNumber > 0) || option.calculable) ? 'continuous' : 'piecewise';
	});

/***/ }),
/* 375 */
/***/ (function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(176);

	var zrUtil = __webpack_require__(181);

	var visualSolution = __webpack_require__(376);

	var VisualMapping = __webpack_require__(377);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var VISUAL_PRIORITY = echarts.PRIORITY.VISUAL.COMPONENT;
	echarts.registerVisual(VISUAL_PRIORITY, {
	  createOnAllSeries: true,
	  reset: function (seriesModel, ecModel) {
	    var resetDefines = [];
	    ecModel.eachComponent('visualMap', function (visualMapModel) {
	      var pipelineContext = seriesModel.pipelineContext;

	      if (!visualMapModel.isTargetSeries(seriesModel) || pipelineContext && pipelineContext.large) {
	        return;
	      }

	      resetDefines.push(visualSolution.incrementalApplyVisual(visualMapModel.stateList, visualMapModel.targetVisuals, zrUtil.bind(visualMapModel.getValueState, visualMapModel), visualMapModel.getDataDimension(seriesModel.getData())));
	    });
	    return resetDefines;
	  }
	}); // Only support color.

	echarts.registerVisual(VISUAL_PRIORITY, {
	  createOnAllSeries: true,
	  reset: function (seriesModel, ecModel) {
	    var data = seriesModel.getData();
	    var visualMetaList = [];
	    ecModel.eachComponent('visualMap', function (visualMapModel) {
	      if (visualMapModel.isTargetSeries(seriesModel)) {
	        var visualMeta = visualMapModel.getVisualMeta(zrUtil.bind(getColorVisual, null, seriesModel, visualMapModel)) || {
	          stops: [],
	          outerColors: []
	        };
	        var concreteDim = visualMapModel.getDataDimension(data);
	        var dimInfo = data.getDimensionInfo(concreteDim);

	        if (dimInfo != null) {
	          // visualMeta.dimension should be dimension index, but not concrete dimension.
	          visualMeta.dimension = dimInfo.index;
	          visualMetaList.push(visualMeta);
	        }
	      }
	    }); // console.log(JSON.stringify(visualMetaList.map(a => a.stops)));

	    seriesModel.getData().setVisual('visualMeta', visualMetaList);
	  }
	}); // FIXME
	// performance and export for heatmap?
	// value can be Infinity or -Infinity

	function getColorVisual(seriesModel, visualMapModel, value, valueState) {
	  var mappings = visualMapModel.targetVisuals[valueState];
	  var visualTypes = VisualMapping.prepareVisualTypes(mappings);
	  var resultVisual = {
	    color: seriesModel.getData().getVisual('color') // default color.

	  };

	  for (var i = 0, len = visualTypes.length; i < len; i++) {
	    var type = visualTypes[i];
	    var mapping = mappings[type === 'opacity' ? '__alphaForOpacity' : type];
	    mapping && mapping.applyVisual(value, getVisual, setVisual);
	  }

	  return resultVisual.color;

	  function getVisual(key) {
	    return resultVisual[key];
	  }

	  function setVisual(key, value) {
	    resultVisual[key] = value;
	  }
	}

/***/ }),
/* 376 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(181);

	var VisualMapping = __webpack_require__(377);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/

	/**
	 * @file Visual solution, for consistent option specification.
	 */
	var each = zrUtil.each;

	function hasKeys(obj) {
	  if (obj) {
	    for (var name in obj) {
	      if (obj.hasOwnProperty(name)) {
	        return true;
	      }
	    }
	  }
	}
	/**
	 * @param {Object} option
	 * @param {Array.<string>} stateList
	 * @param {Function} [supplementVisualOption]
	 * @return {Object} visualMappings <state, <visualType, module:echarts/visual/VisualMapping>>
	 */


	function createVisualMappings(option, stateList, supplementVisualOption) {
	  var visualMappings = {};
	  each(stateList, function (state) {
	    var mappings = visualMappings[state] = createMappings();
	    each(option[state], function (visualData, visualType) {
	      if (!VisualMapping.isValidType(visualType)) {
	        return;
	      }

	      var mappingOption = {
	        type: visualType,
	        visual: visualData
	      };
	      supplementVisualOption && supplementVisualOption(mappingOption, state);
	      mappings[visualType] = new VisualMapping(mappingOption); // Prepare a alpha for opacity, for some case that opacity
	      // is not supported, such as rendering using gradient color.

	      if (visualType === 'opacity') {
	        mappingOption = zrUtil.clone(mappingOption);
	        mappingOption.type = 'colorAlpha';
	        mappings.__hidden.__alphaForOpacity = new VisualMapping(mappingOption);
	      }
	    });
	  });
	  return visualMappings;

	  function createMappings() {
	    var Creater = function () {}; // Make sure hidden fields will not be visited by
	    // object iteration (with hasOwnProperty checking).


	    Creater.prototype.__hidden = Creater.prototype;
	    var obj = new Creater();
	    return obj;
	  }
	}
	/**
	 * @param {Object} thisOption
	 * @param {Object} newOption
	 * @param {Array.<string>} keys
	 */


	function replaceVisualOption(thisOption, newOption, keys) {
	  // Visual attributes merge is not supported, otherwise it
	  // brings overcomplicated merge logic. See #2853. So if
	  // newOption has anyone of these keys, all of these keys
	  // will be reset. Otherwise, all keys remain.
	  var has;
	  zrUtil.each(keys, function (key) {
	    if (newOption.hasOwnProperty(key) && hasKeys(newOption[key])) {
	      has = true;
	    }
	  });
	  has && zrUtil.each(keys, function (key) {
	    if (newOption.hasOwnProperty(key) && hasKeys(newOption[key])) {
	      thisOption[key] = zrUtil.clone(newOption[key]);
	    } else {
	      delete thisOption[key];
	    }
	  });
	}
	/**
	 * @param {Array.<string>} stateList
	 * @param {Object} visualMappings <state, Object.<visualType, module:echarts/visual/VisualMapping>>
	 * @param {module:echarts/data/List} list
	 * @param {Function} getValueState param: valueOrIndex, return: state.
	 * @param {object} [scope] Scope for getValueState
	 * @param {string} [dimension] Concrete dimension, if used.
	 */
	// ???! handle brush?


	function applyVisual(stateList, visualMappings, data, getValueState, scope, dimension) {
	  var visualTypesMap = {};
	  zrUtil.each(stateList, function (state) {
	    var visualTypes = VisualMapping.prepareVisualTypes(visualMappings[state]);
	    visualTypesMap[state] = visualTypes;
	  });
	  var dataIndex;

	  function getVisual(key) {
	    return data.getItemVisual(dataIndex, key);
	  }

	  function setVisual(key, value) {
	    data.setItemVisual(dataIndex, key, value);
	  }

	  if (dimension == null) {
	    data.each(eachItem);
	  } else {
	    data.each([dimension], eachItem);
	  }

	  function eachItem(valueOrIndex, index) {
	    dataIndex = dimension == null ? valueOrIndex : index;
	    var rawDataItem = data.getRawDataItem(dataIndex); // Consider performance

	    if (rawDataItem && rawDataItem.visualMap === false) {
	      return;
	    }

	    var valueState = getValueState.call(scope, valueOrIndex);
	    var mappings = visualMappings[valueState];
	    var visualTypes = visualTypesMap[valueState];

	    for (var i = 0, len = visualTypes.length; i < len; i++) {
	      var type = visualTypes[i];
	      mappings[type] && mappings[type].applyVisual(valueOrIndex, getVisual, setVisual);
	    }
	  }
	}
	/**
	 * @param {module:echarts/data/List} data
	 * @param {Array.<string>} stateList
	 * @param {Object} visualMappings <state, Object.<visualType, module:echarts/visual/VisualMapping>>
	 * @param {Function} getValueState param: valueOrIndex, return: state.
	 * @param {number} [dim] dimension or dimension index.
	 */


	function incrementalApplyVisual(stateList, visualMappings, getValueState, dim) {
	  var visualTypesMap = {};
	  zrUtil.each(stateList, function (state) {
	    var visualTypes = VisualMapping.prepareVisualTypes(visualMappings[state]);
	    visualTypesMap[state] = visualTypes;
	  });

	  function progress(params, data) {
	    if (dim != null) {
	      dim = data.getDimension(dim);
	    }

	    function getVisual(key) {
	      return data.getItemVisual(dataIndex, key);
	    }

	    function setVisual(key, value) {
	      data.setItemVisual(dataIndex, key, value);
	    }

	    var dataIndex;

	    while ((dataIndex = params.next()) != null) {
	      var rawDataItem = data.getRawDataItem(dataIndex); // Consider performance

	      if (rawDataItem && rawDataItem.visualMap === false) {
	        return;
	      }

	      var value = dim != null ? data.get(dim, dataIndex, true) : dataIndex;
	      var valueState = getValueState(value);
	      var mappings = visualMappings[valueState];
	      var visualTypes = visualTypesMap[valueState];

	      for (var i = 0, len = visualTypes.length; i < len; i++) {
	        var type = visualTypes[i];
	        mappings[type] && mappings[type].applyVisual(value, getVisual, setVisual);
	      }
	    }
	  }

	  return {
	    progress: progress
	  };
	}

	exports.createVisualMappings = createVisualMappings;
	exports.replaceVisualOption = replaceVisualOption;
	exports.applyVisual = applyVisual;
	exports.incrementalApplyVisual = incrementalApplyVisual;

/***/ }),
/* 377 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(181);

	var zrColor = __webpack_require__(195);

	var _number = __webpack_require__(263);

	var linearMap = _number.linearMap;

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var each = zrUtil.each;
	var isObject = zrUtil.isObject;
	var CATEGORY_DEFAULT_VISUAL_INDEX = -1;
	/**
	 * @param {Object} option
	 * @param {string} [option.type] See visualHandlers.
	 * @param {string} [option.mappingMethod] 'linear' or 'piecewise' or 'category' or 'fixed'
	 * @param {Array.<number>=} [option.dataExtent] [minExtent, maxExtent],
	 *                                              required when mappingMethod is 'linear'
	 * @param {Array.<Object>=} [option.pieceList] [
	 *                                             {value: someValue},
	 *                                             {interval: [min1, max1], visual: {...}},
	 *                                             {interval: [min2, max2]}
	 *                                             ],
	 *                                            required when mappingMethod is 'piecewise'.
	 *                                            Visual for only each piece can be specified.
	 * @param {Array.<string|Object>=} [option.categories] ['cate1', 'cate2']
	 *                                            required when mappingMethod is 'category'.
	 *                                            If no option.categories, categories is set
	 *                                            as [0, 1, 2, ...].
	 * @param {boolean} [option.loop=false] Whether loop mapping when mappingMethod is 'category'.
	 * @param {(Array|Object|*)} [option.visual]  Visual data.
	 *                                            when mappingMethod is 'category',
	 *                                            visual data can be array or object
	 *                                            (like: {cate1: '#222', none: '#fff'})
	 *                                            or primary types (which represents
	 *                                            defualt category visual), otherwise visual
	 *                                            can be array or primary (which will be
	 *                                            normalized to array).
	 *
	 */

	var VisualMapping = function (option) {
	  var mappingMethod = option.mappingMethod;
	  var visualType = option.type;
	  /**
	   * @readOnly
	   * @type {Object}
	   */

	  var thisOption = this.option = zrUtil.clone(option);
	  /**
	   * @readOnly
	   * @type {string}
	   */

	  this.type = visualType;
	  /**
	   * @readOnly
	   * @type {string}
	   */

	  this.mappingMethod = mappingMethod;
	  /**
	   * @private
	   * @type {Function}
	   */

	  this._normalizeData = normalizers[mappingMethod];
	  var visualHandler = visualHandlers[visualType];
	  /**
	   * @public
	   * @type {Function}
	   */

	  this.applyVisual = visualHandler.applyVisual;
	  /**
	   * @public
	   * @type {Function}
	   */

	  this.getColorMapper = visualHandler.getColorMapper;
	  /**
	   * @private
	   * @type {Function}
	   */

	  this._doMap = visualHandler._doMap[mappingMethod];

	  if (mappingMethod === 'piecewise') {
	    normalizeVisualRange(thisOption);
	    preprocessForPiecewise(thisOption);
	  } else if (mappingMethod === 'category') {
	    thisOption.categories ? preprocessForSpecifiedCategory(thisOption) // categories is ordinal when thisOption.categories not specified,
	    // which need no more preprocess except normalize visual.
	    : normalizeVisualRange(thisOption, true);
	  } else {
	    // mappingMethod === 'linear' or 'fixed'
	    zrUtil.assert(mappingMethod !== 'linear' || thisOption.dataExtent);
	    normalizeVisualRange(thisOption);
	  }
	};

	VisualMapping.prototype = {
	  constructor: VisualMapping,
	  mapValueToVisual: function (value) {
	    var normalized = this._normalizeData(value);

	    return this._doMap(normalized, value);
	  },
	  getNormalizer: function () {
	    return zrUtil.bind(this._normalizeData, this);
	  }
	};
	var visualHandlers = VisualMapping.visualHandlers = {
	  color: {
	    applyVisual: makeApplyVisual('color'),

	    /**
	     * Create a mapper function
	     * @return {Function}
	     */
	    getColorMapper: function () {
	      var thisOption = this.option;
	      return zrUtil.bind(thisOption.mappingMethod === 'category' ? function (value, isNormalized) {
	        !isNormalized && (value = this._normalizeData(value));
	        return doMapCategory.call(this, value);
	      } : function (value, isNormalized, out) {
	        // If output rgb array
	        // which will be much faster and useful in pixel manipulation
	        var returnRGBArray = !!out;
	        !isNormalized && (value = this._normalizeData(value));
	        out = zrColor.fastLerp(value, thisOption.parsedVisual, out);
	        return returnRGBArray ? out : zrColor.stringify(out, 'rgba');
	      }, this);
	    },
	    _doMap: {
	      linear: function (normalized) {
	        return zrColor.stringify(zrColor.fastLerp(normalized, this.option.parsedVisual), 'rgba');
	      },
	      category: doMapCategory,
	      piecewise: function (normalized, value) {
	        var result = getSpecifiedVisual.call(this, value);

	        if (result == null) {
	          result = zrColor.stringify(zrColor.fastLerp(normalized, this.option.parsedVisual), 'rgba');
	        }

	        return result;
	      },
	      fixed: doMapFixed
	    }
	  },
	  colorHue: makePartialColorVisualHandler(function (color, value) {
	    return zrColor.modifyHSL(color, value);
	  }),
	  colorSaturation: makePartialColorVisualHandler(function (color, value) {
	    return zrColor.modifyHSL(color, null, value);
	  }),
	  colorLightness: makePartialColorVisualHandler(function (color, value) {
	    return zrColor.modifyHSL(color, null, null, value);
	  }),
	  colorAlpha: makePartialColorVisualHandler(function (color, value) {
	    return zrColor.modifyAlpha(color, value);
	  }),
	  opacity: {
	    applyVisual: makeApplyVisual('opacity'),
	    _doMap: makeDoMap([0, 1])
	  },
	  liftZ: {
	    applyVisual: makeApplyVisual('liftZ'),
	    _doMap: {
	      linear: doMapFixed,
	      category: doMapFixed,
	      piecewise: doMapFixed,
	      fixed: doMapFixed
	    }
	  },
	  symbol: {
	    applyVisual: function (value, getter, setter) {
	      var symbolCfg = this.mapValueToVisual(value);

	      if (zrUtil.isString(symbolCfg)) {
	        setter('symbol', symbolCfg);
	      } else if (isObject(symbolCfg)) {
	        for (var name in symbolCfg) {
	          if (symbolCfg.hasOwnProperty(name)) {
	            setter(name, symbolCfg[name]);
	          }
	        }
	      }
	    },
	    _doMap: {
	      linear: doMapToArray,
	      category: doMapCategory,
	      piecewise: function (normalized, value) {
	        var result = getSpecifiedVisual.call(this, value);

	        if (result == null) {
	          result = doMapToArray.call(this, normalized);
	        }

	        return result;
	      },
	      fixed: doMapFixed
	    }
	  },
	  symbolSize: {
	    applyVisual: makeApplyVisual('symbolSize'),
	    _doMap: makeDoMap([0, 1])
	  }
	};

	function preprocessForPiecewise(thisOption) {
	  var pieceList = thisOption.pieceList;
	  thisOption.hasSpecialVisual = false;
	  zrUtil.each(pieceList, function (piece, index) {
	    piece.originIndex = index; // piece.visual is "result visual value" but not
	    // a visual range, so it does not need to be normalized.

	    if (piece.visual != null) {
	      thisOption.hasSpecialVisual = true;
	    }
	  });
	}

	function preprocessForSpecifiedCategory(thisOption) {
	  // Hash categories.
	  var categories = thisOption.categories;
	  var visual = thisOption.visual;
	  var categoryMap = thisOption.categoryMap = {};
	  each(categories, function (cate, index) {
	    categoryMap[cate] = index;
	  }); // Process visual map input.

	  if (!zrUtil.isArray(visual)) {
	    var visualArr = [];

	    if (zrUtil.isObject(visual)) {
	      each(visual, function (v, cate) {
	        var index = categoryMap[cate];
	        visualArr[index != null ? index : CATEGORY_DEFAULT_VISUAL_INDEX] = v;
	      });
	    } else {
	      // Is primary type, represents default visual.
	      visualArr[CATEGORY_DEFAULT_VISUAL_INDEX] = visual;
	    }

	    visual = setVisualToOption(thisOption, visualArr);
	  } // Remove categories that has no visual,
	  // then we can mapping them to CATEGORY_DEFAULT_VISUAL_INDEX.


	  for (var i = categories.length - 1; i >= 0; i--) {
	    if (visual[i] == null) {
	      delete categoryMap[categories[i]];
	      categories.pop();
	    }
	  }
	}

	function normalizeVisualRange(thisOption, isCategory) {
	  var visual = thisOption.visual;
	  var visualArr = [];

	  if (zrUtil.isObject(visual)) {
	    each(visual, function (v) {
	      visualArr.push(v);
	    });
	  } else if (visual != null) {
	    visualArr.push(visual);
	  }

	  var doNotNeedPair = {
	    color: 1,
	    symbol: 1
	  };

	  if (!isCategory && visualArr.length === 1 && !doNotNeedPair.hasOwnProperty(thisOption.type)) {
	    // Do not care visualArr.length === 0, which is illegal.
	    visualArr[1] = visualArr[0];
	  }

	  setVisualToOption(thisOption, visualArr);
	}

	function makePartialColorVisualHandler(applyValue) {
	  return {
	    applyVisual: function (value, getter, setter) {
	      value = this.mapValueToVisual(value); // Must not be array value

	      setter('color', applyValue(getter('color'), value));
	    },
	    _doMap: makeDoMap([0, 1])
	  };
	}

	function doMapToArray(normalized) {
	  var visual = this.option.visual;
	  return visual[Math.round(linearMap(normalized, [0, 1], [0, visual.length - 1], true))] || {};
	}

	function makeApplyVisual(visualType) {
	  return function (value, getter, setter) {
	    setter(visualType, this.mapValueToVisual(value));
	  };
	}

	function doMapCategory(normalized) {
	  var visual = this.option.visual;
	  return visual[this.option.loop && normalized !== CATEGORY_DEFAULT_VISUAL_INDEX ? normalized % visual.length : normalized];
	}

	function doMapFixed() {
	  return this.option.visual[0];
	}

	function makeDoMap(sourceExtent) {
	  return {
	    linear: function (normalized) {
	      return linearMap(normalized, sourceExtent, this.option.visual, true);
	    },
	    category: doMapCategory,
	    piecewise: function (normalized, value) {
	      var result = getSpecifiedVisual.call(this, value);

	      if (result == null) {
	        result = linearMap(normalized, sourceExtent, this.option.visual, true);
	      }

	      return result;
	    },
	    fixed: doMapFixed
	  };
	}

	function getSpecifiedVisual(value) {
	  var thisOption = this.option;
	  var pieceList = thisOption.pieceList;

	  if (thisOption.hasSpecialVisual) {
	    var pieceIndex = VisualMapping.findPieceIndex(value, pieceList);
	    var piece = pieceList[pieceIndex];

	    if (piece && piece.visual) {
	      return piece.visual[this.type];
	    }
	  }
	}

	function setVisualToOption(thisOption, visualArr) {
	  thisOption.visual = visualArr;

	  if (thisOption.type === 'color') {
	    thisOption.parsedVisual = zrUtil.map(visualArr, function (item) {
	      return zrColor.parse(item);
	    });
	  }

	  return visualArr;
	}
	/**
	 * Normalizers by mapping methods.
	 */


	var normalizers = {
	  linear: function (value) {
	    return linearMap(value, this.option.dataExtent, [0, 1], true);
	  },
	  piecewise: function (value) {
	    var pieceList = this.option.pieceList;
	    var pieceIndex = VisualMapping.findPieceIndex(value, pieceList, true);

	    if (pieceIndex != null) {
	      return linearMap(pieceIndex, [0, pieceList.length - 1], [0, 1], true);
	    }
	  },
	  category: function (value) {
	    var index = this.option.categories ? this.option.categoryMap[value] : value; // ordinal

	    return index == null ? CATEGORY_DEFAULT_VISUAL_INDEX : index;
	  },
	  fixed: zrUtil.noop
	};
	/**
	 * List available visual types.
	 *
	 * @public
	 * @return {Array.<string>}
	 */

	VisualMapping.listVisualTypes = function () {
	  var visualTypes = [];
	  zrUtil.each(visualHandlers, function (handler, key) {
	    visualTypes.push(key);
	  });
	  return visualTypes;
	};
	/**
	 * @public
	 */


	VisualMapping.addVisualHandler = function (name, handler) {
	  visualHandlers[name] = handler;
	};
	/**
	 * @public
	 */


	VisualMapping.isValidType = function (visualType) {
	  return visualHandlers.hasOwnProperty(visualType);
	};
	/**
	 * Convinent method.
	 * Visual can be Object or Array or primary type.
	 *
	 * @public
	 */


	VisualMapping.eachVisual = function (visual, callback, context) {
	  if (zrUtil.isObject(visual)) {
	    zrUtil.each(visual, callback, context);
	  } else {
	    callback.call(context, visual);
	  }
	};

	VisualMapping.mapVisual = function (visual, callback, context) {
	  var isPrimary;
	  var newVisual = zrUtil.isArray(visual) ? [] : zrUtil.isObject(visual) ? {} : (isPrimary = true, null);
	  VisualMapping.eachVisual(visual, function (v, key) {
	    var newVal = callback.call(context, v, key);
	    isPrimary ? newVisual = newVal : newVisual[key] = newVal;
	  });
	  return newVisual;
	};
	/**
	 * @public
	 * @param {Object} obj
	 * @return {Object} new object containers visual values.
	 *                 If no visuals, return null.
	 */


	VisualMapping.retrieveVisuals = function (obj) {
	  var ret = {};
	  var hasVisual;
	  obj && each(visualHandlers, function (h, visualType) {
	    if (obj.hasOwnProperty(visualType)) {
	      ret[visualType] = obj[visualType];
	      hasVisual = true;
	    }
	  });
	  return hasVisual ? ret : null;
	};
	/**
	 * Give order to visual types, considering colorSaturation, colorAlpha depends on color.
	 *
	 * @public
	 * @param {(Object|Array)} visualTypes If Object, like: {color: ..., colorSaturation: ...}
	 *                                     IF Array, like: ['color', 'symbol', 'colorSaturation']
	 * @return {Array.<string>} Sorted visual types.
	 */


	VisualMapping.prepareVisualTypes = function (visualTypes) {
	  if (isObject(visualTypes)) {
	    var types = [];
	    each(visualTypes, function (item, type) {
	      types.push(type);
	    });
	    visualTypes = types;
	  } else if (zrUtil.isArray(visualTypes)) {
	    visualTypes = visualTypes.slice();
	  } else {
	    return [];
	  }

	  visualTypes.sort(function (type1, type2) {
	    // color should be front of colorSaturation, colorAlpha, ...
	    // symbol and symbolSize do not matter.
	    return type2 === 'color' && type1 !== 'color' && type1.indexOf('color') === 0 ? 1 : -1;
	  });
	  return visualTypes;
	};
	/**
	 * 'color', 'colorSaturation', 'colorAlpha', ... are depends on 'color'.
	 * Other visuals are only depends on themself.
	 *
	 * @public
	 * @param {string} visualType1
	 * @param {string} visualType2
	 * @return {boolean}
	 */


	VisualMapping.dependsOn = function (visualType1, visualType2) {
	  return visualType2 === 'color' ? !!(visualType1 && visualType1.indexOf(visualType2) === 0) : visualType1 === visualType2;
	};
	/**
	 * @param {number} value
	 * @param {Array.<Object>} pieceList [{value: ..., interval: [min, max]}, ...]
	 *                         Always from small to big.
	 * @param {boolean} [findClosestWhenOutside=false]
	 * @return {number} index
	 */


	VisualMapping.findPieceIndex = function (value, pieceList, findClosestWhenOutside) {
	  var possibleI;
	  var abs = Infinity; // value has the higher priority.

	  for (var i = 0, len = pieceList.length; i < len; i++) {
	    var pieceValue = pieceList[i].value;

	    if (pieceValue != null) {
	      if (pieceValue === value // FIXME
	      // It is supposed to compare value according to value type of dimension,
	      // but currently value type can exactly be string or number.
	      // Compromise for numeric-like string (like '12'), especially
	      // in the case that visualMap.categories is ['22', '33'].
	      || typeof pieceValue === 'string' && pieceValue === value + '') {
	        return i;
	      }

	      findClosestWhenOutside && updatePossible(pieceValue, i);
	    }
	  }

	  for (var i = 0, len = pieceList.length; i < len; i++) {
	    var piece = pieceList[i];
	    var interval = piece.interval;
	    var close = piece.close;

	    if (interval) {
	      if (interval[0] === -Infinity) {
	        if (littleThan(close[1], value, interval[1])) {
	          return i;
	        }
	      } else if (interval[1] === Infinity) {
	        if (littleThan(close[0], interval[0], value)) {
	          return i;
	        }
	      } else if (littleThan(close[0], interval[0], value) && littleThan(close[1], value, interval[1])) {
	        return i;
	      }

	      findClosestWhenOutside && updatePossible(interval[0], i);
	      findClosestWhenOutside && updatePossible(interval[1], i);
	    }
	  }

	  if (findClosestWhenOutside) {
	    return value === Infinity ? pieceList.length - 1 : value === -Infinity ? 0 : possibleI;
	  }

	  function updatePossible(val, index) {
	    var newAbs = Math.abs(val - value);

	    if (newAbs < abs) {
	      abs = newAbs;
	      possibleI = index;
	    }
	  }
	};

	function littleThan(close, a, b) {
	  return close ? a <= b : a < b;
	}

	var _default = VisualMapping;
	module.exports = _default;

/***/ }),
/* 378 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(181);

	var VisualMapModel = __webpack_require__(379);

	var numberUtil = __webpack_require__(263);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	// Constant
	var DEFAULT_BAR_BOUND = [20, 140];
	var ContinuousModel = VisualMapModel.extend({
	  type: 'visualMap.continuous',

	  /**
	   * @protected
	   */
	  defaultOption: {
	    align: 'auto',
	    // 'auto', 'left', 'right', 'top', 'bottom'
	    calculable: false,
	    // This prop effect default component type determine,
	    // See echarts/component/visualMap/typeDefaulter.
	    range: null,
	    // selected range. In default case `range` is [min, max]
	    // and can auto change along with modification of min max,
	    // util use specifid a range.
	    realtime: true,
	    // Whether realtime update.
	    itemHeight: null,
	    // The length of the range control edge.
	    itemWidth: null,
	    // The length of the other side.
	    hoverLink: true,
	    // Enable hover highlight.
	    hoverLinkDataSize: null,
	    // The size of hovered data.
	    hoverLinkOnHandle: null // Whether trigger hoverLink when hover handle.
	    // If not specified, follow the value of `realtime`.

	  },

	  /**
	   * @override
	   */
	  optionUpdated: function (newOption, isInit) {
	    ContinuousModel.superApply(this, 'optionUpdated', arguments);
	    this.resetExtent();
	    this.resetVisual(function (mappingOption) {
	      mappingOption.mappingMethod = 'linear';
	      mappingOption.dataExtent = this.getExtent();
	    });

	    this._resetRange();
	  },

	  /**
	   * @protected
	   * @override
	   */
	  resetItemSize: function () {
	    ContinuousModel.superApply(this, 'resetItemSize', arguments);
	    var itemSize = this.itemSize;
	    this._orient === 'horizontal' && itemSize.reverse();
	    (itemSize[0] == null || isNaN(itemSize[0])) && (itemSize[0] = DEFAULT_BAR_BOUND[0]);
	    (itemSize[1] == null || isNaN(itemSize[1])) && (itemSize[1] = DEFAULT_BAR_BOUND[1]);
	  },

	  /**
	   * @private
	   */
	  _resetRange: function () {
	    var dataExtent = this.getExtent();
	    var range = this.option.range;

	    if (!range || range.auto) {
	      // `range` should always be array (so we dont use other
	      // value like 'auto') for user-friend. (consider getOption).
	      dataExtent.auto = 1;
	      this.option.range = dataExtent;
	    } else if (zrUtil.isArray(range)) {
	      if (range[0] > range[1]) {
	        range.reverse();
	      }

	      range[0] = Math.max(range[0], dataExtent[0]);
	      range[1] = Math.min(range[1], dataExtent[1]);
	    }
	  },

	  /**
	   * @protected
	   * @override
	   */
	  completeVisualOption: function () {
	    VisualMapModel.prototype.completeVisualOption.apply(this, arguments);
	    zrUtil.each(this.stateList, function (state) {
	      var symbolSize = this.option.controller[state].symbolSize;

	      if (symbolSize && symbolSize[0] !== symbolSize[1]) {
	        symbolSize[0] = 0; // For good looking.
	      }
	    }, this);
	  },

	  /**
	   * @override
	   */
	  setSelected: function (selected) {
	    this.option.range = selected.slice();

	    this._resetRange();
	  },

	  /**
	   * @public
	   */
	  getSelected: function () {
	    var dataExtent = this.getExtent();
	    var dataInterval = numberUtil.asc((this.get('range') || []).slice()); // Clamp

	    dataInterval[0] > dataExtent[1] && (dataInterval[0] = dataExtent[1]);
	    dataInterval[1] > dataExtent[1] && (dataInterval[1] = dataExtent[1]);
	    dataInterval[0] < dataExtent[0] && (dataInterval[0] = dataExtent[0]);
	    dataInterval[1] < dataExtent[0] && (dataInterval[1] = dataExtent[0]);
	    return dataInterval;
	  },

	  /**
	   * @override
	   */
	  getValueState: function (value) {
	    var range = this.option.range;
	    var dataExtent = this.getExtent(); // When range[0] === dataExtent[0], any value larger than dataExtent[0] maps to 'inRange'.
	    // range[1] is processed likewise.

	    return (range[0] <= dataExtent[0] || range[0] <= value) && (range[1] >= dataExtent[1] || value <= range[1]) ? 'inRange' : 'outOfRange';
	  },

	  /**
	   * @params {Array.<number>} range target value: range[0] <= value && value <= range[1]
	   * @return {Array.<Object>} [{seriesId, dataIndices: <Array.<number>>}, ...]
	   */
	  findTargetDataIndices: function (range) {
	    var result = [];
	    this.eachTargetSeries(function (seriesModel) {
	      var dataIndices = [];
	      var data = seriesModel.getData();
	      data.each(this.getDataDimension(data), function (value, dataIndex) {
	        range[0] <= value && value <= range[1] && dataIndices.push(dataIndex);
	      }, this);
	      result.push({
	        seriesId: seriesModel.id,
	        dataIndex: dataIndices
	      });
	    }, this);
	    return result;
	  },

	  /**
	   * @implement
	   */
	  getVisualMeta: function (getColorVisual) {
	    var oVals = getColorStopValues(this, 'outOfRange', this.getExtent());
	    var iVals = getColorStopValues(this, 'inRange', this.option.range.slice());
	    var stops = [];

	    function setStop(value, valueState) {
	      stops.push({
	        value: value,
	        color: getColorVisual(value, valueState)
	      });
	    } // Format to: outOfRange -- inRange -- outOfRange.


	    var iIdx = 0;
	    var oIdx = 0;
	    var iLen = iVals.length;
	    var oLen = oVals.length;

	    for (; oIdx < oLen && (!iVals.length || oVals[oIdx] <= iVals[0]); oIdx++) {
	      // If oVal[oIdx] === iVals[iIdx], oVal[oIdx] should be ignored.
	      if (oVals[oIdx] < iVals[iIdx]) {
	        setStop(oVals[oIdx], 'outOfRange');
	      }
	    }

	    for (var first = 1; iIdx < iLen; iIdx++, first = 0) {
	      // If range is full, value beyond min, max will be clamped.
	      // make a singularity
	      first && stops.length && setStop(iVals[iIdx], 'outOfRange');
	      setStop(iVals[iIdx], 'inRange');
	    }

	    for (var first = 1; oIdx < oLen; oIdx++) {
	      if (!iVals.length || iVals[iVals.length - 1] < oVals[oIdx]) {
	        // make a singularity
	        if (first) {
	          stops.length && setStop(stops[stops.length - 1].value, 'outOfRange');
	          first = 0;
	        }

	        setStop(oVals[oIdx], 'outOfRange');
	      }
	    }

	    var stopsLen = stops.length;
	    return {
	      stops: stops,
	      outerColors: [stopsLen ? stops[0].color : 'transparent', stopsLen ? stops[stopsLen - 1].color : 'transparent']
	    };
	  }
	});

	function getColorStopValues(visualMapModel, valueState, dataExtent) {
	  if (dataExtent[0] === dataExtent[1]) {
	    return dataExtent.slice();
	  } // When using colorHue mapping, it is not linear color any more.
	  // Moreover, canvas gradient seems not to be accurate linear.
	  // FIXME
	  // Should be arbitrary value 100? or based on pixel size?


	  var count = 200;
	  var step = (dataExtent[1] - dataExtent[0]) / count;
	  var value = dataExtent[0];
	  var stopValues = [];

	  for (var i = 0; i <= count && value < dataExtent[1]; i++) {
	    stopValues.push(value);
	    value += step;
	  }

	  stopValues.push(dataExtent[1]);
	  return stopValues;
	}

	var _default = ContinuousModel;
	module.exports = _default;

/***/ }),
/* 379 */
/***/ (function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(176);

	var zrUtil = __webpack_require__(181);

	var env = __webpack_require__(180);

	var visualDefault = __webpack_require__(380);

	var VisualMapping = __webpack_require__(377);

	var visualSolution = __webpack_require__(376);

	var modelUtil = __webpack_require__(219);

	var numberUtil = __webpack_require__(263);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var mapVisual = VisualMapping.mapVisual;
	var eachVisual = VisualMapping.eachVisual;
	var isArray = zrUtil.isArray;
	var each = zrUtil.each;
	var asc = numberUtil.asc;
	var linearMap = numberUtil.linearMap;
	var noop = zrUtil.noop;
	var VisualMapModel = echarts.extendComponentModel({
	  type: 'visualMap',
	  dependencies: ['series'],

	  /**
	   * @readOnly
	   * @type {Array.<string>}
	   */
	  stateList: ['inRange', 'outOfRange'],

	  /**
	   * @readOnly
	   * @type {Array.<string>}
	   */
	  replacableOptionKeys: ['inRange', 'outOfRange', 'target', 'controller', 'color'],

	  /**
	   * [lowerBound, upperBound]
	   *
	   * @readOnly
	   * @type {Array.<number>}
	   */
	  dataBound: [-Infinity, Infinity],

	  /**
	   * @readOnly
	   * @type {string|Object}
	   */
	  layoutMode: {
	    type: 'box',
	    ignoreSize: true
	  },

	  /**
	   * @protected
	   */
	  defaultOption: {
	    show: true,
	    zlevel: 0,
	    z: 4,
	    seriesIndex: 'all',
	    // 'all' or null/undefined: all series.
	    // A number or an array of number: the specified series.
	    // set min: 0, max: 200, only for campatible with ec2.
	    // In fact min max should not have default value.
	    min: 0,
	    // min value, must specified if pieces is not specified.
	    max: 200,
	    // max value, must specified if pieces is not specified.
	    dimension: null,
	    inRange: null,
	    // 'color', 'colorHue', 'colorSaturation', 'colorLightness', 'colorAlpha',
	    // 'symbol', 'symbolSize'
	    outOfRange: null,
	    // 'color', 'colorHue', 'colorSaturation',
	    // 'colorLightness', 'colorAlpha',
	    // 'symbol', 'symbolSize'
	    left: 0,
	    // 'center' ¦ 'left' ¦ 'right' ¦ {number} (px)
	    right: null,
	    // The same as left.
	    top: null,
	    // 'top' ¦ 'bottom' ¦ 'center' ¦ {number} (px)
	    bottom: 0,
	    // The same as top.
	    itemWidth: null,
	    itemHeight: null,
	    inverse: false,
	    orient: 'vertical',
	    // 'horizontal' ¦ 'vertical'
	    backgroundColor: 'rgba(0,0,0,0)',
	    borderColor: '#ccc',
	    // 值域边框颜色
	    contentColor: '#5793f3',
	    inactiveColor: '#aaa',
	    borderWidth: 0,
	    // 值域边框线宽，单位px，默认为0（无边框）
	    padding: 5,
	    // 值域内边距，单位px，默认各方向内边距为5，
	    // 接受数组分别设定上右下左边距，同css
	    textGap: 10,
	    //
	    precision: 0,
	    // 小数精度，默认为0，无小数点
	    color: null,
	    //颜色（deprecated，兼容ec2，顺序同pieces，不同于inRange/outOfRange）
	    formatter: null,
	    text: null,
	    // 文本，如['高', '低']，兼容ec2，text[0]对应高值，text[1]对应低值
	    textStyle: {
	      color: '#333' // 值域文字颜色

	    }
	  },

	  /**
	   * @protected
	   */
	  init: function (option, parentModel, ecModel) {
	    /**
	     * @private
	     * @type {Array.<number>}
	     */
	    this._dataExtent;
	    /**
	     * @readOnly
	     */

	    this.targetVisuals = {};
	    /**
	     * @readOnly
	     */

	    this.controllerVisuals = {};
	    /**
	     * @readOnly
	     */

	    this.textStyleModel;
	    /**
	     * [width, height]
	     * @readOnly
	     * @type {Array.<number>}
	     */

	    this.itemSize;
	    this.mergeDefaultAndTheme(option, ecModel);
	  },

	  /**
	   * @protected
	   */
	  optionUpdated: function (newOption, isInit) {
	    var thisOption = this.option; // FIXME
	    // necessary?
	    // Disable realtime view update if canvas is not supported.

	    if (!env.canvasSupported) {
	      thisOption.realtime = false;
	    }

	    !isInit && visualSolution.replaceVisualOption(thisOption, newOption, this.replacableOptionKeys);
	    this.textStyleModel = this.getModel('textStyle');
	    this.resetItemSize();
	    this.completeVisualOption();
	  },

	  /**
	   * @protected
	   */
	  resetVisual: function (supplementVisualOption) {
	    var stateList = this.stateList;
	    supplementVisualOption = zrUtil.bind(supplementVisualOption, this);
	    this.controllerVisuals = visualSolution.createVisualMappings(this.option.controller, stateList, supplementVisualOption);
	    this.targetVisuals = visualSolution.createVisualMappings(this.option.target, stateList, supplementVisualOption);
	  },

	  /**
	   * @protected
	   * @return {Array.<number>} An array of series indices.
	   */
	  getTargetSeriesIndices: function () {
	    var optionSeriesIndex = this.option.seriesIndex;
	    var seriesIndices = [];

	    if (optionSeriesIndex == null || optionSeriesIndex === 'all') {
	      this.ecModel.eachSeries(function (seriesModel, index) {
	        seriesIndices.push(index);
	      });
	    } else {
	      seriesIndices = modelUtil.normalizeToArray(optionSeriesIndex);
	    }

	    return seriesIndices;
	  },

	  /**
	   * @public
	   */
	  eachTargetSeries: function (callback, context) {
	    zrUtil.each(this.getTargetSeriesIndices(), function (seriesIndex) {
	      callback.call(context, this.ecModel.getSeriesByIndex(seriesIndex));
	    }, this);
	  },

	  /**
	   * @pubilc
	   */
	  isTargetSeries: function (seriesModel) {
	    var is = false;
	    this.eachTargetSeries(function (model) {
	      model === seriesModel && (is = true);
	    });
	    return is;
	  },

	  /**
	   * @example
	   * this.formatValueText(someVal); // format single numeric value to text.
	   * this.formatValueText(someVal, true); // format single category value to text.
	   * this.formatValueText([min, max]); // format numeric min-max to text.
	   * this.formatValueText([this.dataBound[0], max]); // using data lower bound.
	   * this.formatValueText([min, this.dataBound[1]]); // using data upper bound.
	   *
	   * @param {number|Array.<number>} value Real value, or this.dataBound[0 or 1].
	   * @param {boolean} [isCategory=false] Only available when value is number.
	   * @param {Array.<string>} edgeSymbols Open-close symbol when value is interval.
	   * @return {string}
	   * @protected
	   */
	  formatValueText: function (value, isCategory, edgeSymbols) {
	    var option = this.option;
	    var precision = option.precision;
	    var dataBound = this.dataBound;
	    var formatter = option.formatter;
	    var isMinMax;
	    var textValue;
	    edgeSymbols = edgeSymbols || ['<', '>'];

	    if (zrUtil.isArray(value)) {
	      value = value.slice();
	      isMinMax = true;
	    }

	    textValue = isCategory ? value : isMinMax ? [toFixed(value[0]), toFixed(value[1])] : toFixed(value);

	    if (zrUtil.isString(formatter)) {
	      return formatter.replace('{value}', isMinMax ? textValue[0] : textValue).replace('{value2}', isMinMax ? textValue[1] : textValue);
	    } else if (zrUtil.isFunction(formatter)) {
	      return isMinMax ? formatter(value[0], value[1]) : formatter(value);
	    }

	    if (isMinMax) {
	      if (value[0] === dataBound[0]) {
	        return edgeSymbols[0] + ' ' + textValue[1];
	      } else if (value[1] === dataBound[1]) {
	        return edgeSymbols[1] + ' ' + textValue[0];
	      } else {
	        return textValue[0] + ' - ' + textValue[1];
	      }
	    } else {
	      // Format single value (includes category case).
	      return textValue;
	    }

	    function toFixed(val) {
	      return val === dataBound[0] ? 'min' : val === dataBound[1] ? 'max' : (+val).toFixed(Math.min(precision, 20));
	    }
	  },

	  /**
	   * @protected
	   */
	  resetExtent: function () {
	    var thisOption = this.option; // Can not calculate data extent by data here.
	    // Because series and data may be modified in processing stage.
	    // So we do not support the feature "auto min/max".

	    var extent = asc([thisOption.min, thisOption.max]);
	    this._dataExtent = extent;
	  },

	  /**
	   * @public
	   * @param {module:echarts/data/List} list
	   * @return {string} Concrete dimention. If return null/undefined,
	   *                  no dimension used.
	   */
	  getDataDimension: function (list) {
	    var optDim = this.option.dimension;
	    var listDimensions = list.dimensions;

	    if (optDim == null && !listDimensions.length) {
	      return;
	    }

	    if (optDim != null) {
	      return list.getDimension(optDim);
	    }

	    var dimNames = list.dimensions;

	    for (var i = dimNames.length - 1; i >= 0; i--) {
	      var dimName = dimNames[i];
	      var dimInfo = list.getDimensionInfo(dimName);

	      if (!dimInfo.isCalculationCoord) {
	        return dimName;
	      }
	    }
	  },

	  /**
	   * @public
	   * @override
	   */
	  getExtent: function () {
	    return this._dataExtent.slice();
	  },

	  /**
	   * @protected
	   */
	  completeVisualOption: function () {
	    var ecModel = this.ecModel;
	    var thisOption = this.option;
	    var base = {
	      inRange: thisOption.inRange,
	      outOfRange: thisOption.outOfRange
	    };
	    var target = thisOption.target || (thisOption.target = {});
	    var controller = thisOption.controller || (thisOption.controller = {});
	    zrUtil.merge(target, base); // Do not override

	    zrUtil.merge(controller, base); // Do not override

	    var isCategory = this.isCategory();
	    completeSingle.call(this, target);
	    completeSingle.call(this, controller);
	    completeInactive.call(this, target, 'inRange', 'outOfRange'); // completeInactive.call(this, target, 'outOfRange', 'inRange');

	    completeController.call(this, controller);

	    function completeSingle(base) {
	      // Compatible with ec2 dataRange.color.
	      // The mapping order of dataRange.color is: [high value, ..., low value]
	      // whereas inRange.color and outOfRange.color is [low value, ..., high value]
	      // Notice: ec2 has no inverse.
	      if (isArray(thisOption.color) // If there has been inRange: {symbol: ...}, adding color is a mistake.
	      // So adding color only when no inRange defined.
	      && !base.inRange) {
	        base.inRange = {
	          color: thisOption.color.slice().reverse()
	        };
	      } // Compatible with previous logic, always give a defautl color, otherwise
	      // simple config with no inRange and outOfRange will not work.
	      // Originally we use visualMap.color as the default color, but setOption at
	      // the second time the default color will be erased. So we change to use
	      // constant DEFAULT_COLOR.
	      // If user do not want the defualt color, set inRange: {color: null}.


	      base.inRange = base.inRange || {
	        color: ecModel.get('gradientColor')
	      }; // If using shortcut like: {inRange: 'symbol'}, complete default value.

	      each(this.stateList, function (state) {
	        var visualType = base[state];

	        if (zrUtil.isString(visualType)) {
	          var defa = visualDefault.get(visualType, 'active', isCategory);

	          if (defa) {
	            base[state] = {};
	            base[state][visualType] = defa;
	          } else {
	            // Mark as not specified.
	            delete base[state];
	          }
	        }
	      }, this);
	    }

	    function completeInactive(base, stateExist, stateAbsent) {
	      var optExist = base[stateExist];
	      var optAbsent = base[stateAbsent];

	      if (optExist && !optAbsent) {
	        optAbsent = base[stateAbsent] = {};
	        each(optExist, function (visualData, visualType) {
	          if (!VisualMapping.isValidType(visualType)) {
	            return;
	          }

	          var defa = visualDefault.get(visualType, 'inactive', isCategory);

	          if (defa != null) {
	            optAbsent[visualType] = defa; // Compatibable with ec2:
	            // Only inactive color to rgba(0,0,0,0) can not
	            // make label transparent, so use opacity also.

	            if (visualType === 'color' && !optAbsent.hasOwnProperty('opacity') && !optAbsent.hasOwnProperty('colorAlpha')) {
	              optAbsent.opacity = [0, 0];
	            }
	          }
	        });
	      }
	    }

	    function completeController(controller) {
	      var symbolExists = (controller.inRange || {}).symbol || (controller.outOfRange || {}).symbol;
	      var symbolSizeExists = (controller.inRange || {}).symbolSize || (controller.outOfRange || {}).symbolSize;
	      var inactiveColor = this.get('inactiveColor');
	      each(this.stateList, function (state) {
	        var itemSize = this.itemSize;
	        var visuals = controller[state]; // Set inactive color for controller if no other color
	        // attr (like colorAlpha) specified.

	        if (!visuals) {
	          visuals = controller[state] = {
	            color: isCategory ? inactiveColor : [inactiveColor]
	          };
	        } // Consistent symbol and symbolSize if not specified.


	        if (visuals.symbol == null) {
	          visuals.symbol = symbolExists && zrUtil.clone(symbolExists) || (isCategory ? 'roundRect' : ['roundRect']);
	        }

	        if (visuals.symbolSize == null) {
	          visuals.symbolSize = symbolSizeExists && zrUtil.clone(symbolSizeExists) || (isCategory ? itemSize[0] : [itemSize[0], itemSize[0]]);
	        } // Filter square and none.


	        visuals.symbol = mapVisual(visuals.symbol, function (symbol) {
	          return symbol === 'none' || symbol === 'square' ? 'roundRect' : symbol;
	        }); // Normalize symbolSize

	        var symbolSize = visuals.symbolSize;

	        if (symbolSize != null) {
	          var max = -Infinity; // symbolSize can be object when categories defined.

	          eachVisual(symbolSize, function (value) {
	            value > max && (max = value);
	          });
	          visuals.symbolSize = mapVisual(symbolSize, function (value) {
	            return linearMap(value, [0, max], [0, itemSize[0]], true);
	          });
	        }
	      }, this);
	    }
	  },

	  /**
	   * @protected
	   */
	  resetItemSize: function () {
	    this.itemSize = [parseFloat(this.get('itemWidth')), parseFloat(this.get('itemHeight'))];
	  },

	  /**
	   * @public
	   */
	  isCategory: function () {
	    return !!this.option.categories;
	  },

	  /**
	   * @public
	   * @abstract
	   */
	  setSelected: noop,

	  /**
	   * @public
	   * @abstract
	   * @param {*|module:echarts/data/List} valueOrData
	   * @param {number} dataIndex
	   * @return {string} state See this.stateList
	   */
	  getValueState: noop,

	  /**
	   * FIXME
	   * Do not publish to thirt-part-dev temporarily
	   * util the interface is stable. (Should it return
	   * a function but not visual meta?)
	   *
	   * @pubilc
	   * @abstract
	   * @param {Function} getColorVisual
	   *        params: value, valueState
	   *        return: color
	   * @return {Object} visualMeta
	   *        should includes {stops, outerColors}
	   *        outerColor means [colorBeyondMinValue, colorBeyondMaxValue]
	   */
	  getVisualMeta: noop
	});
	var _default = VisualMapModel;
	module.exports = _default;

/***/ }),
/* 380 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(181);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/

	/**
	 * @file Visual mapping.
	 */
	var visualDefault = {
	  /**
	   * @public
	   */
	  get: function (visualType, key, isCategory) {
	    var value = zrUtil.clone((defaultOption[visualType] || {})[key]);
	    return isCategory ? zrUtil.isArray(value) ? value[value.length - 1] : value : value;
	  }
	};
	var defaultOption = {
	  color: {
	    active: ['#006edd', '#e0ffff'],
	    inactive: ['rgba(0000)']
	  },
	  colorHue: {
	    active: [0, 360],
	    inactive: [0, 0]
	  },
	  colorSaturation: {
	    active: [0.3, 1],
	    inactive: [0, 0]
	  },
	  colorLightness: {
	    active: [0.9, 0.5],
	    inactive: [0, 0]
	  },
	  colorAlpha: {
	    active: [0.3, 1],
	    inactive: [0, 0]
	  },
	  opacity: {
	    active: [0.3, 1],
	    inactive: [0, 0]
	  },
	  symbol: {
	    active: ['circle', 'roundRect', 'diamond'],
	    inactive: ['none']
	  },
	  symbolSize: {
	    active: [10, 50],
	    inactive: [0, 0]
	  }
	};
	var _default = visualDefault;
	module.exports = _default;

/***/ }),
/* 381 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(181);

	var LinearGradient = __webpack_require__(255);

	var eventTool = __webpack_require__(215);

	var VisualMapView = __webpack_require__(382);

	var graphic = __webpack_require__(226);

	var numberUtil = __webpack_require__(263);

	var sliderMove = __webpack_require__(383);

	var helper = __webpack_require__(384);

	var modelUtil = __webpack_require__(219);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var linearMap = numberUtil.linearMap;
	var each = zrUtil.each;
	var mathMin = Math.min;
	var mathMax = Math.max; // Arbitrary value

	var HOVER_LINK_SIZE = 12;
	var HOVER_LINK_OUT = 6; // Notice:
	// Any "interval" should be by the order of [low, high].
	// "handle0" (handleIndex === 0) maps to
	// low data value: this._dataInterval[0] and has low coord.
	// "handle1" (handleIndex === 1) maps to
	// high data value: this._dataInterval[1] and has high coord.
	// The logic of transform is implemented in this._createBarGroup.

	var ContinuousView = VisualMapView.extend({
	  type: 'visualMap.continuous',

	  /**
	   * @override
	   */
	  init: function () {
	    ContinuousView.superApply(this, 'init', arguments);
	    /**
	     * @private
	     */

	    this._shapes = {};
	    /**
	     * @private
	     */

	    this._dataInterval = [];
	    /**
	     * @private
	     */

	    this._handleEnds = [];
	    /**
	     * @private
	     */

	    this._orient;
	    /**
	     * @private
	     */

	    this._useHandle;
	    /**
	     * @private
	     */

	    this._hoverLinkDataIndices = [];
	    /**
	     * @private
	     */

	    this._dragging;
	    /**
	     * @private
	     */

	    this._hovering;
	  },

	  /**
	   * @protected
	   * @override
	   */
	  doRender: function (visualMapModel, ecModel, api, payload) {
	    if (!payload || payload.type !== 'selectDataRange' || payload.from !== this.uid) {
	      this._buildView();
	    }
	  },

	  /**
	   * @private
	   */
	  _buildView: function () {
	    this.group.removeAll();
	    var visualMapModel = this.visualMapModel;
	    var thisGroup = this.group;
	    this._orient = visualMapModel.get('orient');
	    this._useHandle = visualMapModel.get('calculable');

	    this._resetInterval();

	    this._renderBar(thisGroup);

	    var dataRangeText = visualMapModel.get('text');

	    this._renderEndsText(thisGroup, dataRangeText, 0);

	    this._renderEndsText(thisGroup, dataRangeText, 1); // Do this for background size calculation.


	    this._updateView(true); // After updating view, inner shapes is built completely,
	    // and then background can be rendered.


	    this.renderBackground(thisGroup); // Real update view

	    this._updateView();

	    this._enableHoverLinkToSeries();

	    this._enableHoverLinkFromSeries();

	    this.positionGroup(thisGroup);
	  },

	  /**
	   * @private
	   */
	  _renderEndsText: function (group, dataRangeText, endsIndex) {
	    if (!dataRangeText) {
	      return;
	    } // Compatible with ec2, text[0] map to high value, text[1] map low value.


	    var text = dataRangeText[1 - endsIndex];
	    text = text != null ? text + '' : '';
	    var visualMapModel = this.visualMapModel;
	    var textGap = visualMapModel.get('textGap');
	    var itemSize = visualMapModel.itemSize;
	    var barGroup = this._shapes.barGroup;

	    var position = this._applyTransform([itemSize[0] / 2, endsIndex === 0 ? -textGap : itemSize[1] + textGap], barGroup);

	    var align = this._applyTransform(endsIndex === 0 ? 'bottom' : 'top', barGroup);

	    var orient = this._orient;
	    var textStyleModel = this.visualMapModel.textStyleModel;
	    this.group.add(new graphic.Text({
	      style: {
	        x: position[0],
	        y: position[1],
	        textVerticalAlign: orient === 'horizontal' ? 'middle' : align,
	        textAlign: orient === 'horizontal' ? align : 'center',
	        text: text,
	        textFont: textStyleModel.getFont(),
	        textFill: textStyleModel.getTextColor()
	      }
	    }));
	  },

	  /**
	   * @private
	   */
	  _renderBar: function (targetGroup) {
	    var visualMapModel = this.visualMapModel;
	    var shapes = this._shapes;
	    var itemSize = visualMapModel.itemSize;
	    var orient = this._orient;
	    var useHandle = this._useHandle;
	    var itemAlign = helper.getItemAlign(visualMapModel, this.api, itemSize);

	    var barGroup = shapes.barGroup = this._createBarGroup(itemAlign); // Bar


	    barGroup.add(shapes.outOfRange = createPolygon());
	    barGroup.add(shapes.inRange = createPolygon(null, useHandle ? getCursor(this._orient) : null, zrUtil.bind(this._dragHandle, this, 'all', false), zrUtil.bind(this._dragHandle, this, 'all', true)));
	    var textRect = visualMapModel.textStyleModel.getTextRect('国');
	    var textSize = mathMax(textRect.width, textRect.height); // Handle

	    if (useHandle) {
	      shapes.handleThumbs = [];
	      shapes.handleLabels = [];
	      shapes.handleLabelPoints = [];

	      this._createHandle(barGroup, 0, itemSize, textSize, orient, itemAlign);

	      this._createHandle(barGroup, 1, itemSize, textSize, orient, itemAlign);
	    }

	    this._createIndicator(barGroup, itemSize, textSize, orient);

	    targetGroup.add(barGroup);
	  },

	  /**
	   * @private
	   */
	  _createHandle: function (barGroup, handleIndex, itemSize, textSize, orient) {
	    var onDrift = zrUtil.bind(this._dragHandle, this, handleIndex, false);
	    var onDragEnd = zrUtil.bind(this._dragHandle, this, handleIndex, true);
	    var handleThumb = createPolygon(createHandlePoints(handleIndex, textSize), getCursor(this._orient), onDrift, onDragEnd);
	    handleThumb.position[0] = itemSize[0];
	    barGroup.add(handleThumb); // Text is always horizontal layout but should not be effected by
	    // transform (orient/inverse). So label is built separately but not
	    // use zrender/graphic/helper/RectText, and is located based on view
	    // group (according to handleLabelPoint) but not barGroup.

	    var textStyleModel = this.visualMapModel.textStyleModel;
	    var handleLabel = new graphic.Text({
	      draggable: true,
	      drift: onDrift,
	      onmousemove: function (e) {
	        // Fot mobile devicem, prevent screen slider on the button.
	        eventTool.stop(e.event);
	      },
	      ondragend: onDragEnd,
	      style: {
	        x: 0,
	        y: 0,
	        text: '',
	        textFont: textStyleModel.getFont(),
	        textFill: textStyleModel.getTextColor()
	      }
	    });
	    this.group.add(handleLabel);
	    var handleLabelPoint = [orient === 'horizontal' ? textSize / 2 : textSize * 1.5, orient === 'horizontal' ? handleIndex === 0 ? -(textSize * 1.5) : textSize * 1.5 : handleIndex === 0 ? -textSize / 2 : textSize / 2];
	    var shapes = this._shapes;
	    shapes.handleThumbs[handleIndex] = handleThumb;
	    shapes.handleLabelPoints[handleIndex] = handleLabelPoint;
	    shapes.handleLabels[handleIndex] = handleLabel;
	  },

	  /**
	   * @private
	   */
	  _createIndicator: function (barGroup, itemSize, textSize, orient) {
	    var indicator = createPolygon([[0, 0]], 'move');
	    indicator.position[0] = itemSize[0];
	    indicator.attr({
	      invisible: true,
	      silent: true
	    });
	    barGroup.add(indicator);
	    var textStyleModel = this.visualMapModel.textStyleModel;
	    var indicatorLabel = new graphic.Text({
	      silent: true,
	      invisible: true,
	      style: {
	        x: 0,
	        y: 0,
	        text: '',
	        textFont: textStyleModel.getFont(),
	        textFill: textStyleModel.getTextColor()
	      }
	    });
	    this.group.add(indicatorLabel);
	    var indicatorLabelPoint = [orient === 'horizontal' ? textSize / 2 : HOVER_LINK_OUT + 3, 0];
	    var shapes = this._shapes;
	    shapes.indicator = indicator;
	    shapes.indicatorLabel = indicatorLabel;
	    shapes.indicatorLabelPoint = indicatorLabelPoint;
	  },

	  /**
	   * @private
	   */
	  _dragHandle: function (handleIndex, isEnd, dx, dy) {
	    if (!this._useHandle) {
	      return;
	    }

	    this._dragging = !isEnd;

	    if (!isEnd) {
	      // Transform dx, dy to bar coordination.
	      var vertex = this._applyTransform([dx, dy], this._shapes.barGroup, true);

	      this._updateInterval(handleIndex, vertex[1]); // Considering realtime, update view should be executed
	      // before dispatch action.


	      this._updateView();
	    } // dragEnd do not dispatch action when realtime.


	    if (isEnd === !this.visualMapModel.get('realtime')) {
	      // jshint ignore:line
	      this.api.dispatchAction({
	        type: 'selectDataRange',
	        from: this.uid,
	        visualMapId: this.visualMapModel.id,
	        selected: this._dataInterval.slice()
	      });
	    }

	    if (isEnd) {
	      !this._hovering && this._clearHoverLinkToSeries();
	    } else if (useHoverLinkOnHandle(this.visualMapModel)) {
	      this._doHoverLinkToSeries(this._handleEnds[handleIndex], false);
	    }
	  },

	  /**
	   * @private
	   */
	  _resetInterval: function () {
	    var visualMapModel = this.visualMapModel;
	    var dataInterval = this._dataInterval = visualMapModel.getSelected();
	    var dataExtent = visualMapModel.getExtent();
	    var sizeExtent = [0, visualMapModel.itemSize[1]];
	    this._handleEnds = [linearMap(dataInterval[0], dataExtent, sizeExtent, true), linearMap(dataInterval[1], dataExtent, sizeExtent, true)];
	  },

	  /**
	   * @private
	   * @param {(number|string)} handleIndex 0 or 1 or 'all'
	   * @param {number} dx
	   * @param {number} dy
	   */
	  _updateInterval: function (handleIndex, delta) {
	    delta = delta || 0;
	    var visualMapModel = this.visualMapModel;
	    var handleEnds = this._handleEnds;
	    var sizeExtent = [0, visualMapModel.itemSize[1]];
	    sliderMove(delta, handleEnds, sizeExtent, handleIndex, // cross is forbiden
	    0);
	    var dataExtent = visualMapModel.getExtent(); // Update data interval.

	    this._dataInterval = [linearMap(handleEnds[0], sizeExtent, dataExtent, true), linearMap(handleEnds[1], sizeExtent, dataExtent, true)];
	  },

	  /**
	   * @private
	   */
	  _updateView: function (forSketch) {
	    var visualMapModel = this.visualMapModel;
	    var dataExtent = visualMapModel.getExtent();
	    var shapes = this._shapes;
	    var outOfRangeHandleEnds = [0, visualMapModel.itemSize[1]];
	    var inRangeHandleEnds = forSketch ? outOfRangeHandleEnds : this._handleEnds;

	    var visualInRange = this._createBarVisual(this._dataInterval, dataExtent, inRangeHandleEnds, 'inRange');

	    var visualOutOfRange = this._createBarVisual(dataExtent, dataExtent, outOfRangeHandleEnds, 'outOfRange');

	    shapes.inRange.setStyle({
	      fill: visualInRange.barColor,
	      opacity: visualInRange.opacity
	    }).setShape('points', visualInRange.barPoints);
	    shapes.outOfRange.setStyle({
	      fill: visualOutOfRange.barColor,
	      opacity: visualOutOfRange.opacity
	    }).setShape('points', visualOutOfRange.barPoints);

	    this._updateHandle(inRangeHandleEnds, visualInRange);
	  },

	  /**
	   * @private
	   */
	  _createBarVisual: function (dataInterval, dataExtent, handleEnds, forceState) {
	    var opts = {
	      forceState: forceState,
	      convertOpacityToAlpha: true
	    };

	    var colorStops = this._makeColorGradient(dataInterval, opts);

	    var symbolSizes = [this.getControllerVisual(dataInterval[0], 'symbolSize', opts), this.getControllerVisual(dataInterval[1], 'symbolSize', opts)];

	    var barPoints = this._createBarPoints(handleEnds, symbolSizes);

	    return {
	      barColor: new LinearGradient(0, 0, 0, 1, colorStops),
	      barPoints: barPoints,
	      handlesColor: [colorStops[0].color, colorStops[colorStops.length - 1].color]
	    };
	  },

	  /**
	   * @private
	   */
	  _makeColorGradient: function (dataInterval, opts) {
	    // Considering colorHue, which is not linear, so we have to sample
	    // to calculate gradient color stops, but not only caculate head
	    // and tail.
	    var sampleNumber = 100; // Arbitrary value.

	    var colorStops = [];
	    var step = (dataInterval[1] - dataInterval[0]) / sampleNumber;
	    colorStops.push({
	      color: this.getControllerVisual(dataInterval[0], 'color', opts),
	      offset: 0
	    });

	    for (var i = 1; i < sampleNumber; i++) {
	      var currValue = dataInterval[0] + step * i;

	      if (currValue > dataInterval[1]) {
	        break;
	      }

	      colorStops.push({
	        color: this.getControllerVisual(currValue, 'color', opts),
	        offset: i / sampleNumber
	      });
	    }

	    colorStops.push({
	      color: this.getControllerVisual(dataInterval[1], 'color', opts),
	      offset: 1
	    });
	    return colorStops;
	  },

	  /**
	   * @private
	   */
	  _createBarPoints: function (handleEnds, symbolSizes) {
	    var itemSize = this.visualMapModel.itemSize;
	    return [[itemSize[0] - symbolSizes[0], handleEnds[0]], [itemSize[0], handleEnds[0]], [itemSize[0], handleEnds[1]], [itemSize[0] - symbolSizes[1], handleEnds[1]]];
	  },

	  /**
	   * @private
	   */
	  _createBarGroup: function (itemAlign) {
	    var orient = this._orient;
	    var inverse = this.visualMapModel.get('inverse');
	    return new graphic.Group(orient === 'horizontal' && !inverse ? {
	      scale: itemAlign === 'bottom' ? [1, 1] : [-1, 1],
	      rotation: Math.PI / 2
	    } : orient === 'horizontal' && inverse ? {
	      scale: itemAlign === 'bottom' ? [-1, 1] : [1, 1],
	      rotation: -Math.PI / 2
	    } : orient === 'vertical' && !inverse ? {
	      scale: itemAlign === 'left' ? [1, -1] : [-1, -1]
	    } : {
	      scale: itemAlign === 'left' ? [1, 1] : [-1, 1]
	    });
	  },

	  /**
	   * @private
	   */
	  _updateHandle: function (handleEnds, visualInRange) {
	    if (!this._useHandle) {
	      return;
	    }

	    var shapes = this._shapes;
	    var visualMapModel = this.visualMapModel;
	    var handleThumbs = shapes.handleThumbs;
	    var handleLabels = shapes.handleLabels;
	    each([0, 1], function (handleIndex) {
	      var handleThumb = handleThumbs[handleIndex];
	      handleThumb.setStyle('fill', visualInRange.handlesColor[handleIndex]);
	      handleThumb.position[1] = handleEnds[handleIndex]; // Update handle label position.

	      var textPoint = graphic.applyTransform(shapes.handleLabelPoints[handleIndex], graphic.getTransform(handleThumb, this.group));
	      handleLabels[handleIndex].setStyle({
	        x: textPoint[0],
	        y: textPoint[1],
	        text: visualMapModel.formatValueText(this._dataInterval[handleIndex]),
	        textVerticalAlign: 'middle',
	        textAlign: this._applyTransform(this._orient === 'horizontal' ? handleIndex === 0 ? 'bottom' : 'top' : 'left', shapes.barGroup)
	      });
	    }, this);
	  },

	  /**
	   * @private
	   * @param {number} cursorValue
	   * @param {number} textValue
	   * @param {string} [rangeSymbol]
	   * @param {number} [halfHoverLinkSize]
	   */
	  _showIndicator: function (cursorValue, textValue, rangeSymbol, halfHoverLinkSize) {
	    var visualMapModel = this.visualMapModel;
	    var dataExtent = visualMapModel.getExtent();
	    var itemSize = visualMapModel.itemSize;
	    var sizeExtent = [0, itemSize[1]];
	    var pos = linearMap(cursorValue, dataExtent, sizeExtent, true);
	    var shapes = this._shapes;
	    var indicator = shapes.indicator;

	    if (!indicator) {
	      return;
	    }

	    indicator.position[1] = pos;
	    indicator.attr('invisible', false);
	    indicator.setShape('points', createIndicatorPoints(!!rangeSymbol, halfHoverLinkSize, pos, itemSize[1]));
	    var opts = {
	      convertOpacityToAlpha: true
	    };
	    var color = this.getControllerVisual(cursorValue, 'color', opts);
	    indicator.setStyle('fill', color); // Update handle label position.

	    var textPoint = graphic.applyTransform(shapes.indicatorLabelPoint, graphic.getTransform(indicator, this.group));
	    var indicatorLabel = shapes.indicatorLabel;
	    indicatorLabel.attr('invisible', false);

	    var align = this._applyTransform('left', shapes.barGroup);

	    var orient = this._orient;
	    indicatorLabel.setStyle({
	      text: (rangeSymbol ? rangeSymbol : '') + visualMapModel.formatValueText(textValue),
	      textVerticalAlign: orient === 'horizontal' ? align : 'middle',
	      textAlign: orient === 'horizontal' ? 'center' : align,
	      x: textPoint[0],
	      y: textPoint[1]
	    });
	  },

	  /**
	   * @private
	   */
	  _enableHoverLinkToSeries: function () {
	    var self = this;

	    this._shapes.barGroup.on('mousemove', function (e) {
	      self._hovering = true;

	      if (!self._dragging) {
	        var itemSize = self.visualMapModel.itemSize;

	        var pos = self._applyTransform([e.offsetX, e.offsetY], self._shapes.barGroup, true, true); // For hover link show when hover handle, which might be
	        // below or upper than sizeExtent.


	        pos[1] = mathMin(mathMax(0, pos[1]), itemSize[1]);

	        self._doHoverLinkToSeries(pos[1], 0 <= pos[0] && pos[0] <= itemSize[0]);
	      }
	    }).on('mouseout', function () {
	      // When mouse is out of handle, hoverLink still need
	      // to be displayed when realtime is set as false.
	      self._hovering = false;
	      !self._dragging && self._clearHoverLinkToSeries();
	    });
	  },

	  /**
	   * @private
	   */
	  _enableHoverLinkFromSeries: function () {
	    var zr = this.api.getZr();

	    if (this.visualMapModel.option.hoverLink) {
	      zr.on('mouseover', this._hoverLinkFromSeriesMouseOver, this);
	      zr.on('mouseout', this._hideIndicator, this);
	    } else {
	      this._clearHoverLinkFromSeries();
	    }
	  },

	  /**
	   * @private
	   */
	  _doHoverLinkToSeries: function (cursorPos, hoverOnBar) {
	    var visualMapModel = this.visualMapModel;
	    var itemSize = visualMapModel.itemSize;

	    if (!visualMapModel.option.hoverLink) {
	      return;
	    }

	    var sizeExtent = [0, itemSize[1]];
	    var dataExtent = visualMapModel.getExtent(); // For hover link show when hover handle, which might be below or upper than sizeExtent.

	    cursorPos = mathMin(mathMax(sizeExtent[0], cursorPos), sizeExtent[1]);
	    var halfHoverLinkSize = getHalfHoverLinkSize(visualMapModel, dataExtent, sizeExtent);
	    var hoverRange = [cursorPos - halfHoverLinkSize, cursorPos + halfHoverLinkSize];
	    var cursorValue = linearMap(cursorPos, sizeExtent, dataExtent, true);
	    var valueRange = [linearMap(hoverRange[0], sizeExtent, dataExtent, true), linearMap(hoverRange[1], sizeExtent, dataExtent, true)]; // Consider data range is out of visualMap range, see test/visualMap-continuous.html,
	    // where china and india has very large population.

	    hoverRange[0] < sizeExtent[0] && (valueRange[0] = -Infinity);
	    hoverRange[1] > sizeExtent[1] && (valueRange[1] = Infinity); // Do not show indicator when mouse is over handle,
	    // otherwise labels overlap, especially when dragging.

	    if (hoverOnBar) {
	      if (valueRange[0] === -Infinity) {
	        this._showIndicator(cursorValue, valueRange[1], '< ', halfHoverLinkSize);
	      } else if (valueRange[1] === Infinity) {
	        this._showIndicator(cursorValue, valueRange[0], '> ', halfHoverLinkSize);
	      } else {
	        this._showIndicator(cursorValue, cursorValue, '≈ ', halfHoverLinkSize);
	      }
	    } // When realtime is set as false, handles, which are in barGroup,
	    // also trigger hoverLink, which help user to realize where they
	    // focus on when dragging. (see test/heatmap-large.html)
	    // When realtime is set as true, highlight will not show when hover
	    // handle, because the label on handle, which displays a exact value
	    // but not range, might mislead users.


	    var oldBatch = this._hoverLinkDataIndices;
	    var newBatch = [];

	    if (hoverOnBar || useHoverLinkOnHandle(visualMapModel)) {
	      newBatch = this._hoverLinkDataIndices = visualMapModel.findTargetDataIndices(valueRange);
	    }

	    var resultBatches = modelUtil.compressBatches(oldBatch, newBatch);

	    this._dispatchHighDown('downplay', helper.convertDataIndex(resultBatches[0]));

	    this._dispatchHighDown('highlight', helper.convertDataIndex(resultBatches[1]));
	  },

	  /**
	   * @private
	   */
	  _hoverLinkFromSeriesMouseOver: function (e) {
	    var el = e.target;
	    var visualMapModel = this.visualMapModel;

	    if (!el || el.dataIndex == null) {
	      return;
	    }

	    var dataModel = this.ecModel.getSeriesByIndex(el.seriesIndex);

	    if (!visualMapModel.isTargetSeries(dataModel)) {
	      return;
	    }

	    var data = dataModel.getData(el.dataType);
	    var value = data.get(visualMapModel.getDataDimension(data), el.dataIndex, true);

	    if (!isNaN(value)) {
	      this._showIndicator(value, value);
	    }
	  },

	  /**
	   * @private
	   */
	  _hideIndicator: function () {
	    var shapes = this._shapes;
	    shapes.indicator && shapes.indicator.attr('invisible', true);
	    shapes.indicatorLabel && shapes.indicatorLabel.attr('invisible', true);
	  },

	  /**
	   * @private
	   */
	  _clearHoverLinkToSeries: function () {
	    this._hideIndicator();

	    var indices = this._hoverLinkDataIndices;

	    this._dispatchHighDown('downplay', helper.convertDataIndex(indices));

	    indices.length = 0;
	  },

	  /**
	   * @private
	   */
	  _clearHoverLinkFromSeries: function () {
	    this._hideIndicator();

	    var zr = this.api.getZr();
	    zr.off('mouseover', this._hoverLinkFromSeriesMouseOver);
	    zr.off('mouseout', this._hideIndicator);
	  },

	  /**
	   * @private
	   */
	  _applyTransform: function (vertex, element, inverse, global) {
	    var transform = graphic.getTransform(element, global ? null : this.group);
	    return graphic[zrUtil.isArray(vertex) ? 'applyTransform' : 'transformDirection'](vertex, transform, inverse);
	  },

	  /**
	   * @private
	   */
	  _dispatchHighDown: function (type, batch) {
	    batch && batch.length && this.api.dispatchAction({
	      type: type,
	      batch: batch
	    });
	  },

	  /**
	   * @override
	   */
	  dispose: function () {
	    this._clearHoverLinkFromSeries();

	    this._clearHoverLinkToSeries();
	  },

	  /**
	   * @override
	   */
	  remove: function () {
	    this._clearHoverLinkFromSeries();

	    this._clearHoverLinkToSeries();
	  }
	});

	function createPolygon(points, cursor, onDrift, onDragEnd) {
	  return new graphic.Polygon({
	    shape: {
	      points: points
	    },
	    draggable: !!onDrift,
	    cursor: cursor,
	    drift: onDrift,
	    onmousemove: function (e) {
	      // Fot mobile devicem, prevent screen slider on the button.
	      eventTool.stop(e.event);
	    },
	    ondragend: onDragEnd
	  });
	}

	function createHandlePoints(handleIndex, textSize) {
	  return handleIndex === 0 ? [[0, 0], [textSize, 0], [textSize, -textSize]] : [[0, 0], [textSize, 0], [textSize, textSize]];
	}

	function createIndicatorPoints(isRange, halfHoverLinkSize, pos, extentMax) {
	  return isRange ? [// indicate range
	  [0, -mathMin(halfHoverLinkSize, mathMax(pos, 0))], [HOVER_LINK_OUT, 0], [0, mathMin(halfHoverLinkSize, mathMax(extentMax - pos, 0))]] : [// indicate single value
	  [0, 0], [5, -5], [5, 5]];
	}

	function getHalfHoverLinkSize(visualMapModel, dataExtent, sizeExtent) {
	  var halfHoverLinkSize = HOVER_LINK_SIZE / 2;
	  var hoverLinkDataSize = visualMapModel.get('hoverLinkDataSize');

	  if (hoverLinkDataSize) {
	    halfHoverLinkSize = linearMap(hoverLinkDataSize, dataExtent, sizeExtent, true) / 2;
	  }

	  return halfHoverLinkSize;
	}

	function useHoverLinkOnHandle(visualMapModel) {
	  var hoverLinkOnHandle = visualMapModel.get('hoverLinkOnHandle');
	  return !!(hoverLinkOnHandle == null ? visualMapModel.get('realtime') : hoverLinkOnHandle);
	}

	function getCursor(orient) {
	  return orient === 'vertical' ? 'ns-resize' : 'ew-resize';
	}

	var _default = ContinuousView;
	module.exports = _default;

/***/ }),
/* 382 */
/***/ (function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(176);

	var zrUtil = __webpack_require__(181);

	var graphic = __webpack_require__(226);

	var formatUtil = __webpack_require__(264);

	var layout = __webpack_require__(262);

	var VisualMapping = __webpack_require__(377);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var _default = echarts.extendComponentView({
	  type: 'visualMap',

	  /**
	   * @readOnly
	   * @type {Object}
	   */
	  autoPositionValues: {
	    left: 1,
	    right: 1,
	    top: 1,
	    bottom: 1
	  },
	  init: function (ecModel, api) {
	    /**
	     * @readOnly
	     * @type {module:echarts/model/Global}
	     */
	    this.ecModel = ecModel;
	    /**
	     * @readOnly
	     * @type {module:echarts/ExtensionAPI}
	     */

	    this.api = api;
	    /**
	     * @readOnly
	     * @type {module:echarts/component/visualMap/visualMapModel}
	     */

	    this.visualMapModel;
	  },

	  /**
	   * @protected
	   */
	  render: function (visualMapModel, ecModel, api, payload) {
	    this.visualMapModel = visualMapModel;

	    if (visualMapModel.get('show') === false) {
	      this.group.removeAll();
	      return;
	    }

	    this.doRender.apply(this, arguments);
	  },

	  /**
	   * @protected
	   */
	  renderBackground: function (group) {
	    var visualMapModel = this.visualMapModel;
	    var padding = formatUtil.normalizeCssArray(visualMapModel.get('padding') || 0);
	    var rect = group.getBoundingRect();
	    group.add(new graphic.Rect({
	      z2: -1,
	      // Lay background rect on the lowest layer.
	      silent: true,
	      shape: {
	        x: rect.x - padding[3],
	        y: rect.y - padding[0],
	        width: rect.width + padding[3] + padding[1],
	        height: rect.height + padding[0] + padding[2]
	      },
	      style: {
	        fill: visualMapModel.get('backgroundColor'),
	        stroke: visualMapModel.get('borderColor'),
	        lineWidth: visualMapModel.get('borderWidth')
	      }
	    }));
	  },

	  /**
	   * @protected
	   * @param {number} targetValue can be Infinity or -Infinity
	   * @param {string=} visualCluster Only can be 'color' 'opacity' 'symbol' 'symbolSize'
	   * @param {Object} [opts]
	   * @param {string=} [opts.forceState] Specify state, instead of using getValueState method.
	   * @param {string=} [opts.convertOpacityToAlpha=false] For color gradient in controller widget.
	   * @return {*} Visual value.
	   */
	  getControllerVisual: function (targetValue, visualCluster, opts) {
	    opts = opts || {};
	    var forceState = opts.forceState;
	    var visualMapModel = this.visualMapModel;
	    var visualObj = {}; // Default values.

	    if (visualCluster === 'symbol') {
	      visualObj.symbol = visualMapModel.get('itemSymbol');
	    }

	    if (visualCluster === 'color') {
	      var defaultColor = visualMapModel.get('contentColor');
	      visualObj.color = defaultColor;
	    }

	    function getter(key) {
	      return visualObj[key];
	    }

	    function setter(key, value) {
	      visualObj[key] = value;
	    }

	    var mappings = visualMapModel.controllerVisuals[forceState || visualMapModel.getValueState(targetValue)];
	    var visualTypes = VisualMapping.prepareVisualTypes(mappings);
	    zrUtil.each(visualTypes, function (type) {
	      var visualMapping = mappings[type];

	      if (opts.convertOpacityToAlpha && type === 'opacity') {
	        type = 'colorAlpha';
	        visualMapping = mappings.__alphaForOpacity;
	      }

	      if (VisualMapping.dependsOn(type, visualCluster)) {
	        visualMapping && visualMapping.applyVisual(targetValue, getter, setter);
	      }
	    });
	    return visualObj[visualCluster];
	  },

	  /**
	   * @protected
	   */
	  positionGroup: function (group) {
	    var model = this.visualMapModel;
	    var api = this.api;
	    layout.positionElement(group, model.getBoxLayoutParams(), {
	      width: api.getWidth(),
	      height: api.getHeight()
	    });
	  },

	  /**
	   * @protected
	   * @abstract
	   */
	  doRender: zrUtil.noop
	});

	module.exports = _default;

/***/ }),
/* 383 */
/***/ (function(module, exports) {

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/

	/**
	 * Calculate slider move result.
	 * Usage:
	 * (1) If both handle0 and handle1 are needed to be moved, set minSpan the same as
	 * maxSpan and the same as `Math.abs(handleEnd[1] - handleEnds[0])`.
	 * (2) If handle0 is forbidden to cross handle1, set minSpan as `0`.
	 *
	 * @param {number} delta Move length.
	 * @param {Array.<number>} handleEnds handleEnds[0] can be bigger then handleEnds[1].
	 *              handleEnds will be modified in this method.
	 * @param {Array.<number>} extent handleEnds is restricted by extent.
	 *              extent[0] should less or equals than extent[1].
	 * @param {number|string} handleIndex Can be 'all', means that both move the two handleEnds,
	 *              where the input minSpan and maxSpan will not work.
	 * @param {number} [minSpan] The range of dataZoom can not be smaller than that.
	 *              If not set, handle0 and cross handle1. If set as a non-negative
	 *              number (including `0`), handles will push each other when reaching
	 *              the minSpan.
	 * @param {number} [maxSpan] The range of dataZoom can not be larger than that.
	 * @return {Array.<number>} The input handleEnds.
	 */
	function _default(delta, handleEnds, extent, handleIndex, minSpan, maxSpan) {
	  // Normalize firstly.
	  handleEnds[0] = restrict(handleEnds[0], extent);
	  handleEnds[1] = restrict(handleEnds[1], extent);
	  delta = delta || 0;
	  var extentSpan = extent[1] - extent[0]; // Notice maxSpan and minSpan can be null/undefined.

	  if (minSpan != null) {
	    minSpan = restrict(minSpan, [0, extentSpan]);
	  }

	  if (maxSpan != null) {
	    maxSpan = Math.max(maxSpan, minSpan != null ? minSpan : 0);
	  }

	  if (handleIndex === 'all') {
	    minSpan = maxSpan = Math.abs(handleEnds[1] - handleEnds[0]);
	    handleIndex = 0;
	  }

	  var originalDistSign = getSpanSign(handleEnds, handleIndex);
	  handleEnds[handleIndex] += delta; // Restrict in extent.

	  var extentMinSpan = minSpan || 0;
	  var realExtent = extent.slice();
	  originalDistSign.sign < 0 ? realExtent[0] += extentMinSpan : realExtent[1] -= extentMinSpan;
	  handleEnds[handleIndex] = restrict(handleEnds[handleIndex], realExtent); // Expand span.

	  var currDistSign = getSpanSign(handleEnds, handleIndex);

	  if (minSpan != null && (currDistSign.sign !== originalDistSign.sign || currDistSign.span < minSpan)) {
	    // If minSpan exists, 'cross' is forbinden.
	    handleEnds[1 - handleIndex] = handleEnds[handleIndex] + originalDistSign.sign * minSpan;
	  } // Shrink span.


	  var currDistSign = getSpanSign(handleEnds, handleIndex);

	  if (maxSpan != null && currDistSign.span > maxSpan) {
	    handleEnds[1 - handleIndex] = handleEnds[handleIndex] + currDistSign.sign * maxSpan;
	  }

	  return handleEnds;
	}

	function getSpanSign(handleEnds, handleIndex) {
	  var dist = handleEnds[handleIndex] - handleEnds[1 - handleIndex]; // If `handleEnds[0] === handleEnds[1]`, always believe that handleEnd[0]
	  // is at left of handleEnds[1] for non-cross case.

	  return {
	    span: Math.abs(dist),
	    sign: dist > 0 ? -1 : dist < 0 ? 1 : handleIndex ? -1 : 1
	  };
	}

	function restrict(value, extend) {
	  return Math.min(extend[1], Math.max(extend[0], value));
	}

	module.exports = _default;

/***/ }),
/* 384 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(181);

	var _layout = __webpack_require__(262);

	var getLayoutRect = _layout.getLayoutRect;

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/

	/**
	 * @param {module:echarts/component/visualMap/VisualMapModel} visualMapModel\
	 * @param {module:echarts/ExtensionAPI} api
	 * @param {Array.<number>} itemSize always [short, long]
	 * @return {string} 'left' or 'right' or 'top' or 'bottom'
	 */
	function getItemAlign(visualMapModel, api, itemSize) {
	  var modelOption = visualMapModel.option;
	  var itemAlign = modelOption.align;

	  if (itemAlign != null && itemAlign !== 'auto') {
	    return itemAlign;
	  } // Auto decision align.


	  var ecSize = {
	    width: api.getWidth(),
	    height: api.getHeight()
	  };
	  var realIndex = modelOption.orient === 'horizontal' ? 1 : 0;
	  var paramsSet = [['left', 'right', 'width'], ['top', 'bottom', 'height']];
	  var reals = paramsSet[realIndex];
	  var fakeValue = [0, null, 10];
	  var layoutInput = {};

	  for (var i = 0; i < 3; i++) {
	    layoutInput[paramsSet[1 - realIndex][i]] = fakeValue[i];
	    layoutInput[reals[i]] = i === 2 ? itemSize[0] : modelOption[reals[i]];
	  }

	  var rParam = [['x', 'width', 3], ['y', 'height', 0]][realIndex];
	  var rect = getLayoutRect(layoutInput, ecSize, modelOption.padding);
	  return reals[(rect.margin[rParam[2]] || 0) + rect[rParam[0]] + rect[rParam[1]] * 0.5 < ecSize[rParam[1]] * 0.5 ? 0 : 1];
	}
	/**
	 * Prepare dataIndex for outside usage, where dataIndex means rawIndex, and
	 * dataIndexInside means filtered index.
	 */


	function convertDataIndex(batch) {
	  zrUtil.each(batch || [], function (batchItem) {
	    if (batch.dataIndex != null) {
	      batch.dataIndexInside = batch.dataIndex;
	      batch.dataIndex = null;
	    }
	  });
	  return batch;
	}

	exports.getItemAlign = getItemAlign;
	exports.convertDataIndex = convertDataIndex;

/***/ }),
/* 385 */
/***/ (function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(176);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var actionInfo = {
	  type: 'selectDataRange',
	  event: 'dataRangeSelected',
	  // FIXME use updateView appears wrong
	  update: 'update'
	};
	echarts.registerAction(actionInfo, function (payload, ecModel) {
	  ecModel.eachComponent({
	    mainType: 'visualMap',
	    query: payload
	  }, function (model) {
	    model.setSelected(payload.selected);
	  });
	});

/***/ }),
/* 386 */
/***/ (function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(176);

	var preprocessor = __webpack_require__(373);

	__webpack_require__(374);

	__webpack_require__(375);

	__webpack_require__(387);

	__webpack_require__(388);

	__webpack_require__(385);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/

	/**
	 * DataZoom component entry
	 */
	echarts.registerPreprocessor(preprocessor);

/***/ }),
/* 387 */
/***/ (function(module, exports, __webpack_require__) {

	var _config = __webpack_require__(177);

	var __DEV__ = _config.__DEV__;

	var zrUtil = __webpack_require__(181);

	var VisualMapModel = __webpack_require__(379);

	var VisualMapping = __webpack_require__(377);

	var visualDefault = __webpack_require__(380);

	var _number = __webpack_require__(263);

	var reformIntervals = _number.reformIntervals;

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var PiecewiseModel = VisualMapModel.extend({
	  type: 'visualMap.piecewise',

	  /**
	   * Order Rule:
	   *
	   * option.categories / option.pieces / option.text / option.selected:
	   *     If !option.inverse,
	   *     Order when vertical: ['top', ..., 'bottom'].
	   *     Order when horizontal: ['left', ..., 'right'].
	   *     If option.inverse, the meaning of
	   *     the order should be reversed.
	   *
	   * this._pieceList:
	   *     The order is always [low, ..., high].
	   *
	   * Mapping from location to low-high:
	   *     If !option.inverse
	   *     When vertical, top is high.
	   *     When horizontal, right is high.
	   *     If option.inverse, reverse.
	   */

	  /**
	   * @protected
	   */
	  defaultOption: {
	    selected: null,
	    // Object. If not specified, means selected.
	    // When pieces and splitNumber: {'0': true, '5': true}
	    // When categories: {'cate1': false, 'cate3': true}
	    // When selected === false, means all unselected.
	    minOpen: false,
	    // Whether include values that smaller than `min`.
	    maxOpen: false,
	    // Whether include values that bigger than `max`.
	    align: 'auto',
	    // 'auto', 'left', 'right'
	    itemWidth: 20,
	    // When put the controller vertically, it is the length of
	    // horizontal side of each item. Otherwise, vertical side.
	    itemHeight: 14,
	    // When put the controller vertically, it is the length of
	    // vertical side of each item. Otherwise, horizontal side.
	    itemSymbol: 'roundRect',
	    pieceList: null,
	    // Each item is Object, with some of those attrs:
	    // {min, max, lt, gt, lte, gte, value,
	    // color, colorSaturation, colorAlpha, opacity,
	    // symbol, symbolSize}, which customize the range or visual
	    // coding of the certain piece. Besides, see "Order Rule".
	    categories: null,
	    // category names, like: ['some1', 'some2', 'some3'].
	    // Attr min/max are ignored when categories set. See "Order Rule"
	    splitNumber: 5,
	    // If set to 5, auto split five pieces equally.
	    // If set to 0 and component type not set, component type will be
	    // determined as "continuous". (It is less reasonable but for ec2
	    // compatibility, see echarts/component/visualMap/typeDefaulter)
	    selectedMode: 'multiple',
	    // Can be 'multiple' or 'single'.
	    itemGap: 10,
	    // The gap between two items, in px.
	    hoverLink: true,
	    // Enable hover highlight.
	    showLabel: null // By default, when text is used, label will hide (the logic
	    // is remained for compatibility reason)

	  },

	  /**
	   * @override
	   */
	  optionUpdated: function (newOption, isInit) {
	    PiecewiseModel.superApply(this, 'optionUpdated', arguments);
	    /**
	     * The order is always [low, ..., high].
	     * [{text: string, interval: Array.<number>}, ...]
	     * @private
	     * @type {Array.<Object>}
	     */

	    this._pieceList = [];
	    this.resetExtent();
	    /**
	     * 'pieces', 'categories', 'splitNumber'
	     * @type {string}
	     */

	    var mode = this._mode = this._determineMode();

	    resetMethods[this._mode].call(this);

	    this._resetSelected(newOption, isInit);

	    var categories = this.option.categories;
	    this.resetVisual(function (mappingOption, state) {
	      if (mode === 'categories') {
	        mappingOption.mappingMethod = 'category';
	        mappingOption.categories = zrUtil.clone(categories);
	      } else {
	        mappingOption.dataExtent = this.getExtent();
	        mappingOption.mappingMethod = 'piecewise';
	        mappingOption.pieceList = zrUtil.map(this._pieceList, function (piece) {
	          var piece = zrUtil.clone(piece);

	          if (state !== 'inRange') {
	            // FIXME
	            // outOfRange do not support special visual in pieces.
	            piece.visual = null;
	          }

	          return piece;
	        });
	      }
	    });
	  },

	  /**
	   * @protected
	   * @override
	   */
	  completeVisualOption: function () {
	    // Consider this case:
	    // visualMap: {
	    //      pieces: [{symbol: 'circle', lt: 0}, {symbol: 'rect', gte: 0}]
	    // }
	    // where no inRange/outOfRange set but only pieces. So we should make
	    // default inRange/outOfRange for this case, otherwise visuals that only
	    // appear in `pieces` will not be taken into account in visual encoding.
	    var option = this.option;
	    var visualTypesInPieces = {};
	    var visualTypes = VisualMapping.listVisualTypes();
	    var isCategory = this.isCategory();
	    zrUtil.each(option.pieces, function (piece) {
	      zrUtil.each(visualTypes, function (visualType) {
	        if (piece.hasOwnProperty(visualType)) {
	          visualTypesInPieces[visualType] = 1;
	        }
	      });
	    });
	    zrUtil.each(visualTypesInPieces, function (v, visualType) {
	      var exists = 0;
	      zrUtil.each(this.stateList, function (state) {
	        exists |= has(option, state, visualType) || has(option.target, state, visualType);
	      }, this);
	      !exists && zrUtil.each(this.stateList, function (state) {
	        (option[state] || (option[state] = {}))[visualType] = visualDefault.get(visualType, state === 'inRange' ? 'active' : 'inactive', isCategory);
	      });
	    }, this);

	    function has(obj, state, visualType) {
	      return obj && obj[state] && (zrUtil.isObject(obj[state]) ? obj[state].hasOwnProperty(visualType) : obj[state] === visualType // e.g., inRange: 'symbol'
	      );
	    }

	    VisualMapModel.prototype.completeVisualOption.apply(this, arguments);
	  },
	  _resetSelected: function (newOption, isInit) {
	    var thisOption = this.option;
	    var pieceList = this._pieceList; // Selected do not merge but all override.

	    var selected = (isInit ? thisOption : newOption).selected || {};
	    thisOption.selected = selected; // Consider 'not specified' means true.

	    zrUtil.each(pieceList, function (piece, index) {
	      var key = this.getSelectedMapKey(piece);

	      if (!selected.hasOwnProperty(key)) {
	        selected[key] = true;
	      }
	    }, this);

	    if (thisOption.selectedMode === 'single') {
	      // Ensure there is only one selected.
	      var hasSel = false;
	      zrUtil.each(pieceList, function (piece, index) {
	        var key = this.getSelectedMapKey(piece);

	        if (selected[key]) {
	          hasSel ? selected[key] = false : hasSel = true;
	        }
	      }, this);
	    } // thisOption.selectedMode === 'multiple', default: all selected.

	  },

	  /**
	   * @public
	   */
	  getSelectedMapKey: function (piece) {
	    return this._mode === 'categories' ? piece.value + '' : piece.index + '';
	  },

	  /**
	   * @public
	   */
	  getPieceList: function () {
	    return this._pieceList;
	  },

	  /**
	   * @private
	   * @return {string}
	   */
	  _determineMode: function () {
	    var option = this.option;
	    return option.pieces && option.pieces.length > 0 ? 'pieces' : this.option.categories ? 'categories' : 'splitNumber';
	  },

	  /**
	   * @public
	   * @override
	   */
	  setSelected: function (selected) {
	    this.option.selected = zrUtil.clone(selected);
	  },

	  /**
	   * @public
	   * @override
	   */
	  getValueState: function (value) {
	    var index = VisualMapping.findPieceIndex(value, this._pieceList);
	    return index != null ? this.option.selected[this.getSelectedMapKey(this._pieceList[index])] ? 'inRange' : 'outOfRange' : 'outOfRange';
	  },

	  /**
	   * @public
	   * @params {number} pieceIndex piece index in visualMapModel.getPieceList()
	   * @return {Array.<Object>} [{seriesId, dataIndices: <Array.<number>>}, ...]
	   */
	  findTargetDataIndices: function (pieceIndex) {
	    var result = [];
	    this.eachTargetSeries(function (seriesModel) {
	      var dataIndices = [];
	      var data = seriesModel.getData();
	      data.each(this.getDataDimension(data), function (value, dataIndex) {
	        // Should always base on model pieceList, because it is order sensitive.
	        var pIdx = VisualMapping.findPieceIndex(value, this._pieceList);
	        pIdx === pieceIndex && dataIndices.push(dataIndex);
	      }, this);
	      result.push({
	        seriesId: seriesModel.id,
	        dataIndex: dataIndices
	      });
	    }, this);
	    return result;
	  },

	  /**
	   * @private
	   * @param {Object} piece piece.value or piece.interval is required.
	   * @return {number} Can be Infinity or -Infinity
	   */
	  getRepresentValue: function (piece) {
	    var representValue;

	    if (this.isCategory()) {
	      representValue = piece.value;
	    } else {
	      if (piece.value != null) {
	        representValue = piece.value;
	      } else {
	        var pieceInterval = piece.interval || [];
	        representValue = pieceInterval[0] === -Infinity && pieceInterval[1] === Infinity ? 0 : (pieceInterval[0] + pieceInterval[1]) / 2;
	      }
	    }

	    return representValue;
	  },
	  getVisualMeta: function (getColorVisual) {
	    // Do not support category. (category axis is ordinal, numerical)
	    if (this.isCategory()) {
	      return;
	    }

	    var stops = [];
	    var outerColors = [];
	    var visualMapModel = this;

	    function setStop(interval, valueState) {
	      var representValue = visualMapModel.getRepresentValue({
	        interval: interval
	      });

	      if (!valueState) {
	        valueState = visualMapModel.getValueState(representValue);
	      }

	      var color = getColorVisual(representValue, valueState);

	      if (interval[0] === -Infinity) {
	        outerColors[0] = color;
	      } else if (interval[1] === Infinity) {
	        outerColors[1] = color;
	      } else {
	        stops.push({
	          value: interval[0],
	          color: color
	        }, {
	          value: interval[1],
	          color: color
	        });
	      }
	    } // Suplement


	    var pieceList = this._pieceList.slice();

	    if (!pieceList.length) {
	      pieceList.push({
	        interval: [-Infinity, Infinity]
	      });
	    } else {
	      var edge = pieceList[0].interval[0];
	      edge !== -Infinity && pieceList.unshift({
	        interval: [-Infinity, edge]
	      });
	      edge = pieceList[pieceList.length - 1].interval[1];
	      edge !== Infinity && pieceList.push({
	        interval: [edge, Infinity]
	      });
	    }

	    var curr = -Infinity;
	    zrUtil.each(pieceList, function (piece) {
	      var interval = piece.interval;

	      if (interval) {
	        // Fulfill gap.
	        interval[0] > curr && setStop([curr, interval[0]], 'outOfRange');
	        setStop(interval.slice());
	        curr = interval[1];
	      }
	    }, this);
	    return {
	      stops: stops,
	      outerColors: outerColors
	    };
	  }
	});
	/**
	 * Key is this._mode
	 * @type {Object}
	 * @this {module:echarts/component/viusalMap/PiecewiseMode}
	 */

	var resetMethods = {
	  splitNumber: function () {
	    var thisOption = this.option;
	    var pieceList = this._pieceList;
	    var precision = Math.min(thisOption.precision, 20);
	    var dataExtent = this.getExtent();
	    var splitNumber = thisOption.splitNumber;
	    splitNumber = Math.max(parseInt(splitNumber, 10), 1);
	    thisOption.splitNumber = splitNumber;
	    var splitStep = (dataExtent[1] - dataExtent[0]) / splitNumber; // Precision auto-adaption

	    while (+splitStep.toFixed(precision) !== splitStep && precision < 5) {
	      precision++;
	    }

	    thisOption.precision = precision;
	    splitStep = +splitStep.toFixed(precision);
	    var index = 0;

	    if (thisOption.minOpen) {
	      pieceList.push({
	        index: index++,
	        interval: [-Infinity, dataExtent[0]],
	        close: [0, 0]
	      });
	    }

	    for (var curr = dataExtent[0], len = index + splitNumber; index < len; curr += splitStep) {
	      var max = index === splitNumber - 1 ? dataExtent[1] : curr + splitStep;
	      pieceList.push({
	        index: index++,
	        interval: [curr, max],
	        close: [1, 1]
	      });
	    }

	    if (thisOption.maxOpen) {
	      pieceList.push({
	        index: index++,
	        interval: [dataExtent[1], Infinity],
	        close: [0, 0]
	      });
	    }

	    reformIntervals(pieceList);
	    zrUtil.each(pieceList, function (piece) {
	      piece.text = this.formatValueText(piece.interval);
	    }, this);
	  },
	  categories: function () {
	    var thisOption = this.option;
	    zrUtil.each(thisOption.categories, function (cate) {
	      // FIXME category模式也使用pieceList，但在visualMapping中不是使用pieceList。
	      // 是否改一致。
	      this._pieceList.push({
	        text: this.formatValueText(cate, true),
	        value: cate
	      });
	    }, this); // See "Order Rule".

	    normalizeReverse(thisOption, this._pieceList);
	  },
	  pieces: function () {
	    var thisOption = this.option;
	    var pieceList = this._pieceList;
	    zrUtil.each(thisOption.pieces, function (pieceListItem, index) {
	      if (!zrUtil.isObject(pieceListItem)) {
	        pieceListItem = {
	          value: pieceListItem
	        };
	      }

	      var item = {
	        text: '',
	        index: index
	      };

	      if (pieceListItem.label != null) {
	        item.text = pieceListItem.label;
	      }

	      if (pieceListItem.hasOwnProperty('value')) {
	        var value = item.value = pieceListItem.value;
	        item.interval = [value, value];
	        item.close = [1, 1];
	      } else {
	        // `min` `max` is legacy option.
	        // `lt` `gt` `lte` `gte` is recommanded.
	        var interval = item.interval = [];
	        var close = item.close = [0, 0];
	        var closeList = [1, 0, 1];
	        var infinityList = [-Infinity, Infinity];
	        var useMinMax = [];

	        for (var lg = 0; lg < 2; lg++) {
	          var names = [['gte', 'gt', 'min'], ['lte', 'lt', 'max']][lg];

	          for (var i = 0; i < 3 && interval[lg] == null; i++) {
	            interval[lg] = pieceListItem[names[i]];
	            close[lg] = closeList[i];
	            useMinMax[lg] = i === 2;
	          }

	          interval[lg] == null && (interval[lg] = infinityList[lg]);
	        }

	        useMinMax[0] && interval[1] === Infinity && (close[0] = 0);
	        useMinMax[1] && interval[0] === -Infinity && (close[1] = 0);

	        if (interval[0] === interval[1] && close[0] && close[1]) {
	          // Consider: [{min: 5, max: 5, visual: {...}}, {min: 0, max: 5}],
	          // we use value to lift the priority when min === max
	          item.value = interval[0];
	        }
	      }

	      item.visual = VisualMapping.retrieveVisuals(pieceListItem);
	      pieceList.push(item);
	    }, this); // See "Order Rule".

	    normalizeReverse(thisOption, pieceList); // Only pieces

	    reformIntervals(pieceList);
	    zrUtil.each(pieceList, function (piece) {
	      var close = piece.close;
	      var edgeSymbols = [['<', '≤'][close[1]], ['>', '≥'][close[0]]];
	      piece.text = piece.text || this.formatValueText(piece.value != null ? piece.value : piece.interval, false, edgeSymbols);
	    }, this);
	  }
	};

	function normalizeReverse(thisOption, pieceList) {
	  var inverse = thisOption.inverse;

	  if (thisOption.orient === 'vertical' ? !inverse : inverse) {
	    pieceList.reverse();
	  }
	}

	var _default = PiecewiseModel;
	module.exports = _default;

/***/ }),
/* 388 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(181);

	var VisualMapView = __webpack_require__(382);

	var graphic = __webpack_require__(226);

	var _symbol = __webpack_require__(313);

	var createSymbol = _symbol.createSymbol;

	var layout = __webpack_require__(262);

	var helper = __webpack_require__(384);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var PiecewiseVisualMapView = VisualMapView.extend({
	  type: 'visualMap.piecewise',

	  /**
	   * @protected
	   * @override
	   */
	  doRender: function () {
	    var thisGroup = this.group;
	    thisGroup.removeAll();
	    var visualMapModel = this.visualMapModel;
	    var textGap = visualMapModel.get('textGap');
	    var textStyleModel = visualMapModel.textStyleModel;
	    var textFont = textStyleModel.getFont();
	    var textFill = textStyleModel.getTextColor();

	    var itemAlign = this._getItemAlign();

	    var itemSize = visualMapModel.itemSize;

	    var viewData = this._getViewData();

	    var endsText = viewData.endsText;
	    var showLabel = zrUtil.retrieve(visualMapModel.get('showLabel', true), !endsText);
	    endsText && this._renderEndsText(thisGroup, endsText[0], itemSize, showLabel, itemAlign);
	    zrUtil.each(viewData.viewPieceList, renderItem, this);
	    endsText && this._renderEndsText(thisGroup, endsText[1], itemSize, showLabel, itemAlign);
	    layout.box(visualMapModel.get('orient'), thisGroup, visualMapModel.get('itemGap'));
	    this.renderBackground(thisGroup);
	    this.positionGroup(thisGroup);

	    function renderItem(item) {
	      var piece = item.piece;
	      var itemGroup = new graphic.Group();
	      itemGroup.onclick = zrUtil.bind(this._onItemClick, this, piece);

	      this._enableHoverLink(itemGroup, item.indexInModelPieceList);

	      var representValue = visualMapModel.getRepresentValue(piece);

	      this._createItemSymbol(itemGroup, representValue, [0, 0, itemSize[0], itemSize[1]]);

	      if (showLabel) {
	        var visualState = this.visualMapModel.getValueState(representValue);
	        itemGroup.add(new graphic.Text({
	          style: {
	            x: itemAlign === 'right' ? -textGap : itemSize[0] + textGap,
	            y: itemSize[1] / 2,
	            text: piece.text,
	            textVerticalAlign: 'middle',
	            textAlign: itemAlign,
	            textFont: textFont,
	            textFill: textFill,
	            opacity: visualState === 'outOfRange' ? 0.5 : 1
	          }
	        }));
	      }

	      thisGroup.add(itemGroup);
	    }
	  },

	  /**
	   * @private
	   */
	  _enableHoverLink: function (itemGroup, pieceIndex) {
	    itemGroup.on('mouseover', zrUtil.bind(onHoverLink, this, 'highlight')).on('mouseout', zrUtil.bind(onHoverLink, this, 'downplay'));

	    function onHoverLink(method) {
	      var visualMapModel = this.visualMapModel;
	      visualMapModel.option.hoverLink && this.api.dispatchAction({
	        type: method,
	        batch: helper.convertDataIndex(visualMapModel.findTargetDataIndices(pieceIndex))
	      });
	    }
	  },

	  /**
	   * @private
	   */
	  _getItemAlign: function () {
	    var visualMapModel = this.visualMapModel;
	    var modelOption = visualMapModel.option;

	    if (modelOption.orient === 'vertical') {
	      return helper.getItemAlign(visualMapModel, this.api, visualMapModel.itemSize);
	    } else {
	      // horizontal, most case left unless specifying right.
	      var align = modelOption.align;

	      if (!align || align === 'auto') {
	        align = 'left';
	      }

	      return align;
	    }
	  },

	  /**
	   * @private
	   */
	  _renderEndsText: function (group, text, itemSize, showLabel, itemAlign) {
	    if (!text) {
	      return;
	    }

	    var itemGroup = new graphic.Group();
	    var textStyleModel = this.visualMapModel.textStyleModel;
	    itemGroup.add(new graphic.Text({
	      style: {
	        x: showLabel ? itemAlign === 'right' ? itemSize[0] : 0 : itemSize[0] / 2,
	        y: itemSize[1] / 2,
	        textVerticalAlign: 'middle',
	        textAlign: showLabel ? itemAlign : 'center',
	        text: text,
	        textFont: textStyleModel.getFont(),
	        textFill: textStyleModel.getTextColor()
	      }
	    }));
	    group.add(itemGroup);
	  },

	  /**
	   * @private
	   * @return {Object} {peiceList, endsText} The order is the same as screen pixel order.
	   */
	  _getViewData: function () {
	    var visualMapModel = this.visualMapModel;
	    var viewPieceList = zrUtil.map(visualMapModel.getPieceList(), function (piece, index) {
	      return {
	        piece: piece,
	        indexInModelPieceList: index
	      };
	    });
	    var endsText = visualMapModel.get('text'); // Consider orient and inverse.

	    var orient = visualMapModel.get('orient');
	    var inverse = visualMapModel.get('inverse'); // Order of model pieceList is always [low, ..., high]

	    if (orient === 'horizontal' ? inverse : !inverse) {
	      viewPieceList.reverse();
	    } // Origin order of endsText is [high, low]
	    else if (endsText) {
	        endsText = endsText.slice().reverse();
	      }

	    return {
	      viewPieceList: viewPieceList,
	      endsText: endsText
	    };
	  },

	  /**
	   * @private
	   */
	  _createItemSymbol: function (group, representValue, shapeParam) {
	    group.add(createSymbol(this.getControllerVisual(representValue, 'symbol'), shapeParam[0], shapeParam[1], shapeParam[2], shapeParam[3], this.getControllerVisual(representValue, 'color')));
	  },

	  /**
	   * @private
	   */
	  _onItemClick: function (piece) {
	    var visualMapModel = this.visualMapModel;
	    var option = visualMapModel.option;
	    var selected = zrUtil.clone(option.selected);
	    var newKey = visualMapModel.getSelectedMapKey(piece);

	    if (option.selectedMode === 'single') {
	      selected[newKey] = true;
	      zrUtil.each(selected, function (o, key) {
	        selected[key] = key === newKey;
	      });
	    } else {
	      selected[newKey] = !selected[newKey];
	    }

	    this.api.dispatchAction({
	      type: 'selectDataRange',
	      from: this.uid,
	      visualMapId: this.visualMapModel.id,
	      selected: selected
	    });
	  }
	});
	var _default = PiecewiseVisualMapView;
	module.exports = _default;

/***/ }),
/* 389 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(390);

	__webpack_require__(391);

	__webpack_require__(394);

	__webpack_require__(395);

	__webpack_require__(396);

	__webpack_require__(397);

	__webpack_require__(398);

	__webpack_require__(402);

	__webpack_require__(403);

/***/ }),
/* 390 */
/***/ (function(module, exports, __webpack_require__) {

	var Component = __webpack_require__(260);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	Component.registerSubTypeDefaulter('dataZoom', function () {
	  // Default 'slider' when no type specified.
	  return 'slider';
	});

/***/ }),
/* 391 */
/***/ (function(module, exports, __webpack_require__) {

	var _config = __webpack_require__(177);

	var __DEV__ = _config.__DEV__;

	var echarts = __webpack_require__(176);

	var zrUtil = __webpack_require__(181);

	var env = __webpack_require__(180);

	var modelUtil = __webpack_require__(219);

	var helper = __webpack_require__(392);

	var AxisProxy = __webpack_require__(393);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var each = zrUtil.each;
	var eachAxisDim = helper.eachAxisDim;
	var DataZoomModel = echarts.extendComponentModel({
	  type: 'dataZoom',
	  dependencies: ['xAxis', 'yAxis', 'zAxis', 'radiusAxis', 'angleAxis', 'singleAxis', 'series'],

	  /**
	   * @protected
	   */
	  defaultOption: {
	    zlevel: 0,
	    z: 4,
	    // Higher than normal component (z: 2).
	    orient: null,
	    // Default auto by axisIndex. Possible value: 'horizontal', 'vertical'.
	    xAxisIndex: null,
	    // Default the first horizontal category axis.
	    yAxisIndex: null,
	    // Default the first vertical category axis.
	    filterMode: 'filter',
	    // Possible values: 'filter' or 'empty' or 'weakFilter'.
	    // 'filter': data items which are out of window will be removed. This option is
	    //          applicable when filtering outliers. For each data item, it will be
	    //          filtered if one of the relevant dimensions is out of the window.
	    // 'weakFilter': data items which are out of window will be removed. This option
	    //          is applicable when filtering outliers. For each data item, it will be
	    //          filtered only if all  of the relevant dimensions are out of the same
	    //          side of the window.
	    // 'empty': data items which are out of window will be set to empty.
	    //          This option is applicable when user should not neglect
	    //          that there are some data items out of window.
	    // 'none': Do not filter.
	    // Taking line chart as an example, line will be broken in
	    // the filtered points when filterModel is set to 'empty', but
	    // be connected when set to 'filter'.
	    throttle: null,
	    // Dispatch action by the fixed rate, avoid frequency.
	    // default 100. Do not throttle when use null/undefined.
	    // If animation === true and animationDurationUpdate > 0,
	    // default value is 100, otherwise 20.
	    start: 0,
	    // Start percent. 0 ~ 100
	    end: 100,
	    // End percent. 0 ~ 100
	    startValue: null,
	    // Start value. If startValue specified, start is ignored.
	    endValue: null,
	    // End value. If endValue specified, end is ignored.
	    minSpan: null,
	    // 0 ~ 100
	    maxSpan: null,
	    // 0 ~ 100
	    minValueSpan: null,
	    // The range of dataZoom can not be smaller than that.
	    maxValueSpan: null,
	    // The range of dataZoom can not be larger than that.
	    rangeMode: null // Array, can be 'value' or 'percent'.

	  },

	  /**
	   * @override
	   */
	  init: function (option, parentModel, ecModel) {
	    /**
	     * key like x_0, y_1
	     * @private
	     * @type {Object}
	     */
	    this._dataIntervalByAxis = {};
	    /**
	     * @private
	     */

	    this._dataInfo = {};
	    /**
	     * key like x_0, y_1
	     * @private
	     */

	    this._axisProxies = {};
	    /**
	     * @readOnly
	     */

	    this.textStyleModel;
	    /**
	     * @private
	     */

	    this._autoThrottle = true;
	    /**
	     * 'percent' or 'value'
	     * @private
	     */

	    this._rangePropMode = ['percent', 'percent'];
	    var rawOption = retrieveRaw(option);
	    this.mergeDefaultAndTheme(option, ecModel);
	    this.doInit(rawOption);
	  },

	  /**
	   * @override
	   */
	  mergeOption: function (newOption) {
	    var rawOption = retrieveRaw(newOption); //FIX #2591

	    zrUtil.merge(this.option, newOption, true);
	    this.doInit(rawOption);
	  },

	  /**
	   * @protected
	   */
	  doInit: function (rawOption) {
	    var thisOption = this.option; // Disable realtime view update if canvas is not supported.

	    if (!env.canvasSupported) {
	      thisOption.realtime = false;
	    }

	    this._setDefaultThrottle(rawOption);

	    updateRangeUse(this, rawOption);
	    each([['start', 'startValue'], ['end', 'endValue']], function (names, index) {
	      // start/end has higher priority over startValue/endValue if they
	      // both set, but we should make chart.setOption({endValue: 1000})
	      // effective, rather than chart.setOption({endValue: 1000, end: null}).
	      if (this._rangePropMode[index] === 'value') {
	        thisOption[names[0]] = null;
	      } // Otherwise do nothing and use the merge result.

	    }, this);
	    this.textStyleModel = this.getModel('textStyle');

	    this._resetTarget();

	    this._giveAxisProxies();
	  },

	  /**
	   * @private
	   */
	  _giveAxisProxies: function () {
	    var axisProxies = this._axisProxies;
	    this.eachTargetAxis(function (dimNames, axisIndex, dataZoomModel, ecModel) {
	      var axisModel = this.dependentModels[dimNames.axis][axisIndex]; // If exists, share axisProxy with other dataZoomModels.

	      var axisProxy = axisModel.__dzAxisProxy || ( // Use the first dataZoomModel as the main model of axisProxy.
	      axisModel.__dzAxisProxy = new AxisProxy(dimNames.name, axisIndex, this, ecModel)); // FIXME
	      // dispose __dzAxisProxy

	      axisProxies[dimNames.name + '_' + axisIndex] = axisProxy;
	    }, this);
	  },

	  /**
	   * @private
	   */
	  _resetTarget: function () {
	    var thisOption = this.option;

	    var autoMode = this._judgeAutoMode();

	    eachAxisDim(function (dimNames) {
	      var axisIndexName = dimNames.axisIndex;
	      thisOption[axisIndexName] = modelUtil.normalizeToArray(thisOption[axisIndexName]);
	    }, this);

	    if (autoMode === 'axisIndex') {
	      this._autoSetAxisIndex();
	    } else if (autoMode === 'orient') {
	      this._autoSetOrient();
	    }
	  },

	  /**
	   * @private
	   */
	  _judgeAutoMode: function () {
	    // Auto set only works for setOption at the first time.
	    // The following is user's reponsibility. So using merged
	    // option is OK.
	    var thisOption = this.option;
	    var hasIndexSpecified = false;
	    eachAxisDim(function (dimNames) {
	      // When user set axisIndex as a empty array, we think that user specify axisIndex
	      // but do not want use auto mode. Because empty array may be encountered when
	      // some error occured.
	      if (thisOption[dimNames.axisIndex] != null) {
	        hasIndexSpecified = true;
	      }
	    }, this);
	    var orient = thisOption.orient;

	    if (orient == null && hasIndexSpecified) {
	      return 'orient';
	    } else if (!hasIndexSpecified) {
	      if (orient == null) {
	        thisOption.orient = 'horizontal';
	      }

	      return 'axisIndex';
	    }
	  },

	  /**
	   * @private
	   */
	  _autoSetAxisIndex: function () {
	    var autoAxisIndex = true;
	    var orient = this.get('orient', true);
	    var thisOption = this.option;
	    var dependentModels = this.dependentModels;

	    if (autoAxisIndex) {
	      // Find axis that parallel to dataZoom as default.
	      var dimName = orient === 'vertical' ? 'y' : 'x';

	      if (dependentModels[dimName + 'Axis'].length) {
	        thisOption[dimName + 'AxisIndex'] = [0];
	        autoAxisIndex = false;
	      } else {
	        each(dependentModels.singleAxis, function (singleAxisModel) {
	          if (autoAxisIndex && singleAxisModel.get('orient', true) === orient) {
	            thisOption.singleAxisIndex = [singleAxisModel.componentIndex];
	            autoAxisIndex = false;
	          }
	        });
	      }
	    }

	    if (autoAxisIndex) {
	      // Find the first category axis as default. (consider polar)
	      eachAxisDim(function (dimNames) {
	        if (!autoAxisIndex) {
	          return;
	        }

	        var axisIndices = [];
	        var axisModels = this.dependentModels[dimNames.axis];

	        if (axisModels.length && !axisIndices.length) {
	          for (var i = 0, len = axisModels.length; i < len; i++) {
	            if (axisModels[i].get('type') === 'category') {
	              axisIndices.push(i);
	            }
	          }
	        }

	        thisOption[dimNames.axisIndex] = axisIndices;

	        if (axisIndices.length) {
	          autoAxisIndex = false;
	        }
	      }, this);
	    }

	    if (autoAxisIndex) {
	      // FIXME
	      // 这里是兼容ec2的写法（没指定xAxisIndex和yAxisIndex时把scatter和双数值轴折柱纳入dataZoom控制），
	      // 但是实际是否需要Grid.js#getScaleByOption来判断（考虑time，log等axis type）？
	      // If both dataZoom.xAxisIndex and dataZoom.yAxisIndex is not specified,
	      // dataZoom component auto adopts series that reference to
	      // both xAxis and yAxis which type is 'value'.
	      this.ecModel.eachSeries(function (seriesModel) {
	        if (this._isSeriesHasAllAxesTypeOf(seriesModel, 'value')) {
	          eachAxisDim(function (dimNames) {
	            var axisIndices = thisOption[dimNames.axisIndex];
	            var axisIndex = seriesModel.get(dimNames.axisIndex);
	            var axisId = seriesModel.get(dimNames.axisId);
	            var axisModel = seriesModel.ecModel.queryComponents({
	              mainType: dimNames.axis,
	              index: axisIndex,
	              id: axisId
	            })[0];
	            axisIndex = axisModel.componentIndex;

	            if (zrUtil.indexOf(axisIndices, axisIndex) < 0) {
	              axisIndices.push(axisIndex);
	            }
	          });
	        }
	      }, this);
	    }
	  },

	  /**
	   * @private
	   */
	  _autoSetOrient: function () {
	    var dim; // Find the first axis

	    this.eachTargetAxis(function (dimNames) {
	      !dim && (dim = dimNames.name);
	    }, this);
	    this.option.orient = dim === 'y' ? 'vertical' : 'horizontal';
	  },

	  /**
	   * @private
	   */
	  _isSeriesHasAllAxesTypeOf: function (seriesModel, axisType) {
	    // FIXME
	    // 需要series的xAxisIndex和yAxisIndex都首先自动设置上。
	    // 例如series.type === scatter时。
	    var is = true;
	    eachAxisDim(function (dimNames) {
	      var seriesAxisIndex = seriesModel.get(dimNames.axisIndex);
	      var axisModel = this.dependentModels[dimNames.axis][seriesAxisIndex];

	      if (!axisModel || axisModel.get('type') !== axisType) {
	        is = false;
	      }
	    }, this);
	    return is;
	  },

	  /**
	   * @private
	   */
	  _setDefaultThrottle: function (rawOption) {
	    // When first time user set throttle, auto throttle ends.
	    if (rawOption.hasOwnProperty('throttle')) {
	      this._autoThrottle = false;
	    }

	    if (this._autoThrottle) {
	      var globalOption = this.ecModel.option;
	      this.option.throttle = globalOption.animation && globalOption.animationDurationUpdate > 0 ? 100 : 20;
	    }
	  },

	  /**
	   * @public
	   */
	  getFirstTargetAxisModel: function () {
	    var firstAxisModel;
	    eachAxisDim(function (dimNames) {
	      if (firstAxisModel == null) {
	        var indices = this.get(dimNames.axisIndex);

	        if (indices.length) {
	          firstAxisModel = this.dependentModels[dimNames.axis][indices[0]];
	        }
	      }
	    }, this);
	    return firstAxisModel;
	  },

	  /**
	   * @public
	   * @param {Function} callback param: axisModel, dimNames, axisIndex, dataZoomModel, ecModel
	   */
	  eachTargetAxis: function (callback, context) {
	    var ecModel = this.ecModel;
	    eachAxisDim(function (dimNames) {
	      each(this.get(dimNames.axisIndex), function (axisIndex) {
	        callback.call(context, dimNames, axisIndex, this, ecModel);
	      }, this);
	    }, this);
	  },

	  /**
	   * @param {string} dimName
	   * @param {number} axisIndex
	   * @return {module:echarts/component/dataZoom/AxisProxy} If not found, return null/undefined.
	   */
	  getAxisProxy: function (dimName, axisIndex) {
	    return this._axisProxies[dimName + '_' + axisIndex];
	  },

	  /**
	   * @param {string} dimName
	   * @param {number} axisIndex
	   * @return {module:echarts/model/Model} If not found, return null/undefined.
	   */
	  getAxisModel: function (dimName, axisIndex) {
	    var axisProxy = this.getAxisProxy(dimName, axisIndex);
	    return axisProxy && axisProxy.getAxisModel();
	  },

	  /**
	   * If not specified, set to undefined.
	   *
	   * @public
	   * @param {Object} opt
	   * @param {number} [opt.start]
	   * @param {number} [opt.end]
	   * @param {number} [opt.startValue]
	   * @param {number} [opt.endValue]
	   * @param {boolean} [ignoreUpdateRangeUsg=false]
	   */
	  setRawRange: function (opt, ignoreUpdateRangeUsg) {
	    var option = this.option;
	    each([['start', 'startValue'], ['end', 'endValue']], function (names) {
	      // If only one of 'start' and 'startValue' is not null/undefined, the other
	      // should be cleared, which enable clear the option.
	      // If both of them are not set, keep option with the original value, which
	      // enable use only set start but not set end when calling `dispatchAction`.
	      // The same as 'end' and 'endValue'.
	      if (opt[names[0]] != null || opt[names[1]] != null) {
	        option[names[0]] = opt[names[0]];
	        option[names[1]] = opt[names[1]];
	      }
	    }, this);
	    !ignoreUpdateRangeUsg && updateRangeUse(this, opt);
	  },

	  /**
	   * @public
	   * @return {Array.<number>} [startPercent, endPercent]
	   */
	  getPercentRange: function () {
	    var axisProxy = this.findRepresentativeAxisProxy();

	    if (axisProxy) {
	      return axisProxy.getDataPercentWindow();
	    }
	  },

	  /**
	   * @public
	   * For example, chart.getModel().getComponent('dataZoom').getValueRange('y', 0);
	   *
	   * @param {string} [axisDimName]
	   * @param {number} [axisIndex]
	   * @return {Array.<number>} [startValue, endValue] value can only be '-' or finite number.
	   */
	  getValueRange: function (axisDimName, axisIndex) {
	    if (axisDimName == null && axisIndex == null) {
	      var axisProxy = this.findRepresentativeAxisProxy();

	      if (axisProxy) {
	        return axisProxy.getDataValueWindow();
	      }
	    } else {
	      return this.getAxisProxy(axisDimName, axisIndex).getDataValueWindow();
	    }
	  },

	  /**
	   * @public
	   * @param {module:echarts/model/Model} [axisModel] If axisModel given, find axisProxy
	   *      corresponding to the axisModel
	   * @return {module:echarts/component/dataZoom/AxisProxy}
	   */
	  findRepresentativeAxisProxy: function (axisModel) {
	    if (axisModel) {
	      return axisModel.__dzAxisProxy;
	    } // Find the first hosted axisProxy


	    var axisProxies = this._axisProxies;

	    for (var key in axisProxies) {
	      if (axisProxies.hasOwnProperty(key) && axisProxies[key].hostedBy(this)) {
	        return axisProxies[key];
	      }
	    } // If no hosted axis find not hosted axisProxy.
	    // Consider this case: dataZoomModel1 and dataZoomModel2 control the same axis,
	    // and the option.start or option.end settings are different. The percentRange
	    // should follow axisProxy.
	    // (We encounter this problem in toolbox data zoom.)


	    for (var key in axisProxies) {
	      if (axisProxies.hasOwnProperty(key) && !axisProxies[key].hostedBy(this)) {
	        return axisProxies[key];
	      }
	    }
	  },

	  /**
	   * @return {Array.<string>}
	   */
	  getRangePropMode: function () {
	    return this._rangePropMode.slice();
	  }
	});

	function retrieveRaw(option) {
	  var ret = {};
	  each(['start', 'end', 'startValue', 'endValue', 'throttle'], function (name) {
	    option.hasOwnProperty(name) && (ret[name] = option[name]);
	  });
	  return ret;
	}

	function updateRangeUse(dataZoomModel, rawOption) {
	  var rangePropMode = dataZoomModel._rangePropMode;
	  var rangeModeInOption = dataZoomModel.get('rangeMode');
	  each([['start', 'startValue'], ['end', 'endValue']], function (names, index) {
	    var percentSpecified = rawOption[names[0]] != null;
	    var valueSpecified = rawOption[names[1]] != null;

	    if (percentSpecified && !valueSpecified) {
	      rangePropMode[index] = 'percent';
	    } else if (!percentSpecified && valueSpecified) {
	      rangePropMode[index] = 'value';
	    } else if (rangeModeInOption) {
	      rangePropMode[index] = rangeModeInOption[index];
	    } else if (percentSpecified) {
	      // percentSpecified && valueSpecified
	      rangePropMode[index] = 'percent';
	    } // else remain its original setting.

	  });
	}

	var _default = DataZoomModel;
	module.exports = _default;

/***/ }),
/* 392 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(181);

	var formatUtil = __webpack_require__(264);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var AXIS_DIMS = ['x', 'y', 'z', 'radius', 'angle', 'single']; // Supported coords.

	var COORDS = ['cartesian2d', 'polar', 'singleAxis'];
	/**
	 * @param {string} coordType
	 * @return {boolean}
	 */

	function isCoordSupported(coordType) {
	  return zrUtil.indexOf(COORDS, coordType) >= 0;
	}
	/**
	 * Create "each" method to iterate names.
	 *
	 * @pubilc
	 * @param  {Array.<string>} names
	 * @param  {Array.<string>=} attrs
	 * @return {Function}
	 */


	function createNameEach(names, attrs) {
	  names = names.slice();
	  var capitalNames = zrUtil.map(names, formatUtil.capitalFirst);
	  attrs = (attrs || []).slice();
	  var capitalAttrs = zrUtil.map(attrs, formatUtil.capitalFirst);
	  return function (callback, context) {
	    zrUtil.each(names, function (name, index) {
	      var nameObj = {
	        name: name,
	        capital: capitalNames[index]
	      };

	      for (var j = 0; j < attrs.length; j++) {
	        nameObj[attrs[j]] = name + capitalAttrs[j];
	      }

	      callback.call(context, nameObj);
	    });
	  };
	}
	/**
	 * Iterate each dimension name.
	 *
	 * @public
	 * @param {Function} callback The parameter is like:
	 *                            {
	 *                                name: 'angle',
	 *                                capital: 'Angle',
	 *                                axis: 'angleAxis',
	 *                                axisIndex: 'angleAixs',
	 *                                index: 'angleIndex'
	 *                            }
	 * @param {Object} context
	 */


	var eachAxisDim = createNameEach(AXIS_DIMS, ['axisIndex', 'axis', 'index', 'id']);
	/**
	 * If tow dataZoomModels has the same axis controlled, we say that they are 'linked'.
	 * dataZoomModels and 'links' make up one or more graphics.
	 * This function finds the graphic where the source dataZoomModel is in.
	 *
	 * @public
	 * @param {Function} forEachNode Node iterator.
	 * @param {Function} forEachEdgeType edgeType iterator
	 * @param {Function} edgeIdGetter Giving node and edgeType, return an array of edge id.
	 * @return {Function} Input: sourceNode, Output: Like {nodes: [], dims: {}}
	 */

	function createLinkedNodesFinder(forEachNode, forEachEdgeType, edgeIdGetter) {
	  return function (sourceNode) {
	    var result = {
	      nodes: [],
	      records: {} // key: edgeType.name, value: Object (key: edge id, value: boolean).

	    };
	    forEachEdgeType(function (edgeType) {
	      result.records[edgeType.name] = {};
	    });

	    if (!sourceNode) {
	      return result;
	    }

	    absorb(sourceNode, result);
	    var existsLink;

	    do {
	      existsLink = false;
	      forEachNode(processSingleNode);
	    } while (existsLink);

	    function processSingleNode(node) {
	      if (!isNodeAbsorded(node, result) && isLinked(node, result)) {
	        absorb(node, result);
	        existsLink = true;
	      }
	    }

	    return result;
	  };

	  function isNodeAbsorded(node, result) {
	    return zrUtil.indexOf(result.nodes, node) >= 0;
	  }

	  function isLinked(node, result) {
	    var hasLink = false;
	    forEachEdgeType(function (edgeType) {
	      zrUtil.each(edgeIdGetter(node, edgeType) || [], function (edgeId) {
	        result.records[edgeType.name][edgeId] && (hasLink = true);
	      });
	    });
	    return hasLink;
	  }

	  function absorb(node, result) {
	    result.nodes.push(node);
	    forEachEdgeType(function (edgeType) {
	      zrUtil.each(edgeIdGetter(node, edgeType) || [], function (edgeId) {
	        result.records[edgeType.name][edgeId] = true;
	      });
	    });
	  }
	}

	exports.isCoordSupported = isCoordSupported;
	exports.createNameEach = createNameEach;
	exports.eachAxisDim = eachAxisDim;
	exports.createLinkedNodesFinder = createLinkedNodesFinder;

/***/ }),
/* 393 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(181);

	var numberUtil = __webpack_require__(263);

	var helper = __webpack_require__(392);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var each = zrUtil.each;
	var asc = numberUtil.asc;
	/**
	 * Operate single axis.
	 * One axis can only operated by one axis operator.
	 * Different dataZoomModels may be defined to operate the same axis.
	 * (i.e. 'inside' data zoom and 'slider' data zoom components)
	 * So dataZoomModels share one axisProxy in that case.
	 *
	 * @class
	 */

	var AxisProxy = function (dimName, axisIndex, dataZoomModel, ecModel) {
	  /**
	   * @private
	   * @type {string}
	   */
	  this._dimName = dimName;
	  /**
	   * @private
	   */

	  this._axisIndex = axisIndex;
	  /**
	   * @private
	   * @type {Array.<number>}
	   */

	  this._valueWindow;
	  /**
	   * @private
	   * @type {Array.<number>}
	   */

	  this._percentWindow;
	  /**
	   * @private
	   * @type {Array.<number>}
	   */

	  this._dataExtent;
	  /**
	   * {minSpan, maxSpan, minValueSpan, maxValueSpan}
	   * @private
	   * @type {Object}
	   */

	  this._minMaxSpan;
	  /**
	   * @readOnly
	   * @type {module: echarts/model/Global}
	   */

	  this.ecModel = ecModel;
	  /**
	   * @private
	   * @type {module: echarts/component/dataZoom/DataZoomModel}
	   */

	  this._dataZoomModel = dataZoomModel; // /**
	  //  * @readOnly
	  //  * @private
	  //  */
	  // this.hasSeriesStacked;
	};

	AxisProxy.prototype = {
	  constructor: AxisProxy,

	  /**
	   * Whether the axisProxy is hosted by dataZoomModel.
	   *
	   * @public
	   * @param {module: echarts/component/dataZoom/DataZoomModel} dataZoomModel
	   * @return {boolean}
	   */
	  hostedBy: function (dataZoomModel) {
	    return this._dataZoomModel === dataZoomModel;
	  },

	  /**
	   * @return {Array.<number>} Value can only be NaN or finite value.
	   */
	  getDataValueWindow: function () {
	    return this._valueWindow.slice();
	  },

	  /**
	   * @return {Array.<number>}
	   */
	  getDataPercentWindow: function () {
	    return this._percentWindow.slice();
	  },

	  /**
	   * @public
	   * @param {number} axisIndex
	   * @return {Array} seriesModels
	   */
	  getTargetSeriesModels: function () {
	    var seriesModels = [];
	    var ecModel = this.ecModel;
	    ecModel.eachSeries(function (seriesModel) {
	      if (helper.isCoordSupported(seriesModel.get('coordinateSystem'))) {
	        var dimName = this._dimName;
	        var axisModel = ecModel.queryComponents({
	          mainType: dimName + 'Axis',
	          index: seriesModel.get(dimName + 'AxisIndex'),
	          id: seriesModel.get(dimName + 'AxisId')
	        })[0];

	        if (this._axisIndex === (axisModel && axisModel.componentIndex)) {
	          seriesModels.push(seriesModel);
	        }
	      }
	    }, this);
	    return seriesModels;
	  },
	  getAxisModel: function () {
	    return this.ecModel.getComponent(this._dimName + 'Axis', this._axisIndex);
	  },
	  getOtherAxisModel: function () {
	    var axisDim = this._dimName;
	    var ecModel = this.ecModel;
	    var axisModel = this.getAxisModel();
	    var isCartesian = axisDim === 'x' || axisDim === 'y';
	    var otherAxisDim;
	    var coordSysIndexName;

	    if (isCartesian) {
	      coordSysIndexName = 'gridIndex';
	      otherAxisDim = axisDim === 'x' ? 'y' : 'x';
	    } else {
	      coordSysIndexName = 'polarIndex';
	      otherAxisDim = axisDim === 'angle' ? 'radius' : 'angle';
	    }

	    var foundOtherAxisModel;
	    ecModel.eachComponent(otherAxisDim + 'Axis', function (otherAxisModel) {
	      if ((otherAxisModel.get(coordSysIndexName) || 0) === (axisModel.get(coordSysIndexName) || 0)) {
	        foundOtherAxisModel = otherAxisModel;
	      }
	    });
	    return foundOtherAxisModel;
	  },
	  getMinMaxSpan: function () {
	    return zrUtil.clone(this._minMaxSpan);
	  },

	  /**
	   * Only calculate by given range and this._dataExtent, do not change anything.
	   *
	   * @param {Object} opt
	   * @param {number} [opt.start]
	   * @param {number} [opt.end]
	   * @param {number} [opt.startValue]
	   * @param {number} [opt.endValue]
	   */
	  calculateDataWindow: function (opt) {
	    var dataExtent = this._dataExtent;
	    var axisModel = this.getAxisModel();
	    var scale = axisModel.axis.scale;

	    var rangePropMode = this._dataZoomModel.getRangePropMode();

	    var percentExtent = [0, 100];
	    var percentWindow = [opt.start, opt.end];
	    var valueWindow = [];
	    each(['startValue', 'endValue'], function (prop) {
	      valueWindow.push(opt[prop] != null ? scale.parse(opt[prop]) : null);
	    }); // Normalize bound.

	    each([0, 1], function (idx) {
	      var boundValue = valueWindow[idx];
	      var boundPercent = percentWindow[idx]; // Notice: dataZoom is based either on `percentProp` ('start', 'end') or
	      // on `valueProp` ('startValue', 'endValue'). The former one is suitable
	      // for cases that a dataZoom component controls multiple axes with different
	      // unit or extent, and the latter one is suitable for accurate zoom by pixel
	      // (e.g., in dataZoomSelect). `valueProp` can be calculated from `percentProp`,
	      // but it is awkward that `percentProp` can not be obtained from `valueProp`
	      // accurately (because all of values that are overflow the `dataExtent` will
	      // be calculated to percent '100%'). So we have to use
	      // `dataZoom.getRangePropMode()` to mark which prop is used.
	      // `rangePropMode` is updated only when setOption or dispatchAction, otherwise
	      // it remains its original value.

	      if (rangePropMode[idx] === 'percent') {
	        if (boundPercent == null) {
	          boundPercent = percentExtent[idx];
	        } // Use scale.parse to math round for category or time axis.


	        boundValue = scale.parse(numberUtil.linearMap(boundPercent, percentExtent, dataExtent, true));
	      } else {
	        // Calculating `percent` from `value` may be not accurate, because
	        // This calculation can not be inversed, because all of values that
	        // are overflow the `dataExtent` will be calculated to percent '100%'
	        boundPercent = numberUtil.linearMap(boundValue, dataExtent, percentExtent, true);
	      } // valueWindow[idx] = round(boundValue);
	      // percentWindow[idx] = round(boundPercent);


	      valueWindow[idx] = boundValue;
	      percentWindow[idx] = boundPercent;
	    });
	    return {
	      valueWindow: asc(valueWindow),
	      percentWindow: asc(percentWindow)
	    };
	  },

	  /**
	   * Notice: reset should not be called before series.restoreData() called,
	   * so it is recommanded to be called in "process stage" but not "model init
	   * stage".
	   *
	   * @param {module: echarts/component/dataZoom/DataZoomModel} dataZoomModel
	   */
	  reset: function (dataZoomModel) {
	    if (dataZoomModel !== this._dataZoomModel) {
	      return;
	    }

	    var targetSeries = this.getTargetSeriesModels(); // Culculate data window and data extent, and record them.

	    this._dataExtent = calculateDataExtent(this, this._dimName, targetSeries); // this.hasSeriesStacked = false;
	    // each(targetSeries, function (series) {
	    // var data = series.getData();
	    // var dataDim = data.mapDimension(this._dimName);
	    // var stackedDimension = data.getCalculationInfo('stackedDimension');
	    // if (stackedDimension && stackedDimension === dataDim) {
	    // this.hasSeriesStacked = true;
	    // }
	    // }, this);

	    var dataWindow = this.calculateDataWindow(dataZoomModel.option);
	    this._valueWindow = dataWindow.valueWindow;
	    this._percentWindow = dataWindow.percentWindow;
	    setMinMaxSpan(this); // Update axis setting then.

	    setAxisModel(this);
	  },

	  /**
	   * @param {module: echarts/component/dataZoom/DataZoomModel} dataZoomModel
	   */
	  restore: function (dataZoomModel) {
	    if (dataZoomModel !== this._dataZoomModel) {
	      return;
	    }

	    this._valueWindow = this._percentWindow = null;
	    setAxisModel(this, true);
	  },

	  /**
	   * @param {module: echarts/component/dataZoom/DataZoomModel} dataZoomModel
	   */
	  filterData: function (dataZoomModel, api) {
	    if (dataZoomModel !== this._dataZoomModel) {
	      return;
	    }

	    var axisDim = this._dimName;
	    var seriesModels = this.getTargetSeriesModels();
	    var filterMode = dataZoomModel.get('filterMode');
	    var valueWindow = this._valueWindow;

	    if (filterMode === 'none') {
	      return;
	    } // FIXME
	    // Toolbox may has dataZoom injected. And if there are stacked bar chart
	    // with NaN data, NaN will be filtered and stack will be wrong.
	    // So we need to force the mode to be set empty.
	    // In fect, it is not a big deal that do not support filterMode-'filter'
	    // when using toolbox#dataZoom, utill tooltip#dataZoom support "single axis
	    // selection" some day, which might need "adapt to data extent on the
	    // otherAxis", which is disabled by filterMode-'empty'.
	    // But currently, stack has been fixed to based on value but not index,
	    // so this is not an issue any more.
	    // var otherAxisModel = this.getOtherAxisModel();
	    // if (dataZoomModel.get('$fromToolbox')
	    //     && otherAxisModel
	    //     && otherAxisModel.hasSeriesStacked
	    // ) {
	    //     filterMode = 'empty';
	    // }
	    // TODO
	    // filterMode 'weakFilter' and 'empty' is not optimized for huge data yet.
	    // Process series data


	    each(seriesModels, function (seriesModel) {
	      var seriesData = seriesModel.getData();
	      var dataDims = seriesData.mapDimension(axisDim, true);

	      if (filterMode === 'weakFilter') {
	        seriesData.filterSelf(function (dataIndex) {
	          var leftOut;
	          var rightOut;
	          var hasValue;

	          for (var i = 0; i < dataDims.length; i++) {
	            var value = seriesData.get(dataDims[i], dataIndex);
	            var thisHasValue = !isNaN(value);
	            var thisLeftOut = value < valueWindow[0];
	            var thisRightOut = value > valueWindow[1];

	            if (thisHasValue && !thisLeftOut && !thisRightOut) {
	              return true;
	            }

	            thisHasValue && (hasValue = true);
	            thisLeftOut && (leftOut = true);
	            thisRightOut && (rightOut = true);
	          } // If both left out and right out, do not filter.


	          return hasValue && leftOut && rightOut;
	        });
	      } else {
	        each(dataDims, function (dim) {
	          if (filterMode === 'empty') {
	            seriesModel.setData(seriesData.map(dim, function (value) {
	              return !isInWindow(value) ? NaN : value;
	            }));
	          } else {
	            var range = {};
	            range[dim] = valueWindow; // console.time('select');

	            seriesData.selectRange(range); // console.timeEnd('select');
	          }
	        });
	      }

	      each(dataDims, function (dim) {
	        seriesData.setApproximateExtent(valueWindow, dim);
	      });
	    });

	    function isInWindow(value) {
	      return value >= valueWindow[0] && value <= valueWindow[1];
	    }
	  }
	};

	function calculateDataExtent(axisProxy, axisDim, seriesModels) {
	  var dataExtent = [Infinity, -Infinity];
	  each(seriesModels, function (seriesModel) {
	    var seriesData = seriesModel.getData();

	    if (seriesData) {
	      each(seriesData.mapDimension(axisDim, true), function (dim) {
	        var seriesExtent = seriesData.getApproximateExtent(dim);
	        seriesExtent[0] < dataExtent[0] && (dataExtent[0] = seriesExtent[0]);
	        seriesExtent[1] > dataExtent[1] && (dataExtent[1] = seriesExtent[1]);
	      });
	    }
	  });

	  if (dataExtent[1] < dataExtent[0]) {
	    dataExtent = [NaN, NaN];
	  } // It is important to get "consistent" extent when more then one axes is
	  // controlled by a `dataZoom`, otherwise those axes will not be synchronized
	  // when zooming. But it is difficult to know what is "consistent", considering
	  // axes have different type or even different meanings (For example, two
	  // time axes are used to compare data of the same date in different years).
	  // So basically dataZoom just obtains extent by series.data (in category axis
	  // extent can be obtained from axis.data).
	  // Nevertheless, user can set min/max/scale on axes to make extent of axes
	  // consistent.


	  fixExtentByAxis(axisProxy, dataExtent);
	  return dataExtent;
	}

	function fixExtentByAxis(axisProxy, dataExtent) {
	  var axisModel = axisProxy.getAxisModel();
	  var min = axisModel.getMin(true); // For category axis, if min/max/scale are not set, extent is determined
	  // by axis.data by default.

	  var isCategoryAxis = axisModel.get('type') === 'category';
	  var axisDataLen = isCategoryAxis && axisModel.getCategories().length;

	  if (min != null && min !== 'dataMin' && typeof min !== 'function') {
	    dataExtent[0] = min;
	  } else if (isCategoryAxis) {
	    dataExtent[0] = axisDataLen > 0 ? 0 : NaN;
	  }

	  var max = axisModel.getMax(true);

	  if (max != null && max !== 'dataMax' && typeof max !== 'function') {
	    dataExtent[1] = max;
	  } else if (isCategoryAxis) {
	    dataExtent[1] = axisDataLen > 0 ? axisDataLen - 1 : NaN;
	  }

	  if (!axisModel.get('scale', true)) {
	    dataExtent[0] > 0 && (dataExtent[0] = 0);
	    dataExtent[1] < 0 && (dataExtent[1] = 0);
	  } // For value axis, if min/max/scale are not set, we just use the extent obtained
	  // by series data, which may be a little different from the extent calculated by
	  // `axisHelper.getScaleExtent`. But the different just affects the experience a
	  // little when zooming. So it will not be fixed until some users require it strongly.


	  return dataExtent;
	}

	function setAxisModel(axisProxy, isRestore) {
	  var axisModel = axisProxy.getAxisModel();
	  var percentWindow = axisProxy._percentWindow;
	  var valueWindow = axisProxy._valueWindow;

	  if (!percentWindow) {
	    return;
	  } // [0, 500]: arbitrary value, guess axis extent.


	  var precision = numberUtil.getPixelPrecision(valueWindow, [0, 500]);
	  precision = Math.min(precision, 20); // isRestore or isFull

	  var useOrigin = isRestore || percentWindow[0] === 0 && percentWindow[1] === 100;
	  axisModel.setRange(useOrigin ? null : +valueWindow[0].toFixed(precision), useOrigin ? null : +valueWindow[1].toFixed(precision));
	}

	function setMinMaxSpan(axisProxy) {
	  var minMaxSpan = axisProxy._minMaxSpan = {};
	  var dataZoomModel = axisProxy._dataZoomModel;
	  each(['min', 'max'], function (minMax) {
	    minMaxSpan[minMax + 'Span'] = dataZoomModel.get(minMax + 'Span'); // minValueSpan and maxValueSpan has higher priority than minSpan and maxSpan

	    var valueSpan = dataZoomModel.get(minMax + 'ValueSpan');

	    if (valueSpan != null) {
	      minMaxSpan[minMax + 'ValueSpan'] = valueSpan;
	      valueSpan = axisProxy.getAxisModel().axis.scale.parse(valueSpan);

	      if (valueSpan != null) {
	        var dataExtent = axisProxy._dataExtent;
	        minMaxSpan[minMax + 'Span'] = numberUtil.linearMap(dataExtent[0] + valueSpan, dataExtent, [0, 100], true);
	      }
	    }
	  });
	}

	var _default = AxisProxy;
	module.exports = _default;

/***/ }),
/* 394 */
/***/ (function(module, exports, __webpack_require__) {

	var ComponentView = __webpack_require__(282);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var _default = ComponentView.extend({
	  type: 'dataZoom',
	  render: function (dataZoomModel, ecModel, api, payload) {
	    this.dataZoomModel = dataZoomModel;
	    this.ecModel = ecModel;
	    this.api = api;
	  },

	  /**
	   * Find the first target coordinate system.
	   *
	   * @protected
	   * @return {Object} {
	   *                   grid: [
	   *                       {model: coord0, axisModels: [axis1, axis3], coordIndex: 1},
	   *                       {model: coord1, axisModels: [axis0, axis2], coordIndex: 0},
	   *                       ...
	   *                   ],  // cartesians must not be null/undefined.
	   *                   polar: [
	   *                       {model: coord0, axisModels: [axis4], coordIndex: 0},
	   *                       ...
	   *                   ],  // polars must not be null/undefined.
	   *                   singleAxis: [
	   *                       {model: coord0, axisModels: [], coordIndex: 0}
	   *                   ]
	   */
	  getTargetCoordInfo: function () {
	    var dataZoomModel = this.dataZoomModel;
	    var ecModel = this.ecModel;
	    var coordSysLists = {};
	    dataZoomModel.eachTargetAxis(function (dimNames, axisIndex) {
	      var axisModel = ecModel.getComponent(dimNames.axis, axisIndex);

	      if (axisModel) {
	        var coordModel = axisModel.getCoordSysModel();
	        coordModel && save(coordModel, axisModel, coordSysLists[coordModel.mainType] || (coordSysLists[coordModel.mainType] = []), coordModel.componentIndex);
	      }
	    }, this);

	    function save(coordModel, axisModel, store, coordIndex) {
	      var item;

	      for (var i = 0; i < store.length; i++) {
	        if (store[i].model === coordModel) {
	          item = store[i];
	          break;
	        }
	      }

	      if (!item) {
	        store.push(item = {
	          model: coordModel,
	          axisModels: [],
	          coordIndex: coordIndex
	        });
	      }

	      item.axisModels.push(axisModel);
	    }

	    return coordSysLists;
	  }
	});

	module.exports = _default;

/***/ }),
/* 395 */
/***/ (function(module, exports, __webpack_require__) {

	var DataZoomModel = __webpack_require__(391);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var SliderZoomModel = DataZoomModel.extend({
	  type: 'dataZoom.slider',
	  layoutMode: 'box',

	  /**
	   * @protected
	   */
	  defaultOption: {
	    show: true,
	    // ph => placeholder. Using placehoder here because
	    // deault value can only be drived in view stage.
	    right: 'ph',
	    // Default align to grid rect.
	    top: 'ph',
	    // Default align to grid rect.
	    width: 'ph',
	    // Default align to grid rect.
	    height: 'ph',
	    // Default align to grid rect.
	    left: null,
	    // Default align to grid rect.
	    bottom: null,
	    // Default align to grid rect.
	    backgroundColor: 'rgba(47,69,84,0)',
	    // Background of slider zoom component.
	    // dataBackgroundColor: '#ddd',         // Background coor of data shadow and border of box,
	    // highest priority, remain for compatibility of
	    // previous version, but not recommended any more.
	    dataBackground: {
	      lineStyle: {
	        color: '#2f4554',
	        width: 0.5,
	        opacity: 0.3
	      },
	      areaStyle: {
	        color: 'rgba(47,69,84,0.3)',
	        opacity: 0.3
	      }
	    },
	    borderColor: '#ddd',
	    // border color of the box. For compatibility,
	    // if dataBackgroundColor is set, borderColor
	    // is ignored.
	    fillerColor: 'rgba(167,183,204,0.4)',
	    // Color of selected area.
	    // handleColor: 'rgba(89,170,216,0.95)',     // Color of handle.
	    // handleIcon: 'path://M4.9,17.8c0-1.4,4.5-10.5,5.5-12.4c0-0.1,0.6-1.1,0.9-1.1c0.4,0,0.9,1,0.9,1.1c1.1,2.2,5.4,11,5.4,12.4v17.8c0,1.5-0.6,2.1-1.3,2.1H6.1c-0.7,0-1.3-0.6-1.3-2.1V17.8z',
	    handleIcon: 'M8.2,13.6V3.9H6.3v9.7H3.1v14.9h3.3v9.7h1.8v-9.7h3.3V13.6H8.2z M9.7,24.4H4.8v-1.4h4.9V24.4z M9.7,19.1H4.8v-1.4h4.9V19.1z',
	    // Percent of the slider height
	    handleSize: '100%',
	    handleStyle: {
	      color: '#a7b7cc'
	    },
	    labelPrecision: null,
	    labelFormatter: null,
	    showDetail: true,
	    showDataShadow: 'auto',
	    // Default auto decision.
	    realtime: true,
	    zoomLock: false,
	    // Whether disable zoom.
	    textStyle: {
	      color: '#333'
	    }
	  }
	});
	var _default = SliderZoomModel;
	module.exports = _default;

/***/ }),
/* 396 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(181);

	var eventTool = __webpack_require__(215);

	var graphic = __webpack_require__(226);

	var throttle = __webpack_require__(285);

	var DataZoomView = __webpack_require__(394);

	var numberUtil = __webpack_require__(263);

	var layout = __webpack_require__(262);

	var sliderMove = __webpack_require__(383);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var Rect = graphic.Rect;
	var linearMap = numberUtil.linearMap;
	var asc = numberUtil.asc;
	var bind = zrUtil.bind;
	var each = zrUtil.each; // Constants

	var DEFAULT_LOCATION_EDGE_GAP = 7;
	var DEFAULT_FRAME_BORDER_WIDTH = 1;
	var DEFAULT_FILLER_SIZE = 30;
	var HORIZONTAL = 'horizontal';
	var VERTICAL = 'vertical';
	var LABEL_GAP = 5;
	var SHOW_DATA_SHADOW_SERIES_TYPE = ['line', 'bar', 'candlestick', 'scatter'];
	var SliderZoomView = DataZoomView.extend({
	  type: 'dataZoom.slider',
	  init: function (ecModel, api) {
	    /**
	     * @private
	     * @type {Object}
	     */
	    this._displayables = {};
	    /**
	     * @private
	     * @type {string}
	     */

	    this._orient;
	    /**
	     * [0, 100]
	     * @private
	     */

	    this._range;
	    /**
	     * [coord of the first handle, coord of the second handle]
	     * @private
	     */

	    this._handleEnds;
	    /**
	     * [length, thick]
	     * @private
	     * @type {Array.<number>}
	     */

	    this._size;
	    /**
	     * @private
	     * @type {number}
	     */

	    this._handleWidth;
	    /**
	     * @private
	     * @type {number}
	     */

	    this._handleHeight;
	    /**
	     * @private
	     */

	    this._location;
	    /**
	     * @private
	     */

	    this._dragging;
	    /**
	     * @private
	     */

	    this._dataShadowInfo;
	    this.api = api;
	  },

	  /**
	   * @override
	   */
	  render: function (dataZoomModel, ecModel, api, payload) {
	    SliderZoomView.superApply(this, 'render', arguments);
	    throttle.createOrUpdate(this, '_dispatchZoomAction', this.dataZoomModel.get('throttle'), 'fixRate');
	    this._orient = dataZoomModel.get('orient');

	    if (this.dataZoomModel.get('show') === false) {
	      this.group.removeAll();
	      return;
	    } // Notice: this._resetInterval() should not be executed when payload.type
	    // is 'dataZoom', origin this._range should be maintained, otherwise 'pan'
	    // or 'zoom' info will be missed because of 'throttle' of this.dispatchAction,


	    if (!payload || payload.type !== 'dataZoom' || payload.from !== this.uid) {
	      this._buildView();
	    }

	    this._updateView();
	  },

	  /**
	   * @override
	   */
	  remove: function () {
	    SliderZoomView.superApply(this, 'remove', arguments);
	    throttle.clear(this, '_dispatchZoomAction');
	  },

	  /**
	   * @override
	   */
	  dispose: function () {
	    SliderZoomView.superApply(this, 'dispose', arguments);
	    throttle.clear(this, '_dispatchZoomAction');
	  },
	  _buildView: function () {
	    var thisGroup = this.group;
	    thisGroup.removeAll();

	    this._resetLocation();

	    this._resetInterval();

	    var barGroup = this._displayables.barGroup = new graphic.Group();

	    this._renderBackground();

	    this._renderHandle();

	    this._renderDataShadow();

	    thisGroup.add(barGroup);

	    this._positionGroup();
	  },

	  /**
	   * @private
	   */
	  _resetLocation: function () {
	    var dataZoomModel = this.dataZoomModel;
	    var api = this.api; // If some of x/y/width/height are not specified,
	    // auto-adapt according to target grid.

	    var coordRect = this._findCoordRect();

	    var ecSize = {
	      width: api.getWidth(),
	      height: api.getHeight()
	    }; // Default align by coordinate system rect.

	    var positionInfo = this._orient === HORIZONTAL ? {
	      // Why using 'right', because right should be used in vertical,
	      // and it is better to be consistent for dealing with position param merge.
	      right: ecSize.width - coordRect.x - coordRect.width,
	      top: ecSize.height - DEFAULT_FILLER_SIZE - DEFAULT_LOCATION_EDGE_GAP,
	      width: coordRect.width,
	      height: DEFAULT_FILLER_SIZE
	    } : {
	      // vertical
	      right: DEFAULT_LOCATION_EDGE_GAP,
	      top: coordRect.y,
	      width: DEFAULT_FILLER_SIZE,
	      height: coordRect.height
	    }; // Do not write back to option and replace value 'ph', because
	    // the 'ph' value should be recalculated when resize.

	    var layoutParams = layout.getLayoutParams(dataZoomModel.option); // Replace the placeholder value.

	    zrUtil.each(['right', 'top', 'width', 'height'], function (name) {
	      if (layoutParams[name] === 'ph') {
	        layoutParams[name] = positionInfo[name];
	      }
	    });
	    var layoutRect = layout.getLayoutRect(layoutParams, ecSize, dataZoomModel.padding);
	    this._location = {
	      x: layoutRect.x,
	      y: layoutRect.y
	    };
	    this._size = [layoutRect.width, layoutRect.height];
	    this._orient === VERTICAL && this._size.reverse();
	  },

	  /**
	   * @private
	   */
	  _positionGroup: function () {
	    var thisGroup = this.group;
	    var location = this._location;
	    var orient = this._orient; // Just use the first axis to determine mapping.

	    var targetAxisModel = this.dataZoomModel.getFirstTargetAxisModel();
	    var inverse = targetAxisModel && targetAxisModel.get('inverse');
	    var barGroup = this._displayables.barGroup;
	    var otherAxisInverse = (this._dataShadowInfo || {}).otherAxisInverse; // Transform barGroup.

	    barGroup.attr(orient === HORIZONTAL && !inverse ? {
	      scale: otherAxisInverse ? [1, 1] : [1, -1]
	    } : orient === HORIZONTAL && inverse ? {
	      scale: otherAxisInverse ? [-1, 1] : [-1, -1]
	    } : orient === VERTICAL && !inverse ? {
	      scale: otherAxisInverse ? [1, -1] : [1, 1],
	      rotation: Math.PI / 2 // Dont use Math.PI, considering shadow direction.

	    } : {
	      scale: otherAxisInverse ? [-1, -1] : [-1, 1],
	      rotation: Math.PI / 2
	    }); // Position barGroup

	    var rect = thisGroup.getBoundingRect([barGroup]);
	    thisGroup.attr('position', [location.x - rect.x, location.y - rect.y]);
	  },

	  /**
	   * @private
	   */
	  _getViewExtent: function () {
	    return [0, this._size[0]];
	  },
	  _renderBackground: function () {
	    var dataZoomModel = this.dataZoomModel;
	    var size = this._size;
	    var barGroup = this._displayables.barGroup;
	    barGroup.add(new Rect({
	      silent: true,
	      shape: {
	        x: 0,
	        y: 0,
	        width: size[0],
	        height: size[1]
	      },
	      style: {
	        fill: dataZoomModel.get('backgroundColor')
	      },
	      z2: -40
	    })); // Click panel, over shadow, below handles.

	    barGroup.add(new Rect({
	      shape: {
	        x: 0,
	        y: 0,
	        width: size[0],
	        height: size[1]
	      },
	      style: {
	        fill: 'transparent'
	      },
	      z2: 0,
	      onclick: zrUtil.bind(this._onClickPanelClick, this)
	    }));
	  },
	  _renderDataShadow: function () {
	    var info = this._dataShadowInfo = this._prepareDataShadowInfo();

	    if (!info) {
	      return;
	    }

	    var size = this._size;
	    var seriesModel = info.series;
	    var data = seriesModel.getRawData();
	    var otherDim = seriesModel.getShadowDim ? seriesModel.getShadowDim() // @see candlestick
	    : info.otherDim;

	    if (otherDim == null) {
	      return;
	    }

	    var otherDataExtent = data.getDataExtent(otherDim); // Nice extent.

	    var otherOffset = (otherDataExtent[1] - otherDataExtent[0]) * 0.3;
	    otherDataExtent = [otherDataExtent[0] - otherOffset, otherDataExtent[1] + otherOffset];
	    var otherShadowExtent = [0, size[1]];
	    var thisShadowExtent = [0, size[0]];
	    var areaPoints = [[size[0], 0], [0, 0]];
	    var linePoints = [];
	    var step = thisShadowExtent[1] / (data.count() - 1);
	    var thisCoord = 0; // Optimize for large data shadow

	    var stride = Math.round(data.count() / size[0]);
	    var lastIsEmpty;
	    data.each([otherDim], function (value, index) {
	      if (stride > 0 && index % stride) {
	        thisCoord += step;
	        return;
	      } // FIXME
	      // Should consider axis.min/axis.max when drawing dataShadow.
	      // FIXME
	      // 应该使用统一的空判断？还是在list里进行空判断？


	      var isEmpty = value == null || isNaN(value) || value === ''; // See #4235.

	      var otherCoord = isEmpty ? 0 : linearMap(value, otherDataExtent, otherShadowExtent, true); // Attempt to draw data shadow precisely when there are empty value.

	      if (isEmpty && !lastIsEmpty && index) {
	        areaPoints.push([areaPoints[areaPoints.length - 1][0], 0]);
	        linePoints.push([linePoints[linePoints.length - 1][0], 0]);
	      } else if (!isEmpty && lastIsEmpty) {
	        areaPoints.push([thisCoord, 0]);
	        linePoints.push([thisCoord, 0]);
	      }

	      areaPoints.push([thisCoord, otherCoord]);
	      linePoints.push([thisCoord, otherCoord]);
	      thisCoord += step;
	      lastIsEmpty = isEmpty;
	    });
	    var dataZoomModel = this.dataZoomModel; // var dataBackgroundModel = dataZoomModel.getModel('dataBackground');

	    this._displayables.barGroup.add(new graphic.Polygon({
	      shape: {
	        points: areaPoints
	      },
	      style: zrUtil.defaults({
	        fill: dataZoomModel.get('dataBackgroundColor')
	      }, dataZoomModel.getModel('dataBackground.areaStyle').getAreaStyle()),
	      silent: true,
	      z2: -20
	    }));

	    this._displayables.barGroup.add(new graphic.Polyline({
	      shape: {
	        points: linePoints
	      },
	      style: dataZoomModel.getModel('dataBackground.lineStyle').getLineStyle(),
	      silent: true,
	      z2: -19
	    }));
	  },
	  _prepareDataShadowInfo: function () {
	    var dataZoomModel = this.dataZoomModel;
	    var showDataShadow = dataZoomModel.get('showDataShadow');

	    if (showDataShadow === false) {
	      return;
	    } // Find a representative series.


	    var result;
	    var ecModel = this.ecModel;
	    dataZoomModel.eachTargetAxis(function (dimNames, axisIndex) {
	      var seriesModels = dataZoomModel.getAxisProxy(dimNames.name, axisIndex).getTargetSeriesModels();
	      zrUtil.each(seriesModels, function (seriesModel) {
	        if (result) {
	          return;
	        }

	        if (showDataShadow !== true && zrUtil.indexOf(SHOW_DATA_SHADOW_SERIES_TYPE, seriesModel.get('type')) < 0) {
	          return;
	        }

	        var thisAxis = ecModel.getComponent(dimNames.axis, axisIndex).axis;
	        var otherDim = getOtherDim(dimNames.name);
	        var otherAxisInverse;
	        var coordSys = seriesModel.coordinateSystem;

	        if (otherDim != null && coordSys.getOtherAxis) {
	          otherAxisInverse = coordSys.getOtherAxis(thisAxis).inverse;
	        }

	        otherDim = seriesModel.getData().mapDimension(otherDim);
	        result = {
	          thisAxis: thisAxis,
	          series: seriesModel,
	          thisDim: dimNames.name,
	          otherDim: otherDim,
	          otherAxisInverse: otherAxisInverse
	        };
	      }, this);
	    }, this);
	    return result;
	  },
	  _renderHandle: function () {
	    var displaybles = this._displayables;
	    var handles = displaybles.handles = [];
	    var handleLabels = displaybles.handleLabels = [];
	    var barGroup = this._displayables.barGroup;
	    var size = this._size;
	    var dataZoomModel = this.dataZoomModel;
	    barGroup.add(displaybles.filler = new Rect({
	      draggable: true,
	      cursor: getCursor(this._orient),
	      drift: bind(this._onDragMove, this, 'all'),
	      onmousemove: function (e) {
	        // Fot mobile devicem, prevent screen slider on the button.
	        eventTool.stop(e.event);
	      },
	      ondragstart: bind(this._showDataInfo, this, true),
	      ondragend: bind(this._onDragEnd, this),
	      onmouseover: bind(this._showDataInfo, this, true),
	      onmouseout: bind(this._showDataInfo, this, false),
	      style: {
	        fill: dataZoomModel.get('fillerColor'),
	        textPosition: 'inside'
	      }
	    })); // Frame border.

	    barGroup.add(new Rect(graphic.subPixelOptimizeRect({
	      silent: true,
	      shape: {
	        x: 0,
	        y: 0,
	        width: size[0],
	        height: size[1]
	      },
	      style: {
	        stroke: dataZoomModel.get('dataBackgroundColor') || dataZoomModel.get('borderColor'),
	        lineWidth: DEFAULT_FRAME_BORDER_WIDTH,
	        fill: 'rgba(0,0,0,0)'
	      }
	    })));
	    each([0, 1], function (handleIndex) {
	      var path = graphic.createIcon(dataZoomModel.get('handleIcon'), {
	        cursor: getCursor(this._orient),
	        draggable: true,
	        drift: bind(this._onDragMove, this, handleIndex),
	        onmousemove: function (e) {
	          // Fot mobile devicem, prevent screen slider on the button.
	          eventTool.stop(e.event);
	        },
	        ondragend: bind(this._onDragEnd, this),
	        onmouseover: bind(this._showDataInfo, this, true),
	        onmouseout: bind(this._showDataInfo, this, false)
	      }, {
	        x: -1,
	        y: 0,
	        width: 2,
	        height: 2
	      });
	      var bRect = path.getBoundingRect();
	      this._handleHeight = numberUtil.parsePercent(dataZoomModel.get('handleSize'), this._size[1]);
	      this._handleWidth = bRect.width / bRect.height * this._handleHeight;
	      path.setStyle(dataZoomModel.getModel('handleStyle').getItemStyle());
	      var handleColor = dataZoomModel.get('handleColor'); // Compatitable with previous version

	      if (handleColor != null) {
	        path.style.fill = handleColor;
	      }

	      barGroup.add(handles[handleIndex] = path);
	      var textStyleModel = dataZoomModel.textStyleModel;
	      this.group.add(handleLabels[handleIndex] = new graphic.Text({
	        silent: true,
	        invisible: true,
	        style: {
	          x: 0,
	          y: 0,
	          text: '',
	          textVerticalAlign: 'middle',
	          textAlign: 'center',
	          textFill: textStyleModel.getTextColor(),
	          textFont: textStyleModel.getFont()
	        },
	        z2: 10
	      }));
	    }, this);
	  },

	  /**
	   * @private
	   */
	  _resetInterval: function () {
	    var range = this._range = this.dataZoomModel.getPercentRange();

	    var viewExtent = this._getViewExtent();

	    this._handleEnds = [linearMap(range[0], [0, 100], viewExtent, true), linearMap(range[1], [0, 100], viewExtent, true)];
	  },

	  /**
	   * @private
	   * @param {(number|string)} handleIndex 0 or 1 or 'all'
	   * @param {number} delta
	   * @return {boolean} changed
	   */
	  _updateInterval: function (handleIndex, delta) {
	    var dataZoomModel = this.dataZoomModel;
	    var handleEnds = this._handleEnds;

	    var viewExtend = this._getViewExtent();

	    var minMaxSpan = dataZoomModel.findRepresentativeAxisProxy().getMinMaxSpan();
	    var percentExtent = [0, 100];
	    sliderMove(delta, handleEnds, viewExtend, dataZoomModel.get('zoomLock') ? 'all' : handleIndex, minMaxSpan.minSpan != null ? linearMap(minMaxSpan.minSpan, percentExtent, viewExtend, true) : null, minMaxSpan.maxSpan != null ? linearMap(minMaxSpan.maxSpan, percentExtent, viewExtend, true) : null);
	    var lastRange = this._range;
	    var range = this._range = asc([linearMap(handleEnds[0], viewExtend, percentExtent, true), linearMap(handleEnds[1], viewExtend, percentExtent, true)]);
	    return !lastRange || lastRange[0] !== range[0] || lastRange[1] !== range[1];
	  },

	  /**
	   * @private
	   */
	  _updateView: function (nonRealtime) {
	    var displaybles = this._displayables;
	    var handleEnds = this._handleEnds;
	    var handleInterval = asc(handleEnds.slice());
	    var size = this._size;
	    each([0, 1], function (handleIndex) {
	      // Handles
	      var handle = displaybles.handles[handleIndex];
	      var handleHeight = this._handleHeight;
	      handle.attr({
	        scale: [handleHeight / 2, handleHeight / 2],
	        position: [handleEnds[handleIndex], size[1] / 2 - handleHeight / 2]
	      });
	    }, this); // Filler

	    displaybles.filler.setShape({
	      x: handleInterval[0],
	      y: 0,
	      width: handleInterval[1] - handleInterval[0],
	      height: size[1]
	    });

	    this._updateDataInfo(nonRealtime);
	  },

	  /**
	   * @private
	   */
	  _updateDataInfo: function (nonRealtime) {
	    var dataZoomModel = this.dataZoomModel;
	    var displaybles = this._displayables;
	    var handleLabels = displaybles.handleLabels;
	    var orient = this._orient;
	    var labelTexts = ['', '']; // FIXME
	    // date型，支持formatter，autoformatter（ec2 date.getAutoFormatter）

	    if (dataZoomModel.get('showDetail')) {
	      var axisProxy = dataZoomModel.findRepresentativeAxisProxy();

	      if (axisProxy) {
	        var axis = axisProxy.getAxisModel().axis;
	        var range = this._range;
	        var dataInterval = nonRealtime // See #4434, data and axis are not processed and reset yet in non-realtime mode.
	        ? axisProxy.calculateDataWindow({
	          start: range[0],
	          end: range[1]
	        }).valueWindow : axisProxy.getDataValueWindow();
	        labelTexts = [this._formatLabel(dataInterval[0], axis), this._formatLabel(dataInterval[1], axis)];
	      }
	    }

	    var orderedHandleEnds = asc(this._handleEnds.slice());
	    setLabel.call(this, 0);
	    setLabel.call(this, 1);

	    function setLabel(handleIndex) {
	      // Label
	      // Text should not transform by barGroup.
	      // Ignore handlers transform
	      var barTransform = graphic.getTransform(displaybles.handles[handleIndex].parent, this.group);
	      var direction = graphic.transformDirection(handleIndex === 0 ? 'right' : 'left', barTransform);
	      var offset = this._handleWidth / 2 + LABEL_GAP;
	      var textPoint = graphic.applyTransform([orderedHandleEnds[handleIndex] + (handleIndex === 0 ? -offset : offset), this._size[1] / 2], barTransform);
	      handleLabels[handleIndex].setStyle({
	        x: textPoint[0],
	        y: textPoint[1],
	        textVerticalAlign: orient === HORIZONTAL ? 'middle' : direction,
	        textAlign: orient === HORIZONTAL ? direction : 'center',
	        text: labelTexts[handleIndex]
	      });
	    }
	  },

	  /**
	   * @private
	   */
	  _formatLabel: function (value, axis) {
	    var dataZoomModel = this.dataZoomModel;
	    var labelFormatter = dataZoomModel.get('labelFormatter');
	    var labelPrecision = dataZoomModel.get('labelPrecision');

	    if (labelPrecision == null || labelPrecision === 'auto') {
	      labelPrecision = axis.getPixelPrecision();
	    }

	    var valueStr = value == null || isNaN(value) ? '' // FIXME Glue code
	    : axis.type === 'category' || axis.type === 'time' ? axis.scale.getLabel(Math.round(value)) // param of toFixed should less then 20.
	    : value.toFixed(Math.min(labelPrecision, 20));
	    return zrUtil.isFunction(labelFormatter) ? labelFormatter(value, valueStr) : zrUtil.isString(labelFormatter) ? labelFormatter.replace('{value}', valueStr) : valueStr;
	  },

	  /**
	   * @private
	   * @param {boolean} showOrHide true: show, false: hide
	   */
	  _showDataInfo: function (showOrHide) {
	    // Always show when drgging.
	    showOrHide = this._dragging || showOrHide;
	    var handleLabels = this._displayables.handleLabels;
	    handleLabels[0].attr('invisible', !showOrHide);
	    handleLabels[1].attr('invisible', !showOrHide);
	  },
	  _onDragMove: function (handleIndex, dx, dy) {
	    this._dragging = true; // Transform dx, dy to bar coordination.

	    var barTransform = this._displayables.barGroup.getLocalTransform();

	    var vertex = graphic.applyTransform([dx, dy], barTransform, true);

	    var changed = this._updateInterval(handleIndex, vertex[0]);

	    var realtime = this.dataZoomModel.get('realtime');

	    this._updateView(!realtime); // Avoid dispatch dataZoom repeatly but range not changed,
	    // which cause bad visual effect when progressive enabled.


	    changed && realtime && this._dispatchZoomAction();
	  },
	  _onDragEnd: function () {
	    this._dragging = false;

	    this._showDataInfo(false); // While in realtime mode and stream mode, dispatch action when
	    // drag end will cause the whole view rerender, which is unnecessary.


	    var realtime = this.dataZoomModel.get('realtime');
	    !realtime && this._dispatchZoomAction();
	  },
	  _onClickPanelClick: function (e) {
	    var size = this._size;

	    var localPoint = this._displayables.barGroup.transformCoordToLocal(e.offsetX, e.offsetY);

	    if (localPoint[0] < 0 || localPoint[0] > size[0] || localPoint[1] < 0 || localPoint[1] > size[1]) {
	      return;
	    }

	    var handleEnds = this._handleEnds;
	    var center = (handleEnds[0] + handleEnds[1]) / 2;

	    var changed = this._updateInterval('all', localPoint[0] - center);

	    this._updateView();

	    changed && this._dispatchZoomAction();
	  },

	  /**
	   * This action will be throttled.
	   * @private
	   */
	  _dispatchZoomAction: function () {
	    var range = this._range;
	    this.api.dispatchAction({
	      type: 'dataZoom',
	      from: this.uid,
	      dataZoomId: this.dataZoomModel.id,
	      start: range[0],
	      end: range[1]
	    });
	  },

	  /**
	   * @private
	   */
	  _findCoordRect: function () {
	    // Find the grid coresponding to the first axis referred by dataZoom.
	    var rect;
	    each(this.getTargetCoordInfo(), function (coordInfoList) {
	      if (!rect && coordInfoList.length) {
	        var coordSys = coordInfoList[0].model.coordinateSystem;
	        rect = coordSys.getRect && coordSys.getRect();
	      }
	    });

	    if (!rect) {
	      var width = this.api.getWidth();
	      var height = this.api.getHeight();
	      rect = {
	        x: width * 0.2,
	        y: height * 0.2,
	        width: width * 0.6,
	        height: height * 0.6
	      };
	    }

	    return rect;
	  }
	});

	function getOtherDim(thisDim) {
	  // FIXME
	  // 这个逻辑和getOtherAxis里一致，但是写在这里是否不好
	  var map = {
	    x: 'y',
	    y: 'x',
	    radius: 'angle',
	    angle: 'radius'
	  };
	  return map[thisDim];
	}

	function getCursor(orient) {
	  return orient === 'vertical' ? 'ns-resize' : 'ew-resize';
	}

	var _default = SliderZoomView;
	module.exports = _default;

/***/ }),
/* 397 */
/***/ (function(module, exports, __webpack_require__) {

	var DataZoomModel = __webpack_require__(391);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var _default = DataZoomModel.extend({
	  type: 'dataZoom.inside',

	  /**
	   * @protected
	   */
	  defaultOption: {
	    disabled: false,
	    // Whether disable this inside zoom.
	    zoomLock: false,
	    // Whether disable zoom but only pan.
	    zoomOnMouseWheel: true,
	    // Can be: true / false / 'shift' / 'ctrl' / 'alt'.
	    moveOnMouseMove: true,
	    // Can be: true / false / 'shift' / 'ctrl' / 'alt'.
	    preventDefaultMouseMove: true
	  }
	});

	module.exports = _default;

/***/ }),
/* 398 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(181);

	var DataZoomView = __webpack_require__(394);

	var sliderMove = __webpack_require__(383);

	var roams = __webpack_require__(399);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var bind = zrUtil.bind;
	var InsideZoomView = DataZoomView.extend({
	  type: 'dataZoom.inside',

	  /**
	   * @override
	   */
	  init: function (ecModel, api) {
	    /**
	     * 'throttle' is used in this.dispatchAction, so we save range
	     * to avoid missing some 'pan' info.
	     * @private
	     * @type {Array.<number>}
	     */
	    this._range;
	  },

	  /**
	   * @override
	   */
	  render: function (dataZoomModel, ecModel, api, payload) {
	    InsideZoomView.superApply(this, 'render', arguments); // Hance the `throttle` util ensures to preserve command order,
	    // here simply updating range all the time will not cause missing
	    // any of the the roam change.

	    this._range = dataZoomModel.getPercentRange(); // Reset controllers.

	    zrUtil.each(this.getTargetCoordInfo(), function (coordInfoList, coordSysName) {
	      var allCoordIds = zrUtil.map(coordInfoList, function (coordInfo) {
	        return roams.generateCoordId(coordInfo.model);
	      });
	      zrUtil.each(coordInfoList, function (coordInfo) {
	        var coordModel = coordInfo.model;
	        var dataZoomOption = dataZoomModel.option;
	        roams.register(api, {
	          coordId: roams.generateCoordId(coordModel),
	          allCoordIds: allCoordIds,
	          containsPoint: function (e, x, y) {
	            return coordModel.coordinateSystem.containPoint([x, y]);
	          },
	          dataZoomId: dataZoomModel.id,
	          throttleRate: dataZoomModel.get('throttle', true),
	          panGetRange: bind(this._onPan, this, coordInfo, coordSysName),
	          zoomGetRange: bind(this._onZoom, this, coordInfo, coordSysName),
	          zoomLock: dataZoomOption.zoomLock,
	          disabled: dataZoomOption.disabled,
	          roamControllerOpt: {
	            zoomOnMouseWheel: dataZoomOption.zoomOnMouseWheel,
	            moveOnMouseMove: dataZoomOption.moveOnMouseMove,
	            preventDefaultMouseMove: dataZoomOption.preventDefaultMouseMove
	          }
	        });
	      }, this);
	    }, this);
	  },

	  /**
	   * @override
	   */
	  dispose: function () {
	    roams.unregister(this.api, this.dataZoomModel.id);
	    InsideZoomView.superApply(this, 'dispose', arguments);
	    this._range = null;
	  },

	  /**
	   * @private
	   */
	  _onPan: function (coordInfo, coordSysName, controller, dx, dy, oldX, oldY, newX, newY) {
	    var lastRange = this._range;
	    var range = lastRange.slice(); // Calculate transform by the first axis.

	    var axisModel = coordInfo.axisModels[0];

	    if (!axisModel) {
	      return;
	    }

	    var directionInfo = getDirectionInfo[coordSysName]([oldX, oldY], [newX, newY], axisModel, controller, coordInfo);
	    var percentDelta = directionInfo.signal * (range[1] - range[0]) * directionInfo.pixel / directionInfo.pixelLength;
	    sliderMove(percentDelta, range, [0, 100], 'all');
	    this._range = range;

	    if (lastRange[0] !== range[0] || lastRange[1] !== range[1]) {
	      return range;
	    }
	  },

	  /**
	   * @private
	   */
	  _onZoom: function (coordInfo, coordSysName, controller, scale, mouseX, mouseY) {
	    var lastRange = this._range;
	    var range = lastRange.slice(); // Calculate transform by the first axis.

	    var axisModel = coordInfo.axisModels[0];

	    if (!axisModel) {
	      return;
	    }

	    var directionInfo = getDirectionInfo[coordSysName](null, [mouseX, mouseY], axisModel, controller, coordInfo);
	    var percentPoint = (directionInfo.signal > 0 ? directionInfo.pixelStart + directionInfo.pixelLength - directionInfo.pixel : directionInfo.pixel - directionInfo.pixelStart) / directionInfo.pixelLength * (range[1] - range[0]) + range[0];
	    scale = Math.max(1 / scale, 0);
	    range[0] = (range[0] - percentPoint) * scale + percentPoint;
	    range[1] = (range[1] - percentPoint) * scale + percentPoint; // Restrict range.

	    var minMaxSpan = this.dataZoomModel.findRepresentativeAxisProxy().getMinMaxSpan();
	    sliderMove(0, range, [0, 100], 0, minMaxSpan.minSpan, minMaxSpan.maxSpan);
	    this._range = range;

	    if (lastRange[0] !== range[0] || lastRange[1] !== range[1]) {
	      return range;
	    }
	  }
	});
	var getDirectionInfo = {
	  grid: function (oldPoint, newPoint, axisModel, controller, coordInfo) {
	    var axis = axisModel.axis;
	    var ret = {};
	    var rect = coordInfo.model.coordinateSystem.getRect();
	    oldPoint = oldPoint || [0, 0];

	    if (axis.dim === 'x') {
	      ret.pixel = newPoint[0] - oldPoint[0];
	      ret.pixelLength = rect.width;
	      ret.pixelStart = rect.x;
	      ret.signal = axis.inverse ? 1 : -1;
	    } else {
	      // axis.dim === 'y'
	      ret.pixel = newPoint[1] - oldPoint[1];
	      ret.pixelLength = rect.height;
	      ret.pixelStart = rect.y;
	      ret.signal = axis.inverse ? -1 : 1;
	    }

	    return ret;
	  },
	  polar: function (oldPoint, newPoint, axisModel, controller, coordInfo) {
	    var axis = axisModel.axis;
	    var ret = {};
	    var polar = coordInfo.model.coordinateSystem;
	    var radiusExtent = polar.getRadiusAxis().getExtent();
	    var angleExtent = polar.getAngleAxis().getExtent();
	    oldPoint = oldPoint ? polar.pointToCoord(oldPoint) : [0, 0];
	    newPoint = polar.pointToCoord(newPoint);

	    if (axisModel.mainType === 'radiusAxis') {
	      ret.pixel = newPoint[0] - oldPoint[0]; // ret.pixelLength = Math.abs(radiusExtent[1] - radiusExtent[0]);
	      // ret.pixelStart = Math.min(radiusExtent[0], radiusExtent[1]);

	      ret.pixelLength = radiusExtent[1] - radiusExtent[0];
	      ret.pixelStart = radiusExtent[0];
	      ret.signal = axis.inverse ? 1 : -1;
	    } else {
	      // 'angleAxis'
	      ret.pixel = newPoint[1] - oldPoint[1]; // ret.pixelLength = Math.abs(angleExtent[1] - angleExtent[0]);
	      // ret.pixelStart = Math.min(angleExtent[0], angleExtent[1]);

	      ret.pixelLength = angleExtent[1] - angleExtent[0];
	      ret.pixelStart = angleExtent[0];
	      ret.signal = axis.inverse ? -1 : 1;
	    }

	    return ret;
	  },
	  singleAxis: function (oldPoint, newPoint, axisModel, controller, coordInfo) {
	    var axis = axisModel.axis;
	    var rect = coordInfo.model.coordinateSystem.getRect();
	    var ret = {};
	    oldPoint = oldPoint || [0, 0];

	    if (axis.orient === 'horizontal') {
	      ret.pixel = newPoint[0] - oldPoint[0];
	      ret.pixelLength = rect.width;
	      ret.pixelStart = rect.x;
	      ret.signal = axis.inverse ? 1 : -1;
	    } else {
	      // 'vertical'
	      ret.pixel = newPoint[1] - oldPoint[1];
	      ret.pixelLength = rect.height;
	      ret.pixelStart = rect.y;
	      ret.signal = axis.inverse ? -1 : 1;
	    }

	    return ret;
	  }
	};
	var _default = InsideZoomView;
	module.exports = _default;

/***/ }),
/* 399 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(181);

	var RoamController = __webpack_require__(400);

	var throttleUtil = __webpack_require__(285);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	// Only create one roam controller for each coordinate system.
	// one roam controller might be refered by two inside data zoom
	// components (for example, one for x and one for y). When user
	// pan or zoom, only dispatch one action for those data zoom
	// components.
	var curry = zrUtil.curry;
	var ATTR = '\0_ec_dataZoom_roams';
	/**
	 * @public
	 * @param {module:echarts/ExtensionAPI} api
	 * @param {Object} dataZoomInfo
	 * @param {string} dataZoomInfo.coordId
	 * @param {Function} dataZoomInfo.containsPoint
	 * @param {Array.<string>} dataZoomInfo.allCoordIds
	 * @param {string} dataZoomInfo.dataZoomId
	 * @param {number} dataZoomInfo.throttleRate
	 * @param {Function} dataZoomInfo.panGetRange
	 * @param {Function} dataZoomInfo.zoomGetRange
	 * @param {boolean} [dataZoomInfo.zoomLock]
	 * @param {boolean} [dataZoomInfo.disabled]
	 */

	function register(api, dataZoomInfo) {
	  var store = giveStore(api);
	  var theDataZoomId = dataZoomInfo.dataZoomId;
	  var theCoordId = dataZoomInfo.coordId; // Do clean when a dataZoom changes its target coordnate system.
	  // Avoid memory leak, dispose all not-used-registered.

	  zrUtil.each(store, function (record, coordId) {
	    var dataZoomInfos = record.dataZoomInfos;

	    if (dataZoomInfos[theDataZoomId] && zrUtil.indexOf(dataZoomInfo.allCoordIds, theCoordId) < 0) {
	      delete dataZoomInfos[theDataZoomId];
	      record.count--;
	    }
	  });
	  cleanStore(store);
	  var record = store[theCoordId]; // Create if needed.

	  if (!record) {
	    record = store[theCoordId] = {
	      coordId: theCoordId,
	      dataZoomInfos: {},
	      count: 0
	    };
	    record.controller = createController(api, record);
	    record.dispatchAction = zrUtil.curry(dispatchAction, api);
	  } // Update reference of dataZoom.


	  !record.dataZoomInfos[theDataZoomId] && record.count++;
	  record.dataZoomInfos[theDataZoomId] = dataZoomInfo;
	  var controllerParams = mergeControllerParams(record.dataZoomInfos);
	  record.controller.enable(controllerParams.controlType, controllerParams.opt); // Consider resize, area should be always updated.

	  record.controller.setPointerChecker(dataZoomInfo.containsPoint); // Update throttle.

	  throttleUtil.createOrUpdate(record, 'dispatchAction', dataZoomInfo.throttleRate, 'fixRate');
	}
	/**
	 * @public
	 * @param {module:echarts/ExtensionAPI} api
	 * @param {string} dataZoomId
	 */


	function unregister(api, dataZoomId) {
	  var store = giveStore(api);
	  zrUtil.each(store, function (record) {
	    record.controller.dispose();
	    var dataZoomInfos = record.dataZoomInfos;

	    if (dataZoomInfos[dataZoomId]) {
	      delete dataZoomInfos[dataZoomId];
	      record.count--;
	    }
	  });
	  cleanStore(store);
	}
	/**
	 * @public
	 */


	function generateCoordId(coordModel) {
	  return coordModel.type + '\0_' + coordModel.id;
	}
	/**
	 * Key: coordId, value: {dataZoomInfos: [], count, controller}
	 * @type {Array.<Object>}
	 */


	function giveStore(api) {
	  // Mount store on zrender instance, so that we do not
	  // need to worry about dispose.
	  var zr = api.getZr();
	  return zr[ATTR] || (zr[ATTR] = {});
	}

	function createController(api, newRecord) {
	  var controller = new RoamController(api.getZr());
	  controller.on('pan', curry(onPan, newRecord));
	  controller.on('zoom', curry(onZoom, newRecord));
	  return controller;
	}

	function cleanStore(store) {
	  zrUtil.each(store, function (record, coordId) {
	    if (!record.count) {
	      record.controller.dispose();
	      delete store[coordId];
	    }
	  });
	}

	function onPan(record, dx, dy, oldX, oldY, newX, newY) {
	  wrapAndDispatch(record, function (info) {
	    return info.panGetRange(record.controller, dx, dy, oldX, oldY, newX, newY);
	  });
	}

	function onZoom(record, scale, mouseX, mouseY) {
	  wrapAndDispatch(record, function (info) {
	    return info.zoomGetRange(record.controller, scale, mouseX, mouseY);
	  });
	}

	function wrapAndDispatch(record, getRange) {
	  var batch = [];
	  zrUtil.each(record.dataZoomInfos, function (info) {
	    var range = getRange(info);
	    !info.disabled && range && batch.push({
	      dataZoomId: info.dataZoomId,
	      start: range[0],
	      end: range[1]
	    });
	  });
	  batch.length && record.dispatchAction(batch);
	}
	/**
	 * This action will be throttled.
	 */


	function dispatchAction(api, batch) {
	  api.dispatchAction({
	    type: 'dataZoom',
	    batch: batch
	  });
	}
	/**
	 * Merge roamController settings when multiple dataZooms share one roamController.
	 */


	function mergeControllerParams(dataZoomInfos) {
	  var controlType;
	  var opt = {}; // DO NOT use reserved word (true, false, undefined) as key literally. Even if encapsulated
	  // as string, it is probably revert to reserved word by compress tool. See #7411.

	  var prefix = 'type_';
	  var typePriority = {
	    'type_true': 2,
	    'type_move': 1,
	    'type_false': 0,
	    'type_undefined': -1
	  };
	  zrUtil.each(dataZoomInfos, function (dataZoomInfo) {
	    var oneType = dataZoomInfo.disabled ? false : dataZoomInfo.zoomLock ? 'move' : true;

	    if (typePriority[prefix + oneType] > typePriority[prefix + controlType]) {
	      controlType = oneType;
	    } // Do not support that different 'shift'/'ctrl'/'alt' setting used in one coord sys.


	    zrUtil.extend(opt, dataZoomInfo.roamControllerOpt);
	  });
	  return {
	    controlType: controlType,
	    opt: opt
	  };
	}

	exports.register = register;
	exports.unregister = unregister;
	exports.generateCoordId = generateCoordId;

/***/ }),
/* 400 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(181);

	var Eventful = __webpack_require__(185);

	var eventTool = __webpack_require__(215);

	var interactionMutex = __webpack_require__(401);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/

	/**
	 * @alias module:echarts/component/helper/RoamController
	 * @constructor
	 * @mixin {module:zrender/mixin/Eventful}
	 *
	 * @param {module:zrender/zrender~ZRender} zr
	 */
	function RoamController(zr) {
	  /**
	   * @type {Function}
	   */
	  this.pointerChecker;
	  /**
	   * @type {module:zrender}
	   */

	  this._zr = zr;
	  /**
	   * @type {Object}
	   */

	  this._opt = {}; // Avoid two roamController bind the same handler

	  var bind = zrUtil.bind;
	  var mousedownHandler = bind(mousedown, this);
	  var mousemoveHandler = bind(mousemove, this);
	  var mouseupHandler = bind(mouseup, this);
	  var mousewheelHandler = bind(mousewheel, this);
	  var pinchHandler = bind(pinch, this);
	  Eventful.call(this);
	  /**
	   * @param {Function} pointerChecker
	   *                   input: x, y
	   *                   output: boolean
	   */

	  this.setPointerChecker = function (pointerChecker) {
	    this.pointerChecker = pointerChecker;
	  };
	  /**
	   * Notice: only enable needed types. For example, if 'zoom'
	   * is not needed, 'zoom' should not be enabled, otherwise
	   * default mousewheel behaviour (scroll page) will be disabled.
	   *
	   * @param  {boolean|string} [controlType=true] Specify the control type,
	   *                          which can be null/undefined or true/false
	   *                          or 'pan/move' or 'zoom'/'scale'
	   * @param {Object} [opt]
	   * @param {Object} [opt.zoomOnMouseWheel=true]
	   * @param {Object} [opt.moveOnMouseMove=true]
	   * @param {Object} [opt.preventDefaultMouseMove=true] When pan.
	   */


	  this.enable = function (controlType, opt) {
	    // Disable previous first
	    this.disable();
	    this._opt = zrUtil.defaults(zrUtil.clone(opt) || {}, {
	      zoomOnMouseWheel: true,
	      moveOnMouseMove: true,
	      preventDefaultMouseMove: true
	    });

	    if (controlType == null) {
	      controlType = true;
	    }

	    if (controlType === true || controlType === 'move' || controlType === 'pan') {
	      zr.on('mousedown', mousedownHandler);
	      zr.on('mousemove', mousemoveHandler);
	      zr.on('mouseup', mouseupHandler);
	    }

	    if (controlType === true || controlType === 'scale' || controlType === 'zoom') {
	      zr.on('mousewheel', mousewheelHandler);
	      zr.on('pinch', pinchHandler);
	    }
	  };

	  this.disable = function () {
	    zr.off('mousedown', mousedownHandler);
	    zr.off('mousemove', mousemoveHandler);
	    zr.off('mouseup', mouseupHandler);
	    zr.off('mousewheel', mousewheelHandler);
	    zr.off('pinch', pinchHandler);
	  };

	  this.dispose = this.disable;

	  this.isDragging = function () {
	    return this._dragging;
	  };

	  this.isPinching = function () {
	    return this._pinching;
	  };
	}

	zrUtil.mixin(RoamController, Eventful);

	function mousedown(e) {
	  if (eventTool.notLeftMouse(e) || e.target && e.target.draggable) {
	    return;
	  }

	  var x = e.offsetX;
	  var y = e.offsetY; // Only check on mosedown, but not mousemove.
	  // Mouse can be out of target when mouse moving.

	  if (this.pointerChecker && this.pointerChecker(e, x, y)) {
	    this._x = x;
	    this._y = y;
	    this._dragging = true;
	  }
	}

	function mousemove(e) {
	  if (eventTool.notLeftMouse(e) || !checkKeyBinding(this, 'moveOnMouseMove', e) || !this._dragging || e.gestureEvent === 'pinch' || interactionMutex.isTaken(this._zr, 'globalPan')) {
	    return;
	  }

	  var x = e.offsetX;
	  var y = e.offsetY;
	  var oldX = this._x;
	  var oldY = this._y;
	  var dx = x - oldX;
	  var dy = y - oldY;
	  this._x = x;
	  this._y = y;
	  this._opt.preventDefaultMouseMove && eventTool.stop(e.event);
	  this.trigger('pan', dx, dy, oldX, oldY, x, y);
	}

	function mouseup(e) {
	  if (!eventTool.notLeftMouse(e)) {
	    this._dragging = false;
	  }
	}

	function mousewheel(e) {
	  // wheelDelta maybe -0 in chrome mac.
	  if (!checkKeyBinding(this, 'zoomOnMouseWheel', e) || e.wheelDelta === 0) {
	    return;
	  } // Convenience:
	  // Mac and VM Windows on Mac: scroll up: zoom out.
	  // Windows: scroll up: zoom in.


	  var zoomDelta = e.wheelDelta > 0 ? 1.1 : 1 / 1.1;
	  zoom.call(this, e, zoomDelta, e.offsetX, e.offsetY);
	}

	function pinch(e) {
	  if (interactionMutex.isTaken(this._zr, 'globalPan')) {
	    return;
	  }

	  var zoomDelta = e.pinchScale > 1 ? 1.1 : 1 / 1.1;
	  zoom.call(this, e, zoomDelta, e.pinchX, e.pinchY);
	}

	function zoom(e, zoomDelta, zoomX, zoomY) {
	  if (this.pointerChecker && this.pointerChecker(e, zoomX, zoomY)) {
	    // When mouse is out of roamController rect,
	    // default befavoius should not be be disabled, otherwise
	    // page sliding is disabled, contrary to expectation.
	    eventTool.stop(e.event);
	    this.trigger('zoom', zoomDelta, zoomX, zoomY);
	  }
	}

	function checkKeyBinding(roamController, prop, e) {
	  var setting = roamController._opt[prop];
	  return setting && (!zrUtil.isString(setting) || e.event[setting + 'Key']);
	}

	var _default = RoamController;
	module.exports = _default;

/***/ }),
/* 401 */
/***/ (function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(176);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var ATTR = '\0_ec_interaction_mutex';

	function take(zr, resourceKey, userKey) {
	  var store = getStore(zr);
	  store[resourceKey] = userKey;
	}

	function release(zr, resourceKey, userKey) {
	  var store = getStore(zr);
	  var uKey = store[resourceKey];

	  if (uKey === userKey) {
	    store[resourceKey] = null;
	  }
	}

	function isTaken(zr, resourceKey) {
	  return !!getStore(zr)[resourceKey];
	}

	function getStore(zr) {
	  return zr[ATTR] || (zr[ATTR] = {});
	}
	/**
	 * payload: {
	 *     type: 'takeGlobalCursor',
	 *     key: 'dataZoomSelect', or 'brush', or ...,
	 *         If no userKey, release global cursor.
	 * }
	 */


	echarts.registerAction({
	  type: 'takeGlobalCursor',
	  event: 'globalCursorTaken',
	  update: 'update'
	}, function () {});
	exports.take = take;
	exports.release = release;
	exports.isTaken = isTaken;

/***/ }),
/* 402 */
/***/ (function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(176);

	var _util = __webpack_require__(181);

	var createHashMap = _util.createHashMap;
	var each = _util.each;

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	echarts.registerProcessor({
	  // `dataZoomProcessor` will only be performed in needed series. Consider if
	  // there is a line series and a pie series, it is better not to update the
	  // line series if only pie series is needed to be updated.
	  getTargetSeries: function (ecModel) {
	    var seriesModelMap = createHashMap();
	    ecModel.eachComponent('dataZoom', function (dataZoomModel) {
	      dataZoomModel.eachTargetAxis(function (dimNames, axisIndex, dataZoomModel) {
	        var axisProxy = dataZoomModel.getAxisProxy(dimNames.name, axisIndex);
	        each(axisProxy.getTargetSeriesModels(), function (seriesModel) {
	          seriesModelMap.set(seriesModel.uid, seriesModel);
	        });
	      });
	    });
	    return seriesModelMap;
	  },
	  modifyOutputEnd: true,
	  // Consider appendData, where filter should be performed. Because data process is
	  // in block mode currently, it is not need to worry about that the overallProgress
	  // execute every frame.
	  overallReset: function (ecModel, api) {
	    ecModel.eachComponent('dataZoom', function (dataZoomModel) {
	      // We calculate window and reset axis here but not in model
	      // init stage and not after action dispatch handler, because
	      // reset should be called after seriesData.restoreData.
	      dataZoomModel.eachTargetAxis(function (dimNames, axisIndex, dataZoomModel) {
	        dataZoomModel.getAxisProxy(dimNames.name, axisIndex).reset(dataZoomModel, api);
	      }); // Caution: data zoom filtering is order sensitive when using
	      // percent range and no min/max/scale set on axis.
	      // For example, we have dataZoom definition:
	      // [
	      //      {xAxisIndex: 0, start: 30, end: 70},
	      //      {yAxisIndex: 0, start: 20, end: 80}
	      // ]
	      // In this case, [20, 80] of y-dataZoom should be based on data
	      // that have filtered by x-dataZoom using range of [30, 70],
	      // but should not be based on full raw data. Thus sliding
	      // x-dataZoom will change both ranges of xAxis and yAxis,
	      // while sliding y-dataZoom will only change the range of yAxis.
	      // So we should filter x-axis after reset x-axis immediately,
	      // and then reset y-axis and filter y-axis.

	      dataZoomModel.eachTargetAxis(function (dimNames, axisIndex, dataZoomModel) {
	        dataZoomModel.getAxisProxy(dimNames.name, axisIndex).filterData(dataZoomModel, api);
	      });
	    });
	    ecModel.eachComponent('dataZoom', function (dataZoomModel) {
	      // Fullfill all of the range props so that user
	      // is able to get them from chart.getOption().
	      var axisProxy = dataZoomModel.findRepresentativeAxisProxy();
	      var percentRange = axisProxy.getDataPercentWindow();
	      var valueRange = axisProxy.getDataValueWindow();
	      dataZoomModel.setRawRange({
	        start: percentRange[0],
	        end: percentRange[1],
	        startValue: valueRange[0],
	        endValue: valueRange[1]
	      }, true);
	    });
	  }
	});

/***/ }),
/* 403 */
/***/ (function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(176);

	var zrUtil = __webpack_require__(181);

	var helper = __webpack_require__(392);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	echarts.registerAction('dataZoom', function (payload, ecModel) {
	  var linkedNodesFinder = helper.createLinkedNodesFinder(zrUtil.bind(ecModel.eachComponent, ecModel, 'dataZoom'), helper.eachAxisDim, function (model, dimNames) {
	    return model.get(dimNames.axisIndex);
	  });
	  var effectedModels = [];
	  ecModel.eachComponent({
	    mainType: 'dataZoom',
	    query: payload
	  }, function (model, index) {
	    effectedModels.push.apply(effectedModels, linkedNodesFinder(model).nodes);
	  });
	  zrUtil.each(effectedModels, function (dataZoomModel, index) {
	    dataZoomModel.setRawRange({
	      start: payload.start,
	      end: payload.end,
	      startValue: payload.startValue,
	      endValue: payload.endValue
	    });
	  });
	});

/***/ }),
/* 404 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(405);

	__webpack_require__(407);

	__webpack_require__(408);

	__webpack_require__(409);

	__webpack_require__(410);

	__webpack_require__(411);

	__webpack_require__(420);

/***/ }),
/* 405 */
/***/ (function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(176);

	var zrUtil = __webpack_require__(181);

	var featureManager = __webpack_require__(406);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var ToolboxModel = echarts.extendComponentModel({
	  type: 'toolbox',
	  layoutMode: {
	    type: 'box',
	    ignoreSize: true
	  },
	  optionUpdated: function () {
	    ToolboxModel.superApply(this, 'optionUpdated', arguments);
	    zrUtil.each(this.option.feature, function (featureOpt, featureName) {
	      var Feature = featureManager.get(featureName);
	      Feature && zrUtil.merge(featureOpt, Feature.defaultOption);
	    });
	  },
	  defaultOption: {
	    show: true,
	    z: 6,
	    zlevel: 0,
	    orient: 'horizontal',
	    left: 'right',
	    top: 'top',
	    // right
	    // bottom
	    backgroundColor: 'transparent',
	    borderColor: '#ccc',
	    borderRadius: 0,
	    borderWidth: 0,
	    padding: 5,
	    itemSize: 15,
	    itemGap: 8,
	    showTitle: true,
	    iconStyle: {
	      borderColor: '#666',
	      color: 'none'
	    },
	    emphasis: {
	      iconStyle: {
	        borderColor: '#3E98C5'
	      } // textStyle: {},
	      // feature

	    }
	  }
	});
	var _default = ToolboxModel;
	module.exports = _default;

/***/ }),
/* 406 */
/***/ (function(module, exports) {

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var features = {};

	function register(name, ctor) {
	  features[name] = ctor;
	}

	function get(name) {
	  return features[name];
	}

	exports.register = register;
	exports.get = get;

/***/ }),
/* 407 */
/***/ (function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(176);

	var zrUtil = __webpack_require__(181);

	var textContain = __webpack_require__(211);

	var featureManager = __webpack_require__(406);

	var graphic = __webpack_require__(226);

	var Model = __webpack_require__(220);

	var DataDiffer = __webpack_require__(298);

	var listComponentHelper = __webpack_require__(369);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var _default = echarts.extendComponentView({
	  type: 'toolbox',
	  render: function (toolboxModel, ecModel, api, payload) {
	    var group = this.group;
	    group.removeAll();

	    if (!toolboxModel.get('show')) {
	      return;
	    }

	    var itemSize = +toolboxModel.get('itemSize');
	    var featureOpts = toolboxModel.get('feature') || {};
	    var features = this._features || (this._features = {});
	    var featureNames = [];
	    zrUtil.each(featureOpts, function (opt, name) {
	      featureNames.push(name);
	    });
	    new DataDiffer(this._featureNames || [], featureNames).add(processFeature).update(processFeature).remove(zrUtil.curry(processFeature, null)).execute(); // Keep for diff.

	    this._featureNames = featureNames;

	    function processFeature(newIndex, oldIndex) {
	      var featureName = featureNames[newIndex];
	      var oldName = featureNames[oldIndex];
	      var featureOpt = featureOpts[featureName];
	      var featureModel = new Model(featureOpt, toolboxModel, toolboxModel.ecModel);
	      var feature;

	      if (featureName && !oldName) {
	        // Create
	        if (isUserFeatureName(featureName)) {
	          feature = {
	            model: featureModel,
	            onclick: featureModel.option.onclick,
	            featureName: featureName
	          };
	        } else {
	          var Feature = featureManager.get(featureName);

	          if (!Feature) {
	            return;
	          }

	          feature = new Feature(featureModel, ecModel, api);
	        }

	        features[featureName] = feature;
	      } else {
	        feature = features[oldName]; // If feature does not exsit.

	        if (!feature) {
	          return;
	        }

	        feature.model = featureModel;
	        feature.ecModel = ecModel;
	        feature.api = api;
	      }

	      if (!featureName && oldName) {
	        feature.dispose && feature.dispose(ecModel, api);
	        return;
	      }

	      if (!featureModel.get('show') || feature.unusable) {
	        feature.remove && feature.remove(ecModel, api);
	        return;
	      }

	      createIconPaths(featureModel, feature, featureName);

	      featureModel.setIconStatus = function (iconName, status) {
	        var option = this.option;
	        var iconPaths = this.iconPaths;
	        option.iconStatus = option.iconStatus || {};
	        option.iconStatus[iconName] = status; // FIXME

	        iconPaths[iconName] && iconPaths[iconName].trigger(status);
	      };

	      if (feature.render) {
	        feature.render(featureModel, ecModel, api, payload);
	      }
	    }

	    function createIconPaths(featureModel, feature, featureName) {
	      var iconStyleModel = featureModel.getModel('iconStyle');
	      var iconStyleEmphasisModel = featureModel.getModel('emphasis.iconStyle'); // If one feature has mutiple icon. they are orginaized as
	      // {
	      //     icon: {
	      //         foo: '',
	      //         bar: ''
	      //     },
	      //     title: {
	      //         foo: '',
	      //         bar: ''
	      //     }
	      // }

	      var icons = feature.getIcons ? feature.getIcons() : featureModel.get('icon');
	      var titles = featureModel.get('title') || {};

	      if (typeof icons === 'string') {
	        var icon = icons;
	        var title = titles;
	        icons = {};
	        titles = {};
	        icons[featureName] = icon;
	        titles[featureName] = title;
	      }

	      var iconPaths = featureModel.iconPaths = {};
	      zrUtil.each(icons, function (iconStr, iconName) {
	        var path = graphic.createIcon(iconStr, {}, {
	          x: -itemSize / 2,
	          y: -itemSize / 2,
	          width: itemSize,
	          height: itemSize
	        });
	        path.setStyle(iconStyleModel.getItemStyle());
	        path.hoverStyle = iconStyleEmphasisModel.getItemStyle();
	        graphic.setHoverStyle(path);

	        if (toolboxModel.get('showTitle')) {
	          path.__title = titles[iconName];
	          path.on('mouseover', function () {
	            // Should not reuse above hoverStyle, which might be modified.
	            var hoverStyle = iconStyleEmphasisModel.getItemStyle();
	            path.setStyle({
	              text: titles[iconName],
	              textPosition: hoverStyle.textPosition || 'bottom',
	              textFill: hoverStyle.fill || hoverStyle.stroke || '#000',
	              textAlign: hoverStyle.textAlign || 'center'
	            });
	          }).on('mouseout', function () {
	            path.setStyle({
	              textFill: null
	            });
	          });
	        }

	        path.trigger(featureModel.get('iconStatus.' + iconName) || 'normal');
	        group.add(path);
	        path.on('click', zrUtil.bind(feature.onclick, feature, ecModel, api, iconName));
	        iconPaths[iconName] = path;
	      });
	    }

	    listComponentHelper.layout(group, toolboxModel, api); // Render background after group is layout
	    // FIXME

	    group.add(listComponentHelper.makeBackground(group.getBoundingRect(), toolboxModel)); // Adjust icon title positions to avoid them out of screen

	    group.eachChild(function (icon) {
	      var titleText = icon.__title;
	      var hoverStyle = icon.hoverStyle; // May be background element

	      if (hoverStyle && titleText) {
	        var rect = textContain.getBoundingRect(titleText, textContain.makeFont(hoverStyle));
	        var offsetX = icon.position[0] + group.position[0];
	        var offsetY = icon.position[1] + group.position[1] + itemSize;
	        var needPutOnTop = false;

	        if (offsetY + rect.height > api.getHeight()) {
	          hoverStyle.textPosition = 'top';
	          needPutOnTop = true;
	        }

	        var topOffset = needPutOnTop ? -5 - rect.height : itemSize + 8;

	        if (offsetX + rect.width / 2 > api.getWidth()) {
	          hoverStyle.textPosition = ['100%', topOffset];
	          hoverStyle.textAlign = 'right';
	        } else if (offsetX - rect.width / 2 < 0) {
	          hoverStyle.textPosition = [0, topOffset];
	          hoverStyle.textAlign = 'left';
	        }
	      }
	    });
	  },
	  updateView: function (toolboxModel, ecModel, api, payload) {
	    zrUtil.each(this._features, function (feature) {
	      feature.updateView && feature.updateView(feature.model, ecModel, api, payload);
	    });
	  },
	  // updateLayout: function (toolboxModel, ecModel, api, payload) {
	  //     zrUtil.each(this._features, function (feature) {
	  //         feature.updateLayout && feature.updateLayout(feature.model, ecModel, api, payload);
	  //     });
	  // },
	  remove: function (ecModel, api) {
	    zrUtil.each(this._features, function (feature) {
	      feature.remove && feature.remove(ecModel, api);
	    });
	    this.group.removeAll();
	  },
	  dispose: function (ecModel, api) {
	    zrUtil.each(this._features, function (feature) {
	      feature.dispose && feature.dispose(ecModel, api);
	    });
	  }
	});

	function isUserFeatureName(featureName) {
	  return featureName.indexOf('my') === 0;
	}

	module.exports = _default;

/***/ }),
/* 408 */
/***/ (function(module, exports, __webpack_require__) {

	var env = __webpack_require__(180);

	var lang = __webpack_require__(288);

	var featureManager = __webpack_require__(406);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var saveAsImageLang = lang.toolbox.saveAsImage;

	function SaveAsImage(model) {
	  this.model = model;
	}

	SaveAsImage.defaultOption = {
	  show: true,
	  icon: 'M4.7,22.9L29.3,45.5L54.7,23.4M4.6,43.6L4.6,58L53.8,58L53.8,43.6M29.2,45.1L29.2,0',
	  title: saveAsImageLang.title,
	  type: 'png',
	  // Default use option.backgroundColor
	  // backgroundColor: '#fff',
	  name: '',
	  excludeComponents: ['toolbox'],
	  pixelRatio: 1,
	  lang: saveAsImageLang.lang.slice()
	};
	SaveAsImage.prototype.unusable = !env.canvasSupported;
	var proto = SaveAsImage.prototype;

	proto.onclick = function (ecModel, api) {
	  var model = this.model;
	  var title = model.get('name') || ecModel.get('title.0.text') || 'echarts';
	  var $a = document.createElement('a');
	  var type = model.get('type', true) || 'png';
	  $a.download = title + '.' + type;
	  $a.target = '_blank';
	  var url = api.getConnectedDataURL({
	    type: type,
	    backgroundColor: model.get('backgroundColor', true) || ecModel.get('backgroundColor') || '#fff',
	    excludeComponents: model.get('excludeComponents'),
	    pixelRatio: model.get('pixelRatio')
	  });
	  $a.href = url; // Chrome and Firefox

	  if (typeof MouseEvent === 'function' && !env.browser.ie && !env.browser.edge) {
	    var evt = new MouseEvent('click', {
	      view: window,
	      bubbles: true,
	      cancelable: false
	    });
	    $a.dispatchEvent(evt);
	  } // IE
	  else {
	      if (window.navigator.msSaveOrOpenBlob) {
	        var bstr = atob(url.split(',')[1]);
	        var n = bstr.length;
	        var u8arr = new Uint8Array(n);

	        while (n--) {
	          u8arr[n] = bstr.charCodeAt(n);
	        }

	        var blob = new Blob([u8arr]);
	        window.navigator.msSaveOrOpenBlob(blob, title + '.' + type);
	      } else {
	        var lang = model.get('lang');
	        var html = '' + '<body style="margin:0;">' + '<img src="' + url + '" style="max-width:100%;" title="' + (lang && lang[0] || '') + '" />' + '</body>';
	        var tab = window.open();
	        tab.document.write(html);
	      }
	    }
	};

	featureManager.register('saveAsImage', SaveAsImage);
	var _default = SaveAsImage;
	module.exports = _default;

/***/ }),
/* 409 */
/***/ (function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(176);

	var zrUtil = __webpack_require__(181);

	var lang = __webpack_require__(288);

	var featureManager = __webpack_require__(406);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var magicTypeLang = lang.toolbox.magicType;

	function MagicType(model) {
	  this.model = model;
	}

	MagicType.defaultOption = {
	  show: true,
	  type: [],
	  // Icon group
	  icon: {
	    line: 'M4.1,28.9h7.1l9.3-22l7.4,38l9.7-19.7l3,12.8h14.9M4.1,58h51.4',
	    bar: 'M6.7,22.9h10V48h-10V22.9zM24.9,13h10v35h-10V13zM43.2,2h10v46h-10V2zM3.1,58h53.7',
	    stack: 'M8.2,38.4l-8.4,4.1l30.6,15.3L60,42.5l-8.1-4.1l-21.5,11L8.2,38.4z M51.9,30l-8.1,4.2l-13.4,6.9l-13.9-6.9L8.2,30l-8.4,4.2l8.4,4.2l22.2,11l21.5-11l8.1-4.2L51.9,30z M51.9,21.7l-8.1,4.2L35.7,30l-5.3,2.8L24.9,30l-8.4-4.1l-8.3-4.2l-8.4,4.2L8.2,30l8.3,4.2l13.9,6.9l13.4-6.9l8.1-4.2l8.1-4.1L51.9,21.7zM30.4,2.2L-0.2,17.5l8.4,4.1l8.3,4.2l8.4,4.2l5.5,2.7l5.3-2.7l8.1-4.2l8.1-4.2l8.1-4.1L30.4,2.2z',
	    // jshint ignore:line
	    tiled: 'M2.3,2.2h22.8V25H2.3V2.2z M35,2.2h22.8V25H35V2.2zM2.3,35h22.8v22.8H2.3V35z M35,35h22.8v22.8H35V35z'
	  },
	  // `line`, `bar`, `stack`, `tiled`
	  title: zrUtil.clone(magicTypeLang.title),
	  option: {},
	  seriesIndex: {}
	};
	var proto = MagicType.prototype;

	proto.getIcons = function () {
	  var model = this.model;
	  var availableIcons = model.get('icon');
	  var icons = {};
	  zrUtil.each(model.get('type'), function (type) {
	    if (availableIcons[type]) {
	      icons[type] = availableIcons[type];
	    }
	  });
	  return icons;
	};

	var seriesOptGenreator = {
	  'line': function (seriesType, seriesId, seriesModel, model) {
	    if (seriesType === 'bar') {
	      return zrUtil.merge({
	        id: seriesId,
	        type: 'line',
	        // Preserve data related option
	        data: seriesModel.get('data'),
	        stack: seriesModel.get('stack'),
	        markPoint: seriesModel.get('markPoint'),
	        markLine: seriesModel.get('markLine')
	      }, model.get('option.line') || {}, true);
	    }
	  },
	  'bar': function (seriesType, seriesId, seriesModel, model) {
	    if (seriesType === 'line') {
	      return zrUtil.merge({
	        id: seriesId,
	        type: 'bar',
	        // Preserve data related option
	        data: seriesModel.get('data'),
	        stack: seriesModel.get('stack'),
	        markPoint: seriesModel.get('markPoint'),
	        markLine: seriesModel.get('markLine')
	      }, model.get('option.bar') || {}, true);
	    }
	  },
	  'stack': function (seriesType, seriesId, seriesModel, model) {
	    if (seriesType === 'line' || seriesType === 'bar') {
	      return zrUtil.merge({
	        id: seriesId,
	        stack: '__ec_magicType_stack__'
	      }, model.get('option.stack') || {}, true);
	    }
	  },
	  'tiled': function (seriesType, seriesId, seriesModel, model) {
	    if (seriesType === 'line' || seriesType === 'bar') {
	      return zrUtil.merge({
	        id: seriesId,
	        stack: ''
	      }, model.get('option.tiled') || {}, true);
	    }
	  }
	};
	var radioTypes = [['line', 'bar'], ['stack', 'tiled']];

	proto.onclick = function (ecModel, api, type) {
	  var model = this.model;
	  var seriesIndex = model.get('seriesIndex.' + type); // Not supported magicType

	  if (!seriesOptGenreator[type]) {
	    return;
	  }

	  var newOption = {
	    series: []
	  };

	  var generateNewSeriesTypes = function (seriesModel) {
	    var seriesType = seriesModel.subType;
	    var seriesId = seriesModel.id;
	    var newSeriesOpt = seriesOptGenreator[type](seriesType, seriesId, seriesModel, model);

	    if (newSeriesOpt) {
	      // PENDING If merge original option?
	      zrUtil.defaults(newSeriesOpt, seriesModel.option);
	      newOption.series.push(newSeriesOpt);
	    } // Modify boundaryGap


	    var coordSys = seriesModel.coordinateSystem;

	    if (coordSys && coordSys.type === 'cartesian2d' && (type === 'line' || type === 'bar')) {
	      var categoryAxis = coordSys.getAxesByScale('ordinal')[0];

	      if (categoryAxis) {
	        var axisDim = categoryAxis.dim;
	        var axisType = axisDim + 'Axis';
	        var axisModel = ecModel.queryComponents({
	          mainType: axisType,
	          index: seriesModel.get(name + 'Index'),
	          id: seriesModel.get(name + 'Id')
	        })[0];
	        var axisIndex = axisModel.componentIndex;
	        newOption[axisType] = newOption[axisType] || [];

	        for (var i = 0; i <= axisIndex; i++) {
	          newOption[axisType][axisIndex] = newOption[axisType][axisIndex] || {};
	        }

	        newOption[axisType][axisIndex].boundaryGap = type === 'bar' ? true : false;
	      }
	    }
	  };

	  zrUtil.each(radioTypes, function (radio) {
	    if (zrUtil.indexOf(radio, type) >= 0) {
	      zrUtil.each(radio, function (item) {
	        model.setIconStatus(item, 'normal');
	      });
	    }
	  });
	  model.setIconStatus(type, 'emphasis');
	  ecModel.eachComponent({
	    mainType: 'series',
	    query: seriesIndex == null ? null : {
	      seriesIndex: seriesIndex
	    }
	  }, generateNewSeriesTypes);
	  api.dispatchAction({
	    type: 'changeMagicType',
	    currentType: type,
	    newOption: newOption
	  });
	};

	echarts.registerAction({
	  type: 'changeMagicType',
	  event: 'magicTypeChanged',
	  update: 'prepareAndUpdate'
	}, function (payload, ecModel) {
	  ecModel.mergeOption(payload.newOption);
	});
	featureManager.register('magicType', MagicType);
	var _default = MagicType;
	module.exports = _default;

/***/ }),
/* 410 */
/***/ (function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(176);

	var zrUtil = __webpack_require__(181);

	var eventTool = __webpack_require__(215);

	var lang = __webpack_require__(288);

	var featureManager = __webpack_require__(406);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var dataViewLang = lang.toolbox.dataView;
	var BLOCK_SPLITER = new Array(60).join('-');
	var ITEM_SPLITER = '\t';
	/**
	 * Group series into two types
	 *  1. on category axis, like line, bar
	 *  2. others, like scatter, pie
	 * @param {module:echarts/model/Global} ecModel
	 * @return {Object}
	 * @inner
	 */

	function groupSeries(ecModel) {
	  var seriesGroupByCategoryAxis = {};
	  var otherSeries = [];
	  var meta = [];
	  ecModel.eachRawSeries(function (seriesModel) {
	    var coordSys = seriesModel.coordinateSystem;

	    if (coordSys && (coordSys.type === 'cartesian2d' || coordSys.type === 'polar')) {
	      var baseAxis = coordSys.getBaseAxis();

	      if (baseAxis.type === 'category') {
	        var key = baseAxis.dim + '_' + baseAxis.index;

	        if (!seriesGroupByCategoryAxis[key]) {
	          seriesGroupByCategoryAxis[key] = {
	            categoryAxis: baseAxis,
	            valueAxis: coordSys.getOtherAxis(baseAxis),
	            series: []
	          };
	          meta.push({
	            axisDim: baseAxis.dim,
	            axisIndex: baseAxis.index
	          });
	        }

	        seriesGroupByCategoryAxis[key].series.push(seriesModel);
	      } else {
	        otherSeries.push(seriesModel);
	      }
	    } else {
	      otherSeries.push(seriesModel);
	    }
	  });
	  return {
	    seriesGroupByCategoryAxis: seriesGroupByCategoryAxis,
	    other: otherSeries,
	    meta: meta
	  };
	}
	/**
	 * Assemble content of series on cateogory axis
	 * @param {Array.<module:echarts/model/Series>} series
	 * @return {string}
	 * @inner
	 */


	function assembleSeriesWithCategoryAxis(series) {
	  var tables = [];
	  zrUtil.each(series, function (group, key) {
	    var categoryAxis = group.categoryAxis;
	    var valueAxis = group.valueAxis;
	    var valueAxisDim = valueAxis.dim;
	    var headers = [' '].concat(zrUtil.map(group.series, function (series) {
	      return series.name;
	    }));
	    var columns = [categoryAxis.model.getCategories()];
	    zrUtil.each(group.series, function (series) {
	      columns.push(series.getRawData().mapArray(valueAxisDim, function (val) {
	        return val;
	      }));
	    }); // Assemble table content

	    var lines = [headers.join(ITEM_SPLITER)];

	    for (var i = 0; i < columns[0].length; i++) {
	      var items = [];

	      for (var j = 0; j < columns.length; j++) {
	        items.push(columns[j][i]);
	      }

	      lines.push(items.join(ITEM_SPLITER));
	    }

	    tables.push(lines.join('\n'));
	  });
	  return tables.join('\n\n' + BLOCK_SPLITER + '\n\n');
	}
	/**
	 * Assemble content of other series
	 * @param {Array.<module:echarts/model/Series>} series
	 * @return {string}
	 * @inner
	 */


	function assembleOtherSeries(series) {
	  return zrUtil.map(series, function (series) {
	    var data = series.getRawData();
	    var lines = [series.name];
	    var vals = [];
	    data.each(data.dimensions, function () {
	      var argLen = arguments.length;
	      var dataIndex = arguments[argLen - 1];
	      var name = data.getName(dataIndex);

	      for (var i = 0; i < argLen - 1; i++) {
	        vals[i] = arguments[i];
	      }

	      lines.push((name ? name + ITEM_SPLITER : '') + vals.join(ITEM_SPLITER));
	    });
	    return lines.join('\n');
	  }).join('\n\n' + BLOCK_SPLITER + '\n\n');
	}
	/**
	 * @param {module:echarts/model/Global}
	 * @return {Object}
	 * @inner
	 */


	function getContentFromModel(ecModel) {
	  var result = groupSeries(ecModel);
	  return {
	    value: zrUtil.filter([assembleSeriesWithCategoryAxis(result.seriesGroupByCategoryAxis), assembleOtherSeries(result.other)], function (str) {
	      return str.replace(/[\n\t\s]/g, '');
	    }).join('\n\n' + BLOCK_SPLITER + '\n\n'),
	    meta: result.meta
	  };
	}

	function trim(str) {
	  return str.replace(/^\s\s*/, '').replace(/\s\s*$/, '');
	}
	/**
	 * If a block is tsv format
	 */


	function isTSVFormat(block) {
	  // Simple method to find out if a block is tsv format
	  var firstLine = block.slice(0, block.indexOf('\n'));

	  if (firstLine.indexOf(ITEM_SPLITER) >= 0) {
	    return true;
	  }
	}

	var itemSplitRegex = new RegExp('[' + ITEM_SPLITER + ']+', 'g');
	/**
	 * @param {string} tsv
	 * @return {Object}
	 */

	function parseTSVContents(tsv) {
	  var tsvLines = tsv.split(/\n+/g);
	  var headers = trim(tsvLines.shift()).split(itemSplitRegex);
	  var categories = [];
	  var series = zrUtil.map(headers, function (header) {
	    return {
	      name: header,
	      data: []
	    };
	  });

	  for (var i = 0; i < tsvLines.length; i++) {
	    var items = trim(tsvLines[i]).split(itemSplitRegex);
	    categories.push(items.shift());

	    for (var j = 0; j < items.length; j++) {
	      series[j] && (series[j].data[i] = items[j]);
	    }
	  }

	  return {
	    series: series,
	    categories: categories
	  };
	}
	/**
	 * @param {string} str
	 * @return {Array.<Object>}
	 * @inner
	 */


	function parseListContents(str) {
	  var lines = str.split(/\n+/g);
	  var seriesName = trim(lines.shift());
	  var data = [];

	  for (var i = 0; i < lines.length; i++) {
	    var items = trim(lines[i]).split(itemSplitRegex);
	    var name = '';
	    var value;
	    var hasName = false;

	    if (isNaN(items[0])) {
	      // First item is name
	      hasName = true;
	      name = items[0];
	      items = items.slice(1);
	      data[i] = {
	        name: name,
	        value: []
	      };
	      value = data[i].value;
	    } else {
	      value = data[i] = [];
	    }

	    for (var j = 0; j < items.length; j++) {
	      value.push(+items[j]);
	    }

	    if (value.length === 1) {
	      hasName ? data[i].value = value[0] : data[i] = value[0];
	    }
	  }

	  return {
	    name: seriesName,
	    data: data
	  };
	}
	/**
	 * @param {string} str
	 * @param {Array.<Object>} blockMetaList
	 * @return {Object}
	 * @inner
	 */


	function parseContents(str, blockMetaList) {
	  var blocks = str.split(new RegExp('\n*' + BLOCK_SPLITER + '\n*', 'g'));
	  var newOption = {
	    series: []
	  };
	  zrUtil.each(blocks, function (block, idx) {
	    if (isTSVFormat(block)) {
	      var result = parseTSVContents(block);
	      var blockMeta = blockMetaList[idx];
	      var axisKey = blockMeta.axisDim + 'Axis';

	      if (blockMeta) {
	        newOption[axisKey] = newOption[axisKey] || [];
	        newOption[axisKey][blockMeta.axisIndex] = {
	          data: result.categories
	        };
	        newOption.series = newOption.series.concat(result.series);
	      }
	    } else {
	      var result = parseListContents(block);
	      newOption.series.push(result);
	    }
	  });
	  return newOption;
	}
	/**
	 * @alias {module:echarts/component/toolbox/feature/DataView}
	 * @constructor
	 * @param {module:echarts/model/Model} model
	 */


	function DataView(model) {
	  this._dom = null;
	  this.model = model;
	}

	DataView.defaultOption = {
	  show: true,
	  readOnly: false,
	  optionToContent: null,
	  contentToOption: null,
	  icon: 'M17.5,17.3H33 M17.5,17.3H33 M45.4,29.5h-28 M11.5,2v56H51V14.8L38.4,2H11.5z M38.4,2.2v12.7H51 M45.4,41.7h-28',
	  title: zrUtil.clone(dataViewLang.title),
	  lang: zrUtil.clone(dataViewLang.lang),
	  backgroundColor: '#fff',
	  textColor: '#000',
	  textareaColor: '#fff',
	  textareaBorderColor: '#333',
	  buttonColor: '#c23531',
	  buttonTextColor: '#fff'
	};

	DataView.prototype.onclick = function (ecModel, api) {
	  var container = api.getDom();
	  var model = this.model;

	  if (this._dom) {
	    container.removeChild(this._dom);
	  }

	  var root = document.createElement('div');
	  root.style.cssText = 'position:absolute;left:5px;top:5px;bottom:5px;right:5px;';
	  root.style.backgroundColor = model.get('backgroundColor') || '#fff'; // Create elements

	  var header = document.createElement('h4');
	  var lang = model.get('lang') || [];
	  header.innerHTML = lang[0] || model.get('title');
	  header.style.cssText = 'margin: 10px 20px;';
	  header.style.color = model.get('textColor');
	  var viewMain = document.createElement('div');
	  var textarea = document.createElement('textarea');
	  viewMain.style.cssText = 'display:block;width:100%;overflow:auto;';
	  var optionToContent = model.get('optionToContent');
	  var contentToOption = model.get('contentToOption');
	  var result = getContentFromModel(ecModel);

	  if (typeof optionToContent === 'function') {
	    var htmlOrDom = optionToContent(api.getOption());

	    if (typeof htmlOrDom === 'string') {
	      viewMain.innerHTML = htmlOrDom;
	    } else if (zrUtil.isDom(htmlOrDom)) {
	      viewMain.appendChild(htmlOrDom);
	    }
	  } else {
	    // Use default textarea
	    viewMain.appendChild(textarea);
	    textarea.readOnly = model.get('readOnly');
	    textarea.style.cssText = 'width:100%;height:100%;font-family:monospace;font-size:14px;line-height:1.6rem;';
	    textarea.style.color = model.get('textColor');
	    textarea.style.borderColor = model.get('textareaBorderColor');
	    textarea.style.backgroundColor = model.get('textareaColor');
	    textarea.value = result.value;
	  }

	  var blockMetaList = result.meta;
	  var buttonContainer = document.createElement('div');
	  buttonContainer.style.cssText = 'position:absolute;bottom:0;left:0;right:0;';
	  var buttonStyle = 'float:right;margin-right:20px;border:none;' + 'cursor:pointer;padding:2px 5px;font-size:12px;border-radius:3px';
	  var closeButton = document.createElement('div');
	  var refreshButton = document.createElement('div');
	  buttonStyle += ';background-color:' + model.get('buttonColor');
	  buttonStyle += ';color:' + model.get('buttonTextColor');
	  var self = this;

	  function close() {
	    container.removeChild(root);
	    self._dom = null;
	  }

	  eventTool.addEventListener(closeButton, 'click', close);
	  eventTool.addEventListener(refreshButton, 'click', function () {
	    var newOption;

	    try {
	      if (typeof contentToOption === 'function') {
	        newOption = contentToOption(viewMain, api.getOption());
	      } else {
	        newOption = parseContents(textarea.value, blockMetaList);
	      }
	    } catch (e) {
	      close();
	      throw new Error('Data view format error ' + e);
	    }

	    if (newOption) {
	      api.dispatchAction({
	        type: 'changeDataView',
	        newOption: newOption
	      });
	    }

	    close();
	  });
	  closeButton.innerHTML = lang[1];
	  refreshButton.innerHTML = lang[2];
	  refreshButton.style.cssText = buttonStyle;
	  closeButton.style.cssText = buttonStyle;
	  !model.get('readOnly') && buttonContainer.appendChild(refreshButton);
	  buttonContainer.appendChild(closeButton); // http://stackoverflow.com/questions/6637341/use-tab-to-indent-in-textarea

	  eventTool.addEventListener(textarea, 'keydown', function (e) {
	    if ((e.keyCode || e.which) === 9) {
	      // get caret position/selection
	      var val = this.value;
	      var start = this.selectionStart;
	      var end = this.selectionEnd; // set textarea value to: text before caret + tab + text after caret

	      this.value = val.substring(0, start) + ITEM_SPLITER + val.substring(end); // put caret at right position again

	      this.selectionStart = this.selectionEnd = start + 1; // prevent the focus lose

	      eventTool.stop(e);
	    }
	  });
	  root.appendChild(header);
	  root.appendChild(viewMain);
	  root.appendChild(buttonContainer);
	  viewMain.style.height = container.clientHeight - 80 + 'px';
	  container.appendChild(root);
	  this._dom = root;
	};

	DataView.prototype.remove = function (ecModel, api) {
	  this._dom && api.getDom().removeChild(this._dom);
	};

	DataView.prototype.dispose = function (ecModel, api) {
	  this.remove(ecModel, api);
	};
	/**
	 * @inner
	 */


	function tryMergeDataOption(newData, originalData) {
	  return zrUtil.map(newData, function (newVal, idx) {
	    var original = originalData && originalData[idx];

	    if (zrUtil.isObject(original) && !zrUtil.isArray(original)) {
	      if (zrUtil.isObject(newVal) && !zrUtil.isArray(newVal)) {
	        newVal = newVal.value;
	      } // Original data has option


	      return zrUtil.defaults({
	        value: newVal
	      }, original);
	    } else {
	      return newVal;
	    }
	  });
	}

	featureManager.register('dataView', DataView);
	echarts.registerAction({
	  type: 'changeDataView',
	  event: 'dataViewChanged',
	  update: 'prepareAndUpdate'
	}, function (payload, ecModel) {
	  var newSeriesOptList = [];
	  zrUtil.each(payload.newOption.series, function (seriesOpt) {
	    var seriesModel = ecModel.getSeriesByName(seriesOpt.name)[0];

	    if (!seriesModel) {
	      // New created series
	      // Geuss the series type
	      newSeriesOptList.push(zrUtil.extend({
	        // Default is scatter
	        type: 'scatter'
	      }, seriesOpt));
	    } else {
	      var originalData = seriesModel.get('data');
	      newSeriesOptList.push({
	        name: seriesOpt.name,
	        data: tryMergeDataOption(seriesOpt.data, originalData)
	      });
	    }
	  });
	  ecModel.mergeOption(zrUtil.defaults({
	    series: newSeriesOptList
	  }, payload.newOption));
	});
	var _default = DataView;
	module.exports = _default;

/***/ }),
/* 411 */
/***/ (function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(176);

	var zrUtil = __webpack_require__(181);

	var BrushController = __webpack_require__(412);

	var BrushTargetManager = __webpack_require__(413);

	var history = __webpack_require__(416);

	var sliderMove = __webpack_require__(383);

	var lang = __webpack_require__(288);

	var featureManager = __webpack_require__(406);

	__webpack_require__(417);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	// Use dataZoomSelect
	var dataZoomLang = lang.toolbox.dataZoom;
	var each = zrUtil.each; // Spectial component id start with \0ec\0, see echarts/model/Global.js~hasInnerId

	var DATA_ZOOM_ID_BASE = '\0_ec_\0toolbox-dataZoom_';

	function DataZoom(model, ecModel, api) {
	  /**
	   * @private
	   * @type {module:echarts/component/helper/BrushController}
	   */
	  (this._brushController = new BrushController(api.getZr())).on('brush', zrUtil.bind(this._onBrush, this)).mount();
	  /**
	   * @private
	   * @type {boolean}
	   */

	  this._isZoomActive;
	}

	DataZoom.defaultOption = {
	  show: true,
	  // Icon group
	  icon: {
	    zoom: 'M0,13.5h26.9 M13.5,26.9V0 M32.1,13.5H58V58H13.5 V32.1',
	    back: 'M22,1.4L9.9,13.5l12.3,12.3 M10.3,13.5H54.9v44.6 H10.3v-26'
	  },
	  // `zoom`, `back`
	  title: zrUtil.clone(dataZoomLang.title)
	};
	var proto = DataZoom.prototype;

	proto.render = function (featureModel, ecModel, api, payload) {
	  this.model = featureModel;
	  this.ecModel = ecModel;
	  this.api = api;
	  updateZoomBtnStatus(featureModel, ecModel, this, payload, api);
	  updateBackBtnStatus(featureModel, ecModel);
	};

	proto.onclick = function (ecModel, api, type) {
	  handlers[type].call(this);
	};

	proto.remove = function (ecModel, api) {
	  this._brushController.unmount();
	};

	proto.dispose = function (ecModel, api) {
	  this._brushController.dispose();
	};
	/**
	 * @private
	 */


	var handlers = {
	  zoom: function () {
	    var nextActive = !this._isZoomActive;
	    this.api.dispatchAction({
	      type: 'takeGlobalCursor',
	      key: 'dataZoomSelect',
	      dataZoomSelectActive: nextActive
	    });
	  },
	  back: function () {
	    this._dispatchZoomAction(history.pop(this.ecModel));
	  }
	};
	/**
	 * @private
	 */

	proto._onBrush = function (areas, opt) {
	  if (!opt.isEnd || !areas.length) {
	    return;
	  }

	  var snapshot = {};
	  var ecModel = this.ecModel;

	  this._brushController.updateCovers([]); // remove cover


	  var brushTargetManager = new BrushTargetManager(retrieveAxisSetting(this.model.option), ecModel, {
	    include: ['grid']
	  });
	  brushTargetManager.matchOutputRanges(areas, ecModel, function (area, coordRange, coordSys) {
	    if (coordSys.type !== 'cartesian2d') {
	      return;
	    }

	    var brushType = area.brushType;

	    if (brushType === 'rect') {
	      setBatch('x', coordSys, coordRange[0]);
	      setBatch('y', coordSys, coordRange[1]);
	    } else {
	      setBatch({
	        lineX: 'x',
	        lineY: 'y'
	      }[brushType], coordSys, coordRange);
	    }
	  });
	  history.push(ecModel, snapshot);

	  this._dispatchZoomAction(snapshot);

	  function setBatch(dimName, coordSys, minMax) {
	    var axis = coordSys.getAxis(dimName);
	    var axisModel = axis.model;
	    var dataZoomModel = findDataZoom(dimName, axisModel, ecModel); // Restrict range.

	    var minMaxSpan = dataZoomModel.findRepresentativeAxisProxy(axisModel).getMinMaxSpan();

	    if (minMaxSpan.minValueSpan != null || minMaxSpan.maxValueSpan != null) {
	      minMax = sliderMove(0, minMax.slice(), axis.scale.getExtent(), 0, minMaxSpan.minValueSpan, minMaxSpan.maxValueSpan);
	    }

	    dataZoomModel && (snapshot[dataZoomModel.id] = {
	      dataZoomId: dataZoomModel.id,
	      startValue: minMax[0],
	      endValue: minMax[1]
	    });
	  }

	  function findDataZoom(dimName, axisModel, ecModel) {
	    var found;
	    ecModel.eachComponent({
	      mainType: 'dataZoom',
	      subType: 'select'
	    }, function (dzModel) {
	      var has = dzModel.getAxisModel(dimName, axisModel.componentIndex);
	      has && (found = dzModel);
	    });
	    return found;
	  }
	};
	/**
	 * @private
	 */


	proto._dispatchZoomAction = function (snapshot) {
	  var batch = []; // Convert from hash map to array.

	  each(snapshot, function (batchItem, dataZoomId) {
	    batch.push(zrUtil.clone(batchItem));
	  });
	  batch.length && this.api.dispatchAction({
	    type: 'dataZoom',
	    from: this.uid,
	    batch: batch
	  });
	};

	function retrieveAxisSetting(option) {
	  var setting = {}; // Compatible with previous setting: null => all axis, false => no axis.

	  zrUtil.each(['xAxisIndex', 'yAxisIndex'], function (name) {
	    setting[name] = option[name];
	    setting[name] == null && (setting[name] = 'all');
	    (setting[name] === false || setting[name] === 'none') && (setting[name] = []);
	  });
	  return setting;
	}

	function updateBackBtnStatus(featureModel, ecModel) {
	  featureModel.setIconStatus('back', history.count(ecModel) > 1 ? 'emphasis' : 'normal');
	}

	function updateZoomBtnStatus(featureModel, ecModel, view, payload, api) {
	  var zoomActive = view._isZoomActive;

	  if (payload && payload.type === 'takeGlobalCursor') {
	    zoomActive = payload.key === 'dataZoomSelect' ? payload.dataZoomSelectActive : false;
	  }

	  view._isZoomActive = zoomActive;
	  featureModel.setIconStatus('zoom', zoomActive ? 'emphasis' : 'normal');
	  var brushTargetManager = new BrushTargetManager(retrieveAxisSetting(featureModel.option), ecModel, {
	    include: ['grid']
	  });

	  view._brushController.setPanels(brushTargetManager.makePanelOpts(api, function (targetInfo) {
	    return targetInfo.xAxisDeclared && !targetInfo.yAxisDeclared ? 'lineX' : !targetInfo.xAxisDeclared && targetInfo.yAxisDeclared ? 'lineY' : 'rect';
	  })).enableBrush(zoomActive ? {
	    brushType: 'auto',
	    brushStyle: {
	      // FIXME user customized?
	      lineWidth: 0,
	      fill: 'rgba(0,0,0,0.2)'
	    }
	  } : false);
	}

	featureManager.register('dataZoom', DataZoom); // Create special dataZoom option for select
	// FIXME consider the case of merge option, where axes options are not exists.

	echarts.registerPreprocessor(function (option) {
	  if (!option) {
	    return;
	  }

	  var dataZoomOpts = option.dataZoom || (option.dataZoom = []);

	  if (!zrUtil.isArray(dataZoomOpts)) {
	    option.dataZoom = dataZoomOpts = [dataZoomOpts];
	  }

	  var toolboxOpt = option.toolbox;

	  if (toolboxOpt) {
	    // Assume there is only one toolbox
	    if (zrUtil.isArray(toolboxOpt)) {
	      toolboxOpt = toolboxOpt[0];
	    }

	    if (toolboxOpt && toolboxOpt.feature) {
	      var dataZoomOpt = toolboxOpt.feature.dataZoom; // FIXME: If add dataZoom when setOption in merge mode,
	      // no axis info to be added. See `test/dataZoom-extreme.html`

	      addForAxis('xAxis', dataZoomOpt);
	      addForAxis('yAxis', dataZoomOpt);
	    }
	  }

	  function addForAxis(axisName, dataZoomOpt) {
	    if (!dataZoomOpt) {
	      return;
	    } // Try not to modify model, because it is not merged yet.


	    var axisIndicesName = axisName + 'Index';
	    var givenAxisIndices = dataZoomOpt[axisIndicesName];

	    if (givenAxisIndices != null && givenAxisIndices != 'all' && !zrUtil.isArray(givenAxisIndices)) {
	      givenAxisIndices = givenAxisIndices === false || givenAxisIndices === 'none' ? [] : [givenAxisIndices];
	    }

	    forEachComponent(axisName, function (axisOpt, axisIndex) {
	      if (givenAxisIndices != null && givenAxisIndices != 'all' && zrUtil.indexOf(givenAxisIndices, axisIndex) === -1) {
	        return;
	      }

	      var newOpt = {
	        type: 'select',
	        $fromToolbox: true,
	        // Id for merge mapping.
	        id: DATA_ZOOM_ID_BASE + axisName + axisIndex
	      }; // FIXME
	      // Only support one axis now.

	      newOpt[axisIndicesName] = axisIndex;
	      dataZoomOpts.push(newOpt);
	    });
	  }

	  function forEachComponent(mainType, cb) {
	    var opts = option[mainType];

	    if (!zrUtil.isArray(opts)) {
	      opts = opts ? [opts] : [];
	    }

	    each(opts, cb);
	  }
	});
	var _default = DataZoom;
	module.exports = _default;

/***/ }),
/* 412 */
/***/ (function(module, exports, __webpack_require__) {

	var _config = __webpack_require__(177);

	var __DEV__ = _config.__DEV__;

	var zrUtil = __webpack_require__(181);

	var Eventful = __webpack_require__(185);

	var graphic = __webpack_require__(226);

	var interactionMutex = __webpack_require__(401);

	var DataDiffer = __webpack_require__(298);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var curry = zrUtil.curry;
	var each = zrUtil.each;
	var map = zrUtil.map;
	var mathMin = Math.min;
	var mathMax = Math.max;
	var mathPow = Math.pow;
	var COVER_Z = 10000;
	var UNSELECT_THRESHOLD = 6;
	var MIN_RESIZE_LINE_WIDTH = 6;
	var MUTEX_RESOURCE_KEY = 'globalPan';
	var DIRECTION_MAP = {
	  w: [0, 0],
	  e: [0, 1],
	  n: [1, 0],
	  s: [1, 1]
	};
	var CURSOR_MAP = {
	  w: 'ew',
	  e: 'ew',
	  n: 'ns',
	  s: 'ns',
	  ne: 'nesw',
	  sw: 'nesw',
	  nw: 'nwse',
	  se: 'nwse'
	};
	var DEFAULT_BRUSH_OPT = {
	  brushStyle: {
	    lineWidth: 2,
	    stroke: 'rgba(0,0,0,0.3)',
	    fill: 'rgba(0,0,0,0.1)'
	  },
	  transformable: true,
	  brushMode: 'single',
	  removeOnClick: false
	};
	var baseUID = 0;
	/**
	 * @alias module:echarts/component/helper/BrushController
	 * @constructor
	 * @mixin {module:zrender/mixin/Eventful}
	 * @event module:echarts/component/helper/BrushController#brush
	 *        params:
	 *            areas: Array.<Array>, coord relates to container group,
	 *                                    If no container specified, to global.
	 *            opt {
	 *                isEnd: boolean,
	 *                removeOnClick: boolean
	 *            }
	 *
	 * @param {module:zrender/zrender~ZRender} zr
	 */

	function BrushController(zr) {
	  Eventful.call(this);
	  /**
	   * @type {module:zrender/zrender~ZRender}
	   * @private
	   */

	  this._zr = zr;
	  /**
	   * @type {module:zrender/container/Group}
	   * @readOnly
	   */

	  this.group = new graphic.Group();
	  /**
	   * Only for drawing (after enabledBrush).
	   *     'line', 'rect', 'polygon' or false
	   *     If passing false/null/undefined, disable brush.
	   *     If passing 'auto', determined by panel.defaultBrushType
	   * @private
	   * @type {string}
	   */

	  this._brushType;
	  /**
	   * Only for drawing (after enabledBrush).
	   *
	   * @private
	   * @type {Object}
	   */

	  this._brushOption;
	  /**
	   * @private
	   * @type {Object}
	   */

	  this._panels;
	  /**
	   * @private
	   * @type {Array.<nubmer>}
	   */

	  this._track = [];
	  /**
	   * @private
	   * @type {boolean}
	   */

	  this._dragging;
	  /**
	   * @private
	   * @type {Array}
	   */

	  this._covers = [];
	  /**
	   * @private
	   * @type {moudule:zrender/container/Group}
	   */

	  this._creatingCover;
	  /**
	   * `true` means global panel
	   * @private
	   * @type {module:zrender/container/Group|boolean}
	   */

	  this._creatingPanel;
	  /**
	   * @private
	   * @type {boolean}
	   */

	  this._enableGlobalPan;
	  /**
	   * @private
	   * @type {boolean}
	   */

	  /**
	   * @private
	   * @type {string}
	   */
	  this._uid = 'brushController_' + baseUID++;
	  /**
	   * @private
	   * @type {Object}
	   */

	  this._handlers = {};
	  each(mouseHandlers, function (handler, eventName) {
	    this._handlers[eventName] = zrUtil.bind(handler, this);
	  }, this);
	}

	BrushController.prototype = {
	  constructor: BrushController,

	  /**
	   * If set to null/undefined/false, select disabled.
	   * @param {Object} brushOption
	   * @param {string|boolean} brushOption.brushType 'line', 'rect', 'polygon' or false
	   *                          If passing false/null/undefined, disable brush.
	   *                          If passing 'auto', determined by panel.defaultBrushType.
	   *                              ('auto' can not be used in global panel)
	   * @param {number} [brushOption.brushMode='single'] 'single' or 'multiple'
	   * @param {boolean} [brushOption.transformable=true]
	   * @param {boolean} [brushOption.removeOnClick=false]
	   * @param {Object} [brushOption.brushStyle]
	   * @param {number} [brushOption.brushStyle.width]
	   * @param {number} [brushOption.brushStyle.lineWidth]
	   * @param {string} [brushOption.brushStyle.stroke]
	   * @param {string} [brushOption.brushStyle.fill]
	   * @param {number} [brushOption.z]
	   */
	  enableBrush: function (brushOption) {
	    this._brushType && doDisableBrush(this);
	    brushOption.brushType && doEnableBrush(this, brushOption);
	    return this;
	  },

	  /**
	   * @param {Array.<Object>} panelOpts If not pass, it is global brush.
	   *        Each items: {
	   *            panelId, // mandatory.
	   *            clipPath, // mandatory. function.
	   *            isTargetByCursor, // mandatory. function.
	   *            defaultBrushType, // optional, only used when brushType is 'auto'.
	   *            getLinearBrushOtherExtent, // optional. function.
	   *        }
	   */
	  setPanels: function (panelOpts) {
	    if (panelOpts && panelOpts.length) {
	      var panels = this._panels = {};
	      zrUtil.each(panelOpts, function (panelOpts) {
	        panels[panelOpts.panelId] = zrUtil.clone(panelOpts);
	      });
	    } else {
	      this._panels = null;
	    }

	    return this;
	  },

	  /**
	   * @param {Object} [opt]
	   * @return {boolean} [opt.enableGlobalPan=false]
	   */
	  mount: function (opt) {
	    opt = opt || {};
	    this._enableGlobalPan = opt.enableGlobalPan;
	    var thisGroup = this.group;

	    this._zr.add(thisGroup);

	    thisGroup.attr({
	      position: opt.position || [0, 0],
	      rotation: opt.rotation || 0,
	      scale: opt.scale || [1, 1]
	    });
	    this._transform = thisGroup.getLocalTransform();
	    return this;
	  },
	  eachCover: function (cb, context) {
	    each(this._covers, cb, context);
	  },

	  /**
	   * Update covers.
	   * @param {Array.<Object>} brushOptionList Like:
	   *        [
	   *            {id: 'xx', brushType: 'line', range: [23, 44], brushStyle, transformable},
	   *            {id: 'yy', brushType: 'rect', range: [[23, 44], [23, 54]]},
	   *            ...
	   *        ]
	   *        `brushType` is required in each cover info. (can not be 'auto')
	   *        `id` is not mandatory.
	   *        `brushStyle`, `transformable` is not mandatory, use DEFAULT_BRUSH_OPT by default.
	   *        If brushOptionList is null/undefined, all covers removed.
	   */
	  updateCovers: function (brushOptionList) {
	    brushOptionList = zrUtil.map(brushOptionList, function (brushOption) {
	      return zrUtil.merge(zrUtil.clone(DEFAULT_BRUSH_OPT), brushOption, true);
	    });
	    var tmpIdPrefix = '\0-brush-index-';
	    var oldCovers = this._covers;
	    var newCovers = this._covers = [];
	    var controller = this;
	    var creatingCover = this._creatingCover;
	    new DataDiffer(oldCovers, brushOptionList, oldGetKey, getKey).add(addOrUpdate).update(addOrUpdate).remove(remove).execute();
	    return this;

	    function getKey(brushOption, index) {
	      return (brushOption.id != null ? brushOption.id : tmpIdPrefix + index) + '-' + brushOption.brushType;
	    }

	    function oldGetKey(cover, index) {
	      return getKey(cover.__brushOption, index);
	    }

	    function addOrUpdate(newIndex, oldIndex) {
	      var newBrushOption = brushOptionList[newIndex]; // Consider setOption in event listener of brushSelect,
	      // where updating cover when creating should be forbiden.

	      if (oldIndex != null && oldCovers[oldIndex] === creatingCover) {
	        newCovers[newIndex] = oldCovers[oldIndex];
	      } else {
	        var cover = newCovers[newIndex] = oldIndex != null ? (oldCovers[oldIndex].__brushOption = newBrushOption, oldCovers[oldIndex]) : endCreating(controller, createCover(controller, newBrushOption));
	        updateCoverAfterCreation(controller, cover);
	      }
	    }

	    function remove(oldIndex) {
	      if (oldCovers[oldIndex] !== creatingCover) {
	        controller.group.remove(oldCovers[oldIndex]);
	      }
	    }
	  },
	  unmount: function () {
	    this.enableBrush(false); // container may 'removeAll' outside.

	    clearCovers(this);

	    this._zr.remove(this.group);

	    return this;
	  },
	  dispose: function () {
	    this.unmount();
	    this.off();
	  }
	};
	zrUtil.mixin(BrushController, Eventful);

	function doEnableBrush(controller, brushOption) {
	  var zr = controller._zr; // Consider roam, which takes globalPan too.

	  if (!controller._enableGlobalPan) {
	    interactionMutex.take(zr, MUTEX_RESOURCE_KEY, controller._uid);
	  }

	  each(controller._handlers, function (handler, eventName) {
	    zr.on(eventName, handler);
	  });
	  controller._brushType = brushOption.brushType;
	  controller._brushOption = zrUtil.merge(zrUtil.clone(DEFAULT_BRUSH_OPT), brushOption, true);
	}

	function doDisableBrush(controller) {
	  var zr = controller._zr;
	  interactionMutex.release(zr, MUTEX_RESOURCE_KEY, controller._uid);
	  each(controller._handlers, function (handler, eventName) {
	    zr.off(eventName, handler);
	  });
	  controller._brushType = controller._brushOption = null;
	}

	function createCover(controller, brushOption) {
	  var cover = coverRenderers[brushOption.brushType].createCover(controller, brushOption);
	  cover.__brushOption = brushOption;
	  updateZ(cover, brushOption);
	  controller.group.add(cover);
	  return cover;
	}

	function endCreating(controller, creatingCover) {
	  var coverRenderer = getCoverRenderer(creatingCover);

	  if (coverRenderer.endCreating) {
	    coverRenderer.endCreating(controller, creatingCover);
	    updateZ(creatingCover, creatingCover.__brushOption);
	  }

	  return creatingCover;
	}

	function updateCoverShape(controller, cover) {
	  var brushOption = cover.__brushOption;
	  getCoverRenderer(cover).updateCoverShape(controller, cover, brushOption.range, brushOption);
	}

	function updateZ(cover, brushOption) {
	  var z = brushOption.z;
	  z == null && (z = COVER_Z);
	  cover.traverse(function (el) {
	    el.z = z;
	    el.z2 = z; // Consider in given container.
	  });
	}

	function updateCoverAfterCreation(controller, cover) {
	  getCoverRenderer(cover).updateCommon(controller, cover);
	  updateCoverShape(controller, cover);
	}

	function getCoverRenderer(cover) {
	  return coverRenderers[cover.__brushOption.brushType];
	} // return target panel or `true` (means global panel)


	function getPanelByPoint(controller, e, localCursorPoint) {
	  var panels = controller._panels;

	  if (!panels) {
	    return true; // Global panel
	  }

	  var panel;
	  var transform = controller._transform;
	  each(panels, function (pn) {
	    pn.isTargetByCursor(e, localCursorPoint, transform) && (panel = pn);
	  });
	  return panel;
	} // Return a panel or true


	function getPanelByCover(controller, cover) {
	  var panels = controller._panels;

	  if (!panels) {
	    return true; // Global panel
	  }

	  var panelId = cover.__brushOption.panelId; // User may give cover without coord sys info,
	  // which is then treated as global panel.

	  return panelId != null ? panels[panelId] : true;
	}

	function clearCovers(controller) {
	  var covers = controller._covers;
	  var originalLength = covers.length;
	  each(covers, function (cover) {
	    controller.group.remove(cover);
	  }, controller);
	  covers.length = 0;
	  return !!originalLength;
	}

	function trigger(controller, opt) {
	  var areas = map(controller._covers, function (cover) {
	    var brushOption = cover.__brushOption;
	    var range = zrUtil.clone(brushOption.range);
	    return {
	      brushType: brushOption.brushType,
	      panelId: brushOption.panelId,
	      range: range
	    };
	  });
	  controller.trigger('brush', areas, {
	    isEnd: !!opt.isEnd,
	    removeOnClick: !!opt.removeOnClick
	  });
	}

	function shouldShowCover(controller) {
	  var track = controller._track;

	  if (!track.length) {
	    return false;
	  }

	  var p2 = track[track.length - 1];
	  var p1 = track[0];
	  var dx = p2[0] - p1[0];
	  var dy = p2[1] - p1[1];
	  var dist = mathPow(dx * dx + dy * dy, 0.5);
	  return dist > UNSELECT_THRESHOLD;
	}

	function getTrackEnds(track) {
	  var tail = track.length - 1;
	  tail < 0 && (tail = 0);
	  return [track[0], track[tail]];
	}

	function createBaseRectCover(doDrift, controller, brushOption, edgeNames) {
	  var cover = new graphic.Group();
	  cover.add(new graphic.Rect({
	    name: 'main',
	    style: makeStyle(brushOption),
	    silent: true,
	    draggable: true,
	    cursor: 'move',
	    drift: curry(doDrift, controller, cover, 'nswe'),
	    ondragend: curry(trigger, controller, {
	      isEnd: true
	    })
	  }));
	  each(edgeNames, function (name) {
	    cover.add(new graphic.Rect({
	      name: name,
	      style: {
	        opacity: 0
	      },
	      draggable: true,
	      silent: true,
	      invisible: true,
	      drift: curry(doDrift, controller, cover, name),
	      ondragend: curry(trigger, controller, {
	        isEnd: true
	      })
	    }));
	  });
	  return cover;
	}

	function updateBaseRect(controller, cover, localRange, brushOption) {
	  var lineWidth = brushOption.brushStyle.lineWidth || 0;
	  var handleSize = mathMax(lineWidth, MIN_RESIZE_LINE_WIDTH);
	  var x = localRange[0][0];
	  var y = localRange[1][0];
	  var xa = x - lineWidth / 2;
	  var ya = y - lineWidth / 2;
	  var x2 = localRange[0][1];
	  var y2 = localRange[1][1];
	  var x2a = x2 - handleSize + lineWidth / 2;
	  var y2a = y2 - handleSize + lineWidth / 2;
	  var width = x2 - x;
	  var height = y2 - y;
	  var widtha = width + lineWidth;
	  var heighta = height + lineWidth;
	  updateRectShape(controller, cover, 'main', x, y, width, height);

	  if (brushOption.transformable) {
	    updateRectShape(controller, cover, 'w', xa, ya, handleSize, heighta);
	    updateRectShape(controller, cover, 'e', x2a, ya, handleSize, heighta);
	    updateRectShape(controller, cover, 'n', xa, ya, widtha, handleSize);
	    updateRectShape(controller, cover, 's', xa, y2a, widtha, handleSize);
	    updateRectShape(controller, cover, 'nw', xa, ya, handleSize, handleSize);
	    updateRectShape(controller, cover, 'ne', x2a, ya, handleSize, handleSize);
	    updateRectShape(controller, cover, 'sw', xa, y2a, handleSize, handleSize);
	    updateRectShape(controller, cover, 'se', x2a, y2a, handleSize, handleSize);
	  }
	}

	function updateCommon(controller, cover) {
	  var brushOption = cover.__brushOption;
	  var transformable = brushOption.transformable;
	  var mainEl = cover.childAt(0);
	  mainEl.useStyle(makeStyle(brushOption));
	  mainEl.attr({
	    silent: !transformable,
	    cursor: transformable ? 'move' : 'default'
	  });
	  each(['w', 'e', 'n', 's', 'se', 'sw', 'ne', 'nw'], function (name) {
	    var el = cover.childOfName(name);
	    var globalDir = getGlobalDirection(controller, name);
	    el && el.attr({
	      silent: !transformable,
	      invisible: !transformable,
	      cursor: transformable ? CURSOR_MAP[globalDir] + '-resize' : null
	    });
	  });
	}

	function updateRectShape(controller, cover, name, x, y, w, h) {
	  var el = cover.childOfName(name);
	  el && el.setShape(pointsToRect(clipByPanel(controller, cover, [[x, y], [x + w, y + h]])));
	}

	function makeStyle(brushOption) {
	  return zrUtil.defaults({
	    strokeNoScale: true
	  }, brushOption.brushStyle);
	}

	function formatRectRange(x, y, x2, y2) {
	  var min = [mathMin(x, x2), mathMin(y, y2)];
	  var max = [mathMax(x, x2), mathMax(y, y2)];
	  return [[min[0], max[0]], // x range
	  [min[1], max[1]] // y range
	  ];
	}

	function getTransform(controller) {
	  return graphic.getTransform(controller.group);
	}

	function getGlobalDirection(controller, localDirection) {
	  if (localDirection.length > 1) {
	    localDirection = localDirection.split('');
	    var globalDir = [getGlobalDirection(controller, localDirection[0]), getGlobalDirection(controller, localDirection[1])];
	    (globalDir[0] === 'e' || globalDir[0] === 'w') && globalDir.reverse();
	    return globalDir.join('');
	  } else {
	    var map = {
	      w: 'left',
	      e: 'right',
	      n: 'top',
	      s: 'bottom'
	    };
	    var inverseMap = {
	      left: 'w',
	      right: 'e',
	      top: 'n',
	      bottom: 's'
	    };
	    var globalDir = graphic.transformDirection(map[localDirection], getTransform(controller));
	    return inverseMap[globalDir];
	  }
	}

	function driftRect(toRectRange, fromRectRange, controller, cover, name, dx, dy, e) {
	  var brushOption = cover.__brushOption;
	  var rectRange = toRectRange(brushOption.range);
	  var localDelta = toLocalDelta(controller, dx, dy);
	  each(name.split(''), function (namePart) {
	    var ind = DIRECTION_MAP[namePart];
	    rectRange[ind[0]][ind[1]] += localDelta[ind[0]];
	  });
	  brushOption.range = fromRectRange(formatRectRange(rectRange[0][0], rectRange[1][0], rectRange[0][1], rectRange[1][1]));
	  updateCoverAfterCreation(controller, cover);
	  trigger(controller, {
	    isEnd: false
	  });
	}

	function driftPolygon(controller, cover, dx, dy, e) {
	  var range = cover.__brushOption.range;
	  var localDelta = toLocalDelta(controller, dx, dy);
	  each(range, function (point) {
	    point[0] += localDelta[0];
	    point[1] += localDelta[1];
	  });
	  updateCoverAfterCreation(controller, cover);
	  trigger(controller, {
	    isEnd: false
	  });
	}

	function toLocalDelta(controller, dx, dy) {
	  var thisGroup = controller.group;
	  var localD = thisGroup.transformCoordToLocal(dx, dy);
	  var localZero = thisGroup.transformCoordToLocal(0, 0);
	  return [localD[0] - localZero[0], localD[1] - localZero[1]];
	}

	function clipByPanel(controller, cover, data) {
	  var panel = getPanelByCover(controller, cover);
	  return panel && panel !== true ? panel.clipPath(data, controller._transform) : zrUtil.clone(data);
	}

	function pointsToRect(points) {
	  var xmin = mathMin(points[0][0], points[1][0]);
	  var ymin = mathMin(points[0][1], points[1][1]);
	  var xmax = mathMax(points[0][0], points[1][0]);
	  var ymax = mathMax(points[0][1], points[1][1]);
	  return {
	    x: xmin,
	    y: ymin,
	    width: xmax - xmin,
	    height: ymax - ymin
	  };
	}

	function resetCursor(controller, e, localCursorPoint) {
	  // Check active
	  if (!controller._brushType) {
	    return;
	  }

	  var zr = controller._zr;
	  var covers = controller._covers;
	  var currPanel = getPanelByPoint(controller, e, localCursorPoint); // Check whether in covers.

	  if (!controller._dragging) {
	    for (var i = 0; i < covers.length; i++) {
	      var brushOption = covers[i].__brushOption;

	      if (currPanel && (currPanel === true || brushOption.panelId === currPanel.panelId) && coverRenderers[brushOption.brushType].contain(covers[i], localCursorPoint[0], localCursorPoint[1])) {
	        // Use cursor style set on cover.
	        return;
	      }
	    }
	  }

	  currPanel && zr.setCursorStyle('crosshair');
	}

	function preventDefault(e) {
	  var rawE = e.event;
	  rawE.preventDefault && rawE.preventDefault();
	}

	function mainShapeContain(cover, x, y) {
	  return cover.childOfName('main').contain(x, y);
	}

	function updateCoverByMouse(controller, e, localCursorPoint, isEnd) {
	  var creatingCover = controller._creatingCover;
	  var panel = controller._creatingPanel;
	  var thisBrushOption = controller._brushOption;
	  var eventParams;

	  controller._track.push(localCursorPoint.slice());

	  if (shouldShowCover(controller) || creatingCover) {
	    if (panel && !creatingCover) {
	      thisBrushOption.brushMode === 'single' && clearCovers(controller);
	      var brushOption = zrUtil.clone(thisBrushOption);
	      brushOption.brushType = determineBrushType(brushOption.brushType, panel);
	      brushOption.panelId = panel === true ? null : panel.panelId;
	      creatingCover = controller._creatingCover = createCover(controller, brushOption);

	      controller._covers.push(creatingCover);
	    }

	    if (creatingCover) {
	      var coverRenderer = coverRenderers[determineBrushType(controller._brushType, panel)];
	      var coverBrushOption = creatingCover.__brushOption;
	      coverBrushOption.range = coverRenderer.getCreatingRange(clipByPanel(controller, creatingCover, controller._track));

	      if (isEnd) {
	        endCreating(controller, creatingCover);
	        coverRenderer.updateCommon(controller, creatingCover);
	      }

	      updateCoverShape(controller, creatingCover);
	      eventParams = {
	        isEnd: isEnd
	      };
	    }
	  } else if (isEnd && thisBrushOption.brushMode === 'single' && thisBrushOption.removeOnClick) {
	    // Help user to remove covers easily, only by a tiny drag, in 'single' mode.
	    // But a single click do not clear covers, because user may have casual
	    // clicks (for example, click on other component and do not expect covers
	    // disappear).
	    // Only some cover removed, trigger action, but not every click trigger action.
	    if (getPanelByPoint(controller, e, localCursorPoint) && clearCovers(controller)) {
	      eventParams = {
	        isEnd: isEnd,
	        removeOnClick: true
	      };
	    }
	  }

	  return eventParams;
	}

	function determineBrushType(brushType, panel) {
	  if (brushType === 'auto') {
	    return panel.defaultBrushType;
	  }

	  return brushType;
	}

	var mouseHandlers = {
	  mousedown: function (e) {
	    if (this._dragging) {
	      // In case some browser do not support globalOut,
	      // and release mose out side the browser.
	      handleDragEnd.call(this, e);
	    } else if (!e.target || !e.target.draggable) {
	      preventDefault(e);
	      var localCursorPoint = this.group.transformCoordToLocal(e.offsetX, e.offsetY);
	      this._creatingCover = null;
	      var panel = this._creatingPanel = getPanelByPoint(this, e, localCursorPoint);

	      if (panel) {
	        this._dragging = true;
	        this._track = [localCursorPoint.slice()];
	      }
	    }
	  },
	  mousemove: function (e) {
	    var localCursorPoint = this.group.transformCoordToLocal(e.offsetX, e.offsetY);
	    resetCursor(this, e, localCursorPoint);

	    if (this._dragging) {
	      preventDefault(e);
	      var eventParams = updateCoverByMouse(this, e, localCursorPoint, false);
	      eventParams && trigger(this, eventParams);
	    }
	  },
	  mouseup: handleDragEnd //,
	  // FIXME
	  // in tooltip, globalout should not be triggered.
	  // globalout: handleDragEnd

	};

	function handleDragEnd(e) {
	  if (this._dragging) {
	    preventDefault(e);
	    var localCursorPoint = this.group.transformCoordToLocal(e.offsetX, e.offsetY);
	    var eventParams = updateCoverByMouse(this, e, localCursorPoint, true);
	    this._dragging = false;
	    this._track = [];
	    this._creatingCover = null; // trigger event shoule be at final, after procedure will be nested.

	    eventParams && trigger(this, eventParams);
	  }
	}
	/**
	 * key: brushType
	 * @type {Object}
	 */


	var coverRenderers = {
	  lineX: getLineRenderer(0),
	  lineY: getLineRenderer(1),
	  rect: {
	    createCover: function (controller, brushOption) {
	      return createBaseRectCover(curry(driftRect, function (range) {
	        return range;
	      }, function (range) {
	        return range;
	      }), controller, brushOption, ['w', 'e', 'n', 's', 'se', 'sw', 'ne', 'nw']);
	    },
	    getCreatingRange: function (localTrack) {
	      var ends = getTrackEnds(localTrack);
	      return formatRectRange(ends[1][0], ends[1][1], ends[0][0], ends[0][1]);
	    },
	    updateCoverShape: function (controller, cover, localRange, brushOption) {
	      updateBaseRect(controller, cover, localRange, brushOption);
	    },
	    updateCommon: updateCommon,
	    contain: mainShapeContain
	  },
	  polygon: {
	    createCover: function (controller, brushOption) {
	      var cover = new graphic.Group(); // Do not use graphic.Polygon because graphic.Polyline do not close the
	      // border of the shape when drawing, which is a better experience for user.

	      cover.add(new graphic.Polyline({
	        name: 'main',
	        style: makeStyle(brushOption),
	        silent: true
	      }));
	      return cover;
	    },
	    getCreatingRange: function (localTrack) {
	      return localTrack;
	    },
	    endCreating: function (controller, cover) {
	      cover.remove(cover.childAt(0)); // Use graphic.Polygon close the shape.

	      cover.add(new graphic.Polygon({
	        name: 'main',
	        draggable: true,
	        drift: curry(driftPolygon, controller, cover),
	        ondragend: curry(trigger, controller, {
	          isEnd: true
	        })
	      }));
	    },
	    updateCoverShape: function (controller, cover, localRange, brushOption) {
	      cover.childAt(0).setShape({
	        points: clipByPanel(controller, cover, localRange)
	      });
	    },
	    updateCommon: updateCommon,
	    contain: mainShapeContain
	  }
	};

	function getLineRenderer(xyIndex) {
	  return {
	    createCover: function (controller, brushOption) {
	      return createBaseRectCover(curry(driftRect, function (range) {
	        var rectRange = [range, [0, 100]];
	        xyIndex && rectRange.reverse();
	        return rectRange;
	      }, function (rectRange) {
	        return rectRange[xyIndex];
	      }), controller, brushOption, [['w', 'e'], ['n', 's']][xyIndex]);
	    },
	    getCreatingRange: function (localTrack) {
	      var ends = getTrackEnds(localTrack);
	      var min = mathMin(ends[0][xyIndex], ends[1][xyIndex]);
	      var max = mathMax(ends[0][xyIndex], ends[1][xyIndex]);
	      return [min, max];
	    },
	    updateCoverShape: function (controller, cover, localRange, brushOption) {
	      var otherExtent; // If brushWidth not specified, fit the panel.

	      var panel = getPanelByCover(controller, cover);

	      if (panel !== true && panel.getLinearBrushOtherExtent) {
	        otherExtent = panel.getLinearBrushOtherExtent(xyIndex, controller._transform);
	      } else {
	        var zr = controller._zr;
	        otherExtent = [0, [zr.getWidth(), zr.getHeight()][1 - xyIndex]];
	      }

	      var rectRange = [localRange, otherExtent];
	      xyIndex && rectRange.reverse();
	      updateBaseRect(controller, cover, rectRange, brushOption);
	    },
	    updateCommon: updateCommon,
	    contain: mainShapeContain
	  };
	}

	var _default = BrushController;
	module.exports = _default;

/***/ }),
/* 413 */
/***/ (function(module, exports, __webpack_require__) {

	var _config = __webpack_require__(177);

	var __DEV__ = _config.__DEV__;

	var zrUtil = __webpack_require__(181);

	var graphic = __webpack_require__(226);

	var modelUtil = __webpack_require__(219);

	var brushHelper = __webpack_require__(414);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var each = zrUtil.each;
	var indexOf = zrUtil.indexOf;
	var curry = zrUtil.curry;
	var COORD_CONVERTS = ['dataToPoint', 'pointToData']; // FIXME
	// how to genarialize to more coordinate systems.

	var INCLUDE_FINDER_MAIN_TYPES = ['grid', 'xAxis', 'yAxis', 'geo', 'graph', 'polar', 'radiusAxis', 'angleAxis', 'bmap'];
	/**
	 * [option in constructor]:
	 * {
	 *     Index/Id/Name of geo, xAxis, yAxis, grid: See util/model#parseFinder.
	 * }
	 *
	 *
	 * [targetInfo]:
	 *
	 * There can be multiple axes in a single targetInfo. Consider the case
	 * of `grid` component, a targetInfo represents a grid which contains one or more
	 * cartesian and one or more axes. And consider the case of parallel system,
	 * which has multiple axes in a coordinate system.
	 * Can be {
	 *     panelId: ...,
	 *     coordSys: <a representitive cartesian in grid (first cartesian by default)>,
	 *     coordSyses: all cartesians.
	 *     gridModel: <grid component>
	 *     xAxes: correspond to coordSyses on index
	 *     yAxes: correspond to coordSyses on index
	 * }
	 * or {
	 *     panelId: ...,
	 *     coordSys: <geo coord sys>
	 *     coordSyses: [<geo coord sys>]
	 *     geoModel: <geo component>
	 * }
	 *
	 *
	 * [panelOpt]:
	 *
	 * Make from targetInfo. Input to BrushController.
	 * {
	 *     panelId: ...,
	 *     rect: ...
	 * }
	 *
	 *
	 * [area]:
	 *
	 * Generated by BrushController or user input.
	 * {
	 *     panelId: Used to locate coordInfo directly. If user inpput, no panelId.
	 *     brushType: determine how to convert to/from coord('rect' or 'polygon' or 'lineX/Y').
	 *     Index/Id/Name of geo, xAxis, yAxis, grid: See util/model#parseFinder.
	 *     range: pixel range.
	 *     coordRange: representitive coord range (the first one of coordRanges).
	 *     coordRanges: <Array> coord ranges, used in multiple cartesian in one grid.
	 * }
	 */

	/**
	 * @param {Object} option contains Index/Id/Name of xAxis/yAxis/geo/grid
	 *        Each can be {number|Array.<number>}. like: {xAxisIndex: [3, 4]}
	 * @param {module:echarts/model/Global} ecModel
	 * @param {Object} [opt]
	 * @param {Array.<string>} [opt.include] include coordinate system types.
	 */

	function BrushTargetManager(option, ecModel, opt) {
	  /**
	   * @private
	   * @type {Array.<Object>}
	   */
	  var targetInfoList = this._targetInfoList = [];
	  var info = {};
	  var foundCpts = parseFinder(ecModel, option);
	  each(targetInfoBuilders, function (builder, type) {
	    if (!opt || !opt.include || indexOf(opt.include, type) >= 0) {
	      builder(foundCpts, targetInfoList, info);
	    }
	  });
	}

	var proto = BrushTargetManager.prototype;

	proto.setOutputRanges = function (areas, ecModel) {
	  this.matchOutputRanges(areas, ecModel, function (area, coordRange, coordSys) {
	    (area.coordRanges || (area.coordRanges = [])).push(coordRange); // area.coordRange is the first of area.coordRanges

	    if (!area.coordRange) {
	      area.coordRange = coordRange; // In 'category' axis, coord to pixel is not reversible, so we can not
	      // rebuild range by coordRange accrately, which may bring trouble when
	      // brushing only one item. So we use __rangeOffset to rebuilding range
	      // by coordRange. And this it only used in brush component so it is no
	      // need to be adapted to coordRanges.

	      var result = coordConvert[area.brushType](0, coordSys, coordRange);
	      area.__rangeOffset = {
	        offset: diffProcessor[area.brushType](result.values, area.range, [1, 1]),
	        xyMinMax: result.xyMinMax
	      };
	    }
	  });
	};

	proto.matchOutputRanges = function (areas, ecModel, cb) {
	  each(areas, function (area) {
	    var targetInfo = this.findTargetInfo(area, ecModel);

	    if (targetInfo && targetInfo !== true) {
	      zrUtil.each(targetInfo.coordSyses, function (coordSys) {
	        var result = coordConvert[area.brushType](1, coordSys, area.range);
	        cb(area, result.values, coordSys, ecModel);
	      });
	    }
	  }, this);
	};

	proto.setInputRanges = function (areas, ecModel) {
	  each(areas, function (area) {
	    var targetInfo = this.findTargetInfo(area, ecModel);
	    area.range = area.range || []; // convert coordRange to global range and set panelId.

	    if (targetInfo && targetInfo !== true) {
	      area.panelId = targetInfo.panelId; // (1) area.range shoule always be calculate from coordRange but does
	      // not keep its original value, for the sake of the dataZoom scenario,
	      // where area.coordRange remains unchanged but area.range may be changed.
	      // (2) Only support converting one coordRange to pixel range in brush
	      // component. So do not consider `coordRanges`.
	      // (3) About __rangeOffset, see comment above.

	      var result = coordConvert[area.brushType](0, targetInfo.coordSys, area.coordRange);
	      var rangeOffset = area.__rangeOffset;
	      area.range = rangeOffset ? diffProcessor[area.brushType](result.values, rangeOffset.offset, getScales(result.xyMinMax, rangeOffset.xyMinMax)) : result.values;
	    }
	  }, this);
	};

	proto.makePanelOpts = function (api, getDefaultBrushType) {
	  return zrUtil.map(this._targetInfoList, function (targetInfo) {
	    var rect = targetInfo.getPanelRect();
	    return {
	      panelId: targetInfo.panelId,
	      defaultBrushType: getDefaultBrushType && getDefaultBrushType(targetInfo),
	      clipPath: brushHelper.makeRectPanelClipPath(rect),
	      isTargetByCursor: brushHelper.makeRectIsTargetByCursor(rect, api, targetInfo.coordSysModel),
	      getLinearBrushOtherExtent: brushHelper.makeLinearBrushOtherExtent(rect)
	    };
	  });
	};

	proto.controlSeries = function (area, seriesModel, ecModel) {
	  // Check whether area is bound in coord, and series do not belong to that coord.
	  // If do not do this check, some brush (like lineX) will controll all axes.
	  var targetInfo = this.findTargetInfo(area, ecModel);
	  return targetInfo === true || targetInfo && indexOf(targetInfo.coordSyses, seriesModel.coordinateSystem) >= 0;
	};
	/**
	 * If return Object, a coord found.
	 * If reutrn true, global found.
	 * Otherwise nothing found.
	 *
	 * @param {Object} area
	 * @param {Array} targetInfoList
	 * @return {Object|boolean}
	 */


	proto.findTargetInfo = function (area, ecModel) {
	  var targetInfoList = this._targetInfoList;
	  var foundCpts = parseFinder(ecModel, area);

	  for (var i = 0; i < targetInfoList.length; i++) {
	    var targetInfo = targetInfoList[i];
	    var areaPanelId = area.panelId;

	    if (areaPanelId) {
	      if (targetInfo.panelId === areaPanelId) {
	        return targetInfo;
	      }
	    } else {
	      for (var i = 0; i < targetInfoMatchers.length; i++) {
	        if (targetInfoMatchers[i](foundCpts, targetInfo)) {
	          return targetInfo;
	        }
	      }
	    }
	  }

	  return true;
	};

	function formatMinMax(minMax) {
	  minMax[0] > minMax[1] && minMax.reverse();
	  return minMax;
	}

	function parseFinder(ecModel, option) {
	  return modelUtil.parseFinder(ecModel, option, {
	    includeMainTypes: INCLUDE_FINDER_MAIN_TYPES
	  });
	}

	var targetInfoBuilders = {
	  grid: function (foundCpts, targetInfoList) {
	    var xAxisModels = foundCpts.xAxisModels;
	    var yAxisModels = foundCpts.yAxisModels;
	    var gridModels = foundCpts.gridModels; // Remove duplicated.

	    var gridModelMap = zrUtil.createHashMap();
	    var xAxesHas = {};
	    var yAxesHas = {};

	    if (!xAxisModels && !yAxisModels && !gridModels) {
	      return;
	    }

	    each(xAxisModels, function (axisModel) {
	      var gridModel = axisModel.axis.grid.model;
	      gridModelMap.set(gridModel.id, gridModel);
	      xAxesHas[gridModel.id] = true;
	    });
	    each(yAxisModels, function (axisModel) {
	      var gridModel = axisModel.axis.grid.model;
	      gridModelMap.set(gridModel.id, gridModel);
	      yAxesHas[gridModel.id] = true;
	    });
	    each(gridModels, function (gridModel) {
	      gridModelMap.set(gridModel.id, gridModel);
	      xAxesHas[gridModel.id] = true;
	      yAxesHas[gridModel.id] = true;
	    });
	    gridModelMap.each(function (gridModel) {
	      var grid = gridModel.coordinateSystem;
	      var cartesians = [];
	      each(grid.getCartesians(), function (cartesian, index) {
	        if (indexOf(xAxisModels, cartesian.getAxis('x').model) >= 0 || indexOf(yAxisModels, cartesian.getAxis('y').model) >= 0) {
	          cartesians.push(cartesian);
	        }
	      });
	      targetInfoList.push({
	        panelId: 'grid--' + gridModel.id,
	        gridModel: gridModel,
	        coordSysModel: gridModel,
	        // Use the first one as the representitive coordSys.
	        coordSys: cartesians[0],
	        coordSyses: cartesians,
	        getPanelRect: panelRectBuilder.grid,
	        xAxisDeclared: xAxesHas[gridModel.id],
	        yAxisDeclared: yAxesHas[gridModel.id]
	      });
	    });
	  },
	  geo: function (foundCpts, targetInfoList) {
	    each(foundCpts.geoModels, function (geoModel) {
	      var coordSys = geoModel.coordinateSystem;
	      targetInfoList.push({
	        panelId: 'geo--' + geoModel.id,
	        geoModel: geoModel,
	        coordSysModel: geoModel,
	        coordSys: coordSys,
	        coordSyses: [coordSys],
	        getPanelRect: panelRectBuilder.geo
	      });
	    });
	  }
	};
	var targetInfoMatchers = [// grid
	function (foundCpts, targetInfo) {
	  var xAxisModel = foundCpts.xAxisModel;
	  var yAxisModel = foundCpts.yAxisModel;
	  var gridModel = foundCpts.gridModel;
	  !gridModel && xAxisModel && (gridModel = xAxisModel.axis.grid.model);
	  !gridModel && yAxisModel && (gridModel = yAxisModel.axis.grid.model);
	  return gridModel && gridModel === targetInfo.gridModel;
	}, // geo
	function (foundCpts, targetInfo) {
	  var geoModel = foundCpts.geoModel;
	  return geoModel && geoModel === targetInfo.geoModel;
	}];
	var panelRectBuilder = {
	  grid: function () {
	    // grid is not Transformable.
	    return this.coordSys.grid.getRect().clone();
	  },
	  geo: function () {
	    var coordSys = this.coordSys;
	    var rect = coordSys.getBoundingRect().clone(); // geo roam and zoom transform

	    rect.applyTransform(graphic.getTransform(coordSys));
	    return rect;
	  }
	};
	var coordConvert = {
	  lineX: curry(axisConvert, 0),
	  lineY: curry(axisConvert, 1),
	  rect: function (to, coordSys, rangeOrCoordRange) {
	    var xminymin = coordSys[COORD_CONVERTS[to]]([rangeOrCoordRange[0][0], rangeOrCoordRange[1][0]]);
	    var xmaxymax = coordSys[COORD_CONVERTS[to]]([rangeOrCoordRange[0][1], rangeOrCoordRange[1][1]]);
	    var values = [formatMinMax([xminymin[0], xmaxymax[0]]), formatMinMax([xminymin[1], xmaxymax[1]])];
	    return {
	      values: values,
	      xyMinMax: values
	    };
	  },
	  polygon: function (to, coordSys, rangeOrCoordRange) {
	    var xyMinMax = [[Infinity, -Infinity], [Infinity, -Infinity]];
	    var values = zrUtil.map(rangeOrCoordRange, function (item) {
	      var p = coordSys[COORD_CONVERTS[to]](item);
	      xyMinMax[0][0] = Math.min(xyMinMax[0][0], p[0]);
	      xyMinMax[1][0] = Math.min(xyMinMax[1][0], p[1]);
	      xyMinMax[0][1] = Math.max(xyMinMax[0][1], p[0]);
	      xyMinMax[1][1] = Math.max(xyMinMax[1][1], p[1]);
	      return p;
	    });
	    return {
	      values: values,
	      xyMinMax: xyMinMax
	    };
	  }
	};

	function axisConvert(axisNameIndex, to, coordSys, rangeOrCoordRange) {
	  var axis = coordSys.getAxis(['x', 'y'][axisNameIndex]);
	  var values = formatMinMax(zrUtil.map([0, 1], function (i) {
	    return to ? axis.coordToData(axis.toLocalCoord(rangeOrCoordRange[i])) : axis.toGlobalCoord(axis.dataToCoord(rangeOrCoordRange[i]));
	  }));
	  var xyMinMax = [];
	  xyMinMax[axisNameIndex] = values;
	  xyMinMax[1 - axisNameIndex] = [NaN, NaN];
	  return {
	    values: values,
	    xyMinMax: xyMinMax
	  };
	}

	var diffProcessor = {
	  lineX: curry(axisDiffProcessor, 0),
	  lineY: curry(axisDiffProcessor, 1),
	  rect: function (values, refer, scales) {
	    return [[values[0][0] - scales[0] * refer[0][0], values[0][1] - scales[0] * refer[0][1]], [values[1][0] - scales[1] * refer[1][0], values[1][1] - scales[1] * refer[1][1]]];
	  },
	  polygon: function (values, refer, scales) {
	    return zrUtil.map(values, function (item, idx) {
	      return [item[0] - scales[0] * refer[idx][0], item[1] - scales[1] * refer[idx][1]];
	    });
	  }
	};

	function axisDiffProcessor(axisNameIndex, values, refer, scales) {
	  return [values[0] - scales[axisNameIndex] * refer[0], values[1] - scales[axisNameIndex] * refer[1]];
	} // We have to process scale caused by dataZoom manually,
	// although it might be not accurate.


	function getScales(xyMinMaxCurr, xyMinMaxOrigin) {
	  var sizeCurr = getSize(xyMinMaxCurr);
	  var sizeOrigin = getSize(xyMinMaxOrigin);
	  var scales = [sizeCurr[0] / sizeOrigin[0], sizeCurr[1] / sizeOrigin[1]];
	  isNaN(scales[0]) && (scales[0] = 1);
	  isNaN(scales[1]) && (scales[1] = 1);
	  return scales;
	}

	function getSize(xyMinMax) {
	  return xyMinMax ? [xyMinMax[0][1] - xyMinMax[0][0], xyMinMax[1][1] - xyMinMax[1][0]] : [NaN, NaN];
	}

	var _default = BrushTargetManager;
	module.exports = _default;

/***/ }),
/* 414 */
/***/ (function(module, exports, __webpack_require__) {

	var BoundingRect = __webpack_require__(199);

	var _cursorHelper = __webpack_require__(415);

	var onIrrelevantElement = _cursorHelper.onIrrelevantElement;

	var graphicUtil = __webpack_require__(226);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	function makeRectPanelClipPath(rect) {
	  rect = normalizeRect(rect);
	  return function (localPoints, transform) {
	    return graphicUtil.clipPointsByRect(localPoints, rect);
	  };
	}

	function makeLinearBrushOtherExtent(rect, specifiedXYIndex) {
	  rect = normalizeRect(rect);
	  return function (xyIndex) {
	    var idx = specifiedXYIndex != null ? specifiedXYIndex : xyIndex;
	    var brushWidth = idx ? rect.width : rect.height;
	    var base = idx ? rect.x : rect.y;
	    return [base, base + (brushWidth || 0)];
	  };
	}

	function makeRectIsTargetByCursor(rect, api, targetModel) {
	  rect = normalizeRect(rect);
	  return function (e, localCursorPoint, transform) {
	    return rect.contain(localCursorPoint[0], localCursorPoint[1]) && !onIrrelevantElement(e, api, targetModel);
	  };
	} // Consider width/height is negative.


	function normalizeRect(rect) {
	  return BoundingRect.create(rect);
	}

	exports.makeRectPanelClipPath = makeRectPanelClipPath;
	exports.makeLinearBrushOtherExtent = makeLinearBrushOtherExtent;
	exports.makeRectIsTargetByCursor = makeRectIsTargetByCursor;

/***/ }),
/* 415 */
/***/ (function(module, exports) {

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var IRRELEVANT_EXCLUDES = {
	  'axisPointer': 1,
	  'tooltip': 1,
	  'brush': 1
	};
	/**
	 * Avoid that: mouse click on a elements that is over geo or graph,
	 * but roam is triggered.
	 */

	function onIrrelevantElement(e, api, targetCoordSysModel) {
	  var model = api.getComponentByElement(e.topTarget); // If model is axisModel, it works only if it is injected with coordinateSystem.

	  var coordSys = model && model.coordinateSystem;
	  return model && model !== targetCoordSysModel && !IRRELEVANT_EXCLUDES[model.mainType] && coordSys && coordSys.model !== targetCoordSysModel;
	}

	exports.onIrrelevantElement = onIrrelevantElement;

/***/ }),
/* 416 */
/***/ (function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(181);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var each = zrUtil.each;
	var ATTR = '\0_ec_hist_store';
	/**
	 * @param {module:echarts/model/Global} ecModel
	 * @param {Object} newSnapshot {dataZoomId, batch: [payloadInfo, ...]}
	 */

	function push(ecModel, newSnapshot) {
	  var store = giveStore(ecModel); // If previous dataZoom can not be found,
	  // complete an range with current range.

	  each(newSnapshot, function (batchItem, dataZoomId) {
	    var i = store.length - 1;

	    for (; i >= 0; i--) {
	      var snapshot = store[i];

	      if (snapshot[dataZoomId]) {
	        break;
	      }
	    }

	    if (i < 0) {
	      // No origin range set, create one by current range.
	      var dataZoomModel = ecModel.queryComponents({
	        mainType: 'dataZoom',
	        subType: 'select',
	        id: dataZoomId
	      })[0];

	      if (dataZoomModel) {
	        var percentRange = dataZoomModel.getPercentRange();
	        store[0][dataZoomId] = {
	          dataZoomId: dataZoomId,
	          start: percentRange[0],
	          end: percentRange[1]
	        };
	      }
	    }
	  });
	  store.push(newSnapshot);
	}
	/**
	 * @param {module:echarts/model/Global} ecModel
	 * @return {Object} snapshot
	 */


	function pop(ecModel) {
	  var store = giveStore(ecModel);
	  var head = store[store.length - 1];
	  store.length > 1 && store.pop(); // Find top for all dataZoom.

	  var snapshot = {};
	  each(head, function (batchItem, dataZoomId) {
	    for (var i = store.length - 1; i >= 0; i--) {
	      var batchItem = store[i][dataZoomId];

	      if (batchItem) {
	        snapshot[dataZoomId] = batchItem;
	        break;
	      }
	    }
	  });
	  return snapshot;
	}
	/**
	 * @param {module:echarts/model/Global} ecModel
	 */


	function clear(ecModel) {
	  ecModel[ATTR] = null;
	}
	/**
	 * @param {module:echarts/model/Global} ecModel
	 * @return {number} records. always >= 1.
	 */


	function count(ecModel) {
	  return giveStore(ecModel).length;
	}
	/**
	 * [{key: dataZoomId, value: {dataZoomId, range}}, ...]
	 * History length of each dataZoom may be different.
	 * this._history[0] is used to store origin range.
	 * @type {Array.<Object>}
	 */


	function giveStore(ecModel) {
	  var store = ecModel[ATTR];

	  if (!store) {
	    store = ecModel[ATTR] = [{}];
	  }

	  return store;
	}

	exports.push = push;
	exports.pop = pop;
	exports.clear = clear;
	exports.count = count;

/***/ }),
/* 417 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(390);

	__webpack_require__(391);

	__webpack_require__(394);

	__webpack_require__(418);

	__webpack_require__(419);

	__webpack_require__(402);

	__webpack_require__(403);

/***/ }),
/* 418 */
/***/ (function(module, exports, __webpack_require__) {

	var DataZoomModel = __webpack_require__(391);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var _default = DataZoomModel.extend({
	  type: 'dataZoom.select'
	});

	module.exports = _default;

/***/ }),
/* 419 */
/***/ (function(module, exports, __webpack_require__) {

	var DataZoomView = __webpack_require__(394);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var _default = DataZoomView.extend({
	  type: 'dataZoom.select'
	});

	module.exports = _default;

/***/ }),
/* 420 */
/***/ (function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(176);

	var history = __webpack_require__(416);

	var lang = __webpack_require__(288);

	var featureManager = __webpack_require__(406);

	/*
	* Licensed to the Apache Software Foundation (ASF) under one
	* or more contributor license agreements.  See the NOTICE file
	* distributed with this work for additional information
	* regarding copyright ownership.  The ASF licenses this file
	* to you under the Apache License, Version 2.0 (the
	* "License"); you may not use this file except in compliance
	* with the License.  You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing,
	* software distributed under the License is distributed on an
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	* KIND, either express or implied.  See the License for the
	* specific language governing permissions and limitations
	* under the License.
	*/
	var restoreLang = lang.toolbox.restore;

	function Restore(model) {
	  this.model = model;
	}

	Restore.defaultOption = {
	  show: true,
	  icon: 'M3.8,33.4 M47,18.9h9.8V8.7 M56.3,20.1 C52.1,9,40.5,0.6,26.8,2.1C12.6,3.7,1.6,16.2,2.1,30.6 M13,41.1H3.1v10.2 M3.7,39.9c4.2,11.1,15.8,19.5,29.5,18 c14.2-1.6,25.2-14.1,24.7-28.5',
	  title: restoreLang.title
	};
	var proto = Restore.prototype;

	proto.onclick = function (ecModel, api, type) {
	  history.clear(ecModel);
	  api.dispatchAction({
	    type: 'restore',
	    from: this.uid
	  });
	};

	featureManager.register('restore', Restore);
	echarts.registerAction({
	  type: 'restore',
	  event: 'restore',
	  update: 'prepareAndUpdate'
	}, function (payload, ecModel) {
	  ecModel.resetOption('recreate');
	});
	var _default = Restore;
	module.exports = _default;

/***/ }),
/* 421 */
/***/ (function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	// 登录判断与处理
	function loginCheck(loginData) {
	  var status = [100, 101, 102, 303];
	  if (!Array.indexOf) {
	    Array.prototype.indexOf = function (obj) {
	      for (var i = 0; i < this.length; i++) {
	        if (this[i] == obj) {
	          return i;
	        }
	      }
	      return -1;
	    };
	  }
	  if (status.indexOf(loginData.meta.result) === -1) {
	    alert(loginData.meta.msg);
	  }
	  if (loginData.meta.result == 303) {
	    confirm(loginData.meta.msg);
	    window.location.href = "https://ids.cqupt.edu.cn/authserver/login?service=" + courseCenter.host + "classList";
	  }
	}

	// 封装ajax(BluMUI.result.Title.props.ajaxing)
	var post_ajax = function post_ajax(options) {
	  options = options || {};
	  // options.dataType = "json";

	  //创建 - 非IE6 - 第一步
	  if (window.XMLHttpRequest) {
	    var xhr = new XMLHttpRequest();
	  } else {
	    //IE6及其以下版本浏览器
	    var xhr = new ActiveXObject('Microsoft.XMLHTTP');
	  }

	  //数据处理
	  var arr = [];
	  for (var name in options.data) {
	    arr.push(encodeURIComponent(name) + "=" + encodeURIComponent(options.data[name]));
	  }
	  var params = arr.join("&");

	  //连接 和 发送 - 第二步
	  xhr.open("POST", options.url, true);
	  //设置表单提交时的内容类型(注意头信息的UTF-8，不然后台会乱码)
	  xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded;charset=UTF-8");
	  xhr.send(params);

	  //接收 - 第三步
	  xhr.onreadystatechange = function () {
	    if (xhr.readyState == 4) {
	      var status = xhr.status;
	      if (status >= 200 && status < 300) {
	        loginCheck(JSON.parse(xhr.responseText));
	        options.success && options.success(xhr.responseText, xhr.responseXML);
	      } else {
	        options.fail && options.fail(status);
	      }
	    }
	  };
	};

	exports["default"] = post_ajax;
	module.exports = exports['default'];

/***/ }),
/* 422 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Fanye = function (_React$Component) {
	  _inherits(Fanye, _React$Component);

	  function Fanye(props) {
	    _classCallCheck(this, Fanye);

	    return _possibleConstructorReturn(this, (Fanye.__proto__ || Object.getPrototypeOf(Fanye)).call(this, props));
	  }

	  _createClass(Fanye, [{
	    key: "create_popup_fanye",
	    value: function create_popup_fanye() {
	      var _this2 = this;

	      var nums = [];
	      var start = 1;
	      var end = this.props.options.pages || 1;
	      var now = this.props.options.page || 1;
	      var page_on = { color: "#007A51" };

	      var change_page = function change_page(p) {
	        if (p === now) {
	          nums.push(_react2["default"].createElement(
	            "li",
	            { key: p, style: page_on },
	            p
	          ));
	        } else {
	          nums.push(_react2["default"].createElement(
	            "li",
	            { key: p, onClick: _this2.fanye.bind(_this2, p) },
	            p
	          ));
	        }
	      };

	      if (end < 1) {
	        nums.push(_react2["default"].createElement(
	          "li",
	          { key: "only", onClick: this.fanye.bind(this, 1) },
	          "1"
	        ));
	      } else if (end <= 5) {
	        for (var i = 1; i <= end; i++) {
	          change_page(i);
	        }
	      } else {
	        if (now < 3) {
	          for (var _i = 1; _i <= 5; _i++) {
	            change_page(_i);
	          }
	        } else if (now > end - 3) {
	          for (var _i2 = end - 5; _i2 <= end; _i2++) {
	            change_page(_i2);
	          }
	        } else {
	          for (var _i3 = now - 2; _i3 <= now + 2; _i3++) {
	            change_page(_i3);
	          }
	        }
	      }

	      return _react2["default"].createElement(
	        "div",
	        { className: "fanye" },
	        _react2["default"].createElement(
	          "span",
	          { id: "rows" },
	          "\u5171",
	          this.props.options.rows >= 0 ? this.props.options.rows : 0,
	          "\u6761\u8BB0\u5F55"
	        ),
	        _react2["default"].createElement("input", { className: "fanye_options", type: "button", value: "\u9996\u9875", id: "fanye_start", onClick: this.fanye.bind(this, 1) }),
	        _react2["default"].createElement("input", { className: "fanye_options", type: "button", value: "\u4E0A\u4E00\u9875", id: "fanye_pre", onClick: this.fanye.bind(this, now === 1 ? 0 : now - 1) }),
	        _react2["default"].createElement(
	          "ul",
	          { id: "fanye_nums" },
	          nums
	        ),
	        _react2["default"].createElement("input", { type: "text", id: "tp", ref: "tp", placeholder: this.props.options.page + "/" + this.props.options.pages }),
	        _react2["default"].createElement("input", { className: "fanye_options", type: "button", value: "\u4E0B\u4E00\u9875", id: "fanye_next", onClick: this.fanye.bind(this, now === end ? 0 : now + 1) }),
	        _react2["default"].createElement("input", { className: "fanye_options", type: "button", value: "\u5C3E\u9875", id: "fanye_end", onClick: this.fanye.bind(this, end) })
	      );
	    }

	    //翻页函数

	  }, {
	    key: "fanye",
	    value: function fanye(p) {
	      this.refs.tp.value = null;
	      if (p == 0) {
	        return;
	      }
	      this.props.callback(p);
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      return this.create_popup_fanye();
	    }
	  }, {
	    key: "componentDidMount",
	    value: function componentDidMount() {
	      var _this3 = this;

	      // 手动跳转翻页
	      this.refs.tp.onkeydown = function (eve) {
	        if (eve.keyCode === 13) {
	          if (!isNaN(+eve.target.value)) {
	            _this3.fanye(+eve.target.value);
	          } else {
	            eve.target.value = null;
	            eve.target.blur();
	          }
	        }
	      };
	    }
	  }]);

	  return Fanye;
	}(_react2["default"].Component);

	exports["default"] = Fanye;
	module.exports = exports['default'];

/***/ })
/******/ ]);